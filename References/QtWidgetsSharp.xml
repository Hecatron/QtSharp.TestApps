<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QtWidgetsSharp</name>
    </assembly>
    <members>
        <member name="T:QtWidgets.QSizePolicy">
            <summary>
            <para>The QSizePolicy class is a layout attribute describing horizontal
            and vertical resizing policy.</para>
            </summary>
            <remarks>
            <para>The size policy of a widget is an expression of its willingness
            to be resized in various ways, and affects how the widget is treated by the
            layout engine. Each widget returns a QSizePolicy that describes the
            horizontal and vertical resizing policy it prefers when being laid out. You
            can change this for a specific widget by changing its QWidget::sizePolicy
            property.</para>
            <para>QSizePolicy contains two independent QSizePolicy::Policy values
            and two stretch factors; one describes the widgets's horizontal size
            policy, and the other describes its vertical size policy. It also contains
            a flag to indicate whether the height and width of its preferred size are
            related.</para>
            <para>The horizontal and vertical policies can be set in the
            constructor, and altered using the setHorizontalPolicy() and
            setVerticalPolicy() functions. The stretch factors can be set using the
            setHorizontalStretch() and setVerticalStretch() functions. The flag
            indicating whether the widget's sizeHint() is width-dependent (such as a
            menu bar or a word-wrapping label) can be set using the setHeightForWidth()
            function.</para>
            <para>The current size policies and stretch factors be retrieved using
            the horizontalPolicy(), verticalPolicy(), horizontalStretch() and
            verticalStretch() functions. Alternatively, use the transpose() function to
            swap the horizontal and vertical policies and stretches. The
            hasHeightForWidth() function returns the current status of the flag
            indicating the size hint dependencies.</para>
            <para>Use the expandingDirections() function to determine whether the
            associated widget can make use of more space than its sizeHint() function
            indicates, as well as find out in which directions it can expand.</para>
            <para>Finally, the QSizePolicy class provides operators comparing this
            size policy to a given policy, as well as a QVariant operator storing this
            QSizePolicy as a QVariant object.</para>
            <para></para>
            <para>See also QSize, QWidget::sizeHint(), QWidget::sizePolicy, and
            QLayoutItem::sizeHint().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QSizePolicy.#ctor">
            <summary>
            <para>Constructs a QSizePolicy object with Fixed as its horizontal and
            vertical policies.</para>
            <para>The policies can be altered using the setHorizontalPolicy() and
            setVerticalPolicy() functions. Use the setHeightForWidth() function if the
            preferred height of the widget is dependent on the width of the widget (for
            example, a QLabel with line wrapping).</para>
            <para>See also setHorizontalStretch() and setVerticalStretch().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSizePolicy.#ctor(QtWidgets.QSizePolicy.Policy,QtWidgets.QSizePolicy.Policy,QtWidgets.QSizePolicy.ControlType)">
            <summary>
            <para>Constructs a QSizePolicy object with the given horizontal and
            vertical policies, and the specified control type.</para>
            <para>Use setHeightForWidth() if the preferred height of the widget is
            dependent on the width of the widget (for example, a QLabel with line
            wrapping).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setHorizontalStretch(), setVerticalStretch(), and
            controlType().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSizePolicy.SetHeightForWidth(System.Boolean)">
            <summary>
            <para>Sets the flag determining whether the widget's preferred height
            depends on its width, to dependent.</para>
            <para>See also hasHeightForWidth() and setWidthForHeight().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSizePolicy.SetWidthForHeight(System.Boolean)">
            <summary>
            <para>Sets the flag determining whether the widget's width depends on
            its height, to dependent.</para>
            <para>This is only supported for QGraphicsLayout's subclasses. It is
            not possible to have a layout with both height-for-width and
            width-for-height constraints at the same time.</para>
            <para>See also hasWidthForHeight() and setHeightForWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSizePolicy.op_Equality(QtWidgets.QSizePolicy,QtWidgets.QSizePolicy)">
            <summary>
            <para>Returns true if this policy is equal to other; otherwise returns
            false.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSizePolicy.op_Inequality(QtWidgets.QSizePolicy,QtWidgets.QSizePolicy)">
            <summary>
            <para>Returns true if this policy is different from other; otherwise
            returns false.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSizePolicy.op_Implicit(QtWidgets.QSizePolicy)~QtCore.QVariant">
            <summary>
            <para>Returns a QVariant storing this QSizePolicy.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSizePolicy.Transpose">
            <summary>
            <para>Swaps the horizontal and vertical policies and stretches.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSizePolicy.HorizontalPolicy">
            <summary>
            <para>Returns the horizontal component of the size policy.</para>
            <para>See also setHorizontalPolicy(), verticalPolicy(), and
            horizontalStretch().</para>
            <para></para>
            <para>Sets the horizontal component to the given policy.</para>
            <para>See also horizontalPolicy(), setVerticalPolicy(), and
            setHorizontalStretch().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSizePolicy.VerticalPolicy">
            <summary>
            <para>Returns the vertical component of the size policy.</para>
            <para>See also setVerticalPolicy(), horizontalPolicy(), and
            verticalStretch().</para>
            <para></para>
            <para>Sets the vertical component to the given policy.</para>
            <para>See also verticalPolicy(), setHorizontalPolicy(), and
            setVerticalStretch().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSizePolicy.controlType">
            <summary>
            <para>Returns the control type associated with the widget for which
            this size policy applies.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setControlType().</para>
            <para></para>
            <para>Sets the control type associated with the widget for which this
            size policy applies to type.</para>
            <para>The control type specifies the type of the widget for which this
            size policy applies. It is used by some styles, notably QMacStyle, to
            insert proper spacing between widgets. For example, the Mac OS X Aqua
            guidelines specify that push buttons should be separated by 12 pixels,
            whereas vertically stacked radio buttons only require 6 pixels.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also controlType() and QStyle::layoutSpacing().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSizePolicy.HorizontalStretch">
            <summary>
            <para>Returns the horizontal stretch factor of the size policy.</para>
            <para>See also setHorizontalStretch(), verticalStretch(), and
            horizontalPolicy().</para>
            <para></para>
            <para>Sets the horizontal stretch factor of the size policy to the
            given stretchFactor. stretchFactor must be in the range [0,255].</para>
            <para>When two widgets are adjacent to each other in a horizontal
            layout, setting the horizontal stretch factor of the widget on the left to
            2 and the factor of widget on the right to 1 will ensure that the widget on
            the left will always be twice the size of the one on the right.</para>
            <para>See also horizontalStretch(), setVerticalStretch(), and
            setHorizontalPolicy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSizePolicy.VerticalStretch">
            <summary>
            <para>Returns the vertical stretch factor of the size policy.</para>
            <para>See also setVerticalStretch(), horizontalStretch(), and
            verticalPolicy().</para>
            <para></para>
            <para>Sets the vertical stretch factor of the size policy to the given
            stretchFactor. stretchFactor must be in the range [0,255].</para>
            <para>When two widgets are adjacent to each other in a vertical layout,
            setting the vertical stretch factor of the widget on the top to 2 and the
            factor of widget on the bottom to 1 will ensure that the widget on the top
            will always be twice the size of the one on the bottom.</para>
            <para>See also verticalStretch(), setHorizontalStretch(), and
            setVerticalPolicy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSizePolicy.RetainSizeWhenHidden">
            <summary>
            <para>Returns whether the layout should retain the widget's size when
            it is hidden. This is false by default.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also setRetainSizeWhenHidden().</para>
            <para></para>
            <para>Sets whether a layout should retain the widget's size when it is
            hidden. If retainSize is true, the layout will not be changed by hiding the
            widget.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also retainSizeWhenHidden().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSizePolicy.ExpandingDirections">
            <summary>
            <para>Returns whether a widget can make use of more space than the
            QWidget::sizeHint() function indicates.</para>
            <para>A value of Qt::Horizontal or Qt::Vertical means that the widget
            can grow horizontally or vertically (i.e., the horizontal or vertical
            policy is Expanding or MinimumExpanding), whereas Qt::Horizontal |
            Qt::Vertical means that it can grow in both dimensions.</para>
            <para>See also horizontalPolicy() and verticalPolicy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSizePolicy.HasHeightForWidth">
            <summary>
            <para>Returns true if the widget's preferred height depends on its
            width; otherwise returns false.</para>
            <para>See also setHeightForWidth().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSizePolicy.HasWidthForHeight">
            <summary>
            <para>Returns true if the widget's width depends on its height;
            otherwise returns false.</para>
            <para>See also setWidthForHeight().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QSizePolicy.PolicyFlag">
            <summary>
            <para>These flags are combined together to form the various Policy
            values:</para>
            <para>See also Policy.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.PolicyFlag.GrowFlag">
            <summary>The widget can grow beyond its size hint if necessary.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.PolicyFlag.ExpandFlag">
            <summary>The widget should get as much space as possible.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.PolicyFlag.ShrinkFlag">
            <summary>The widget can shrink below its size hint if necessary.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.PolicyFlag.IgnoreFlag">
            <summary>The widget's size hint is ignored. The widget will get as much space as possible.</summary>
        </member>
        <member name="T:QtWidgets.QSizePolicy.Policy">
            <summary>
            <para>This enum describes the various per-dimension sizing types used
            when constructing a QSizePolicy.</para>
            <para>See also PolicyFlag, setHorizontalPolicy(), and
            setVerticalPolicy().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.Policy.Fixed">
            <summary>The QWidget::sizeHint() is the only acceptable alternative, so the widget can never grow or shrink (e.g. the vertical direction of a push button).</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.Policy.Minimum">
            <summary>The sizeHint() is minimal, and sufficient. The widget can be expanded, but there is no advantage to it being larger (e.g. the horizontal direction of a push button). It cannot be smaller than the size provided by sizeHint().</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.Policy.Maximum">
            <summary>The sizeHint() is a maximum. The widget can be shrunk any amount without detriment if other widgets need the space (e.g. a separator line). It cannot be larger than the size provided by sizeHint().</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.Policy.Preferred">
            <summary>The sizeHint() is best, but the widget can be shrunk and still be useful. The widget can be expanded, but there is no advantage to it being larger than sizeHint() (the default QWidget policy).</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.Policy.MinimumExpanding">
            <summary>The sizeHint() is minimal, and sufficient. The widget can make use of extra space, so it should get as much space as possible (e.g. the horizontal direction of a horizontal slider).</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.Policy.Expanding">
            <summary>The sizeHint() is a sensible size, but the widget can be shrunk and still be useful. The widget can make use of extra space, so it should get as much space as possible (e.g. the horizontal direction of a horizontal slider).</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.Policy.Ignored">
            <summary>The sizeHint() is ignored. The widget will get as much space as possible.</summary>
        </member>
        <member name="T:QtWidgets.QSizePolicy.ControlType">
            <summary>
            <para>This enum specifies the different types of widgets in terms of
            layout interaction:</para>
            <para>This enum was introduced or modified in  Qt 4.3.</para>
            <para>The ControlTypes type is a typedef for QFlags&lt;ControlType&gt;.
            It stores an OR combination of ControlType values.</para>
            <para>See also setControlType() and controlType().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.ControlType.DefaultType">
            <summary>The default type, when none is specified.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.ControlType.ButtonBox">
            <summary>A QDialogButtonBox instance.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.ControlType.CheckBox">
            <summary>A QCheckBox instance.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.ControlType.ComboBox">
            <summary>A QComboBox instance.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.ControlType.Frame">
            <summary>A QFrame instance.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.ControlType.GroupBox">
            <summary>A QGroupBox instance.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.ControlType.Label">
            <summary>A QLabel instance.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.ControlType.Line">
            <summary>A QFrame instance with QFrame::HLine or QFrame::VLine.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.ControlType.LineEdit">
            <summary>A QLineEdit instance.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.ControlType.PushButton">
            <summary>A QPushButton instance.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.ControlType.RadioButton">
            <summary>A QRadioButton instance.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.ControlType.Slider">
            <summary>A QAbstractSlider instance.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.ControlType.SpinBox">
            <summary>A QAbstractSpinBox instance.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.ControlType.TabWidget">
            <summary>A QTabWidget instance.</summary>
        </member>
        <member name="F:QtWidgets.QSizePolicy.ControlType.ToolButton">
            <summary>A QToolButton instance.</summary>
        </member>
        <member name="T:QtWidgets.QWidget">
            <summary>
            <para>The QWidget class is the base class of all user interface
            objects.</para>
            </summary>
            <remarks>
            <para>The widget is the atom of the user interface: it receives mouse,
            keyboard and other events from the window system, and paints a
            representation of itself on the screen. Every widget is rectangular, and
            they are sorted in a Z-order. A widget is clipped by its parent and by the
            widgets in front of it.</para>
            <para>A widget that is not embedded in a parent widget is called a
            window. Usually, windows have a frame and a title bar, although it is also
            possible to create windows without such decoration using suitable window
            flags). In Qt, QMainWindow and the various subclasses of QDialog are the
            most common window types.</para>
            <para>Every widget's constructor accepts one or two standard
            arguments:</para>
            <para></para>
            <para>QWidget *parent = 0 is the parent of the new widget. If it is 0
            (the default), the new widget will be a window. If not, it will be a child
            of parent, and be constrained by parent's geometry (unless you specify
            Qt::Window as window flag).</para>
            <para>Qt::WindowFlags f = 0 (where available) sets the window flags;
            the default is suitable for almost all widgets, but to get, for example, a
            window without a window system frame, you must use special flags.</para>
            <para></para>
            <para>QWidget has many member functions, but some of them have little
            direct functionality; for example, QWidget has a font property, but never
            uses this itself. There are many subclasses which provide real
            functionality, such as QLabel, QPushButton, QListWidget, and
            QTabWidget.</para>
            <para></para>
            <para>Top-Level and Child Widgets</para>
            <para>A widget without a parent widget is always an independent window
            (top-level widget). For these widgets, setWindowTitle() and setWindowIcon()
            set the title bar and icon respectively.</para>
            <para>Non-window widgets are child widgets, displayed within their
            parent widgets. Most widgets in Qt are mainly useful as child widgets. For
            example, it is possible to display a button as a top-level window, but most
            people prefer to put their buttons inside other widgets, such as
            QDialog.</para>
            <para></para>
            <para>The diagram above shows a QGroupBox widget being used to hold
            various child widgets in a layout provided by QGridLayout. The QLabel child
            widgets have been outlined to indicate their full sizes.</para>
            <para>If you want to use a QWidget to hold child widgets you will
            usually want to add a layout to the parent QWidget. See Layout Management
            for more information.</para>
            <para></para>
            <para>Composite Widgets</para>
            <para>When a widget is used as a container to group a number of child
            widgets, it is known as a composite widget. These can be created by
            constructing a widget with the required visual properties - a QFrame, for
            example - and adding child widgets to it, usually managed by a layout. The
            above diagram shows such a composite widget that was created using Qt
            Designer.</para>
            <para>Composite widgets can also be created by subclassing a standard
            widget, such as QWidget or QFrame, and adding the necessary layout and
            child widgets in the constructor of the subclass. Many of the examples
            provided with Qt use this approach, and it is also covered in the Qt
            Tutorials.</para>
            <para></para>
            <para>Custom Widgets and Painting</para>
            <para>Since QWidget is a subclass of QPaintDevice, subclasses can be
            used to display custom content that is composed using a series of painting
            operations with an instance of the QPainter class. This approach contrasts
            with the canvas-style approach used by the Graphics View Framework where
            items are added to a scene by the application and are rendered by the
            framework itself.</para>
            <para>Each widget performs all painting operations from within its
            paintEvent() function. This is called whenever the widget needs to be
            redrawn, either as a result of some external change or when requested by
            the application.</para>
            <para>The Analog Clock example shows how a simple widget can handle
            paint events.</para>
            <para></para>
            <para>Size Hints and Size Policies</para>
            <para>When implementing a new widget, it is almost always useful to
            reimplement sizeHint() to provide a reasonable default size for the widget
            and to set the correct size policy with setSizePolicy().</para>
            <para>By default, composite widgets which do not provide a size hint
            will be sized according to the space requirements of their child
            widgets.</para>
            <para>The size policy lets you supply good default behavior for the
            layout management system, so that other widgets can contain and manage
            yours easily. The default size policy indicates that the size hint
            represents the preferred size of the widget, and this is often good enough
            for many widgets.</para>
            <para>Note: The size of top-level widgets are constrained to 2/3 of the
            desktop's height and width. You can resize() the widget manually if these
            bounds are inadequate.</para>
            <para></para>
            <para>Events</para>
            <para>Widgets respond to events that are typically caused by user
            actions. Qt delivers events to widgets by calling specific event handler
            functions with instances of QEvent subclasses containing information about
            each event.</para>
            <para>If your widget only contains child widgets, you probably do not
            need to implement any event handlers. If you want to detect a mouse click
            in a child widget call the child's underMouse() function inside the
            widget's mousePressEvent().</para>
            <para>The Scribble example implements a wider set of events to handle
            mouse movement, button presses, and window resizing.</para>
            <para>You will need to supply the behavior and content for your own
            widgets, but here is a brief overview of the events that are relevant to
            QWidget, starting with the most common ones:</para>
            <para></para>
            <para>paintEvent() is called whenever the widget needs to be repainted.
            Every widget displaying custom content must implement it. Painting using a
            QPainter can only take place in a paintEvent() or a function called by a
            paintEvent().</para>
            <para>resizeEvent() is called when the widget has been resized.</para>
            <para>mousePressEvent() is called when a mouse button is pressed while
            the mouse cursor is inside the widget, or when the widget has grabbed the
            mouse using grabMouse(). Pressing the mouse without releasing it is
            effectively the same as calling grabMouse().</para>
            <para>mouseReleaseEvent() is called when a mouse button is released. A
            widget receives mouse release events when it has received the corresponding
            mouse press event. This means that if the user presses the mouse inside
            your widget, then drags the mouse somewhere else before releasing the mouse
            button, your widget receives the release event. There is one exception: if
            a popup menu appears while the mouse button is held down, this popup
            immediately steals the mouse events.</para>
            <para>mouseDoubleClickEvent() is called when the user double-clicks in
            the widget. If the user double-clicks, the widget receives a mouse press
            event, a mouse release event, (a mouse click event,) a second mouse press,
            this event and finally a second mouse release event. (Some mouse move
            events may also be received if the mouse is not held steady during this
            operation.) It is not possible to distinguish a click from a double-click
            until the second click arrives. (This is one reason why most GUI books
            recommend that double-clicks be an extension of single-clicks, rather than
            trigger a different action.)</para>
            <para></para>
            <para>Widgets that accept keyboard input need to reimplement a few more
            event handlers:</para>
            <para></para>
            <para>keyPressEvent() is called whenever a key is pressed, and again
            when a key has been held down long enough for it to auto-repeat. The Tab
            and Shift+Tab keys are only passed to the widget if they are not used by
            the focus-change mechanisms. To force those keys to be processed by your
            widget, you must reimplement QWidget::event().</para>
            <para>focusInEvent() is called when the widget gains keyboard focus
            (assuming you have called setFocusPolicy()). Well-behaved widgets indicate
            that they own the keyboard focus in a clear but discreet way.</para>
            <para>focusOutEvent() is called when the widget loses keyboard
            focus.</para>
            <para></para>
            <para>You may be required to also reimplement some of the less common
            event handlers:</para>
            <para></para>
            <para>mouseMoveEvent() is called whenever the mouse moves while a mouse
            button is held down. This can be useful during drag and drop operations. If
            you call setMouseTracking(true), you get mouse move events even when no
            buttons are held down. (See also the Drag and Drop guide.)</para>
            <para>keyReleaseEvent() is called whenever a key is released and while
            it is held down (if the key is auto-repeating). In that case, the widget
            will receive a pair of key release and key press event for every repeat.
            The Tab and Shift+Tab keys are only passed to the widget if they are not
            used by the focus-change mechanisms. To force those keys to be processed by
            your widget, you must reimplement QWidget::event().</para>
            <para>wheelEvent() is called whenever the user turns the mouse wheel
            while the widget has the focus.</para>
            <para>enterEvent() is called when the mouse enters the widget's screen
            space. (This excludes screen space owned by any of the widget's
            children.)</para>
            <para>leaveEvent() is called when the mouse leaves the widget's screen
            space. If the mouse enters a child widget it will not cause a
            leaveEvent().</para>
            <para>moveEvent() is called when the widget has been moved relative to
            its parent.</para>
            <para>closeEvent() is called when the user closes the widget (or when
            close() is called).</para>
            <para></para>
            <para>There are also some rather obscure events described in the
            documentation for QEvent::Type. To handle these events, you need to
            reimplement event() directly.</para>
            <para>The default implementation of event() handles Tab and Shift+Tab
            (to move the keyboard focus), and passes on most of the other events to one
            of the more specialized handlers above.</para>
            <para>Events and the mechanism used to deliver them are covered in The
            Event System.</para>
            <para></para>
            <para>Groups of Functions and Properties</para>
            <para></para>
            <para> ContextFunctions and Properties</para>
            <para>Window functions	show(), hide(), raise(), lower(),
            close().</para>
            <para>Top-level windows	windowModified, windowTitle, windowIcon,
            windowIconText, isActiveWindow, activateWindow(), minimized,
            showMinimized(), maximized, showMaximized(), fullScreen, showFullScreen(),
            showNormal().</para>
            <para>Window contents	update(), repaint(), scroll().</para>
            <para>Geometry	pos, x(), y(), rect, size, width(), height(), move(),
            resize(), sizePolicy, sizeHint(), minimumSizeHint(), updateGeometry(),
            layout(), frameGeometry, geometry, childrenRect, childrenRegion,
            adjustSize(), mapFromGlobal(), mapToGlobal(), mapFromParent(),
            mapToParent(), maximumSize, minimumSize, sizeIncrement, baseSize,
            setFixedSize()</para>
            <para>Mode	visible, isVisibleTo(), enabled, isEnabledTo(), modal,
            isWindow(), mouseTracking, updatesEnabled, visibleRegion().</para>
            <para>Look and feel	style(), setStyle(), styleSheet, cursor, font,
            palette, backgroundRole(), setBackgroundRole(), fontInfo(),
            fontMetrics().</para>
            <para>Keyboard focus functions	focus, focusPolicy, setFocus(),
            clearFocus(), setTabOrder(), setFocusProxy(), focusNextChild(),
            focusPreviousChild().</para>
            <para>Mouse and keyboard grabbing	grabMouse(), releaseMouse(),
            grabKeyboard(), releaseKeyboard(), mouseGrabber(),
            keyboardGrabber().</para>
            <para>Event handlers	event(), mousePressEvent(), mouseReleaseEvent(),
            mouseDoubleClickEvent(), mouseMoveEvent(), keyPressEvent(),
            keyReleaseEvent(), focusInEvent(), focusOutEvent(), wheelEvent(),
            enterEvent(), leaveEvent(), paintEvent(), moveEvent(), resizeEvent(),
            closeEvent(), dragEnterEvent(), dragMoveEvent(), dragLeaveEvent(),
            dropEvent(), childEvent(), showEvent(), hideEvent(), customEvent().
            changeEvent(),</para>
            <para>System functions	parentWidget(), window(), setParent(), winId(),
            find(), metric().</para>
            <para>Interactive help	setToolTip(), setWhatsThis()</para>
            <para></para>
            <para></para>
            <para>Widget Style Sheets</para>
            <para>In addition to the standard widget styles for each platform,
            widgets can also be styled according to rules specified in a style sheet.
            This feature enables you to customize the appearance of specific widgets to
            provide visual cues to users about their purpose. For example, a button
            could be styled in a particular way to indicate that it performs a
            destructive action.</para>
            <para>The use of widget style sheets is described in more detail in the
            Qt Style Sheets document.</para>
            <para></para>
            <para>Transparency and Double Buffering</para>
            <para>Since Qt 4.0, QWidget automatically double-buffers its painting,
            so there is no need to write double-buffering code in paintEvent() to avoid
            flicker.</para>
            <para>Since Qt 4.1, the Qt::WA_ContentsPropagated widget attribute has
            been deprecated. Instead, the contents of parent widgets are propagated by
            default to each of their children as long as Qt::WA_PaintOnScreen is not
            set. Custom widgets can be written to take advantage of this feature by
            updating irregular regions (to create non-rectangular child widgets), or
            painting with colors that have less than full alpha component. The
            following diagram shows how attributes and properties of a custom widget
            can be fine-tuned to achieve different effects.</para>
            <para></para>
            <para>In the above diagram, a semi-transparent rectangular child widget
            with an area removed is constructed and added to a parent widget (a QLabel
            showing a pixmap). Then, different properties and widget attributes are set
            to achieve different effects:</para>
            <para></para>
            <para>The left widget has no additional properties or widget attributes
            set. This default state suits most custom widgets using transparency, are
            irregularly-shaped, or do not paint over their entire area with an opaque
            brush.</para>
            <para>The center widget has the autoFillBackground property set. This
            property is used with custom widgets that rely on the widget to supply a
            default background, and do not paint over their entire area with an opaque
            brush.</para>
            <para>The right widget has the Qt::WA_OpaquePaintEvent widget attribute
            set. This indicates that the widget will paint over its entire area with
            opaque colors. The widget's area will initially be uninitialized,
            represented in the diagram with a red diagonal grid pattern that shines
            through the overpainted area. The Qt::WA_OpaquePaintArea attribute is
            useful for widgets that need to paint their own specialized contents
            quickly and do not need a default filled background.</para>
            <para></para>
            <para>To rapidly update custom widgets with simple background colors,
            such as real-time plotting or graphing widgets, it is better to define a
            suitable background color (using setBackgroundRole() with the
            QPalette::Window role), set the autoFillBackground property, and only
            implement the necessary drawing functionality in the widget's
            paintEvent().</para>
            <para>To rapidly update custom widgets that constantly paint over their
            entire areas with opaque content, e.g., video streaming widgets, it is
            better to set the widget's Qt::WA_OpaquePaintEvent, avoiding any
            unnecessary overhead associated with repainting the widget's
            background.</para>
            <para>If a widget has both the Qt::WA_OpaquePaintEvent widget attribute
            and the autoFillBackground property set, the Qt::WA_OpaquePaintEvent
            attribute takes precedence. Depending on your requirements, you should
            choose either one of them.</para>
            <para>Since Qt 4.1, the contents of parent widgets are also propagated
            to standard Qt widgets. This can lead to some unexpected results if the
            parent widget is decorated in a non-standard way, as shown in the diagram
            below.</para>
            <para></para>
            <para>The scope for customizing the painting behavior of standard Qt
            widgets, without resorting to subclassing, is slightly less than that
            possible for custom widgets. Usually, the desired appearance of a standard
            widget can be achieved by setting its autoFillBackground property.</para>
            <para></para>
            <para>Creating Translucent Windows</para>
            <para>Since Qt 4.5, it has been possible to create windows with
            translucent regions on window systems that support compositing.</para>
            <para>To enable this feature in a top-level widget, set its
            Qt::WA_TranslucentBackground attribute with setAttribute() and ensure that
            its background is painted with non-opaque colors in the regions you want to
            be partially transparent.</para>
            <para>Platform notes:</para>
            <para></para>
            <para>X11: This feature relies on the use of an X server that supports
            ARGB visuals and a compositing window manager.</para>
            <para>Windows: The widget needs to have the Qt::FramelessWindowHint
            window flag set for the translucency to work.</para>
            <para></para>
            <para></para>
            <para>Native Widgets vs Alien Widgets</para>
            <para>Introduced in Qt 4.4, alien widgets are widgets unknown to the
            windowing system. They do not have a native window handle associated with
            them. This feature significantly speeds up widget painting, resizing, and
            removes flicker.</para>
            <para>Should you require the old behavior with native windows, you can
            choose one of the following options:</para>
            <para></para>
            <para>Use the QT_USE_NATIVE_WINDOWS=1 in your environment.</para>
            <para>Set the Qt::AA_NativeWindows attribute on your application. All
            widgets will be native widgets.</para>
            <para>Set the Qt::WA_NativeWindow attribute on widgets: The widget
            itself and all of its ancestors will become native (unless
            Qt::WA_DontCreateNativeAncestors is set).</para>
            <para>Call QWidget::winId to enforce a native window (this implies
            3).</para>
            <para>Set the Qt::WA_PaintOnScreen attribute to enforce a native window
            (this implies 3).</para>
            <para></para>
            <para></para>
            <para>See also QEvent, QPainter, QGridLayout, and QBoxLayout.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QWidget.#ctor(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a widget which is a child of parent, with widget flags
            set to f.</para>
            <para>If parent is 0, the new widget becomes a window. If parent is
            another widget, this widget becomes a child window inside parent. The new
            widget is deleted when its parent is deleted.</para>
            <para>The widget flags argument, f, is normally 0, but it can be set to
            customize the frame of a window (i.e. parent must be 0). To customize the
            frame, use a value composed from the bitwise OR of any of the window
            flags.</para>
            <para>If you add a child widget to an already visible widget you must
            explicitly show the child to make it visible.</para>
            <para>Note that the X11 version of Qt may not be able to deliver all
            combinations of style flags on all systems. This is because on X11, Qt can
            only ask the window manager, and the window manager can override the
            application's settings. On Windows, Qt can set whatever flags you
            want.</para>
            <para>See also windowFlags.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.IsEnabledTo(QtWidgets.QWidget)">
            <summary>
            <para>Returns true if this widget would become enabled if ancestor is
            enabled; otherwise returns false.</para>
            <para>This is the case if neither the widget itself nor every parent up
            to but excluding ancestor has been explicitly disabled.</para>
            <para>isEnabledTo(0) returns false if this widget or any if its
            ancestors was explicitly disabled.</para>
            <para>The word ancestor here means a parent widget within the same
            window.</para>
            <para>Therefore isEnabledTo(0) stops at this widget's window, unlike
            isEnabled() which also takes parent windows into considerations.</para>
            <para>See also setEnabled() and enabled.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetDisabled(System.Boolean)">
            <summary>
            <para>Disables widget input events if disable is true; otherwise
            enables input events.</para>
            <para>See the enabled documentation for more information.</para>
            <para>See also isEnabledTo(), QKeyEvent, QMouseEvent, and
            changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetMinimumSize(System.Int32,System.Int32)">
            <summary>
            <para>This property holds the widget's minimum size.</para>
            <para>The widget cannot be resized to a smaller size than the minimum
            widget size. The widget's size is forced to the minimum size if the current
            size is smaller.</para>
            <para>The minimum size set by this function will override the minimum
            size defined by QLayout. In order to unset the minimum size, use a value of
            QSize(0, 0).</para>
            <para>By default, this property contains a size with zero width and
            height.</para>
            <para>See also minimumWidth, minimumHeight, maximumSize, and
            sizeIncrement.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetMaximumSize(System.Int32,System.Int32)">
            <summary>
            <para>This property holds the widget's maximum size in pixels.</para>
            <para>The widget cannot be resized to a larger size than the maximum
            widget size.</para>
            <para>By default, this property contains a size in which both width and
            height have values of 16777215.</para>
            <para>Note: The definition of the QWIDGETSIZE_MAX macro limits the
            maximum size of widgets.</para>
            <para>See also maximumWidth, maximumHeight, minimumSize, and
            sizeIncrement.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetSizeIncrement(System.Int32,System.Int32)">
            <summary>
            <para>This property holds the size increment of the widget.</para>
            <para>When the user resizes the window, the size will move in steps of
            sizeIncrement().width() pixels horizontally and sizeIncrement.height()
            pixels vertically, with baseSize() as the basis. Preferred widget sizes are
            for non-negative integers i and j:</para>
            <para>width = baseSize().width() + i * sizeIncrement().width();</para>
            <para>height = baseSize().height() + j *
            sizeIncrement().height();</para>
            <para>Note that while you can set the size increment for all widgets,
            it only affects windows.</para>
            <para>By default, this property contains a size with zero width and
            height.</para>
            <para>Warning: The size increment has no effect under Windows, and may
            be disregarded by the window manager on X11.</para>
            <para>See also size, minimumSize, and maximumSize.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetBaseSize(System.Int32,System.Int32)">
            <summary>
            <para>This property holds the base size of the widget.</para>
            <para>The base size is used to calculate a proper widget size if the
            widget defines sizeIncrement().</para>
            <para>By default, for a newly-created widget, this property contains a
            size with zero width and height.</para>
            <para>See also setSizeIncrement().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetFixedSize(QtCore.QSize)">
            <summary>
            <para>Sets both the minimum and maximum sizes of the widget to s,
            thereby preventing it from ever growing or shrinking.</para>
            <para>This will override the default size constraints set by
            QLayout.</para>
            <para>To remove constraints, set the size to QWIDGETSIZE_MAX.</para>
            <para>Alternatively, if you want the widget to have a fixed size based
            on its contents, you can call
            QLayout::setSizeConstraint(QLayout::SetFixedSize);</para>
            <para>See also maximumSize and minimumSize.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetFixedSize(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the width of the widget to w and the height to h.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetFixedWidth(System.Int32)">
            <summary>
            <para>Sets both the minimum and maximum width of the widget to w
            without changing the heights. Provided for convenience.</para>
            <para>See also sizeHint(), minimumSize(), maximumSize(), and
            setFixedSize().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetFixedHeight(System.Int32)">
            <summary>
            <para>Sets both the minimum and maximum heights of the widget to h
            without changing the widths. Provided for convenience.</para>
            <para>See also sizeHint(), minimumSize(), maximumSize(), and
            setFixedSize().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.MapToGlobal(QtCore.QPoint)">
            <summary>
            <para>Translates the widget coordinate pos to global screen
            coordinates. For example, mapToGlobal(QPoint(0,0)) would give the global
            coordinates of the top-left pixel of the widget.</para>
            <para>See also mapFromGlobal(), mapTo(), and mapToParent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.MapFromGlobal(QtCore.QPoint)">
            <summary>
            <para>Translates the global screen coordinate pos to widget
            coordinates.</para>
            <para>See also mapToGlobal(), mapFrom(), and mapFromParent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.MapToParent(QtCore.QPoint)">
            <summary>
            <para>Translates the widget coordinate pos to a coordinate in the
            parent widget.</para>
            <para>Same as mapToGlobal() if the widget has no parent.</para>
            <para>See also mapFromParent(), mapTo(), mapToGlobal(), and
            underMouse().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.MapFromParent(QtCore.QPoint)">
            <summary>
            <para>Translates the parent widget coordinate pos to widget
            coordinates.</para>
            <para>Same as mapFromGlobal() if the widget has no parent.</para>
            <para>See also mapToParent(), mapFrom(), mapFromGlobal(), and
            underMouse().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.MapTo(QtWidgets.QWidget,QtCore.QPoint)">
            <summary>
            <para>Translates the widget coordinate pos to the coordinate system of
            parent. The parent must not be 0 and must be a parent of the calling
            widget.</para>
            <para>See also mapFrom(), mapToParent(), mapToGlobal(), and
            underMouse().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.MapFrom(QtWidgets.QWidget,QtCore.QPoint)">
            <summary>
            <para>Translates the widget coordinate pos from the coordinate system
            of parent to this widget's coordinate system. The parent must not be 0 and
            must be a parent of the calling widget.</para>
            <para>See also mapTo(), mapFromParent(), mapFromGlobal(), and
            underMouse().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.UnsetCursor">
            <summary>
            <para>This property holds the cursor shape for this widget.</para>
            <para>The mouse cursor will assume this shape when it's over this
            widget. See the list of predefined cursor objects for a range of useful
            shapes.</para>
            <para>An editor widget might use an I-beam cursor:</para>
            <para>setCursor(Qt::IBeamCursor);</para>
            <para>If no cursor has been set, or after a call to unsetCursor(), the
            parent's cursor is used.</para>
            <para>By default, this property contains a cursor with the
            Qt::ArrowCursor shape.</para>
            <para>Some underlying window implementations will reset the cursor if
            it leaves a widget even if the mouse is grabbed. If you want to have a
            cursor set for all widgets, even when outside the window, consider
            QApplication::setOverrideCursor().</para>
            <para>See also QApplication::setOverrideCursor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetMouseTracking(System.Boolean)">
            <summary>
            <para>This property holds whether mouse tracking is enabled for the
            widget.</para>
            <para>If mouse tracking is disabled (the default), the widget only
            receives mouse move events when at least one mouse button is pressed while
            the mouse is being moved.</para>
            <para>If mouse tracking is enabled, the widget receives mouse move
            events even if no buttons are pressed.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasMouseTracking() const</para>
            <para> void 	setMouseTracking(bool enable)</para>
            <para></para>
            <para>See also mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetMask(QtGui.QBitmap)">
            <summary>
            <para>Causes only the pixels of the widget for which bitmap has a
            corresponding 1 bit to be visible. If the region includes pixels outside
            the rect() of the widget, window system controls in that area may or may
            not be visible, depending on the platform.</para>
            <para>Note that this effect can be slow if the region is particularly
            complex.</para>
            <para>The following code shows how an image with an alpha channel can
            be used to generate a mask for a widget:</para>
            <para>    QLabel topLevelLabel;</para>
            <para>    QPixmap pixmap(&quot;:/images/tux.png&quot;);</para>
            <para>    topLevelLabel.setPixmap(pixmap);</para>
            <para>    topLevelLabel.setMask(pixmap.mask());</para>
            <para>The label shown by this code is masked using the image it
            contains, giving the appearance that an irregularly-shaped image is being
            drawn directly onto the screen.</para>
            <para>Masked widgets receive mouse events only on their visible
            portions.</para>
            <para>See also mask(), clearMask(), windowOpacity(), and Shaped Clock
            Example.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.ClearMask">
            <summary>
            <para>Removes any mask set by setMask().</para>
            <para>See also setMask().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Render(QtGui.IQPaintDevice,QtCore.QPoint,QtGui.QRegion,QtWidgets.QWidget.RenderFlag)">
            <summary>
            <para>Renders the sourceRegion of this widget into the target using
            renderFlags to determine how to render. Rendering starts at targetOffset in
            the target. For example:</para>
            <para>QPixmap pixmap(widget-&gt;size());</para>
            <para>widget-&gt;render(&amp;pixmap);</para>
            <para>If sourceRegion is a null region, this function will use
            QWidget::rect() as the region, i.e. the entire widget.</para>
            <para>Ensure that you call QPainter::end() for the target device's
            active painter (if any) before rendering. For example:</para>
            <para>QPainter painter(this);</para>
            <para>...</para>
            <para>painter.end();</para>
            <para>myWidget-&gt;render(this);</para>
            <para>Note: To obtain the contents of an OpenGL widget, use
            QGLWidget::grabFrameBuffer() or QGLWidget::renderPixmap() instead.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Render(QtGui.QPainter,QtCore.QPoint,QtGui.QRegion,QtWidgets.QWidget.RenderFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Renders the widget into the painter's QPainter::device().</para>
            <para>Transformations and settings applied to the painter will be used
            when rendering.</para>
            <para>Note: The painter must be active. On Mac OS X the widget will be
            rendered into a QPixmap and then drawn by the painter.</para>
            <para>See also QPainter::device().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Grab(QtCore.QRect)">
            <summary>
            <para>Renders the widget into a pixmap restricted by the given
            rectangle. If the widget has any children, then they are also painted in
            the appropriate positions.</para>
            <para>If a rectangle with an invalid size is specified (the default),
            the entire widget is painted.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also render() and QPixmap.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.GrabGesture(QtCore.Qt.GestureType,QtCore.Qt.GestureFlag)">
            <summary>
            <para>Subscribes the widget to a given gesture with specific
            flags.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also ungrabGesture() and QGestureEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.UngrabGesture(QtCore.Qt.GestureType)">
            <summary>
            <para>Unsubscribes the widget from a given gesture type</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also grabGesture() and QGestureEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.UnsetLayoutDirection">
            <summary>
            <para>This property holds the layout direction for this widget.</para>
            <para>By default, this property is set to Qt::LeftToRight.</para>
            <para>When the layout direction is set on a widget, it will propagate
            to the widget's children, but not to a child that is a window and not to a
            child for which setLayoutDirection() has been explicitly called. Also,
            child widgets added after setLayoutDirection() has been called for the
            parent do not inherit the parent's layout direction.</para>
            <para>This method no longer affects text layout direction since Qt
            4.7.</para>
            <para>See also QApplication::layoutDirection.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.UnsetLocale">
            <summary>
            <para>This property holds the widget's locale.</para>
            <para>As long as no special locale has been set, this is either the
            parent's locale or (if this widget is a top level widget), the default
            locale.</para>
            <para>If the widget displays dates or numbers, these should be
            formatted using the widget's locale.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            <para>See also QLocale and QLocale::setDefault().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetFocus">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Gives the keyboard input focus to this widget (or its focus
            proxy) if this widget or one of its parents is the active window.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.ActivateWindow">
            <summary>
            <para>Sets the top-level widget containing this widget to be the active
            window.</para>
            <para>An active window is a visible top-level window that has the
            keyboard input focus.</para>
            <para>This function performs the same operation as clicking the mouse
            on the title bar of a top-level window. On X11, the result depends on the
            Window Manager. If you want to ensure that the window is stacked on top as
            well you should also call raise(). Note that the window must be visible,
            otherwise activateWindow() has no effect.</para>
            <para>On Windows, if you are calling this when the application is not
            currently the active one then it will not make it the active window. It
            will change the color of the taskbar entry to indicate that the window has
            changed in some way. This is because Microsoft does not allow an
            application to interrupt what the user is currently doing in another
            application.</para>
            <para>See also isActiveWindow(), window(), and show().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.ClearFocus">
            <summary>
            <para>Takes keyboard input focus from the widget.</para>
            <para>If the widget has active focus, a focus out event is sent to this
            widget to tell it that it has lost the focus.</para>
            <para>This widget must enable focus setting in order to get the
            keyboard input focus, i.e. it must call setFocusPolicy().</para>
            <para>See also hasFocus(), setFocus(), focusInEvent(), focusOutEvent(),
            setFocusPolicy(), and QApplication::focusWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetFocus(QtCore.Qt.FocusReason)">
            <summary>
            <para>Gives the keyboard input focus to this widget (or its focus
            proxy) if this widget or one of its parents is the active window. The
            reason argument will be passed into any focus event sent from this
            function, it is used to give an explanation of what caused the widget to
            get focus. If the window is not active, the widget will be given the focus
            when the window becomes active.</para>
            <para>First, a focus about to change event is sent to the focus widget
            (if any) to tell it that it is about to lose the focus. Then focus is
            changed, a focus out event is sent to the previous focus item and a focus
            in event is sent to the new item to tell it that it just received the
            focus. (Nothing happens if the focus in and focus out widgets are the
            same.)</para>
            <para>Note: On embedded platforms, setFocus() will not cause an input
            panel to be opened by the input method. If you want this to happen, you
            have to send a QEvent::RequestSoftwareInputPanel event to the widget
            yourself.</para>
            <para>setFocus() gives focus to a widget regardless of its focus
            policy, but does not clear any keyboard grab (see grabKeyboard()).</para>
            <para>Be aware that if the widget is hidden, it will not accept focus
            until it is shown.</para>
            <para>Warning: If you call setFocus() in a function which may itself be
            called from focusOutEvent() or focusInEvent(), you may get an infinite
            recursion.</para>
            <para>See also hasFocus(), clearFocus(), focusInEvent(),
            focusOutEvent(), setFocusPolicy(), focusWidget(),
            QApplication::focusWidget(), grabKeyboard(), grabMouse(), Keyboard Focus in
            Widgets, and QEvent::RequestSoftwareInputPanel.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.GrabMouse">
            <summary>
            <para>Grabs the mouse input.</para>
            <para>This widget receives all mouse events until releaseMouse() is
            called; other widgets get no mouse events at all. Keyboard events are not
            affected. Use grabKeyboard() if you want to grab that.</para>
            <para>Warning: Bugs in mouse-grabbing applications very often lock the
            terminal. Use this function with extreme caution, and consider using the
            -nograb command line option while debugging.</para>
            <para>It is almost never necessary to grab the mouse when using Qt, as
            Qt grabs and releases it sensibly. In particular, Qt grabs the mouse when a
            mouse button is pressed and keeps it until the last button is
            released.</para>
            <para>Note: Only visible widgets can grab mouse input. If isVisible()
            returns false for a widget, that widget cannot call grabMouse().</para>
            <para>Note: On Windows, grabMouse() only works when the mouse is inside
            a window owned by the process. On OS X, grabMouse() only works when the
            mouse is inside the frame of that widget.</para>
            <para>See also releaseMouse(), grabKeyboard(), and
            releaseKeyboard().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.GrabMouse(QtGui.QCursor)">
            <summary>
            <para>This function overloads grabMouse().</para>
            <para>Grabs the mouse input and changes the cursor shape.</para>
            <para>The cursor will assume shape cursor (for as long as the mouse
            focus is grabbed) and this widget will be the only one to receive mouse
            events until releaseMouse() is called().</para>
            <para>Warning: Grabbing the mouse might lock the terminal.</para>
            <para>Note: See the note in QWidget::grabMouse().</para>
            <para>See also releaseMouse(), grabKeyboard(), releaseKeyboard(), and
            setCursor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.ReleaseMouse">
            <summary>
            <para>Releases the mouse grab.</para>
            <para>See also grabMouse(), grabKeyboard(), and
            releaseKeyboard().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.GrabKeyboard">
            <summary>
            <para>Grabs the keyboard input.</para>
            <para>This widget receives all keyboard events until releaseKeyboard()
            is called; other widgets get no keyboard events at all. Mouse events are
            not affected. Use grabMouse() if you want to grab that.</para>
            <para>The focus widget is not affected, except that it doesn't receive
            any keyboard events. setFocus() moves the focus as usual, but the new focus
            widget receives keyboard events only after releaseKeyboard() is
            called.</para>
            <para>If a different widget is currently grabbing keyboard input, that
            widget's grab is released first.</para>
            <para>See also releaseKeyboard(), grabMouse(), releaseMouse(), and
            focusWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.ReleaseKeyboard">
            <summary>
            <para>Releases the keyboard grab.</para>
            <para>See also grabKeyboard(), grabMouse(), and releaseMouse().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.GrabShortcut(QtGui.QKeySequence,QtCore.Qt.ShortcutContext)">
            <summary>
            <para>Adds a shortcut to Qt's shortcut system that watches for the
            given key sequence in the given context. If the context is
            Qt::ApplicationShortcut, the shortcut applies to the application as a
            whole. Otherwise, it is either local to this widget, Qt::WidgetShortcut, or
            to the window itself, Qt::WindowShortcut.</para>
            <para>If the same key sequence has been grabbed by several widgets,
            when the key sequence occurs a QEvent::Shortcut event is sent to all the
            widgets to which it applies in a non-deterministic order, but with the
            ``ambiguous'' flag set to true.</para>
            <para>Warning: You should not normally need to use this function;
            instead create QActions with the shortcut key sequences you require (if you
            also want equivalent menu options and toolbar buttons), or create
            QShortcuts if you just need key sequences. Both QAction and QShortcut
            handle all the event filtering for you, and provide signals which are
            triggered when the user triggers the key sequence, so are much easier to
            use than this low-level function.</para>
            <para>See also releaseShortcut() and setShortcutEnabled().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.ReleaseShortcut(System.Int32)">
            <summary>
            <para>Removes the shortcut with the given id from Qt's shortcut system.
            The widget will no longer receive QEvent::Shortcut events for the
            shortcut's key sequence (unless it has other shortcuts with the same key
            sequence).</para>
            <para>Warning: You should not normally need to use this function since
            Qt's shortcut system removes shortcuts automatically when their parent
            widget is destroyed. It is best to use QAction or QShortcut to handle
            shortcuts, since they are easier to use than this low-level function. Note
            also that this is an expensive operation.</para>
            <para>See also grabShortcut() and setShortcutEnabled().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetShortcutEnabled(System.Int32,System.Boolean)">
            <summary>
            <para>If enable is true, the shortcut with the given id is enabled;
            otherwise the shortcut is disabled.</para>
            <para>Warning: You should not normally need to use this function since
            Qt's shortcut system enables/disables shortcuts automatically as widgets
            become hidden/visible and gain or lose focus. It is best to use QAction or
            QShortcut to handle shortcuts, since they are easier to use than this
            low-level function.</para>
            <para>See also grabShortcut() and releaseShortcut().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetShortcutAutoRepeat(System.Int32,System.Boolean)">
            <summary>
            <para>If enable is true, auto repeat of the shortcut with the given id
            is enabled; otherwise it is disabled.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also grabShortcut() and releaseShortcut().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Update">
            <summary>
            <para>Updates the widget unless updates are disabled or the widget is
            hidden.</para>
            <para>This function does not cause an immediate repaint; instead it
            schedules a paint event for processing when Qt returns to the main event
            loop. This permits Qt to optimize for more speed and less flicker than a
            call to repaint() does.</para>
            <para>Calling update() several times normally results in just one
            paintEvent() call.</para>
            <para>Qt normally erases the widget's area before the paintEvent()
            call. If the Qt::WA_OpaquePaintEvent widget attribute is set, the widget is
            responsible for painting all its pixels with an opaque color.</para>
            <para>See also repaint(), paintEvent(), setUpdatesEnabled(), and Analog
            Clock Example.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Repaint">
            <summary>
            <para>Repaints the widget directly by calling paintEvent() immediately,
            unless updates are disabled or the widget is hidden.</para>
            <para>We suggest only using repaint() if you need an immediate repaint,
            for example during animation. In almost all circumstances update() is
            better, as it permits Qt to optimize for speed and minimize flicker.</para>
            <para>Warning: If you call repaint() in a function which may itself be
            called from paintEvent(), you may get infinite recursion. The update()
            function never causes recursion.</para>
            <para>See also update(), paintEvent(), and setUpdatesEnabled().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Update(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This version updates a rectangle (x, y, w, h) inside the
            widget.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Update(QtCore.QRect)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This version updates a rectangle rect inside the widget.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Update(QtGui.QRegion)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This version repaints a region rgn inside the widget.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Repaint(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This version repaints a rectangle (x, y, w, h) inside the
            widget.</para>
            <para>If w is negative, it is replaced with width() - x, and if h is
            negative, it is replaced width height() - y.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Repaint(QtCore.QRect)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This version repaints a rectangle rect inside the widget.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Repaint(QtGui.QRegion)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This version repaints a region rgn inside the widget.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Show">
            <summary>
            <para>Shows the widget and its child widgets.</para>
            <para>This is equivalent to calling showFullScreen(), showMaximized(),
            or setVisible(true), depending on the platform's default behavior for the
            window flags.</para>
            <para>See also raise(), showEvent(), hide(), setVisible(),
            showMinimized(), showMaximized(), showNormal(), isVisible(), and
            windowFlags().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Hide">
            <summary>
            <para>Hides the widget. This function is equivalent to
            setVisible(false).</para>
            <para>Note: If you are working with QDialog or its subclasses and you
            invoke the show() function after this function, the dialog will be
            displayed in its original position.</para>
            <para>See also hideEvent(), isHidden(), show(), setVisible(),
            isVisible(), and close().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.ShowMinimized">
            <summary>
            <para>Shows the widget minimized, as an icon.</para>
            <para>Calling this function only affects windows.</para>
            <para>See also showNormal(), showMaximized(), show(), hide(),
            isVisible(), and isMinimized().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.ShowMaximized">
            <summary>
            <para>Shows the widget maximized.</para>
            <para>Calling this function only affects windows.</para>
            <para>On X11, this function may not work properly with certain window
            managers. See the Window Geometry documentation for an explanation.</para>
            <para>See also setWindowState(), showNormal(), showMinimized(), show(),
            hide(), and isVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.ShowFullScreen">
            <summary>
            <para>Shows the widget in full-screen mode.</para>
            <para>Calling this function only affects windows.</para>
            <para>To return from full-screen mode, call showNormal().</para>
            <para>Full-screen mode works fine under Windows, but has certain
            problems under X. These problems are due to limitations of the ICCCM
            protocol that specifies the communication between X11 clients and the
            window manager. ICCCM simply does not understand the concept of
            non-decorated full-screen windows. Therefore, the best we can do is to
            request a borderless window and place and resize it to fill the entire
            screen. Depending on the window manager, this may or may not work. The
            borderless window is requested using MOTIF hints, which are at least
            partially supported by virtually all modern window managers.</para>
            <para>An alternative would be to bypass the window manager entirely and
            create a window with the Qt::X11BypassWindowManagerHint flag. This has
            other severe problems though, like totally broken keyboard focus and very
            strange effects on desktop changes or when the user raises other
            windows.</para>
            <para>X11 window managers that follow modern post-ICCCM specifications
            support full-screen mode properly.</para>
            <para>See also showNormal(), showMaximized(), show(), hide(), and
            isVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.ShowNormal">
            <summary>
            <para>Restores the widget after it has been maximized or
            minimized.</para>
            <para>Calling this function only affects windows.</para>
            <para>See also setWindowState(), showMinimized(), showMaximized(),
            show(), hide(), and isVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Close">
            <summary>
            <para>Closes this widget. Returns true if the widget was closed;
            otherwise returns false.</para>
            <para>First it sends the widget a QCloseEvent. The widget is hidden if
            it accepts the close event. If it ignores the event, nothing happens. The
            default implementation of QWidget::closeEvent() accepts the close
            event.</para>
            <para>If the widget has the Qt::WA_DeleteOnClose flag, the widget is
            also deleted. A close events is delivered to the widget no matter if the
            widget is visible or not.</para>
            <para>The QApplication::lastWindowClosed() signal is emitted when the
            last visible primary window (i.e. window with no parent) with the
            Qt::WA_QuitOnClose attribute set is closed. By default this attribute is
            set for all widgets except transient windows such as splash screens, tool
            windows, and popup menus.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Raise">
            <summary>
            <para>Raises this widget to the top of the parent widget's
            stack.</para>
            <para>After this call the widget will be visually in front of any
            overlapping sibling widgets.</para>
            <para>Note: When using activateWindow(), you can call this function to
            ensure that the window is stacked on top.</para>
            <para>See also lower() and stackUnder().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Lower">
            <summary>
            <para>Lowers the widget to the bottom of the parent widget's
            stack.</para>
            <para>After this call the widget will be visually behind (and therefore
            obscured by) any overlapping sibling widgets.</para>
            <para>See also raise() and stackUnder().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.StackUnder(QtWidgets.QWidget)">
            <summary>
            <para>Places the widget under w in the parent widget's stack.</para>
            <para>To make this work, the widget itself and w must be
            siblings.</para>
            <para>See also raise() and lower().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Move(System.Int32,System.Int32)">
            <summary>
            <para>This property holds the position of the widget within its parent
            widget.</para>
            <para>If the widget is a window, the position is that of the widget on
            the desktop, including its frame.</para>
            <para>When changing the position, the widget, if visible, receives a
            move event (moveEvent()) immediately. If the widget is not currently
            visible, it is guaranteed to receive an event before it is shown.</para>
            <para>By default, this property contains a position that refers to the
            origin.</para>
            <para>Warning: Calling move() or setGeometry() inside moveEvent() can
            lead to infinite recursion.</para>
            <para>See the Window Geometry documentation for an overview of geometry
            issues with windows.</para>
            <para>See also frameGeometry, size, x(), and y().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Move(QtCore.QPoint)">
            <summary>
            <para>This property holds the position of the widget within its parent
            widget.</para>
            <para>If the widget is a window, the position is that of the widget on
            the desktop, including its frame.</para>
            <para>When changing the position, the widget, if visible, receives a
            move event (moveEvent()) immediately. If the widget is not currently
            visible, it is guaranteed to receive an event before it is shown.</para>
            <para>By default, this property contains a position that refers to the
            origin.</para>
            <para>Warning: Calling move() or setGeometry() inside moveEvent() can
            lead to infinite recursion.</para>
            <para>See the Window Geometry documentation for an overview of geometry
            issues with windows.</para>
            <para>See also frameGeometry, size, x(), and y().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Resize(System.Int32,System.Int32)">
            <summary>
            <para>This property holds the size of the widget excluding any window
            frame.</para>
            <para>If the widget is visible when it is being resized, it receives a
            resize event (resizeEvent()) immediately. If the widget is not currently
            visible, it is guaranteed to receive an event before it is shown.</para>
            <para>The size is adjusted if it lies outside the range defined by
            minimumSize() and maximumSize().</para>
            <para>By default, this property contains a value that depends on the
            user's platform and screen geometry.</para>
            <para>Warning: Calling resize() or setGeometry() inside resizeEvent()
            can lead to infinite recursion.</para>
            <para>Note: Setting the size to QSize(0, 0) will cause the widget to
            not appear on screen. This also applies to windows.</para>
            <para>See also pos, geometry, minimumSize, maximumSize, resizeEvent(),
            and adjustSize().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Resize(QtCore.QSize)">
            <summary>
            <para>This property holds the size of the widget excluding any window
            frame.</para>
            <para>If the widget is visible when it is being resized, it receives a
            resize event (resizeEvent()) immediately. If the widget is not currently
            visible, it is guaranteed to receive an event before it is shown.</para>
            <para>The size is adjusted if it lies outside the range defined by
            minimumSize() and maximumSize().</para>
            <para>By default, this property contains a value that depends on the
            user's platform and screen geometry.</para>
            <para>Warning: Calling resize() or setGeometry() inside resizeEvent()
            can lead to infinite recursion.</para>
            <para>Note: Setting the size to QSize(0, 0) will cause the widget to
            not appear on screen. This also applies to windows.</para>
            <para>See also pos, geometry, minimumSize, maximumSize, resizeEvent(),
            and adjustSize().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetGeometry(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This property holds the geometry of the widget relative to its
            parent and excluding the window frame.</para>
            <para>When changing the geometry, the widget, if visible, receives a
            move event (moveEvent()) and/or a resize event (resizeEvent()) immediately.
            If the widget is not currently visible, it is guaranteed to receive
            appropriate events before it is shown.</para>
            <para>The size component is adjusted if it lies outside the range
            defined by minimumSize() and maximumSize().</para>
            <para>Warning: Calling setGeometry() inside resizeEvent() or
            moveEvent() can lead to infinite recursion.</para>
            <para>See the Window Geometry documentation for an overview of geometry
            issues with windows.</para>
            <para>By default, this property contains a value that depends on the
            user's platform and screen geometry.</para>
            <para>See also frameGeometry(), rect(), move(), resize(), moveEvent(),
            resizeEvent(), minimumSize(), and maximumSize().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SaveGeometry">
            <summary>
            <para>Saves the current geometry and state for top-level
            widgets.</para>
            <para>To save the geometry when the window closes, you can implement a
            close event like this:</para>
            <para>void MyWidget::closeEvent(QCloseEvent *event)</para>
            <para>{</para>
            <para>    QSettings settings(&quot;MyCompany&quot;,
            &quot;MyApp&quot;);</para>
            <para>    settings.setValue(&quot;geometry&quot;,
            saveGeometry());</para>
            <para>    QWidget::closeEvent(event);</para>
            <para>}</para>
            <para>See the Window Geometry documentation for an overview of geometry
            issues with windows.</para>
            <para>Use QMainWindow::saveState() to save the geometry and the state
            of toolbars and dock widgets.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also restoreGeometry(), QMainWindow::saveState(), and
            QMainWindow::restoreState().</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QtWidgets.QWidget.RestoreGeometry(QtCore.QByteArray)" -->
        <member name="M:QtWidgets.QWidget.AdjustSize">
            <summary>
            <para>Adjusts the size of the widget to fit its contents.</para>
            <para>This function uses sizeHint() if it is valid, i.e., the size
            hint's width and height are &gt;= 0. Otherwise, it sets the size to the
            children rectangle that covers all child widgets (the union of all child
            widget rectangles).</para>
            <para>For windows, the screen size is also taken into account. If the
            sizeHint() is less than (200, 100) and the size policy is expanding, the
            window will be at least (200, 100). The maximum size of a window is 2/3 of
            the screen's width and height.</para>
            <para>See also sizeHint() and childrenRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.IsVisibleTo(QtWidgets.QWidget)">
            <summary>
            <para>Returns true if this widget would become visible if ancestor is
            shown; otherwise returns false.</para>
            <para>The true case occurs if neither the widget itself nor any parent
            up to but excluding ancestor has been explicitly hidden.</para>
            <para>This function will still return true if the widget is obscured by
            other windows on the screen, but could be physically visible if it or they
            were to be moved.</para>
            <para>isVisibleTo(0) is identical to isVisible().</para>
            <para>See also show(), hide(), and isVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetSizePolicy(QtWidgets.QSizePolicy.Policy,QtWidgets.QSizePolicy.Policy)">
            <summary>
            <para>This property holds the default layout behavior of the
            widget.</para>
            <para>If there is a QLayout that manages this widget's children, the
            size policy specified by that layout is used. If there is no such QLayout,
            the result of this function is used.</para>
            <para>The default policy is Preferred/Preferred, which means that the
            widget can be freely resized, but prefers to be the size sizeHint()
            returns. Button-like widgets set the size policy to specify that they may
            stretch horizontally, but are fixed vertically. The same applies to
            lineedit controls (such as QLineEdit, QSpinBox or an editable QComboBox)
            and other horizontally orientated widgets (such as QProgressBar).
            QToolButton's are normally square, so they allow growth in both directions.
            Widgets that support different directions (such as QSlider, QScrollBar or
            QHeader) specify stretching in the respective direction only. Widgets that
            can provide scroll bars (usually subclasses of QScrollArea) tend to specify
            that they can use additional space, and that they can make do with less
            than sizeHint().</para>
            <para>See also sizeHint(), QLayout, QSizePolicy, and
            updateGeometry().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.HeightForWidth(System.Int32)">
            <summary>
            <para>Returns the preferred height for this widget, given the width
            w.</para>
            <para>If this widget has a layout, the default implementation returns
            the layout's preferred height. if there is no layout, the default
            implementation returns -1 indicating that the preferred height does not
            depend on the width.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetContentsMargins(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the margins around the contents of the widget to have the
            sizes left, top, right, and bottom. The margins are used by the layout
            system, and may be used by subclasses to specify the area to draw in (e.g.
            excluding the frame).</para>
            <para>Changing the margins will trigger a resizeEvent().</para>
            <para>See also contentsMargins(), contentsRect(), and
            getContentsMargins().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.GetContentsMargins(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>Returns the widget's contents margins for left, top, right, and
            bottom.</para>
            <para>See also setContentsMargins() and contentsRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.UpdateGeometry">
            <summary>
            <para>Notifies the layout system that this widget has changed and may
            need to change geometry.</para>
            <para>Call this function if the sizeHint() or sizePolicy() have
            changed.</para>
            <para>For explicitly hidden widgets, updateGeometry() is a no-op. The
            layout system will be notified as soon as the widget is shown.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetParent(QtWidgets.QWidget)">
            <summary>
            <para>Sets the parent of the widget to parent, and resets the window
            flags. The widget is moved to position (0, 0) in its new parent.</para>
            <para>If the new parent widget is in a different window, the reparented
            widget and its children are appended to the end of the tab chain of the new
            parent widget, in the same internal order as before. If one of the moved
            widgets had keyboard focus, setParent() calls clearFocus() for that
            widget.</para>
            <para>If the new parent widget is in the same window as the old parent,
            setting the parent doesn't change the tab order or keyboard focus.</para>
            <para>If the &quot;new&quot; parent widget is the old parent widget,
            this function does nothing.</para>
            <para>Note: The widget becomes invisible as part of changing its
            parent, even if it was previously visible. You must call show() to make the
            widget visible again.</para>
            <para>Warning: It is very unlikely that you will ever need this
            function. If you have a widget that changes its content dynamically, it is
            far easier to use QStackedWidget.</para>
            <para>See also setWindowFlags().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetParent(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function also takes widget flags, f as an argument.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Scroll(System.Int32,System.Int32)">
            <summary>
            <para>Scrolls the widget including its children dx pixels to the right
            and dy downward. Both dx and dy may be negative.</para>
            <para>After scrolling, the widgets will receive paint events for the
            areas that need to be repainted. For widgets that Qt knows to be opaque,
            this is only the newly exposed parts. For example, if an opaque widget is
            scrolled 8 pixels to the left, only an 8-pixel wide stripe at the right
            edge needs updating.</para>
            <para>Since widgets propagate the contents of their parents by default,
            you need to set the autoFillBackground property, or use setAttribute() to
            set the Qt::WA_OpaquePaintEvent attribute, to make a widget opaque.</para>
            <para>For widgets that use contents propagation, a scroll will cause an
            update of the entire scroll area.</para>
            <para>See also Transparency and Double Buffering.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Scroll(System.Int32,System.Int32,QtCore.QRect)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This version only scrolls r and does not move the children of the
            widget.</para>
            <para>If r is empty or invalid, the result is undefined.</para>
            <para>See also QScrollArea.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.FocusWidget">
            <summary>
            <para>Returns the last child of this widget that setFocus had been
            called on. For top level widgets this is the widget that will get focus in
            case this window gets activated</para>
            <para>This is not the same as QApplication::focusWidget(), which
            returns the focus widget in the currently active window.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.AddAction(QtWidgets.QAction)">
            <summary>
            <para>Appends the action action to this widget's list of
            actions.</para>
            <para>All QWidgets have a list of QActions, however they can be
            represented graphically in many different ways. The default use of the
            QAction list (as returned by actions()) is to create a context
            QMenu.</para>
            <para>A QWidget should only have one of each action and adding an
            action it already has will not cause the same action to be in the widget
            twice.</para>
            <para>The ownership of action is not transferred to this
            QWidget.</para>
            <para>See also removeAction(), insertAction(), actions(), and
            QMenu.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.InsertAction(QtWidgets.QAction,QtWidgets.QAction)">
            <summary>
            <para>Inserts the action action to this widget's list of actions,
            before the action before. It appends the action if before is 0 or before is
            not a valid action for this widget.</para>
            <para>A QWidget should only have one of each action.</para>
            <para>See also removeAction(), addAction(), QMenu, contextMenuPolicy,
            and actions().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.RemoveAction(QtWidgets.QAction)">
            <summary>
            <para>Removes the action action from this widget's list of
            actions.</para>
            <para>See also insertAction(), actions(), and insertAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OverrideWindowFlags(QtCore.Qt.WindowType)">
            <summary>
            <para>Sets the window flags for the widget to flags, without telling
            the window system.</para>
            <para>Warning: Do not call this function unless you really know what
            you're doing.</para>
            <para>See also setWindowFlags().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.ChildAt(System.Int32,System.Int32)">
            <summary>
            <para>Returns the visible child widget at the position (x, y) in the
            widget's coordinate system. If there is no visible child widget at the
            specified position, the function returns 0.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.ChildAt(QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the visible child widget at point p in the widget's own
            coordinate system.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetAttribute(QtCore.Qt.WidgetAttribute,System.Boolean)">
            <summary>
            <para>Sets the attribute attribute on this widget if on is true;
            otherwise clears the attribute.</para>
            <para>See also testAttribute().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.TestAttribute(QtCore.Qt.WidgetAttribute)">
            <summary>
            <para>Returns true if attribute attribute is set on this widget;
            otherwise returns false.</para>
            <para>See also setAttribute().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.EnsurePolished">
            <summary>
            <para>Ensures that the widget has been polished by QStyle (i.e., has a
            proper font and palette).</para>
            <para>QWidget calls this function after it has been fully constructed
            but before it is shown the very first time. You can call this function if
            you want to ensure that the widget is polished before doing an operation,
            e.g., the correct font size might be needed in the widget's sizeHint()
            reimplementation. Note that this function is called from the default
            implementation of sizeHint().</para>
            <para>Polishing is useful for final initialization that must happen
            after all constructors (from base classes as well as from subclasses) have
            been called.</para>
            <para>If you need to change some settings when a widget is polished,
            reimplement event() and handle the QEvent::Polish event type.</para>
            <para>Note: The function is declared const so that it can be called
            from other const functions (e.g., sizeHint()).</para>
            <para>See also event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.IsAncestorOf(QtWidgets.QWidget)">
            <summary>
            <para>Returns true if this widget is a parent, (or grandparent and so
            on to any level), of the given child, and both widgets are within the same
            window; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            <para>This is the main event handler; it handles event event. You can
            reimplement this function in a subclass, but we recommend using one of the
            specialized event handlers instead.</para>
            <para>Key press and release events are treated differently from other
            events. event() checks for Tab and Shift+Tab and tries to move the focus
            appropriately. If there is no widget to move the focus to (or the key press
            is not Tab or Shift+Tab), event() calls keyPressEvent().</para>
            <para>Mouse and tablet event handling is also slightly special: only
            when the widget is enabled, event() will call the specialized handlers such
            as mousePressEvent(); otherwise it will discard the event.</para>
            <para>This function returns true if the event was recognized, otherwise
            it returns false. If the recognized event was accepted (see
            QEvent::accepted), any further processing such as event propagation to the
            parent widget stops.</para>
            <para>See also closeEvent(), focusInEvent(), focusOutEvent(),
            enterEvent(), keyPressEvent(), keyReleaseEvent(), leaveEvent(),
            mouseDoubleClickEvent(), mouseMoveEvent(), mousePressEvent(),
            mouseReleaseEvent(), moveEvent(), paintEvent(), resizeEvent(),
            QObject::event(), and QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a
            subclass to receive mouse press events for the widget.</para>
            <para>If you create new widgets in the mousePressEvent() the
            mouseReleaseEvent() may not end up where you expect, depending on the
            underlying window system (or X11 window manager), the widgets' location and
            maybe more.</para>
            <para>The default implementation implements the closing of popup
            widgets when you click outside the window. For other widget types it does
            nothing.</para>
            <para>See also mouseReleaseEvent(), mouseDoubleClickEvent(),
            mouseMoveEvent(), event(), QMouseEvent, and Scribble Example.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a
            subclass to receive mouse release events for the widget.</para>
            <para>See also mousePressEvent(), mouseDoubleClickEvent(),
            mouseMoveEvent(), event(), QMouseEvent, and Scribble Example.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnMouseDoubleClickEvent(QtGui.QMouseEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a
            subclass to receive mouse double click events for the widget.</para>
            <para>The default implementation calls mousePressEvent().</para>
            <para>Note: The widget will also receive mouse press and mouse release
            events in addition to the double click event. It is up to the developer to
            ensure that the application interprets these events correctly.</para>
            <para>See also mousePressEvent(), mouseReleaseEvent(),
            mouseMoveEvent(), event(), and QMouseEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a
            subclass to receive mouse move events for the widget.</para>
            <para>If mouse tracking is switched off, mouse move events only occur
            if a mouse button is pressed while the mouse is being moved. If mouse
            tracking is switched on, mouse move events occur even if no mouse button is
            pressed.</para>
            <para>QMouseEvent::pos() reports the position of the mouse cursor,
            relative to this widget. For press and release events, the position is
            usually the same as the position of the last mouse move event, but it might
            be different if the user's hand shakes. This is a feature of the underlying
            window system, not Qt.</para>
            <para>If you want to show a tooltip immediately, while the mouse is
            moving (e.g., to get the mouse coordinates with QMouseEvent::pos() and show
            them as a tooltip), you must first enable mouse tracking as described
            above. Then, to ensure that the tooltip is updated immediately, you must
            call QToolTip::showText() instead of setToolTip() in your implementation of
            mouseMoveEvent().</para>
            <para>See also setMouseTracking(), mousePressEvent(),
            mouseReleaseEvent(), mouseDoubleClickEvent(), event(), QMouseEvent, and
            Scribble Example.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnWheelEvent(QtGui.QWheelEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a
            subclass to receive wheel events for the widget.</para>
            <para>If you reimplement this handler, it is very important that you
            ignore() the event if you do not handle it, so that the widget's parent can
            interpret it.</para>
            <para>The default implementation ignores the event.</para>
            <para>See also QWheelEvent::ignore(), QWheelEvent::accept(), event(),
            and QWheelEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a
            subclass to receive key press events for the widget.</para>
            <para>A widget must call setFocusPolicy() to accept focus initially and
            have focus in order to receive a key press event.</para>
            <para>If you reimplement this handler, it is very important that you
            call the base class implementation if you do not act upon the key.</para>
            <para>The default implementation closes popup widgets if the user
            presses Esc. Otherwise the event is ignored, so that the widget's parent
            can interpret it.</para>
            <para>Note that QKeyEvent starts with isAccepted() == true, so you do
            not need to call QKeyEvent::accept() - just do not call the base class
            implementation if you act upon the key.</para>
            <para>See also keyReleaseEvent(), setFocusPolicy(), focusInEvent(),
            focusOutEvent(), event(), QKeyEvent, and Tetrix Example.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnKeyReleaseEvent(QtGui.QKeyEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a
            subclass to receive key release events for the widget.</para>
            <para>A widget must accept focus initially and have focus in order to
            receive a key release event.</para>
            <para>If you reimplement this handler, it is very important that you
            call the base class implementation if you do not act upon the key.</para>
            <para>The default implementation ignores the event, so that the
            widget's parent can interpret it.</para>
            <para>Note that QKeyEvent starts with isAccepted() == true, so you do
            not need to call QKeyEvent::accept() - just do not call the base class
            implementation if you act upon the key.</para>
            <para>See also keyPressEvent(), QKeyEvent::ignore(), setFocusPolicy(),
            focusInEvent(), focusOutEvent(), event(), and QKeyEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive
            keyboard focus events (focus received) for the widget. The event is passed
            in the event parameter</para>
            <para>A widget normally must setFocusPolicy() to something other than
            Qt::NoFocus in order to receive focus events. (Note that the application
            programmer can call setFocus() on any widget, even those that do not
            normally accept focus.)</para>
            <para>The default implementation updates the widget (except for windows
            that do not specify a focusPolicy()).</para>
            <para>See also focusOutEvent(), setFocusPolicy(), keyPressEvent(),
            keyReleaseEvent(), event(), and QFocusEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive
            keyboard focus events (focus lost) for the widget. The events is passed in
            the event parameter.</para>
            <para>A widget normally must setFocusPolicy() to something other than
            Qt::NoFocus in order to receive focus events. (Note that the application
            programmer can call setFocus() on any widget, even those that do not
            normally accept focus.)</para>
            <para>The default implementation updates the widget (except for windows
            that do not specify a focusPolicy()).</para>
            <para>See also focusInEvent(), setFocusPolicy(), keyPressEvent(),
            keyReleaseEvent(), event(), and QFocusEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnEnterEvent(QtCore.QEvent)">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive
            widget enter events which are passed in the event parameter.</para>
            <para>An event is sent to the widget when the mouse cursor enters the
            widget.</para>
            <para>See also leaveEvent(), mouseMoveEvent(), and event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnLeaveEvent(QtCore.QEvent)">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive
            widget leave events which are passed in the event parameter.</para>
            <para>A leave event is sent to the widget when the mouse cursor leaves
            the widget.</para>
            <para>See also enterEvent(), mouseMoveEvent(), and event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive
            paint events passed in event.</para>
            <para>A paint event is a request to repaint all or part of a widget. It
            can happen for one of the following reasons:</para>
            <para></para>
            <para>repaint() or update() was invoked,</para>
            <para>the widget was obscured and has now been uncovered, or</para>
            <para>many other reasons.</para>
            <para></para>
            <para>Many widgets can simply repaint their entire surface when asked
            to, but some slow widgets need to optimize by painting only the requested
            region: QPaintEvent::region(). This speed optimization does not change the
            result, as painting is clipped to that region during event processing.
            QListView and QTableView do this, for example.</para>
            <para>Qt also tries to speed up painting by merging multiple paint
            events into one. When update() is called several times or the window system
            sends several paint events, Qt merges these events into one event with a
            larger region (see QRegion::united()). The repaint() function does not
            permit this optimization, so we suggest using update() whenever
            possible.</para>
            <para>When the paint event occurs, the update region has normally been
            erased, so you are painting on the widget's background.</para>
            <para>The background can be set using setBackgroundRole() and
            setPalette().</para>
            <para>Since Qt 4.0, QWidget automatically double-buffers its painting,
            so there is no need to write double-buffering code in paintEvent() to avoid
            flicker.</para>
            <para>Note for the X11 platform: It is possible to toggle global double
            buffering by calling qt_x11_set_global_double_buffer(). For example,</para>
            <para>...</para>
            <para>extern void qt_x11_set_global_double_buffer(bool);</para>
            <para>qt_x11_set_global_double_buffer(false);</para>
            <para>...</para>
            <para>Note: Generally, you should refrain from calling update() or
            repaint() inside a paintEvent(). For example, calling update() or repaint()
            on children inside a paintevent() results in undefined behavior; the child
            may or may not get a paint event.</para>
            <para>Warning: If you are using a custom paint engine without Qt's
            backingstore, Qt::WA_PaintOnScreen must be set. Otherwise,
            QWidget::paintEngine() will never be called; the backingstore will be used
            instead.</para>
            <para>See also event(), repaint(), update(), QPainter, QPixmap,
            QPaintEvent, and Analog Clock Example.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnMoveEvent(QtGui.QMoveEvent)">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive
            widget move events which are passed in the event parameter. When the widget
            receives this event, it is already at the new position.</para>
            <para>The old position is accessible through
            QMoveEvent::oldPos().</para>
            <para>See also resizeEvent(), event(), move(), and QMoveEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive
            widget resize events which are passed in the event parameter. When
            resizeEvent() is called, the widget already has its new geometry. The old
            size is accessible through QResizeEvent::oldSize().</para>
            <para>The widget will be erased and receive a paint event immediately
            after processing the resize event. No drawing need be (or should be) done
            inside this handler.</para>
            <para>See also moveEvent(), event(), resize(), QResizeEvent,
            paintEvent(), and Scribble Example.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnCloseEvent(QtGui.QCloseEvent)">
            <summary>
            <para>This event handler is called with the given event when Qt
            receives a window close request for a top-level widget from the window
            system.</para>
            <para>By default, the event is accepted and the widget is closed. You
            can reimplement this function to change the way the widget responds to
            window close requests. For example, you can prevent the window from closing
            by calling ignore() on all events.</para>
            <para>Main window applications typically use reimplementations of this
            function to check whether the user's work has been saved and ask for
            permission before closing. For example, the Application Example uses a
            helper function to determine whether or not to close the window:</para>
            <para>void MainWindow::closeEvent(QCloseEvent *event)</para>
            <para>{</para>
            <para>    if (maybeSave()) {</para>
            <para>        writeSettings();</para>
            <para>        event-&gt;accept();</para>
            <para>    } else {</para>
            <para>        event-&gt;ignore();</para>
            <para>    }</para>
            <para>}</para>
            <para>See also event(), hide(), close(), QCloseEvent, and Application
            Example.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnContextMenuEvent(QtGui.QContextMenuEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a
            subclass to receive widget context menu events.</para>
            <para>The handler is called when the widget's contextMenuPolicy is
            Qt::DefaultContextMenu.</para>
            <para>The default implementation ignores the context event. See the
            QContextMenuEvent documentation for more details.</para>
            <para>See also event(), QContextMenuEvent, and
            customContextMenuRequested().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnTabletEvent(QtGui.QTabletEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a
            subclass to receive tablet events for the widget.</para>
            <para>If you reimplement this handler, it is very important that you
            ignore() the event if you do not handle it, so that the widget's parent can
            interpret it.</para>
            <para>The default implementation ignores the event.</para>
            <para>See also QTabletEvent::ignore(), QTabletEvent::accept(), event(),
            and QTabletEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnActionEvent(QtGui.QActionEvent)">
            <summary>
            <para>This event handler is called with the given event whenever the
            widget's actions are changed.</para>
            <para>See also addAction(), insertAction(), removeAction(), actions(),
            and QActionEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnDragEnterEvent(QtGui.QDragEnterEvent)">
            <summary>
            <para>This event handler is called when a drag is in progress and the
            mouse enters this widget. The event is passed in the event
            parameter.</para>
            <para>If the event is ignored, the widget won't receive any drag move
            events.</para>
            <para>See the Drag-and-drop documentation for an overview of how to
            provide drag-and-drop in your application.</para>
            <para>See also QDrag and QDragEnterEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnDragMoveEvent(QtGui.QDragMoveEvent)">
            <summary>
            <para>This event handler is called if a drag is in progress, and when
            any of the following conditions occur: the cursor enters this widget, the
            cursor moves within this widget, or a modifier key is pressed on the
            keyboard while this widget has the focus. The event is passed in the event
            parameter.</para>
            <para>See the Drag-and-drop documentation for an overview of how to
            provide drag-and-drop in your application.</para>
            <para>See also QDrag and QDragMoveEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnDragLeaveEvent(QtGui.QDragLeaveEvent)">
            <summary>
            <para>This event handler is called when a drag is in progress and the
            mouse leaves this widget. The event is passed in the event
            parameter.</para>
            <para>See the Drag-and-drop documentation for an overview of how to
            provide drag-and-drop in your application.</para>
            <para>See also QDrag and QDragLeaveEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnDropEvent(QtGui.QDropEvent)">
            <summary>
            <para>This event handler is called when the drag is dropped on this
            widget. The event is passed in the event parameter.</para>
            <para>See the Drag-and-drop documentation for an overview of how to
            provide drag-and-drop in your application.</para>
            <para>See also QDrag and QDropEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive
            widget show events which are passed in the event parameter.</para>
            <para>Non-spontaneous show events are sent to widgets immediately
            before they are shown. The spontaneous show events of windows are delivered
            afterwards.</para>
            <para>Note: A widget receives spontaneous show and hide events when its
            mapping status is changed by the window system, e.g. a spontaneous hide
            event when the user minimizes the window, and a spontaneous show event when
            the window is restored again. After receiving a spontaneous hide event, a
            widget is still considered visible in the sense of isVisible().</para>
            <para>See also visible, event(), and QShowEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnHideEvent(QtGui.QHideEvent)">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive
            widget hide events. The event is passed in the event parameter.</para>
            <para>Hide events are sent to widgets immediately after they have been
            hidden.</para>
            <para>Note: A widget receives spontaneous show and hide events when its
            mapping status is changed by the window system, e.g. a spontaneous hide
            event when the user minimizes the window, and a spontaneous show event when
            the window is restored again. After receiving a spontaneous hide event, a
            widget is still considered visible in the sense of isVisible().</para>
            <para>See also visible, event(), and QHideEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.NativeEvent(QtCore.QByteArray,System.IntPtr,System.Int32@)">
            <summary>
            <para>This special event handler can be reimplemented in a subclass to
            receive native platform events identified by eventType which are passed in
            the message parameter.</para>
            <para>In your reimplementation of this function, if you want to stop
            the event being handled by Qt, return true and set result. If you return
            false, this native event is passed back to Qt, which translates the event
            into a Qt event and sends it to the widget.</para>
            <para>Note: Events are only delivered to this event handler if the
            widget is has a native Window handle.</para>
            <para>Note: This function superseedes the event filter functions
            x11Event(), winEvent() and macEvent() of Qt 4.</para>
            <para></para>
            <para> PlatformEvent Type IdentifierMessage TypeResult Type</para>
            <para>Windows	&quot;windows_generic_MSG&quot;	MSG *	LRESULT</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>This event handler can be reimplemented to handle state
            changes.</para>
            <para>The state being changed in this event can be retrieved through
            the event supplied.</para>
            <para>Change events include: QEvent::ToolBarChange,
            QEvent::ActivationChange, QEvent::EnabledChange, QEvent::FontChange,
            QEvent::StyleChange, QEvent::PaletteChange, QEvent::WindowTitleChange,
            QEvent::IconTextChange, QEvent::ModifiedChange,
            QEvent::MouseTrackingChange, QEvent::ParentChange,
            QEvent::WindowStateChange, QEvent::LanguageChange, QEvent::LocaleChange,
            QEvent::LayoutDirectionChange, QEvent::ReadOnlyChange.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Metric(QtGui.QPaintDevice.PaintDeviceMetric)">
            <summary>
            <para>Reimplemented from QPaintDevice::metric().</para>
            <para>Internal implementation of the virtual QPaintDevice::metric()
            function.</para>
            <para>m is the metric to get.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.InitPainter(QtGui.QPainter)">
            <summary>
            <para>Initializes the painter pen, background and font to the same as
            the given widget's. This function is called automatically when the painter
            is opened on a QWidget.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.OnInputMethodEvent(QtGui.QInputMethodEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a
            subclass to receive Input Method composition events. This handler is called
            when the state of the input method changes.</para>
            <para>Note that when creating custom text editing widgets, the
            Qt::WA_InputMethodEnabled window attribute must be set explicitly (using
            the setAttribute() function) in order to receive input method
            events.</para>
            <para>The default implementation calls event-&gt;ignore(), which
            rejects the Input Method event. See the QInputMethodEvent documentation for
            more details.</para>
            <para>See also event() and QInputMethodEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.InputMethodQuery(QtCore.Qt.InputMethodQuery)">
            <summary>
            <para>This method is only relevant for input widgets. It is used by the
            input method to query a set of properties of the widget to be able to
            support complex input method operations as support for surrounding text and
            reconversions.</para>
            <para>query specifies which property is queried.</para>
            <para>See also inputMethodEvent(), QInputMethodEvent,
            QInputMethodQueryEvent, and inputMethodHints.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.UpdateMicroFocus">
            <summary>
            <para>Updates the widget's micro focus.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Create(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            <para>Creates a new widget window if window is 0, otherwise sets the
            widget's window to window.</para>
            <para>Initializes the window (sets the geometry etc.) if
            initializeWindow is true. If initializeWindow is false, no initialization
            is performed. This parameter only makes sense if window is a valid
            window.</para>
            <para>Destroys the old window if destroyOldWindow is true. If
            destroyOldWindow is false, you are responsible for destroying the window
            yourself (using platform native code).</para>
            <para>The QWidget constructor calls create(0,true,true) to create a
            window for this widget.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Destroy(System.Boolean,System.Boolean)">
            <summary>
            <para>Frees up window system resources. Destroys the widget window if
            destroyWindow is true.</para>
            <para>destroy() calls itself recursively for all the child widgets,
            passing destroySubWindows for the destroyWindow parameter. To have more
            control over destruction of subwidgets, destroy subwidgets selectively
            first.</para>
            <para>This function is usually called from the QWidget
            destructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.FocusNextPrevChild(System.Boolean)">
            <summary>
            <para>Finds a new widget to give the keyboard focus to, as appropriate
            for Tab and Shift+Tab, and returns true if it can find a new widget, or
            false if it can't.</para>
            <para>If next is true, this function searches forward, if next is
            false, it searches backward.</para>
            <para>Sometimes, you will want to reimplement this function. For
            example, a web browser might reimplement it to move its &quot;current
            active link&quot; forward or backward, and call focusNextPrevChild() only
            when it reaches the last or first link on the &quot;page&quot;.</para>
            <para>Child widgets call focusNextPrevChild() on their parent widgets,
            but only the window that contains the child widgets decides where to
            redirect focus. By reimplementing this function for an object, you thus
            gain control of focus traversal for all child widgets.</para>
            <para>See also focusNextChild() and focusPreviousChild().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.FocusNextChild">
            <summary>
            <para>Finds a new widget to give the keyboard focus to, as appropriate
            for Tab, and returns true if it can find a new widget, or false if it
            can't.</para>
            <para>See also focusPreviousChild().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.FocusPreviousChild">
            <summary>
            <para>Finds a new widget to give the keyboard focus to, as appropriate
            for Shift+Tab, and returns true if it can find a new widget, or false if it
            can't.</para>
            <para>See also focusNextChild().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Render(QtGui.IQPaintDevice,QtCore.QPoint)">
            <summary>
            <para>Renders the sourceRegion of this widget into the target using
            renderFlags to determine how to render. Rendering starts at targetOffset in
            the target. For example:</para>
            <para>QPixmap pixmap(widget-&gt;size());</para>
            <para>widget-&gt;render(&amp;pixmap);</para>
            <para>If sourceRegion is a null region, this function will use
            QWidget::rect() as the region, i.e. the entire widget.</para>
            <para>Ensure that you call QPainter::end() for the target device's
            active painter (if any) before rendering. For example:</para>
            <para>QPainter painter(this);</para>
            <para>...</para>
            <para>painter.end();</para>
            <para>myWidget-&gt;render(this);</para>
            <para>Note: To obtain the contents of an OpenGL widget, use
            QGLWidget::grabFrameBuffer() or QGLWidget::renderPixmap() instead.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Render(QtGui.QPainter,QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Renders the widget into the painter's QPainter::device().</para>
            <para>Transformations and settings applied to the painter will be used
            when rendering.</para>
            <para>Note: The painter must be active. On Mac OS X the widget will be
            rendered into a QPixmap and then drawn by the painter.</para>
            <para>See also QPainter::device().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Grab">
            <summary>
            <para>Renders the widget into a pixmap restricted by the given
            rectangle. If the widget has any children, then they are also painted in
            the appropriate positions.</para>
            <para>If a rectangle with an invalid size is specified (the default),
            the entire widget is painted.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also render() and QPixmap.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.SetTabOrder(QtWidgets.QWidget,QtWidgets.QWidget)">
            <summary>
            <para>Puts the second widget after the first widget in the focus
            order.</para>
            <para>Note that since the tab order of the second widget is changed,
            you should order a chain like this:</para>
            <para>setTabOrder(a, b); // a to b</para>
            <para>setTabOrder(b, c); // a to b to c</para>
            <para>setTabOrder(c, d); // a to b to c to d</para>
            <para>not like this:</para>
            <para>// WRONG</para>
            <para>setTabOrder(c, d); // c to d</para>
            <para>setTabOrder(a, b); // a to b AND c to d</para>
            <para>setTabOrder(b, c); // a to b to c, but not c to d</para>
            <para>If first or second has a focus proxy, setTabOrder() correctly
            substitutes the proxy.</para>
            <para>See also setFocusPolicy(), setFocusProxy(), and Keyboard Focus in
            Widgets.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.Find(System.UInt32)">
            <summary>
            <para>Returns a pointer to the widget with window identifer/handle
            id.</para>
            <para>The window identifier type depends on the underlying window
            system, see qwindowdefs.h for the actual definition. If there is no widget
            with this identifier, 0 is returned.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidget.CreateWindowContainer(QtGui.QWindow,QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Creates a QWidget that makes it possible to embed window into a
            QWidget-based application.</para>
            <para>The window container is created as a child of parent and with
            window flags flags.</para>
            <para>Once the window has been embedded into the container, the
            container will control the window's geometry and visibility. Explicit calls
            to QWindow::setGeometry(), QWindow::show() or QWindow::hide() on an
            embedded window is not recommended.</para>
            <para>The container takes over ownership of window. The window can be
            removed from the window container with a call to
            QWindow::setParent().</para>
            <para>The window container is attached as a native child window to the
            toplevel window it is a child of. When a window container is used as a
            child of a QAbstractScrollArea or QMdiArea, it will create a native window
            for every widget in its parent chain to allow for proper stacking and
            clipping in this use case. Applications with many native child windows may
            suffer from performance issues.</para>
            <para>The window container has a number of known limitations:</para>
            <para></para>
            <para>Stacking order; The embedded window will stack on top of the
            widget hierarchy as an opaque box. The stacking order of multiple
            overlapping window container instances is undefined.</para>
            <para>Rendering Integration; The window container does not interoperate
            with QGraphicsProxyWidget, QWidget::render() or similar
            functionality.</para>
            <para>Focus Handling; It is possible to let the window container
            instance have any focus policy and it will delegate focus to the window via
            a call to QWindow::requestActivate(). However, returning to the normal
            focus chain from the QWindow instance will be up to the QWindow instance
            implementation itself. For instance, when entering a Qt Quick based window
            with tab focus, it is quite likely that further tab presses will only cycle
            inside the QML application. Also, whether QWindow::requestActivate()
            actually gives the window focus, is platform dependent.</para>
            <para>Using many window container instances in a QWidget-based
            application can greatly hurt the overall performance of the
            application.</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.WindowTitleChanged">
            <summary>
            <para>This property holds the window title (caption).</para>
            <para>This property only makes sense for top-level widgets, such as windows and dialogs. If no caption has been set, the title is based of the windowFilePath. If neither of these is set, then the title is an empty string.</para>
            <para>If you use the windowModified mechanism, the window title must contain a &quot;[*]&quot; placeholder, which indicates where the '*' should appear. Normally, it should appear right after the file name (e.g., &quot;document1.txt[*] - Text Editor&quot;). If the windowModified property is false (the default), the placeholder is simply removed.</para>
            <para>On some desktop platforms (including Windows and Unix), the application name (from QGuiApplication::applicationDisplayName) is added at the end of the window title, if set. This is done by the QPA plugin, so it is shown to the user, but isn't part of the windowTitle string.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	windowTitle() const</para>
            <para> void 	setWindowTitle(const QString &amp;)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	windowTitleChanged(const QString &amp; title)</para>
            <para></para>
            <para>See also windowIcon, windowIconText, windowModified, and windowFilePath.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.WindowIconChanged">
            <summary>
            <para>This property holds the widget's icon.</para>
            <para>This property only makes sense for windows. If no icon has been set, windowIcon() returns the application icon (QApplication::windowIcon()).</para>
            <para>Access functions:</para>
            <para></para>
            <para> QIcon 	windowIcon() const</para>
            <para> void 	setWindowIcon(const QIcon &amp; icon)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	windowIconChanged(const QIcon &amp; icon)</para>
            <para></para>
            <para>See also windowIconText and windowTitle.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.WindowIconTextChanged">
            <summary>
            <para>This property holds the widget's icon text.</para>
            <para>This property only makes sense for windows. If no icon text has been set, this functions returns an empty string.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	windowIconText() const</para>
            <para> void 	setWindowIconText(const QString &amp;)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	windowIconTextChanged(const QString &amp; iconText)</para>
            <para></para>
            <para>See also windowIcon and windowTitle.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.CustomContextMenuRequested">
            <summary>
            <para>This signal is emitted when the widget's contextMenuPolicy is Qt::CustomContextMenu, and the user has requested a context menu on the widget. The position pos is the position of the context menu event that the widget receives. Normally this is in widget coordinates. The exception to this rule is QAbstractScrollArea and its subclasses that map the context menu event to coordinates of the viewport().</para>
            <para>See also mapToGlobal(), QMenu, and contextMenuPolicy.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.MousePressEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a subclass to receive mouse press events for the widget.</para>
            <para>If you create new widgets in the mousePressEvent() the mouseReleaseEvent() may not end up where you expect, depending on the underlying window system (or X11 window manager), the widgets' location and maybe more.</para>
            <para>The default implementation implements the closing of popup widgets when you click outside the window. For other widget types it does nothing.</para>
            <para>See also mouseReleaseEvent(), mouseDoubleClickEvent(), mouseMoveEvent(), event(), QMouseEvent, and Scribble Example.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.MouseReleaseEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a subclass to receive mouse release events for the widget.</para>
            <para>See also mousePressEvent(), mouseDoubleClickEvent(), mouseMoveEvent(), event(), QMouseEvent, and Scribble Example.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.MouseDoubleClickEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a subclass to receive mouse double click events for the widget.</para>
            <para>The default implementation calls mousePressEvent().</para>
            <para>Note: The widget will also receive mouse press and mouse release events in addition to the double click event. It is up to the developer to ensure that the application interprets these events correctly.</para>
            <para>See also mousePressEvent(), mouseReleaseEvent(), mouseMoveEvent(), event(), and QMouseEvent.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.MouseMoveEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a subclass to receive mouse move events for the widget.</para>
            <para>If mouse tracking is switched off, mouse move events only occur if a mouse button is pressed while the mouse is being moved. If mouse tracking is switched on, mouse move events occur even if no mouse button is pressed.</para>
            <para>QMouseEvent::pos() reports the position of the mouse cursor, relative to this widget. For press and release events, the position is usually the same as the position of the last mouse move event, but it might be different if the user's hand shakes. This is a feature of the underlying window system, not Qt.</para>
            <para>If you want to show a tooltip immediately, while the mouse is moving (e.g., to get the mouse coordinates with QMouseEvent::pos() and show them as a tooltip), you must first enable mouse tracking as described above. Then, to ensure that the tooltip is updated immediately, you must call QToolTip::showText() instead of setToolTip() in your implementation of mouseMoveEvent().</para>
            <para>See also setMouseTracking(), mousePressEvent(), mouseReleaseEvent(), mouseDoubleClickEvent(), event(), QMouseEvent, and Scribble Example.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.WheelEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a subclass to receive wheel events for the widget.</para>
            <para>If you reimplement this handler, it is very important that you ignore() the event if you do not handle it, so that the widget's parent can interpret it.</para>
            <para>The default implementation ignores the event.</para>
            <para>See also QWheelEvent::ignore(), QWheelEvent::accept(), event(), and QWheelEvent.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.KeyPressEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a subclass to receive key press events for the widget.</para>
            <para>A widget must call setFocusPolicy() to accept focus initially and have focus in order to receive a key press event.</para>
            <para>If you reimplement this handler, it is very important that you call the base class implementation if you do not act upon the key.</para>
            <para>The default implementation closes popup widgets if the user presses Esc. Otherwise the event is ignored, so that the widget's parent can interpret it.</para>
            <para>Note that QKeyEvent starts with isAccepted() == true, so you do not need to call QKeyEvent::accept() - just do not call the base class implementation if you act upon the key.</para>
            <para>See also keyReleaseEvent(), setFocusPolicy(), focusInEvent(), focusOutEvent(), event(), QKeyEvent, and Tetrix Example.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.KeyReleaseEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a subclass to receive key release events for the widget.</para>
            <para>A widget must accept focus initially and have focus in order to receive a key release event.</para>
            <para>If you reimplement this handler, it is very important that you call the base class implementation if you do not act upon the key.</para>
            <para>The default implementation ignores the event, so that the widget's parent can interpret it.</para>
            <para>Note that QKeyEvent starts with isAccepted() == true, so you do not need to call QKeyEvent::accept() - just do not call the base class implementation if you act upon the key.</para>
            <para>See also keyPressEvent(), QKeyEvent::ignore(), setFocusPolicy(), focusInEvent(), focusOutEvent(), event(), and QKeyEvent.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.FocusInEvent">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive keyboard focus events (focus received) for the widget. The event is passed in the event parameter</para>
            <para>A widget normally must setFocusPolicy() to something other than Qt::NoFocus in order to receive focus events. (Note that the application programmer can call setFocus() on any widget, even those that do not normally accept focus.)</para>
            <para>The default implementation updates the widget (except for windows that do not specify a focusPolicy()).</para>
            <para>See also focusOutEvent(), setFocusPolicy(), keyPressEvent(), keyReleaseEvent(), event(), and QFocusEvent.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.FocusOutEvent">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive keyboard focus events (focus lost) for the widget. The events is passed in the event parameter.</para>
            <para>A widget normally must setFocusPolicy() to something other than Qt::NoFocus in order to receive focus events. (Note that the application programmer can call setFocus() on any widget, even those that do not normally accept focus.)</para>
            <para>The default implementation updates the widget (except for windows that do not specify a focusPolicy()).</para>
            <para>See also focusInEvent(), setFocusPolicy(), keyPressEvent(), keyReleaseEvent(), event(), and QFocusEvent.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.EnterEvent">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive widget enter events which are passed in the event parameter.</para>
            <para>An event is sent to the widget when the mouse cursor enters the widget.</para>
            <para>See also leaveEvent(), mouseMoveEvent(), and event().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.LeaveEvent">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive widget leave events which are passed in the event parameter.</para>
            <para>A leave event is sent to the widget when the mouse cursor leaves the widget.</para>
            <para>See also enterEvent(), mouseMoveEvent(), and event().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.PaintEvent">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive paint events passed in event.</para>
            <para>A paint event is a request to repaint all or part of a widget. It can happen for one of the following reasons:</para>
            <para></para>
            <para>repaint() or update() was invoked,</para>
            <para>the widget was obscured and has now been uncovered, or</para>
            <para>many other reasons.</para>
            <para></para>
            <para>Many widgets can simply repaint their entire surface when asked to, but some slow widgets need to optimize by painting only the requested region: QPaintEvent::region(). This speed optimization does not change the result, as painting is clipped to that region during event processing. QListView and QTableView do this, for example.</para>
            <para>Qt also tries to speed up painting by merging multiple paint events into one. When update() is called several times or the window system sends several paint events, Qt merges these events into one event with a larger region (see QRegion::united()). The repaint() function does not permit this optimization, so we suggest using update() whenever possible.</para>
            <para>When the paint event occurs, the update region has normally been erased, so you are painting on the widget's background.</para>
            <para>The background can be set using setBackgroundRole() and setPalette().</para>
            <para>Since Qt 4.0, QWidget automatically double-buffers its painting, so there is no need to write double-buffering code in paintEvent() to avoid flicker.</para>
            <para>Note for the X11 platform: It is possible to toggle global double buffering by calling qt_x11_set_global_double_buffer(). For example,</para>
            <para>...</para>
            <para>extern void qt_x11_set_global_double_buffer(bool);</para>
            <para>qt_x11_set_global_double_buffer(false);</para>
            <para>...</para>
            <para>Note: Generally, you should refrain from calling update() or repaint() inside a paintEvent(). For example, calling update() or repaint() on children inside a paintevent() results in undefined behavior; the child may or may not get a paint event.</para>
            <para>Warning: If you are using a custom paint engine without Qt's backingstore, Qt::WA_PaintOnScreen must be set. Otherwise, QWidget::paintEngine() will never be called; the backingstore will be used instead.</para>
            <para>See also event(), repaint(), update(), QPainter, QPixmap, QPaintEvent, and Analog Clock Example.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.MoveEvent">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive widget move events which are passed in the event parameter. When the widget receives this event, it is already at the new position.</para>
            <para>The old position is accessible through QMoveEvent::oldPos().</para>
            <para>See also resizeEvent(), event(), move(), and QMoveEvent.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.ResizeEvent">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive widget resize events which are passed in the event parameter. When resizeEvent() is called, the widget already has its new geometry. The old size is accessible through QResizeEvent::oldSize().</para>
            <para>The widget will be erased and receive a paint event immediately after processing the resize event. No drawing need be (or should be) done inside this handler.</para>
            <para>See also moveEvent(), event(), resize(), QResizeEvent, paintEvent(), and Scribble Example.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.CloseEvent">
            <summary>
            <para>This event handler is called with the given event when Qt receives a window close request for a top-level widget from the window system.</para>
            <para>By default, the event is accepted and the widget is closed. You can reimplement this function to change the way the widget responds to window close requests. For example, you can prevent the window from closing by calling ignore() on all events.</para>
            <para>Main window applications typically use reimplementations of this function to check whether the user's work has been saved and ask for permission before closing. For example, the Application Example uses a helper function to determine whether or not to close the window:</para>
            <para>void MainWindow::closeEvent(QCloseEvent *event)</para>
            <para>{</para>
            <para>    if (maybeSave()) {</para>
            <para>        writeSettings();</para>
            <para>        event-&gt;accept();</para>
            <para>    } else {</para>
            <para>        event-&gt;ignore();</para>
            <para>    }</para>
            <para>}</para>
            <para>See also event(), hide(), close(), QCloseEvent, and Application Example.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.ContextMenuEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a subclass to receive widget context menu events.</para>
            <para>The handler is called when the widget's contextMenuPolicy is Qt::DefaultContextMenu.</para>
            <para>The default implementation ignores the context event. See the QContextMenuEvent documentation for more details.</para>
            <para>See also event(), QContextMenuEvent, and customContextMenuRequested().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.TabletEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a subclass to receive tablet events for the widget.</para>
            <para>If you reimplement this handler, it is very important that you ignore() the event if you do not handle it, so that the widget's parent can interpret it.</para>
            <para>The default implementation ignores the event.</para>
            <para>See also QTabletEvent::ignore(), QTabletEvent::accept(), event(), and QTabletEvent.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.ActionEvent">
            <summary>
            <para>This event handler is called with the given event whenever the widget's actions are changed.</para>
            <para>See also addAction(), insertAction(), removeAction(), actions(), and QActionEvent.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.DragEnterEvent">
            <summary>
            <para>This event handler is called when a drag is in progress and the mouse enters this widget. The event is passed in the event parameter.</para>
            <para>If the event is ignored, the widget won't receive any drag move events.</para>
            <para>See the Drag-and-drop documentation for an overview of how to provide drag-and-drop in your application.</para>
            <para>See also QDrag and QDragEnterEvent.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.DragMoveEvent">
            <summary>
            <para>This event handler is called if a drag is in progress, and when any of the following conditions occur: the cursor enters this widget, the cursor moves within this widget, or a modifier key is pressed on the keyboard while this widget has the focus. The event is passed in the event parameter.</para>
            <para>See the Drag-and-drop documentation for an overview of how to provide drag-and-drop in your application.</para>
            <para>See also QDrag and QDragMoveEvent.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.DragLeaveEvent">
            <summary>
            <para>This event handler is called when a drag is in progress and the mouse leaves this widget. The event is passed in the event parameter.</para>
            <para>See the Drag-and-drop documentation for an overview of how to provide drag-and-drop in your application.</para>
            <para>See also QDrag and QDragLeaveEvent.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.DropEvent">
            <summary>
            <para>This event handler is called when the drag is dropped on this widget. The event is passed in the event parameter.</para>
            <para>See the Drag-and-drop documentation for an overview of how to provide drag-and-drop in your application.</para>
            <para>See also QDrag and QDropEvent.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.ShowEvent">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive widget show events which are passed in the event parameter.</para>
            <para>Non-spontaneous show events are sent to widgets immediately before they are shown. The spontaneous show events of windows are delivered afterwards.</para>
            <para>Note: A widget receives spontaneous show and hide events when its mapping status is changed by the window system, e.g. a spontaneous hide event when the user minimizes the window, and a spontaneous show event when the window is restored again. After receiving a spontaneous hide event, a widget is still considered visible in the sense of isVisible().</para>
            <para>See also visible, event(), and QShowEvent.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.HideEvent">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive widget hide events. The event is passed in the event parameter.</para>
            <para>Hide events are sent to widgets immediately after they have been hidden.</para>
            <para>Note: A widget receives spontaneous show and hide events when its mapping status is changed by the window system, e.g. a spontaneous hide event when the user minimizes the window, and a spontaneous show event when the window is restored again. After receiving a spontaneous hide event, a widget is still considered visible in the sense of isVisible().</para>
            <para>See also visible, event(), and QHideEvent.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.ChangeEvent">
            <summary>
            <para>This event handler can be reimplemented to handle state changes.</para>
            <para>The state being changed in this event can be retrieved through the event supplied.</para>
            <para>Change events include: QEvent::ToolBarChange, QEvent::ActivationChange, QEvent::EnabledChange, QEvent::FontChange, QEvent::StyleChange, QEvent::PaletteChange, QEvent::WindowTitleChange, QEvent::IconTextChange, QEvent::ModifiedChange, QEvent::MouseTrackingChange, QEvent::ParentChange, QEvent::WindowStateChange, QEvent::LanguageChange, QEvent::LocaleChange, QEvent::LayoutDirectionChange, QEvent::ReadOnlyChange.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWidget.InputMethodEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a subclass to receive Input Method composition events. This handler is called when the state of the input method changes.</para>
            <para>Note that when creating custom text editing widgets, the Qt::WA_InputMethodEnabled window attribute must be set explicitly (using the setAttribute() function) in order to receive input method events.</para>
            <para>The default implementation calls event-&gt;ignore(), which rejects the Input Method event. See the QInputMethodEvent documentation for more details.</para>
            <para>See also event() and QInputMethodEvent.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Style">
            <summary>
            <para>See also QWidget::setStyle(), QApplication::setStyle(), and
            QApplication::style().</para>
            <para></para>
            <para>Sets the widget's GUI style to style. The ownership of the style
            object is not transferred.</para>
            <para>If no style is set, the widget uses the application's style,
            QApplication::style() instead.</para>
            <para>Setting a widget's style has no effect on existing or future
            child widgets.</para>
            <para>Warning: This function is particularly useful for demonstration
            purposes, where you want to show Qt's styling capabilities. Real
            applications should avoid it and use one consistent GUI style
            instead.</para>
            <para>Warning: Qt style sheets are currently not supported for custom
            QStyle subclasses. We plan to address this in some future release.</para>
            <para>See also style(), QStyle, QApplication::style(), and
            QApplication::setStyle().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.WindowModality">
            <summary>
            <para>This property holds which windows are blocked by the modal
            widget.</para>
            <para>This property only makes sense for windows. A modal widget
            prevents widgets in other windows from getting input. The value of this
            property controls which windows are blocked when the widget is visible.
            Changing this property while the window is visible has no effect; you must
            hide() the widget first, then show() it again.</para>
            <para>By default, this property is Qt::NonModal.</para>
            <para>This property was introduced in  Qt 4.1.</para>
            <para>See also isWindow(), QWidget::modal, and QDialog.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Enabled">
            <summary>
            <para>This property holds whether the widget is enabled.</para>
            <para>In general an enabled widget handles keyboard and mouse events; a
            disabled widget does not. An exception is made with QAbstractButton.</para>
            <para>Some widgets display themselves differently when they are
            disabled. For example a button might draw its label grayed out. If your
            widget needs to know when it becomes enabled or disabled, you can use the
            changeEvent() with type QEvent::EnabledChange.</para>
            <para>Disabling a widget implicitly disables all its children. Enabling
            respectively enables all child widgets unless they have been explicitly
            disabled. It it not possible to explicitly enable a child widget which is
            not a window while its parent widget remains disabled.</para>
            <para>By default, this property is true.</para>
            <para>See also isEnabledTo(), QKeyEvent, QMouseEvent, and
            changeEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.WindowModified">
            <summary>
            <para>This property holds whether the document shown in the window has
            unsaved changes.</para>
            <para>A modified window is a window whose content has changed but has
            not been saved to disk. This flag will have different effects varied by the
            platform. On Mac OS X the close button will have a modified look; on other
            platforms, the window title will have an '*' (asterisk).</para>
            <para>The window title must contain a &quot;[*]&quot; placeholder,
            which indicates where the '*' should appear. Normally, it should appear
            right after the file name (e.g., &quot;document1.txt[*] - Text
            Editor&quot;). If the window isn't modified, the placeholder is simply
            removed.</para>
            <para>Note that if a widget is set as modified, all its ancestors will
            also be set as modified. However, if you call setWindowModified(false) on a
            widget, this will not propagate to its parent because other children of the
            parent might have been modified.</para>
            <para>See also windowTitle, Application Example, SDI Example, and MDI
            Example.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.MinimumSize">
            <summary>
            <para>This property holds the widget's minimum size.</para>
            <para>The widget cannot be resized to a smaller size than the minimum
            widget size. The widget's size is forced to the minimum size if the current
            size is smaller.</para>
            <para>The minimum size set by this function will override the minimum
            size defined by QLayout. In order to unset the minimum size, use a value of
            QSize(0, 0).</para>
            <para>By default, this property contains a size with zero width and
            height.</para>
            <para>See also minimumWidth, minimumHeight, maximumSize, and
            sizeIncrement.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.MaximumSize">
            <summary>
            <para>This property holds the widget's maximum size in pixels.</para>
            <para>The widget cannot be resized to a larger size than the maximum
            widget size.</para>
            <para>By default, this property contains a size in which both width and
            height have values of 16777215.</para>
            <para>Note: The definition of the QWIDGETSIZE_MAX macro limits the
            maximum size of widgets.</para>
            <para>See also maximumWidth, maximumHeight, minimumSize, and
            sizeIncrement.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.MinimumWidth">
            <summary>
            <para>This property holds the widget's minimum width in pixels.</para>
            <para>This property corresponds to the width held by the minimumSize
            property.</para>
            <para>By default, this property has a value of 0.</para>
            <para>See also minimumSize and minimumHeight.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.MinimumHeight">
            <summary>
            <para>This property holds the widget's minimum height in pixels.</para>
            <para>This property corresponds to the height held by the minimumSize
            property.</para>
            <para>By default, this property has a value of 0.</para>
            <para>See also minimumSize and minimumWidth.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.MaximumWidth">
            <summary>
            <para>This property holds the widget's maximum width in pixels.</para>
            <para>This property corresponds to the width held by the maximumSize
            property.</para>
            <para>By default, this property contains a value of 16777215.</para>
            <para>Note: The definition of the QWIDGETSIZE_MAX macro limits the
            maximum size of widgets.</para>
            <para>See also maximumSize and maximumHeight.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.MaximumHeight">
            <summary>
            <para>This property holds the widget's maximum height in pixels.</para>
            <para>This property corresponds to the height held by the maximumSize
            property.</para>
            <para>By default, this property contains a value of 16777215.</para>
            <para>Note: The definition of the QWIDGETSIZE_MAX macro limits the
            maximum size of widgets.</para>
            <para>See also maximumSize and maximumWidth.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.SizeIncrement">
            <summary>
            <para>This property holds the size increment of the widget.</para>
            <para>When the user resizes the window, the size will move in steps of
            sizeIncrement().width() pixels horizontally and sizeIncrement.height()
            pixels vertically, with baseSize() as the basis. Preferred widget sizes are
            for non-negative integers i and j:</para>
            <para>width = baseSize().width() + i * sizeIncrement().width();</para>
            <para>height = baseSize().height() + j *
            sizeIncrement().height();</para>
            <para>Note that while you can set the size increment for all widgets,
            it only affects windows.</para>
            <para>By default, this property contains a size with zero width and
            height.</para>
            <para>Warning: The size increment has no effect under Windows, and may
            be disregarded by the window manager on X11.</para>
            <para>See also size, minimumSize, and maximumSize.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.BaseSize">
            <summary>
            <para>This property holds the base size of the widget.</para>
            <para>The base size is used to calculate a proper widget size if the
            widget defines sizeIncrement().</para>
            <para>By default, for a newly-created widget, this property contains a
            size with zero width and height.</para>
            <para>See also setSizeIncrement().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Palette">
            <summary>
            <para>This property holds the widget's palette.</para>
            <para>This property describes the widget's palette. The palette is used
            by the widget's style when rendering standard components, and is available
            as a means to ensure that custom widgets can maintain consistency with the
            native platform's look and feel. It's common that different platforms, or
            different styles, have different palettes.</para>
            <para>When you assign a new palette to a widget, the color roles from
            this palette are combined with the widget's default palette to form the
            widget's final palette. The palette entry for the widget's background role
            is used to fill the widget's background (see QWidget::autoFillBackground),
            and the foreground role initializes QPainter's pen.</para>
            <para>The default depends on the system environment. QApplication
            maintains a system/theme palette which serves as a default for all widgets.
            There may also be special palette defaults for certain types of widgets
            (e.g., on Windows XP and Vista, all classes that derive from QMenuBar have
            a special default palette). You can also define default palettes for
            widgets yourself by passing a custom palette and the name of a widget to
            QApplication::setPalette(). Finally, the style always has the option of
            polishing the palette as it's assigned (see QStyle::polish()).</para>
            <para>QWidget propagates explicit palette roles from parent to child.
            If you assign a brush or color to a specific role on a palette and assign
            that palette to a widget, that role will propagate to all the widget's
            children, overriding any system defaults for that role. Note that palettes
            by default don't propagate to windows (see isWindow()) unless the
            Qt::WA_WindowPropagation attribute is enabled.</para>
            <para>QWidget's palette propagation is similar to its font
            propagation.</para>
            <para>The current style, which is used to render the content of all
            standard Qt widgets, is free to choose colors and brushes from the widget
            palette, or in some cases, to ignore the palette (partially, or
            completely). In particular, certain styles like GTK style, Mac style,
            Windows XP, and Vista style, depend on third party APIs to render the
            content of widgets, and these styles typically do not follow the palette.
            Because of this, assigning roles to a widget's palette is not guaranteed to
            change the appearance of the widget. Instead, you may choose to apply a
            styleSheet. You can refer to our Knowledge Base article here for more
            information.</para>
            <para>Warning: Do not use this function in conjunction with Qt Style
            Sheets. When using style sheets, the palette of a widget can be customized
            using the &quot;color&quot;, &quot;background-color&quot;,
            &quot;selection-color&quot;, &quot;selection-background-color&quot; and
            &quot;alternate-background-color&quot;.</para>
            <para>See also QApplication::palette() and QWidget::font().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.BackgroundRole">
            <summary>
            <para>Returns the background role of the widget.</para>
            <para>The background role defines the brush from the widget's palette
            that is used to render the background.</para>
            <para>If no explicit background role is set, the widget inherts its
            parent widget's background role.</para>
            <para>See also setBackgroundRole() and foregroundRole().</para>
            <para></para>
            <para>Sets the background role of the widget to role.</para>
            <para>The background role defines the brush from the widget's palette
            that is used to render the background.</para>
            <para>If role is QPalette::NoRole, then the widget inherits its
            parent's background role.</para>
            <para>Note that styles are free to choose any color from the palette.
            You can modify the palette or set a style sheet if you don't achieve the
            result you want with setBackgroundRole().</para>
            <para>See also backgroundRole() and foregroundRole().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.ForegroundRole">
            <summary>
            <para>Returns the foreground role.</para>
            <para>The foreground role defines the color from the widget's palette
            that is used to draw the foreground.</para>
            <para>If no explicit foreground role is set, the function returns a
            role that contrasts with the background role.</para>
            <para>See also setForegroundRole() and backgroundRole().</para>
            <para></para>
            <para>Sets the foreground role of the widget to role.</para>
            <para>The foreground role defines the color from the widget's palette
            that is used to draw the foreground.</para>
            <para>If role is QPalette::NoRole, the widget uses a foreground role
            that contrasts with the background role.</para>
            <para>Note that styles are free to choose any color from the palette.
            You can modify the palette or set a style sheet if you don't achieve the
            result you want with setForegroundRole().</para>
            <para>See also foregroundRole() and backgroundRole().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Font">
            <summary>
            <para>This property holds the font currently set for the widget.</para>
            <para>This property describes the widget's requested font. The font is
            used by the widget's style when rendering standard components, and is
            available as a means to ensure that custom widgets can maintain consistency
            with the native platform's look and feel. It's common that different
            platforms, or different styles, define different fonts for an
            application.</para>
            <para>When you assign a new font to a widget, the properties from this
            font are combined with the widget's default font to form the widget's final
            font. You can call fontInfo() to get a copy of the widget's final font. The
            final font is also used to initialize QPainter's font.</para>
            <para>The default depends on the system environment. QApplication
            maintains a system/theme font which serves as a default for all widgets.
            There may also be special font defaults for certain types of widgets. You
            can also define default fonts for widgets yourself by passing a custom font
            and the name of a widget to QApplication::setFont(). Finally, the font is
            matched against Qt's font database to find the best match.</para>
            <para>QWidget propagates explicit font properties from parent to child.
            If you change a specific property on a font and assign that font to a
            widget, that property will propagate to all the widget's children,
            overriding any system defaults for that property. Note that fonts by
            default don't propagate to windows (see isWindow()) unless the
            Qt::WA_WindowPropagation attribute is enabled.</para>
            <para>QWidget's font propagation is similar to its palette
            propagation.</para>
            <para>The current style, which is used to render the content of all
            standard Qt widgets, is free to choose to use the widget font, or in some
            cases, to ignore it (partially, or completely). In particular, certain
            styles like GTK style, Mac style, Windows XP, and Vista style, apply
            special modifications to the widget font to match the platform's native
            look and feel. Because of this, assigning properties to a widget's font is
            not guaranteed to change the appearance of the widget. Instead, you may
            choose to apply a styleSheet.</para>
            <para>Note: If Qt Style Sheets are used on the same widget as
            setFont(), style sheets will take precedence if the settings
            conflict.</para>
            <para>See also fontInfo() and fontMetrics().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Cursor">
            <summary>
            <para>This property holds the cursor shape for this widget.</para>
            <para>The mouse cursor will assume this shape when it's over this
            widget. See the list of predefined cursor objects for a range of useful
            shapes.</para>
            <para>An editor widget might use an I-beam cursor:</para>
            <para>setCursor(Qt::IBeamCursor);</para>
            <para>If no cursor has been set, or after a call to unsetCursor(), the
            parent's cursor is used.</para>
            <para>By default, this property contains a cursor with the
            Qt::ArrowCursor shape.</para>
            <para>Some underlying window implementations will reset the cursor if
            it leaves a widget even if the mouse is grabbed. If you want to have a
            cursor set for all widgets, even when outside the window, consider
            QApplication::setOverrideCursor().</para>
            <para>See also QApplication::setOverrideCursor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Mask">
            <summary>
            <para>Returns the mask currently set on a widget. If no mask is set the
            return value will be an empty region.</para>
            <para>See also setMask(), clearMask(), QRegion::isEmpty(), and Shaped
            Clock Example.</para>
            <para></para>
            <para>This is an overloaded function.</para>
            <para>Causes only the parts of the widget which overlap region to be
            visible. If the region includes pixels outside the rect() of the widget,
            window system controls in that area may or may not be visible, depending on
            the platform.</para>
            <para>Note that this effect can be slow if the region is particularly
            complex.</para>
            <para>See also windowOpacity.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.GraphicsEffect">
            <summary>
            <para>The graphicsEffect function returns a pointer to the widget's
            graphics effect.</para>
            <para>If the widget has no graphics effect, 0 is returned.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setGraphicsEffect().</para>
            <para></para>
            <para>The setGraphicsEffect function is for setting the widget's
            graphics effect.</para>
            <para>Sets effect as the widget's effect. If there already is an effect
            installed on this widget, QWidget will delete the existing effect before
            installing the new effect.</para>
            <para>If effect is the installed effect on a different widget,
            setGraphicsEffect() will remove the effect from the widget and install it
            on this widget.</para>
            <para>QWidget takes ownership of effect.</para>
            <para>Note: This function will apply the effect on itself and all its
            children.</para>
            <para>Note: Graphics effects are not supported for OpenGL-based
            widgets, such as QGLWidget, QOpenGLWidget and QQuickWidget.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also graphicsEffect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.WindowTitle">
            <summary>
            <para>This property holds the window title (caption).</para>
            <para>This property only makes sense for top-level widgets, such as
            windows and dialogs. If no caption has been set, the title is based of the
            windowFilePath. If neither of these is set, then the title is an empty
            string.</para>
            <para>If you use the windowModified mechanism, the window title must
            contain a &quot;[*]&quot; placeholder, which indicates where the '*' should
            appear. Normally, it should appear right after the file name (e.g.,
            &quot;document1.txt[*] - Text Editor&quot;). If the windowModified property
            is false (the default), the placeholder is simply removed.</para>
            <para>On some desktop platforms (including Windows and Unix), the
            application name (from QGuiApplication::applicationDisplayName) is added at
            the end of the window title, if set. This is done by the QPA plugin, so it
            is shown to the user, but isn't part of the windowTitle string.</para>
            <para>See also windowIcon, windowIconText, windowModified, and
            windowFilePath.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.StyleSheet">
            <summary>
            <para>This property holds the widget's style sheet.</para>
            <para>The style sheet contains a textual description of customizations
            to the widget's style, as described in the Qt Style Sheets document.</para>
            <para>Since Qt 4.5, Qt style sheets fully supports Mac OS X.</para>
            <para>Warning: Qt style sheets are currently not supported for custom
            QStyle subclasses. We plan to address this in some future release.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also setStyle(), QApplication::styleSheet, and Qt Style
            Sheets.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.WindowIcon">
            <summary>
            <para>This property holds the widget's icon.</para>
            <para>This property only makes sense for windows. If no icon has been
            set, windowIcon() returns the application icon
            (QApplication::windowIcon()).</para>
            <para>See also windowIconText and windowTitle.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.WindowIconText">
            <summary>
            <para>This property holds the widget's icon text.</para>
            <para>This property only makes sense for windows. If no icon text has
            been set, this functions returns an empty string.</para>
            <para>See also windowIcon and windowTitle.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.WindowRole">
            <summary>
            <para>Returns the window's role, or an empty string.</para>
            <para>See also setWindowRole(), windowIcon, and windowTitle.</para>
            <para></para>
            <para>Sets the window's role to role. This only makes sense for windows
            on X11.</para>
            <para>See also windowRole().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.WindowFilePath">
            <summary>
            <para>This property holds the file path associated with a
            widget.</para>
            <para>This property only makes sense for windows. It associates a file
            path with a window. If you set the file path, but have not set the window
            title, Qt sets the window title to the file name of the specified path,
            obtained using QFileInfo::fileName().</para>
            <para>If the window title is set at any point, then the window title
            takes precedence and will be shown instead of the file path string.</para>
            <para>Additionally, on Mac OS X, this has an added benefit that it sets
            the proxy icon for the window, assuming that the file path exists.</para>
            <para>If no file path is set, this property contains an empty
            string.</para>
            <para>By default, this property contains an empty string.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also windowTitle and windowIcon.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.WindowOpacity">
            <summary>
            <para>This property holds the level of opacity for the window.</para>
            <para>The valid range of opacity is from 1.0 (completely opaque) to 0.0
            (completely transparent).</para>
            <para>By default the value of this property is 1.0.</para>
            <para>This feature is available on Embedded Linux, Mac OS X, Windows,
            and X11 platforms that support the Composite extension.</para>
            <para>This feature is not available on Windows CE.</para>
            <para>Note that under X11 you need to have a composite manager running,
            and the X11 specific _NET_WM_WINDOW_OPACITY atom needs to be supported by
            the window manager you are using.</para>
            <para>Warning: Changing this property from opaque to transparent might
            issue a paint event that needs to be processed before the window is
            displayed correctly. This affects mainly the use of QPixmap::grabWindow().
            Also note that semi-transparent windows update and resize significantly
            slower than opaque windows.</para>
            <para>See also setMask().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.ToolTip">
            <summary>
            <para>This property holds the widget's tooltip.</para>
            <para>Note that by default tooltips are only shown for widgets that are
            children of the active window. You can change this behavior by setting the
            attribute Qt::WA_AlwaysShowToolTips on the window, not on the widget with
            the tooltip.</para>
            <para>If you want to control a tooltip's behavior, you can intercept
            the event() function and catch the QEvent::ToolTip event (e.g., if you want
            to customize the area for which the tooltip should be shown).</para>
            <para>By default, this property contains an empty string.</para>
            <para>See also QToolTip, statusTip, and whatsThis.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.ToolTipDuration">
            <summary>
            <para>This property holds the widget's tooltip duration.</para>
            <para>Specifies how long time the tooltip will be displayed, in
            milliseconds. If the value is -1 (default) the duration is calculated
            depending on the length of the tooltip.</para>
            <para>This property was introduced in  Qt 5.2.</para>
            <para>See also toolTip.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.StatusTip">
            <summary>
            <para>This property holds the widget's status tip.</para>
            <para>By default, this property contains an empty string.</para>
            <para>See also toolTip and whatsThis.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.WhatsThis">
            <summary>
            <para>This property holds the widget's What's This help text.</para>
            <para>By default, this property contains an empty string.</para>
            <para>See also QWhatsThis, QWidget::toolTip, and
            QWidget::statusTip.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.LayoutDirection">
            <summary>
            <para>This property holds the layout direction for this widget.</para>
            <para>By default, this property is set to Qt::LeftToRight.</para>
            <para>When the layout direction is set on a widget, it will propagate
            to the widget's children, but not to a child that is a window and not to a
            child for which setLayoutDirection() has been explicitly called. Also,
            child widgets added after setLayoutDirection() has been called for the
            parent do not inherit the parent's layout direction.</para>
            <para>This method no longer affects text layout direction since Qt
            4.7.</para>
            <para>See also QApplication::layoutDirection.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Locale">
            <summary>
            <para>This property holds the widget's locale.</para>
            <para>As long as no special locale has been set, this is either the
            parent's locale or (if this widget is a top level widget), the default
            locale.</para>
            <para>If the widget displays dates or numbers, these should be
            formatted using the widget's locale.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            <para>See also QLocale and QLocale::setDefault().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.FocusPolicy">
            <summary>
            <para>This property holds the way the widget accepts keyboard
            focus.</para>
            <para>The policy is Qt::TabFocus if the widget accepts keyboard focus
            by tabbing, Qt::ClickFocus if the widget accepts focus by clicking,
            Qt::StrongFocus if it accepts both, and Qt::NoFocus (the default) if it
            does not accept focus at all.</para>
            <para>You must enable keyboard focus for a widget if it processes
            keyboard events. This is normally done from the widget's constructor. For
            instance, the QLineEdit constructor calls
            setFocusPolicy(Qt::StrongFocus).</para>
            <para>If the widget has a focus proxy, then the focus policy will be
            propagated to it.</para>
            <para>See also focusInEvent(), focusOutEvent(), keyPressEvent(),
            keyReleaseEvent(), and enabled.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.FocusProxy">
            <summary>
            <para>Returns the focus proxy, or 0 if there is no focus proxy.</para>
            <para>See also setFocusProxy().</para>
            <para></para>
            <para>Sets the widget's focus proxy to widget w. If w is 0, the
            function resets this widget to have no focus proxy.</para>
            <para>Some widgets can &quot;have focus&quot;, but create a child
            widget, such as QLineEdit, to actually handle the focus. In this case, the
            widget can set the line edit to be its focus proxy.</para>
            <para>setFocusProxy() sets the widget which will actually get focus
            when &quot;this widget&quot; gets it. If there is a focus proxy, setFocus()
            and hasFocus() operate on the focus proxy.</para>
            <para>See also focusProxy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.ContextMenuPolicy">
            <summary>
            <para>This property holds how the widget shows a context menu.</para>
            <para>The default value of this property is Qt::DefaultContextMenu,
            which means the contextMenuEvent() handler is called. Other values are
            Qt::NoContextMenu, Qt::PreventContextMenu, Qt::ActionsContextMenu, and
            Qt::CustomContextMenu. With Qt::CustomContextMenu, the signal
            customContextMenuRequested() is emitted.</para>
            <para>See also contextMenuEvent(), customContextMenuRequested(), and
            actions().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.UpdatesEnabled">
            <summary>
            <para>This property holds whether updates are enabled.</para>
            <para>An updates enabled widget receives paint events and has a system
            background; a disabled widget does not. This also implies that calling
            update() and repaint() has no effect if updates are disabled.</para>
            <para>By default, this property is true.</para>
            <para>setUpdatesEnabled() is normally used to disable updates for a
            short period of time, for instance to avoid screen flicker during large
            changes. In Qt, widgets normally do not generate screen flicker, but on X11
            the server might erase regions on the screen when widgets get hidden before
            they can be replaced by other widgets. Disabling updates solves
            this.</para>
            <para>Example:</para>
            <para>setUpdatesEnabled(false);</para>
            <para>bigVisualChanges();</para>
            <para>setUpdatesEnabled(true);</para>
            <para>Disabling a widget implicitly disables all its children. Enabling
            a widget enables all child widgets except top-level widgets or those that
            have been explicitly disabled. Re-enabling updates implicitly calls
            update() on the widget.</para>
            <para>See also paintEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Visible">
            <summary>
            <para>This property holds whether the widget is visible.</para>
            <para>Calling setVisible(true) or show() sets the widget to visible
            status if all its parent widgets up to the window are visible. If an
            ancestor is not visible, the widget won't become visible until all its
            ancestors are shown. If its size or position has changed, Qt guarantees
            that a widget gets move and resize events just before it is shown. If the
            widget has not been resized yet, Qt will adjust the widget's size to a
            useful default using adjustSize().</para>
            <para>Calling setVisible(false) or hide() hides a widget explicitly. An
            explicitly hidden widget will never become visible, even if all its
            ancestors become visible, unless you show it.</para>
            <para>A widget receives show and hide events when its visibility status
            changes. Between a hide and a show event, there is no need to waste CPU
            cycles preparing or displaying information to the user. A video
            application, for example, might simply stop generating new frames.</para>
            <para>A widget that happens to be obscured by other windows on the
            screen is considered to be visible. The same applies to iconified windows
            and windows that exist on another virtual desktop (on platforms that
            support this concept). A widget receives spontaneous show and hide events
            when its mapping status is changed by the window system, e.g. a spontaneous
            hide event when the user minimizes the window, and a spontaneous show event
            when the window is restored again.</para>
            <para>You almost never have to reimplement the setVisible() function.
            If you need to change some settings before a widget is shown, use
            showEvent() instead. If you need to do some delayed initialization use the
            Polish event delivered to the event() function.</para>
            <para>See also show(), hide(), isHidden(), isVisibleTo(),
            isMinimized(), showEvent(), and hideEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Hidden">
            <summary>
            <para>Returns true if the widget is hidden, otherwise returns
            false.</para>
            <para>A hidden widget will only become visible when show() is called on
            it. It will not be automatically shown when the parent is shown.</para>
            <para>To check visibility, use !isVisible() instead (notice the
            exclamation mark).</para>
            <para>isHidden() implies !isVisible(), but a widget can be not visible
            and not hidden at the same time. This is the case for widgets that are
            children of widgets that are not visible.</para>
            <para>Widgets are hidden if:</para>
            <para></para>
            <para>they were created as independent windows,</para>
            <para>they were created as children of visible widgets,</para>
            <para>hide() or setVisible(false) was called.</para>
            <para></para>
            <para></para>
            <para>Convenience function, equivalent to setVisible(!hidden).</para>
            <para>See also isHidden().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Geometry">
            <summary>
            <para>This property holds the geometry of the widget relative to its
            parent and excluding the window frame.</para>
            <para>When changing the geometry, the widget, if visible, receives a
            move event (moveEvent()) and/or a resize event (resizeEvent()) immediately.
            If the widget is not currently visible, it is guaranteed to receive
            appropriate events before it is shown.</para>
            <para>The size component is adjusted if it lies outside the range
            defined by minimumSize() and maximumSize().</para>
            <para>Warning: Calling setGeometry() inside resizeEvent() or
            moveEvent() can lead to infinite recursion.</para>
            <para>See the Window Geometry documentation for an overview of geometry
            issues with windows.</para>
            <para>By default, this property contains a value that depends on the
            user's platform and screen geometry.</para>
            <para>See also frameGeometry(), rect(), move(), resize(), moveEvent(),
            resizeEvent(), minimumSize(), and maximumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.WindowState">
            <summary>
            <para>Returns the current window state. The window state is a OR'ed
            combination of Qt::WindowState: Qt::WindowMinimized, Qt::WindowMaximized,
            Qt::WindowFullScreen, and Qt::WindowActive.</para>
            <para>See also Qt::WindowState and setWindowState().</para>
            <para></para>
            <para>Sets the window state to windowState. The window state is a OR'ed
            combination of Qt::WindowState: Qt::WindowMinimized, Qt::WindowMaximized,
            Qt::WindowFullScreen, and Qt::WindowActive.</para>
            <para>If the window is not visible (i.e. isVisible() returns false),
            the window state will take effect when show() is called. For visible
            windows, the change is immediate. For example, to toggle between
            full-screen and normal mode, use the following code:</para>
            <para>w-&gt;setWindowState(w-&gt;windowState() ^
            Qt::WindowFullScreen);</para>
            <para>In order to restore and activate a minimized window (while
            preserving its maximized and/or full-screen state), use the
            following:</para>
            <para>w-&gt;setWindowState((w-&gt;windowState() &amp;
            ~Qt::WindowMinimized) | Qt::WindowActive);</para>
            <para>Calling this function will hide the widget. You must call show()
            to make the widget visible again.</para>
            <para>Note: On some window systems Qt::WindowActive is not immediate,
            and may be ignored in certain cases.</para>
            <para>When the window state changes, the widget receives a
            changeEvent() of type QEvent::WindowStateChange.</para>
            <para>See also Qt::WindowState and windowState().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.SizePolicy">
            <summary>
            <para>This property holds the default layout behavior of the
            widget.</para>
            <para>If there is a QLayout that manages this widget's children, the
            size policy specified by that layout is used. If there is no such QLayout,
            the result of this function is used.</para>
            <para>The default policy is Preferred/Preferred, which means that the
            widget can be freely resized, but prefers to be the size sizeHint()
            returns. Button-like widgets set the size policy to specify that they may
            stretch horizontally, but are fixed vertically. The same applies to
            lineedit controls (such as QLineEdit, QSpinBox or an editable QComboBox)
            and other horizontally orientated widgets (such as QProgressBar).
            QToolButton's are normally square, so they allow growth in both directions.
            Widgets that support different directions (such as QSlider, QScrollBar or
            QHeader) specify stretching in the respective direction only. Widgets that
            can provide scroll bars (usually subclasses of QScrollArea) tend to specify
            that they can use additional space, and that they can make do with less
            than sizeHint().</para>
            <para>See also sizeHint(), QLayout, QSizePolicy, and
            updateGeometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.ContentsMargins">
            <summary>
            <para>The contentsMargins function returns the widget's contents
            margins.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also getContentsMargins(), setContentsMargins(), and
            contentsRect().</para>
            <para></para>
            <para>This is an overloaded function.</para>
            <para>The setContentsMargins function sets the margins around the
            widget's contents.</para>
            <para>Sets the margins around the contents of the widget to have the
            sizes determined by margins. The margins are used by the layout system, and
            may be used by subclasses to specify the area to draw in (e.g. excluding
            the frame).</para>
            <para>Changing the margins will trigger a resizeEvent().</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also contentsRect() and getContentsMargins().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Layout">
            <summary>
            <para>Returns the layout manager that is installed on this widget, or 0
            if no layout manager is installed.</para>
            <para>The layout manager sets the geometry of the widget's children
            that have been added to the layout.</para>
            <para>See also setLayout(), sizePolicy(), and Layout Management.</para>
            <para></para>
            <para>Sets the layout manager for this widget to layout.</para>
            <para>If there already is a layout manager installed on this widget,
            QWidget won't let you install another. You must first delete the existing
            layout manager (returned by layout()) before you can call setLayout() with
            the new layout.</para>
            <para>If layout is the layout manager on a different widget,
            setLayout() will reparent the layout and make it the layout manager for
            this widget.</para>
            <para>Example:</para>
            <para>    QVBoxLayout *layout = new QVBoxLayout;</para>
            <para>    layout-&gt;addWidget(formWidget);</para>
            <para>    setLayout(layout);</para>
            <para>An alternative to calling this function is to pass this widget to
            the layout's constructor.</para>
            <para>The QWidget will take ownership of layout.</para>
            <para>See also layout() and Layout Management.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.AcceptDrops">
            <summary>
            <para>This property holds whether drop events are enabled for this
            widget.</para>
            <para>Setting this property to true announces to the system that this
            widget may be able to accept drop events.</para>
            <para>If the widget is the desktop (windowType() == Qt::Desktop), this
            may fail if another application is using the desktop; you can call
            acceptDrops() to test if this occurs.</para>
            <para>Warning: Do not modify this property in a drag and drop event
            handler.</para>
            <para>By default, this property is false.</para>
            <para>See also Drag and Drop.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.WindowFlags">
            <summary>
            <para>Window flags are a combination of a type (e.g. Qt::Dialog) and
            zero or more hints to the window system (e.g.
            Qt::FramelessWindowHint).</para>
            <para>If the widget had type Qt::Widget or Qt::SubWindow and becomes a
            window (Qt::Window, Qt::Dialog, etc.), it is put at position (0, 0) on the
            desktop. If the widget is a window and becomes a Qt::Widget or
            Qt::SubWindow, it is put at position (0, 0) relative to its parent
            widget.</para>
            <para>Note: This function calls setParent() when changing the flags for
            a window, causing the widget to be hidden. You must call show() to make the
            widget visible again..</para>
            <para>See also windowType() and Window Flags Example.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.AutoFillBackground">
            <summary>
            <para>This property holds whether the widget background is filled
            automatically.</para>
            <para>If enabled, this property will cause Qt to fill the background of
            the widget before invoking the paint event. The color used is defined by
            the QPalette::Window color role from the widget's palette.</para>
            <para>In addition, Windows are always filled with QPalette::Window,
            unless the WA_OpaquePaintEvent or WA_NoSystemBackground attributes are
            set.</para>
            <para>This property cannot be turned off (i.e., set to false) if a
            widget's parent has a static gradient for its background.</para>
            <para>Warning: Use this property with caution in conjunction with Qt
            Style Sheets. When a widget has a style sheet with a valid background or a
            border-image, this property is automatically disabled.</para>
            <para>By default, this property is false.</para>
            <para>This property was introduced in  Qt 4.1.</para>
            <para>See also Qt::WA_OpaquePaintEvent, Qt::WA_NoSystemBackground, and
            Transparency and Double Buffering.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.InputMethodHints">
            <summary>
            <para>This property holds what input method specific hints the widget
            has.</para>
            <para>This is only relevant for input widgets. It is used by the input
            method to retrieve hints as to how the input method should operate. For
            example, if the Qt::ImhFormattedNumbersOnly flag is set, the input method
            may change its visual components to reflect that only numbers can be
            entered.</para>
            <para>Warning: Some widgets require certain flags in order to work as
            intended. To set a flag, do
            w-&gt;setInputMethodHints(w-&gt;inputMethodHints()|f) instead of
            w-&gt;setInputMethodHints(f).</para>
            <para>Note: The flags are only hints, so the particular input method
            implementation is free to ignore them. If you want to be sure that a
            certain type of characters are entered, you should also set a QValidator on
            the widget.</para>
            <para>The default value is Qt::ImhNone.</para>
            <para>This property was introduced in  Qt 4.6.</para>
            <para>See also inputMethodQuery().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.PaintEngine">
            <summary>
            <para>Reimplemented from QPaintDevice::paintEngine().</para>
            <para>Returns the widget's paint engine.</para>
            <para>Note that this function should not be called explicitly by the
            user, since it's meant for reimplementation purposes only. The function is
            called by Qt internally, and the default implementation may not always
            return a valid pointer.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.WinId">
            <summary>
            <para>Returns the window system identifier of the widget.</para>
            <para>Portable in principle, but if you use it you are probably about
            to do something non-portable. Be careful.</para>
            <para>If a widget is non-native (alien) and winId() is invoked on it,
            that widget will be provided a native handle.</para>
            <para>On Mac OS X, the type returned depends on which framework Qt was
            linked against. If Qt is using Carbon, the {WId} is actually an HIViewRef.
            If Qt is using Cocoa, {WId} is a pointer to an NSView.</para>
            <para>This value may change at run-time. An event with type
            QEvent::WinIdChange will be sent to the widget following a change in window
            system identifier.</para>
            <para>See also find().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.EffectiveWinId">
            <summary>
            <para>Returns the effective window system identifier of the widget,
            i.e. the native parent's window system identifier.</para>
            <para>If the widget is native, this function returns the native widget
            ID. Otherwise, the window ID of the first native parent widget, i.e., the
            top-level widget that contains this widget, is returned.</para>
            <para>Note: We recommend that you do not store this value as it is
            likely to change at run-time.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also nativeParentWidget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.IsTopLevel">
            <summary>
            <para>Use isWindow() instead.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.IsWindow">
            <summary>
            <para>Returns true if the widget is an independent window, otherwise
            returns false.</para>
            <para>A window is a widget that isn't visually the child of any other
            widget and that usually has a frame and a window title.</para>
            <para>A window can have a parent widget. It will then be grouped with
            its parent and deleted when the parent is deleted, minimized when the
            parent is minimized etc. If supported by the window manager, it will also
            have a common taskbar entry with its parent.</para>
            <para>QDialog and QMainWindow widgets are by default windows, even if a
            parent widget is specified in the constructor. This behavior is specified
            by the Qt::Window flag.</para>
            <para>See also window(), isModal(), and parentWidget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.IsModal">
            <summary>
            <para>This property holds whether the widget is a modal widget.</para>
            <para>This property only makes sense for windows. A modal widget
            prevents widgets in all other windows from getting any input.</para>
            <para>By default, this property is false.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isModal() const</para>
            <para></para>
            <para>See also isWindow(), windowModality, and QDialog.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.IsEnabledToTLW">
            <summary>
            <para>This function is deprecated. It is equivalent to
            isEnabled()</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.FrameGeometry">
            <summary>
            <para>This property holds geometry of the widget relative to its parent
            including any window frame.</para>
            <para>See the Window Geometry documentation for an overview of geometry
            issues with windows.</para>
            <para>By default, this property contains a value that depends on the
            user's platform and screen geometry.</para>
            <para>See also geometry(), x(), y(), and pos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.NormalGeometry">
            <summary>
            <para>This property holds the geometry of the widget as it will appear
            when shown as a normal (not maximized or full screen) top-level
            widget.</para>
            <para>For child widgets this property always holds an empty
            rectangle.</para>
            <para>By default, this property contains an empty rectangle.</para>
            <para>See also QWidget::windowState() and QWidget::geometry.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.X">
            <summary>
            <para>This property holds the x coordinate of the widget relative to
            its parent including any window frame.</para>
            <para>See the Window Geometry documentation for an overview of geometry
            issues with windows.</para>
            <para>By default, this property has a value of 0.</para>
            <para>See also frameGeometry, y, and pos.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Y">
            <summary>
            <para>This property holds the y coordinate of the widget relative to
            its parent and including any window frame.</para>
            <para>See the Window Geometry documentation for an overview of geometry
            issues with windows.</para>
            <para>By default, this property has a value of 0.</para>
            <para>See also frameGeometry, x, and pos.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Pos">
            <summary>
            <para>This property holds the position of the widget within its parent
            widget.</para>
            <para>If the widget is a window, the position is that of the widget on
            the desktop, including its frame.</para>
            <para>When changing the position, the widget, if visible, receives a
            move event (moveEvent()) immediately. If the widget is not currently
            visible, it is guaranteed to receive an event before it is shown.</para>
            <para>By default, this property contains a position that refers to the
            origin.</para>
            <para>Warning: Calling move() or setGeometry() inside moveEvent() can
            lead to infinite recursion.</para>
            <para>See the Window Geometry documentation for an overview of geometry
            issues with windows.</para>
            <para>See also frameGeometry, size, x(), and y().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.FrameSize">
            <summary>
            <para>This property holds the size of the widget including any window
            frame.</para>
            <para>By default, this property contains a value that depends on the
            user's platform and screen geometry.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Size">
            <summary>
            <para>This property holds the size of the widget excluding any window
            frame.</para>
            <para>If the widget is visible when it is being resized, it receives a
            resize event (resizeEvent()) immediately. If the widget is not currently
            visible, it is guaranteed to receive an event before it is shown.</para>
            <para>The size is adjusted if it lies outside the range defined by
            minimumSize() and maximumSize().</para>
            <para>By default, this property contains a value that depends on the
            user's platform and screen geometry.</para>
            <para>Warning: Calling resize() or setGeometry() inside resizeEvent()
            can lead to infinite recursion.</para>
            <para>Note: Setting the size to QSize(0, 0) will cause the widget to
            not appear on screen. This also applies to windows.</para>
            <para>See also pos, geometry, minimumSize, maximumSize, resizeEvent(),
            and adjustSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Width">
            <summary>
            <para>This property holds the width of the widget excluding any window
            frame.</para>
            <para>See the Window Geometry documentation for an overview of geometry
            issues with windows.</para>
            <para>Note: Do not use this function to find the width of a screen on a
            multiple screen desktop. Read this note for details.</para>
            <para>By default, this property contains a value that depends on the
            user's platform and screen geometry.</para>
            <para>See also geometry, height, and size.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Height">
            <summary>
            <para>This property holds the height of the widget excluding any window
            frame.</para>
            <para>See the Window Geometry documentation for an overview of geometry
            issues with windows.</para>
            <para>Note: Do not use this function to find the height of a screen on
            a multiple screen desktop. Read this note for details.</para>
            <para>By default, this property contains a value that depends on the
            user's platform and screen geometry.</para>
            <para>See also geometry, width, and size.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Rect">
            <summary>
            <para>This property holds the internal geometry of the widget excluding
            any window frame.</para>
            <para>The rect property equals QRect(0, 0, width(), height()).</para>
            <para>See the Window Geometry documentation for an overview of geometry
            issues with windows.</para>
            <para>By default, this property contains a value that depends on the
            user's platform and screen geometry.</para>
            <para>See also size.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.ChildrenRect">
            <summary>
            <para>This property holds the bounding rectangle of the widget's
            children.</para>
            <para>Hidden children are excluded.</para>
            <para>By default, for a widget with no children, this property contains
            a rectangle with zero width and height located at the origin.</para>
            <para>See also childrenRegion() and geometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.ChildrenRegion">
            <summary>
            <para>This property holds the combined region occupied by the widget's
            children.</para>
            <para>Hidden children are excluded.</para>
            <para>By default, for a widget with no children, this property contains
            an empty region.</para>
            <para>See also childrenRect(), geometry(), and mask().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.Window">
            <summary>
            <para>Returns the window for this widget, i.e. the next ancestor widget
            that has (or could have) a window-system frame.</para>
            <para>If the widget is a window, the widget itself is returned.</para>
            <para>Typical usage is changing the window title:</para>
            <para>aWidget-&gt;window()-&gt;setWindowTitle(&quot;New Window
            Title&quot;);</para>
            <para>See also isWindow().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.NativeParentWidget">
            <summary>
            <para>Returns the native parent for this widget, i.e. the next ancestor
            widget that has a system identifier, or 0 if it does not have any native
            parent.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also effectiveWinId().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.TopLevelWidget">
            <summary>
            <para>Use window() instead.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.FontMetrics">
            <summary>
            <para>Returns the font metrics for the widget's current font.
            Equivalent to QFontMetrics(widget-&gt;font()).</para>
            <para>See also font(), fontInfo(), and setFont().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.FontInfo">
            <summary>
            <para>Returns the font info for the widget's current font. Equivalent
            to QFontInfo(widget-&gt;font()).</para>
            <para>See also font(), fontMetrics(), and setFont().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.HasMouseTracking">
            <summary>
            <para>This property holds whether mouse tracking is enabled for the
            widget.</para>
            <para>If mouse tracking is disabled (the default), the widget only
            receives mouse move events when at least one mouse button is pressed while
            the mouse is being moved.</para>
            <para>If mouse tracking is enabled, the widget receives mouse move
            events even if no buttons are pressed.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasMouseTracking() const</para>
            <para> void 	setMouseTracking(bool enable)</para>
            <para></para>
            <para>See also mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.UnderMouse">
            <summary>
            <para>Returns true if the widget is under the mouse cursor; otherwise
            returns false.</para>
            <para>This value is not updated properly during drag and drop
            operations.</para>
            <para>See also enterEvent() and leaveEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.IsActiveWindow">
            <summary>
            <para>This property holds whether this widget's window is the active
            window.</para>
            <para>The active window is the window that contains the widget that has
            keyboard focus (The window may still have focus if it has no widgets or
            none of its widgets accepts keyboard focus).</para>
            <para>When popup windows are visible, this property is true for both
            the active window and for the popup.</para>
            <para>By default, this property is false.</para>
            <para>See also activateWindow() and
            QApplication::activeWindow().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.HasFocus">
            <summary>
            <para>This property holds whether this widget (or its focus proxy) has
            the keyboard input focus.</para>
            <para>By default, this property is false.</para>
            <para>Note: Obtaining the value of this property for a widget is
            effectively equivalent to checking whether QApplication::focusWidget()
            refers to the widget.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasFocus() const</para>
            <para></para>
            <para>See also setFocus(), clearFocus(), setFocusPolicy(), and
            QApplication::focusWidget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.MouseGrabber">
            <summary>
            <para>Returns the widget that is currently grabbing the mouse
            input.</para>
            <para>If no widget in this application is currently grabbing the mouse,
            0 is returned.</para>
            <para>See also grabMouse() and keyboardGrabber().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.KeyboardGrabber">
            <summary>
            <para>Returns the widget that is currently grabbing the keyboard
            input.</para>
            <para>If no widget in this application is currently grabbing the
            keyboard, 0 is returned.</para>
            <para>See also grabMouse() and mouseGrabber().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.GraphicsProxyWidget">
            <summary>
            <para>Returns the proxy widget for the corresponding embedded widget in
            a graphics view; otherwise returns 0.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also QGraphicsProxyWidget::createProxyForChildWidget() and
            QGraphicsScene::addWidget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.IsMinimized">
            <summary>
            <para>This property holds whether this widget is minimized
            (iconified).</para>
            <para>This property is only relevant for windows.</para>
            <para>By default, this property is false.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isMinimized() const</para>
            <para></para>
            <para>See also showMinimized(), visible, show(), hide(), showNormal(),
            and maximized.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.IsMaximized">
            <summary>
            <para>This property holds whether this widget is maximized.</para>
            <para>This property is only relevant for windows.</para>
            <para>Note: Due to limitations on some window systems, this does not
            always report the expected results (e.g., if the user on X11 maximizes the
            window via the window manager, Qt has no way of distinguishing this from
            any other resize). This is expected to improve as window manager protocols
            evolve.</para>
            <para>By default, this property is false.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isMaximized() const</para>
            <para></para>
            <para>See also windowState(), showMaximized(), visible, show(), hide(),
            showNormal(), and minimized.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.IsFullScreen">
            <summary>
            <para>This property holds whether the widget is shown in full screen
            mode.</para>
            <para>A widget in full screen mode occupies the whole screen area and
            does not display window decorations, such as a title bar.</para>
            <para>By default, this property is false.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isFullScreen() const</para>
            <para></para>
            <para>See also windowState(), minimized, and maximized.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.SizeHint">
            <summary>
            <para>This property holds the recommended size for the widget.</para>
            <para>If the value of this property is an invalid size, no size is
            recommended.</para>
            <para>The default implementation of sizeHint() returns an invalid size
            if there is no layout for this widget, and returns the layout's preferred
            size otherwise.</para>
            <para>See also QSize::isValid(), minimumSizeHint(), sizePolicy(),
            setMinimumSize(), and updateGeometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.MinimumSizeHint">
            <summary>
            <para>This property holds the recommended minimum size for the
            widget.</para>
            <para>If the value of this property is an invalid size, no minimum size
            is recommended.</para>
            <para>The default implementation of minimumSizeHint() returns an
            invalid size if there is no layout for this widget, and returns the
            layout's minimum size otherwise. Most built-in widgets reimplement
            minimumSizeHint().</para>
            <para>QLayout will never resize a widget to a size smaller than the
            minimum size hint unless minimumSize() is set or the size policy is set to
            QSizePolicy::Ignore. If minimumSize() is set, the minimum size hint will be
            ignored.</para>
            <para>See also QSize::isValid(), resize(), setMinimumSize(), and
            sizePolicy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.HasHeightForWidth">
            <summary>
            <para>Returns true if the widget's preferred height depends on its
            width; otherwise returns false.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.VisibleRegion">
            <summary>
            <para>Returns the unobscured region where paint events can
            occur.</para>
            <para>For visible widgets, this is an approximation of the area not
            covered by other widgets; otherwise, this is an empty region.</para>
            <para>The repaint() function calls this function if necessary, so in
            general you do not need to call it.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.ContentsRect">
            <summary>
            <para>Returns the area inside the widget's margins.</para>
            <para>See also setContentsMargins() and getContentsMargins().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.NextInFocusChain">
            <summary>
            <para>Returns the next widget in this widget's focus chain.</para>
            <para>See also previousInFocusChain().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.PreviousInFocusChain">
            <summary>
            <para>The previousInFocusChain function returns the previous widget in
            this widget's focus chain.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also nextInFocusChain().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.ParentWidget">
            <summary>
            <para>Returns the parent of this widget, or 0 if it does not have any
            parent widget.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.WindowType">
            <summary>
            <para>Returns the window type of this widget. This is identical to
            windowFlags() &amp; Qt::WindowType_Mask.</para>
            <para>See also windowFlags.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.BackingStore">
            <summary>
            <para>Returns the QBackingStore this widget will be drawn into.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidget.WindowHandle">
            <summary>
            <para>If this is a native widget, return the associated QWindow.
            Otherwise return null.</para>
            <para>Native widgets include toplevel widgets, QGLWidget, and child
            widgets on which winId() was called.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also winId().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QWidget.RenderFlag">
            <summary>
            <para>This enum describes how to render the widget when calling
            QWidget::render().</para>
            <para>This enum was introduced or modified in  Qt 4.3.</para>
            <para>The RenderFlags type is a typedef for QFlags&lt;RenderFlag&gt;.
            It stores an OR combination of RenderFlag values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QWidget.RenderFlag.DrawWindowBackground">
            <summary>If you enable this option, the widget's background is rendered into the target even if autoFillBackground is not set. By default, this option is enabled.</summary>
        </member>
        <member name="F:QtWidgets.QWidget.RenderFlag.DrawChildren">
            <summary>If you enable this option, the widget's children are rendered recursively into the target. By default, this option is enabled.</summary>
        </member>
        <member name="F:QtWidgets.QWidget.RenderFlag.IgnoreMask">
            <summary>If you enable this option, the widget's QWidget::mask() is ignored when rendering into the target. By default, this option is disabled.</summary>
        </member>
        <member name="T:QtWidgets.QFrame">
            <summary>
            <para>The QFrame class is the base class of widgets that can have a
            frame.</para>
            </summary>
            <remarks>
            <para>QMenu uses this to &quot;raise&quot; the menu above the
            surrounding screen. QProgressBar has a &quot;sunken&quot; look. QLabel has
            a flat look. The frames of widgets like these can be changed.</para>
            <para>QLabel label(...);</para>
            <para>label.setFrameStyle(QFrame::Panel | QFrame::Raised);</para>
            <para>label.setLineWidth(2);</para>
            <para></para>
            <para>QProgressBar pbar(...);</para>
            <para>label.setFrameStyle(QFrame::NoFrame);</para>
            <para>The QFrame class can also be used directly for creating simple
            placeholder frames without any contents.</para>
            <para>The frame style is specified by a frame shape and a shadow style
            that is used to visually separate the frame from surrounding widgets. These
            properties can be set together using the setFrameStyle() function and read
            with frameStyle().</para>
            <para>The frame shapes are NoFrame, Box, Panel, StyledPanel, HLine and
            VLine; the shadow styles are Plain, Raised and Sunken.</para>
            <para>A frame widget has three attributes that describe the thickness
            of the border: lineWidth, midLineWidth, and frameWidth.</para>
            <para></para>
            <para>The line width is the width of the frame border. It can be
            modified to customize the frame's appearance.</para>
            <para>The mid-line width specifies the width of an extra line in the
            middle of the frame, which uses a third color to obtain a special 3D
            effect. Notice that a mid-line is only drawn for Box, HLine and VLine
            frames that are raised or sunken.</para>
            <para>The frame width is determined by the frame style, and the
            frameWidth() function is used to obtain the value defined for the style
            used.</para>
            <para></para>
            <para>The margin between the frame and the contents of the frame can be
            customized with the QWidget::setContentsMargins() function.</para>
            <para></para>
            <para>This table shows some of the combinations of styles and line
            widths:</para>
            <para></para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QFrame.#ctor(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a frame widget with frame style NoFrame and a 1-pixel
            frame width.</para>
            <para>The parent and f arguments are passed to the QWidget
            constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFrame.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFrame.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFrame.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFrame.InitStyleOption(QtWidgets.QStyleOptionFrame)">
            <summary>
            <para>Initializes option with the values from this QFrame. This method
            is useful for subclasses when they need a QStyleOptionFrame but don't want
            to fill in all the information themselves.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFrame.FrameStyle">
            <summary>
            <para>Returns the frame style.</para>
            <para>The default value is QFrame::Plain.</para>
            <para>See also setFrameStyle(), frameShape(), and frameShadow().</para>
            <para></para>
            <para>Sets the frame style to style.</para>
            <para>The style is the bitwise OR between a frame shape and a frame
            shadow style. See the picture of the frames in the main class
            documentation.</para>
            <para>The frame shapes are given in QFrame::Shape and the shadow styles
            in QFrame::Shadow.</para>
            <para>If a mid-line width greater than 0 is specified, an additional
            line is drawn for Raised or Sunken Box, HLine, and VLine frames. The
            mid-color of the current color group is used for drawing middle
            lines.</para>
            <para>See also frameStyle().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFrame.FrameShape">
            <summary>
            <para>This property holds the frame shape value from the frame
            style.</para>
            <para>See also frameStyle() and frameShadow().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFrame.FrameShadow">
            <summary>
            <para>This property holds the frame shadow value from the frame
            style.</para>
            <para>See also frameStyle() and frameShape().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFrame.LineWidth">
            <summary>
            <para>This property holds the line width.</para>
            <para>Note that the total line width for frames used as separators
            (HLine and VLine) is specified by frameWidth.</para>
            <para>The default value is 1.</para>
            <para>See also midLineWidth and frameWidth.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFrame.MidLineWidth">
            <summary>
            <para>This property holds the width of the mid-line.</para>
            <para>The default value is 0.</para>
            <para>See also lineWidth and frameWidth.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFrame.FrameRect">
            <summary>
            <para>This property holds the frame's rectangle.</para>
            <para>The frame's rectangle is the rectangle the frame is drawn in. By
            default, this is the entire widget. Setting the rectangle does does not
            cause a widget update. The frame rectangle is automatically adjusted when
            the widget changes size.</para>
            <para>If you set the rectangle to a null rectangle (for example,
            QRect(0, 0, 0, 0)), then the resulting frame rectangle is equivalent to the
            widget rectangle.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFrame.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFrame.FrameWidth">
            <summary>
            <para>This property holds the width of the frame that is drawn.</para>
            <para>Note that the frame width depends on the frame style, not only
            the line width and the mid-line width. For example, the style specified by
            NoFrame always has a frame width of 0, whereas the style Panel has a frame
            width equivalent to the line width.</para>
            <para>See also lineWidth(), midLineWidth(), and frameStyle().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QFrame.Shape">
            <summary>
            <para>This enum type defines the shapes of frame available.</para>
            <para>When it does not call QStyle, Shape interacts with
            QFrame::Shadow, the lineWidth() and the midLineWidth() to create the total
            result. See the picture of the frames in the main class
            documentation.</para>
            <para>See also QFrame::Shadow, QFrame::style(), and
            QStyle::drawPrimitive().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QFrame.Shape.NoFrame">
            <summary>QFrame draws nothing</summary>
        </member>
        <member name="F:QtWidgets.QFrame.Shape.Box">
            <summary>QFrame draws a box around its contents</summary>
        </member>
        <member name="F:QtWidgets.QFrame.Shape.Panel">
            <summary>QFrame draws a panel to make the contents appear raised or sunken</summary>
        </member>
        <member name="F:QtWidgets.QFrame.Shape.WinPanel">
            <summary>draws a rectangular panel that can be raised or sunken like those in Windows 2000. Specifying this shape sets the line width to 2 pixels. WinPanel is provided for compatibility. For GUI style independence we recommend using StyledPanel instead.</summary>
        </member>
        <member name="F:QtWidgets.QFrame.Shape.HLine">
            <summary>QFrame draws a horizontal line that frames nothing (useful as separator)</summary>
        </member>
        <member name="F:QtWidgets.QFrame.Shape.VLine">
            <summary>QFrame draws a vertical line that frames nothing (useful as separator)</summary>
        </member>
        <member name="F:QtWidgets.QFrame.Shape.StyledPanel">
            <summary>draws a rectangular panel with a look that depends on the current GUI style. It can be raised or sunken.</summary>
        </member>
        <member name="T:QtWidgets.QFrame.Shadow">
            <summary>
            <para>This enum type defines the types of shadow that are used to give
            a 3D effect to frames.</para>
            <para>Shadow interacts with QFrame::Shape, the lineWidth() and the
            midLineWidth(). See the picture of the frames in the main class
            documentation.</para>
            <para>See also QFrame::Shape, lineWidth(), and midLineWidth().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QFrame.Shadow.Plain">
            <summary>the frame and contents appear level with the surroundings; draws using the palette QPalette::WindowText color (without any 3D effect)</summary>
        </member>
        <member name="F:QtWidgets.QFrame.Shadow.Raised">
            <summary>the frame and contents appear raised; draws a 3D raised line using the light and dark colors of the current color group</summary>
        </member>
        <member name="F:QtWidgets.QFrame.Shadow.Sunken">
            <summary>the frame and contents appear sunken; draws a 3D sunken line using the light and dark colors of the current color group</summary>
        </member>
        <member name="T:QtWidgets.QFrame.StyleMask">
            <summary>
            <para>This enum defines two constants that can be used to extract the
            two components of frameStyle():</para>
            <para>Normally, you don't need to use these, since frameShadow() and
            frameShape() already extract the Shadow and the Shape parts of
            frameStyle().</para>
            <para>See also frameStyle() and setFrameStyle().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QFrame.StyleMask.Shadow_Mask">
            <summary>The Shadow part of frameStyle()</summary>
        </member>
        <member name="F:QtWidgets.QFrame.StyleMask.Shape_Mask">
            <summary>The Shape part of frameStyle()</summary>
        </member>
        <member name="T:QtWidgets.QAbstractScrollArea">
            <summary>
            <para>The QAbstractScrollArea widget provides a scrolling area with
            on-demand scroll bars.</para>
            </summary>
            <remarks>
            <para>QAbstractScrollArea is a low-level abstraction of a scrolling
            area. The area provides a central widget called the viewport, in which the
            contents of the area is to be scrolled (i.e, the visible parts of the
            contents are rendered in the viewport).</para>
            <para>Next to the viewport is a vertical scroll bar, and below is a
            horizontal scroll bar. When all of the area contents fits in the viewport,
            each scroll bar can be either visible or hidden depending on the scroll
            bar's Qt::ScrollBarPolicy. When a scroll bar is hidden, the viewport
            expands in order to cover all available space. When a scroll bar becomes
            visible again, the viewport shrinks in order to make room for the scroll
            bar.</para>
            <para>It is possible to reserve a margin area around the viewport, see
            setViewportMargins(). The feature is mostly used to place a QHeaderView
            widget above or beside the scrolling area. Subclasses of
            QAbstractScrollArea should implement margins.</para>
            <para>When inheriting QAbstractScrollArea, you need to do the
            following:</para>
            <para></para>
            <para>Control the scroll bars by setting their range, value, page step,
            and tracking their movements.</para>
            <para>Draw the contents of the area in the viewport according to the
            values of the scroll bars.</para>
            <para>Handle events received by the viewport in viewportEvent() -
            notably resize events.</para>
            <para>Use viewport-&gt;update() to update the contents of the viewport
            instead of update() as all painting operations take place on the
            viewport.</para>
            <para></para>
            <para>With a scroll bar policy of Qt::ScrollBarAsNeeded (the default),
            QAbstractScrollArea shows scroll bars when they provide a non-zero
            scrolling range, and hides them otherwise.</para>
            <para>The scroll bars and viewport should be updated whenever the
            viewport receives a resize event or the size of the contents changes. The
            viewport also needs to be updated when the scroll bars values change. The
            initial values of the scroll bars are often set when the area receives new
            contents.</para>
            <para>We give a simple example, in which we have implemented a scroll
            area that can scroll any QWidget. We make the widget a child of the
            viewport; this way, we do not have to calculate which part of the widget to
            draw but can simply move the widget with QWidget::move(). When the area
            contents or the viewport size changes, we do the following:</para>
            <para>    QSize areaSize = viewport()-&gt;size();</para>
            <para>    QSize  widgetSize = widget-&gt;size();</para>
            <para></para>
            <para>
            verticalScrollBar()-&gt;setPageStep(areaSize.height());</para>
            <para>
            horizontalScrollBar()-&gt;setPageStep(areaSize.width());</para>
            <para>    verticalScrollBar()-&gt;setRange(0, widgetSize.height() -
            areaSize.height());</para>
            <para>    horizontalScrollBar()-&gt;setRange(0, widgetSize.width() -
            areaSize.width());</para>
            <para>    updateWidgetPosition();</para>
            <para>When the scroll bars change value, we need to update the widget
            position, i.e., find the part of the widget that is to be drawn in the
            viewport:</para>
            <para>    int hvalue = horizontalScrollBar()-&gt;value();</para>
            <para>    int vvalue = verticalScrollBar()-&gt;value();</para>
            <para>    QPoint topLeft = viewport()-&gt;rect().topLeft();</para>
            <para></para>
            <para>    widget-&gt;move(topLeft.x() - hvalue, topLeft.y() -
            vvalue);</para>
            <para>In order to track scroll bar movements, reimplement the virtual
            function scrollContentsBy(). In order to fine-tune scrolling behavior,
            connect to a scroll bar's QAbstractSlider::actionTriggered() signal and
            adjust the QAbstractSlider::sliderPosition as you wish.</para>
            <para>For convenience, QAbstractScrollArea makes all viewport events
            available in the virtual viewportEvent() handler. QWidget's specialized
            handlers are remapped to viewport events in the cases where this makes
            sense. The remapped specialized handlers are: paintEvent(),
            mousePressEvent(), mouseReleaseEvent(), mouseDoubleClickEvent(),
            mouseMoveEvent(), wheelEvent(), dragEnterEvent(), dragMoveEvent(),
            dragLeaveEvent(), dropEvent(), contextMenuEvent(), and
            resizeEvent().</para>
            <para>QScrollArea, which inherits QAbstractScrollArea, provides smooth
            scrolling for any QWidget (i.e., the widget is scrolled pixel by pixel).
            You only need to subclass QAbstractScrollArea if you need more specialized
            behavior. This is, for instance, true if the entire contents of the area is
            not suitable for being drawn on a QWidget or if you do not want smooth
            scrolling.</para>
            <para></para>
            <para>See also QScrollArea.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a viewport.</para>
            <para>The parent argument is sent to the QWidget constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.AddScrollBarWidget(QtWidgets.QWidget,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>Adds widget as a scroll bar widget in the location specified by
            alignment.</para>
            <para>Scroll bar widgets are shown next to the horizontal or vertical
            scroll bar, and can be placed on either side of it. If you want the scroll
            bar widgets to be always visible, set the scrollBarPolicy for the
            corresponding scroll bar to AlwaysOn.</para>
            <para>alignment must be one of Qt::Alignleft and Qt::AlignRight, which
            maps to the horizontal scroll bar, or Qt::AlignTop and Qt::AlignBottom,
            which maps to the vertical scroll bar.</para>
            <para>A scroll bar widget can be removed by either re-parenting the
            widget or deleting it. It's also possible to hide a widget with
            QWidget::hide()</para>
            <para>The scroll bar widget will be resized to fit the scroll bar
            geometry for the current style. The following describes the case for scroll
            bar widgets on the horizontal scroll bar:</para>
            <para>The height of the widget will be set to match the height of the
            scroll bar. To control the width of the widget, use
            QWidget::setMinimumWidth and QWidget::setMaximumWidth, or implement
            QWidget::sizeHint() and set a horizontal size policy. If you want a square
            widget, call QStyle::pixelMetric(QStyle::PM_ScrollBarExtent) and set the
            width to this value.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also scrollBarWidgets().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.SetupViewport(QtWidgets.QWidget)">
            <summary>
            <para>This slot is called by QAbstractScrollArea after
            setViewport(viewport) has been called. Reimplement this function in a
            subclass of QAbstractScrollArea to initialize the new viewport before it is
            used.</para>
            <para>See also setViewport().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.SetViewportMargins(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the margins around the scrolling area to left, top, right
            and bottom. This is useful for applications such as spreadsheets with
            &quot;locked&quot; rows and columns. The marginal space is is left blank;
            put widgets in the unused area.</para>
            <para>Note that this function is frequently called by QTreeView and
            QTableView, so margins must be implemented by QAbstractScrollArea
            subclasses. Also, if the subclasses are to be used in item views, they
            should not call this function.</para>
            <para>By default all margins are zero.</para>
            <para>See also viewportMargins().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            <para>This is the main event handler for the QAbstractScrollArea widget
            (not the scrolling area viewport()). The specified event is a general event
            object that may need to be cast to the appropriate class depending on its
            type.</para>
            <para>See also QEvent::type().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.OnViewportEvent(QtCore.QEvent)">
            <summary>
            <para>The main event handler for the scrolling area (the viewport()
            widget). It handles the event specified, and can be called by subclasses to
            provide reasonable default behavior.</para>
            <para>Returns true to indicate to the event system that the event has
            been handled, and needs no further processing; otherwise returns false to
            indicate that the event should be propagated further.</para>
            <para>You can reimplement this function in a subclass, but we recommend
            using one of the specialized event handlers instead.</para>
            <para>Specialized handlers for viewport events are: paintEvent(),
            mousePressEvent(), mouseReleaseEvent(), mouseDoubleClickEvent(),
            mouseMoveEvent(), wheelEvent(), dragEnterEvent(), dragMoveEvent(),
            dragLeaveEvent(), dropEvent(), contextMenuEvent(), and
            resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            <para>This event handler can be reimplemented in a subclass to receive
            resize events (passed in event), for the viewport() widget.</para>
            <para>When resizeEvent() is called, the viewport already has its new
            geometry: Its new size is accessible through the QResizeEvent::size()
            function, and the old size through QResizeEvent::oldSize().</para>
            <para>See also QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            <para>This event handler can be reimplemented in a subclass to receive
            paint events (passed in event), for the viewport() widget.</para>
            <para>Note: If you open a painter, make sure to open it on the
            viewport().</para>
            <para>See also QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            <para>This event handler can be reimplemented in a subclass to receive
            mouse press events for the viewport() widget. The event is passed in
            e.</para>
            <para>See also QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            <para>This event handler can be reimplemented in a subclass to receive
            mouse release events for the viewport() widget. The event is passed in
            e.</para>
            <para>See also QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.OnMouseDoubleClickEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseDoubleClickEvent().</para>
            <para>This event handler can be reimplemented in a subclass to receive
            mouse double click events for the viewport() widget. The event is passed in
            e.</para>
            <para>See also QWidget::mouseDoubleClickEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            <para>This event handler can be reimplemented in a subclass to receive
            mouse move events for the viewport() widget. The event is passed in
            e.</para>
            <para>See also QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.OnWheelEvent(QtGui.QWheelEvent)">
            <summary>
            <para>Reimplemented from QWidget::wheelEvent().</para>
            <para>This event handler can be reimplemented in a subclass to receive
            wheel events for the viewport() widget. The event is passed in e.</para>
            <para>See also QWidget::wheelEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.OnContextMenuEvent(QtGui.QContextMenuEvent)">
            <summary>
            <para>Reimplemented from QWidget::contextMenuEvent().</para>
            <para>This event handler can be reimplemented in a subclass to receive
            context menu events for the viewport() widget. The event is passed in
            e.</para>
            <para>See also QWidget::contextMenuEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.OnDragEnterEvent(QtGui.QDragEnterEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragEnterEvent().</para>
            <para>This event handler can be reimplemented in a subclass to receive
            drag enter events (passed in event), for the viewport() widget.</para>
            <para>See also QWidget::dragEnterEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.OnDragMoveEvent(QtGui.QDragMoveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragMoveEvent().</para>
            <para>This event handler can be reimplemented in a subclass to receive
            drag move events (passed in event), for the viewport() widget.</para>
            <para>See also QWidget::dragMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.OnDragLeaveEvent(QtGui.QDragLeaveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragLeaveEvent().</para>
            <para>This event handler can be reimplemented in a subclass to receive
            drag leave events (passed in event), for the viewport() widget.</para>
            <para>See also QWidget::dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.OnDropEvent(QtGui.QDropEvent)">
            <summary>
            <para>Reimplemented from QWidget::dropEvent().</para>
            <para>This event handler can be reimplemented in a subclass to receive
            drop events (passed in event), for the viewport() widget.</para>
            <para>See also QWidget::dropEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            <para>This function is called with key event e when key presses occur.
            It handles PageUp, PageDown, Up, Down, Left, and Right, and ignores all
            other key presses.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractScrollArea.ScrollContentsBy(System.Int32,System.Int32)">
            <summary>
            <para>This virtual handler is called when the scroll bars are moved by
            dx, dy, and consequently the viewport's contents should be scrolled
            accordingly.</para>
            <para>The default implementation simply calls update() on the entire
            viewport(), subclasses can reimplement this handler for optimization
            purposes, or - like QScrollArea - to move a contents widget. The parameters
            dx and dy are there for convenience, so that the class knows how much
            should be scrolled (useful e.g. when doing pixel-shifts). You may just as
            well ignore these values and scroll directly to the position the scroll
            bars indicate.</para>
            <para>Calling this function in order to scroll programmatically is an
            error, use the scroll bars instead (e.g. by calling QScrollBar::setValue()
            directly).</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractScrollArea.ViewportEvent">
            <summary>
            <para>The main event handler for the scrolling area (the viewport() widget). It handles the event specified, and can be called by subclasses to provide reasonable default behavior.</para>
            <para>Returns true to indicate to the event system that the event has been handled, and needs no further processing; otherwise returns false to indicate that the event should be propagated further.</para>
            <para>You can reimplement this function in a subclass, but we recommend using one of the specialized event handlers instead.</para>
            <para>Specialized handlers for viewport events are: paintEvent(), mousePressEvent(), mouseReleaseEvent(), mouseDoubleClickEvent(), mouseMoveEvent(), wheelEvent(), dragEnterEvent(), dragMoveEvent(), dragLeaveEvent(), dropEvent(), contextMenuEvent(), and resizeEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractScrollArea.VerticalScrollBarPolicy">
            <summary>
            <para>This property holds the policy for the vertical scroll
            bar.</para>
            <para>The default policy is Qt::ScrollBarAsNeeded.</para>
            <para>See also horizontalScrollBarPolicy.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractScrollArea.VerticalScrollBar">
            <summary>
            <para>Returns the vertical scroll bar.</para>
            <para>See also setVerticalScrollBar(), verticalScrollBarPolicy, and
            horizontalScrollBar().</para>
            <para></para>
            <para>Replaces the existing vertical scroll bar with scrollBar, and
            sets all the former scroll bar's slider properties on the new scroll bar.
            The former scroll bar is then deleted.</para>
            <para>QAbstractScrollArea already provides vertical and horizontal
            scroll bars by default. You can call this function to replace the default
            vertical scroll bar with your own custom scroll bar.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also verticalScrollBar() and setHorizontalScrollBar().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractScrollArea.HorizontalScrollBarPolicy">
            <summary>
            <para>This property holds the policy for the horizontal scroll
            bar.</para>
            <para>The default policy is Qt::ScrollBarAsNeeded.</para>
            <para>See also verticalScrollBarPolicy.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractScrollArea.HorizontalScrollBar">
            <summary>
            <para>Returns the horizontal scroll bar.</para>
            <para>See also setHorizontalScrollBar(), horizontalScrollBarPolicy, and
            verticalScrollBar().</para>
            <para></para>
            <para>Replaces the existing horizontal scroll bar with scrollBar, and
            sets all the former scroll bar's slider properties on the new scroll bar.
            The former scroll bar is then deleted.</para>
            <para>QAbstractScrollArea already provides horizontal and vertical
            scroll bars by default. You can call this function to replace the default
            horizontal scroll bar with your own custom scroll bar.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also horizontalScrollBar() and setVerticalScrollBar().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractScrollArea.CornerWidget">
            <summary>
            <para>Returns the widget in the corner between the two scroll
            bars.</para>
            <para>By default, no corner widget is present.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setCornerWidget().</para>
            <para></para>
            <para>Sets the widget in the corner between the two scroll bars to be
            widget.</para>
            <para>You will probably also want to set at least one of the scroll bar
            modes to AlwaysOn.</para>
            <para>Passing 0 shows no widget in the corner.</para>
            <para>Any previous corner widget is hidden.</para>
            <para>You may call setCornerWidget() with the same widget at different
            times.</para>
            <para>All widgets set here will be deleted by the scroll area when it
            is destroyed unless you separately reparent the widget after setting some
            other corner widget (or 0).</para>
            <para>Any newly set widget should have no current parent.</para>
            <para>By default, no corner widget is present.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also cornerWidget(), horizontalScrollBarPolicy, and
            horizontalScrollBarPolicy.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractScrollArea.Viewport">
            <summary>
            <para>Returns the viewport widget.</para>
            <para>Use the QScrollArea::widget() function to retrieve the contents
            of the viewport widget.</para>
            <para>See also setViewport() and QScrollArea::widget().</para>
            <para></para>
            <para>Sets the viewport to be the given widget. The QAbstractScrollArea
            will take ownership of the given widget.</para>
            <para>If widget is 0, QAbstractScrollArea will assign a new QWidget
            instance for the viewport.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also viewport().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractScrollArea.sizeAdjustPolicy">
            <summary>
            <para>This property holds the policy describing how the size of the
            scroll area changes when the size of the viewport changes.</para>
            <para>The default policy is QAbstractScrollArea::AdjustIgnored.
            Changing this property might actually resize the scrollarea.</para>
            <para>This property was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractScrollArea.ViewportMargins">
            <summary>
            <para>Returns the margins around the scrolling area. By default all the
            margins are zero.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also setViewportMargins().</para>
            <para></para>
            <para>Sets margins around the scrolling area. This is useful for
            applications such as spreadsheets with &quot;locked&quot; rows and columns.
            The marginal space is is left blank; put widgets in the unused area.</para>
            <para>By default all margins are zero.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also viewportMargins().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractScrollArea.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractScrollArea.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            <para>Returns the sizeHint property of the scroll area. The size is
            determined by using viewportSizeHint() plus some extra space for scroll
            bars, if needed.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractScrollArea.MaximumViewportSize">
            <summary>
            <para>Returns the size of the viewport as if the scroll bars had no
            valid scrolling range.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractScrollArea.ViewportSizeHint">
            <summary>
            <para>Returns the recommended size for the viewport. The default
            implementation returns viewport()-&gt;sizeHint(). Note that the size is
            just the viewport's size, without any scroll bars visible.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QAbstractScrollArea.SizeAdjustPolicy">
            <summary>
            <para>This enum specifies how the size hint of the QAbstractScrollArea
            should adjust when the size of the viewport changes.</para>
            <para>This enum was introduced or modified in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QAbstractScrollArea.SizeAdjustPolicy.AdjustIgnored">
            <summary>The scroll area will behave like before - and not do any adjust.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractScrollArea.SizeAdjustPolicy.AdjustToContentsOnFirstShow">
            <summary>The scroll area will adjust to its viewport the first time it is shown.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractScrollArea.SizeAdjustPolicy.AdjustToContents">
            <summary>The scroll area will always adjust to the viewport</summary>
        </member>
        <member name="T:QtWidgets.QAbstractSpinBox">
            <summary>
            <para>The QAbstractSpinBox class provides a spinbox and a line edit to
            display values.</para>
            </summary>
            <remarks>
            <para>The class is designed as a common super class for widgets like
            QSpinBox, QDoubleSpinBox and QDateTimeEdit</para>
            <para>Here are the main properties of the class:</para>
            <para></para>
            <para>text: The text that is displayed in the QAbstractSpinBox.</para>
            <para>alignment: The alignment of the text in the
            QAbstractSpinBox.</para>
            <para>wrapping: Whether the QAbstractSpinBox wraps from the minimum
            value to the maximum value and vica versa.</para>
            <para></para>
            <para>QAbstractSpinBox provides a virtual stepBy() function that is
            called whenever the user triggers a step. This function takes an integer
            value to signify how many steps were taken. E.g. Pressing Qt::Key_Down will
            trigger a call to stepBy(-1).</para>
            <para>QAbstractSpinBox also provide a virtual function stepEnabled() to
            determine whether stepping up/down is allowed at any point. This function
            returns a bitset of StepEnabled.</para>
            <para></para>
            <para>See also QAbstractSlider, QSpinBox, QDoubleSpinBox,
            QDateTimeEdit, and Spin Boxes Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs an abstract spinbox with the given parent with default
            wrapping, and alignment properties.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.SetFrame(System.Boolean)">
            <summary>
            <para>This property holds whether the spin box draws itself with a
            frame.</para>
            <para>If enabled (the default) the spin box draws itself inside a
            frame, otherwise the spin box draws itself without any frame.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasFrame() const</para>
            <para> void 	setFrame(bool)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.InterpretText">
            <summary>
            <para>This function interprets the text of the spin box. If the value
            has changed since last interpretation it will emit signals.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.InputMethodQuery(QtCore.Qt.InputMethodQuery)">
            <summary>
            <para>Reimplemented from QWidget::inputMethodQuery().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.Validate(System.String,System.Int32@)">
            <summary>
            <para>This virtual function is called by the QAbstractSpinBox to
            determine whether input is valid. The pos parameter indicates the position
            in the string. Reimplemented in the various subclasses.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.Fixup(System.String)">
            <summary>
            <para>This virtual function is called by the QAbstractSpinBox if the
            input is not validated to QValidator::Acceptable when Return is pressed or
            interpretText() is called. It will try to change the text so it is valid.
            Reimplemented in the various subclasses.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.StepBy(System.Int32)">
            <summary>
            <para>Virtual function that is called whenever the user triggers a
            step. The steps parameter indicates how many steps were taken, e.g.
            Pressing Qt::Key_Down will trigger a call to stepBy(-1), whereas pressing
            Qt::Key_Prior will trigger a call to stepBy(10).</para>
            <para>If you subclass QAbstractSpinBox you must reimplement this
            function. Note that this function is called even if the resulting value
            will be outside the bounds of minimum and maximum. It's this function's job
            to handle these situations.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.StepUp">
            <summary>
            <para>Steps up by one linestep Calling this slot is analogous to
            calling stepBy(1);</para>
            <para>See also stepBy() and stepDown().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.StepDown">
            <summary>
            <para>Steps down by one linestep Calling this slot is analogous to
            calling stepBy(-1);</para>
            <para>See also stepBy() and stepUp().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.SelectAll">
            <summary>
            <para>Selects all the text in the spinbox except the prefix and
            suffix.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.Clear">
            <summary>
            <para>Clears the lineedit of all text but prefix and suffix.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            <para>This function handles keyboard input.</para>
            <para>The following keys are handled specifically:</para>
            <para></para>
            <para> Enter/Return	This will reinterpret the text and emit a signal
            even if the value has not changed since last time a signal was
            emitted.</para>
            <para>Up	This will invoke stepBy(1)</para>
            <para>Down	This will invoke stepBy(-1)</para>
            <para>Page up	This will invoke stepBy(10)</para>
            <para>Page down	This will invoke stepBy(-10)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnKeyReleaseEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnWheelEvent(QtGui.QWheelEvent)">
            <summary>
            <para>Reimplemented from QWidget::wheelEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnContextMenuEvent(QtGui.QContextMenuEvent)">
            <summary>
            <para>Reimplemented from QWidget::contextMenuEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnCloseEvent(QtGui.QCloseEvent)">
            <summary>
            <para>Reimplemented from QWidget::closeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnHideEvent(QtGui.QHideEvent)">
            <summary>
            <para>Reimplemented from QWidget::hideEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSpinBox.InitStyleOption(QtWidgets.QStyleOptionSpinBox)">
            <summary>
            <para>Initialize option with the values from this QSpinBox. This method
            is useful for subclasses when they need a QStyleOptionSpinBox, but don't
            want to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractSpinBox.EditingFinished">
            <summary>
            <para>This signal is emitted editing is finished. This happens when the spinbox loses focus and when enter is pressed.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSpinBox.buttonSymbols">
            <summary>
            <para>This property holds the current button symbol mode.</para>
            <para>The possible values can be either UpDownArrows or PlusMinus. The
            default is UpDownArrows.</para>
            <para>Note that some styles might render PlusMinus and UpDownArrows
            identically.</para>
            <para>See also ButtonSymbols.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSpinBox.correctionMode">
            <summary>
            <para>This property holds the mode to correct an Intermediate value if
            editing finishes.</para>
            <para>The default mode is
            QAbstractSpinBox::CorrectToPreviousValue.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also acceptableInput, validate(), and fixup().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSpinBox.SpecialValueText">
            <summary>
            <para>This property holds the special-value text.</para>
            <para>If set, the spin box will display this text instead of a numeric
            value whenever the current value is equal to minimum(). Typical use is to
            indicate that this choice has a special (default) meaning.</para>
            <para>For example, if your spin box allows the user to choose a scale
            factor (or zoom level) for displaying an image, and your application is
            able to automatically choose one that will enable the image to fit
            completely within the display window, you can set up the spin box like
            this:</para>
            <para>    QSpinBox *zoomSpinBox = new QSpinBox;</para>
            <para>    zoomSpinBox-&gt;setRange(0, 1000);</para>
            <para>    zoomSpinBox-&gt;setSingleStep(10);</para>
            <para>    zoomSpinBox-&gt;setSuffix(&quot;%&quot;);</para>
            <para>
            zoomSpinBox-&gt;setSpecialValueText(tr(&quot;Automatic&quot;));</para>
            <para>    zoomSpinBox-&gt;setValue(100);</para>
            <para>The user will then be able to choose a scale from 1% to 1000% or
            select &quot;Auto&quot; to leave it up to the application to choose. Your
            code must then interpret the spin box value of 0 as a request from the user
            to scale the image to fit inside the window.</para>
            <para>All values are displayed with the prefix and suffix (if set),
            except for the special value, which only shows the special value text. This
            special text is passed in the QSpinBox::valueChanged() signal that passes a
            QString.</para>
            <para>To turn off the special-value text display, call this function
            with an empty string. The default is no special-value text, i.e. the
            numeric value is shown as usual.</para>
            <para>If no special-value text is set, specialValueText() returns an
            empty string.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSpinBox.Wrapping">
            <summary>
            <para>This property holds whether the spin box is circular.</para>
            <para>If wrapping is true stepping up from maximum() value will take
            you to the minimum() value and vica versa. Wrapping only make sense if you
            have minimum() and maximum() values set.</para>
            <para>QSpinBox *spinBox = new QSpinBox(this);</para>
            <para>spinBox-&gt;setRange(0, 100);</para>
            <para>spinBox-&gt;setWrapping(true);</para>
            <para>spinBox-&gt;setValue(100);</para>
            <para>spinBox-&gt;stepBy(1);</para>
            <para>// value is 0</para>
            <para>See also QSpinBox::minimum() and QSpinBox::maximum().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSpinBox.ReadOnly">
            <summary>
            <para>This property holds whether the spin box is read only.</para>
            <para>In read-only mode, the user can still copy the text to the
            clipboard, or drag and drop the text; but cannot edit it.</para>
            <para>The QLineEdit in the QAbstractSpinBox does not show a cursor in
            read-only mode.</para>
            <para>See also QLineEdit::readOnly.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSpinBox.KeyboardTracking">
            <summary>
            <para>This property holds whether keyboard tracking is enabled for the
            spinbox.</para>
            <para>If keyboard tracking is enabled (the default), the spinbox emits
            the valueChanged() signal while the new value is being entered from the
            keyboard.</para>
            <para>E.g. when the user enters the value 600 by typing 6, 0, and 0,
            the spinbox emits 3 signals with the values 6, 60, and 600
            respectively.</para>
            <para>If keyboard tracking is disabled, the spinbox doesn't emit the
            valueChanged() signal while typing. It emits the signal later, when the
            return key is pressed, when keyboard focus is lost, or when other spinbox
            functionality is used, e.g. pressing an arrow key.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSpinBox.Alignment">
            <summary>
            <para>This property holds the alignment of the spin box.</para>
            <para>Possible Values are Qt::AlignLeft, Qt::AlignRight, and
            Qt::AlignHCenter.</para>
            <para>By default, the alignment is Qt::AlignLeft</para>
            <para>Attempting to set the alignment to an illegal flag combination
            does nothing.</para>
            <para>See also Qt::Alignment.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSpinBox.Accelerated">
            <summary>
            <para>This property holds whether the spin box will accelerate the
            frequency of the steps when pressing the step Up/Down buttons.</para>
            <para>If enabled the spin box will increase/decrease the value faster
            the longer you hold the button down.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSpinBox.GroupSeparatorShown">
            <summary>
            <para>This property holds whether a thousands separator is enabled. By
            default this property is false.</para>
            <para>This property was introduced in  Qt 5.3.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isGroupSeparatorShown() const</para>
            <para> void 	setGroupSeparatorShown(bool shown)</para>
            <para></para>
            <para></para>
            <para>This property holds whether a thousands separator is enabled. By
            default this property is false.</para>
            <para>This property was introduced in  Qt 5.3.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isGroupSeparatorShown() const</para>
            <para> void 	setGroupSeparatorShown(bool shown)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSpinBox.LineEdit">
            <summary>
            <para>This function returns a pointer to the line edit of the spin
            box.</para>
            <para>See also setLineEdit().</para>
            <para></para>
            <para>Sets the line edit of the spinbox to be lineEdit instead of the
            current line edit widget. lineEdit can not be 0.</para>
            <para>QAbstractSpinBox takes ownership of the new lineEdit</para>
            <para>If QLineEdit::validator() for the lineEdit returns 0, the
            internal validator of the spinbox will be set on the line edit.</para>
            <para>See also lineEdit().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSpinBox.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSpinBox.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSpinBox.HasAcceptableInput">
            <summary>
            <para>This property holds whether the input satisfies the current
            validation.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasAcceptableInput() const</para>
            <para></para>
            <para>See also validate(), fixup(), and correctionMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSpinBox.Text">
            <summary>
            <para>This property holds the spin box's text, including any prefix and
            suffix.</para>
            <para>There is no default text.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSpinBox.HasFrame">
            <summary>
            <para>This property holds whether the spin box draws itself with a
            frame.</para>
            <para>If enabled (the default) the spin box draws itself inside a
            frame, otherwise the spin box draws itself without any frame.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasFrame() const</para>
            <para> void 	setFrame(bool)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSpinBox.StepEnabled">
            <summary>
            <para>Virtual function that determines whether stepping up and down is
            legal at any given time.</para>
            <para>The up arrow will be painted as disabled unless (stepEnabled()
            &amp; StepUpEnabled) != 0.</para>
            <para>The default implementation will return (StepUpEnabled|
            StepDownEnabled) if wrapping is turned on. Else it will return
            StepDownEnabled if value is &gt; minimum() or'ed with StepUpEnabled if
            value &lt; maximum().</para>
            <para>If you subclass QAbstractSpinBox you will need to reimplement
            this function.</para>
            <para>See also QSpinBox::minimum(), QSpinBox::maximum(), and
            wrapping().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QAbstractSpinBox.StepEnabledFlag">
            <summary>
            <para>The StepEnabled type is a typedef for
            QFlags&lt;StepEnabledFlag&gt;. It stores an OR combination of
            StepEnabledFlag values.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QAbstractSpinBox.ButtonSymbols">
            <summary>
            <para>This enum type describes the symbols that can be displayed on the
            buttons in a spin box.</para>
            <para>See also QAbstractSpinBox::buttonSymbols.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QAbstractSpinBox.ButtonSymbols.UpDownArrows">
            <summary>Little arrows in the classic style.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractSpinBox.ButtonSymbols.PlusMinus">
            <summary>+ and - symbols.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons">
            <summary>Don't display buttons.</summary>
        </member>
        <member name="T:QtWidgets.QAbstractSpinBox.CorrectionMode">
            <summary>
            <para>This enum type describes the mode the spinbox will use to correct
            an Intermediate value if editing finishes.</para>
            <para>See also correctionMode.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QAbstractSpinBox.CorrectionMode.CorrectToPreviousValue">
            <summary>The spinbox will revert to the last valid value.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractSpinBox.CorrectionMode.CorrectToNearestValue">
            <summary>The spinbox will revert to the nearest valid value.</summary>
        </member>
        <member name="T:QtWidgets.QAbstractSlider">
            <summary>
            <para>The QAbstractSlider class provides an integer value within a
            range.</para>
            </summary>
            <remarks>
            <para>The class is designed as a common super class for widgets like
            QScrollBar, QSlider and QDial.</para>
            <para>Here are the main properties of the class:</para>
            <para></para>
            <para>value: The bounded integer that QAbstractSlider maintains.</para>
            <para>minimum: The lowest possible value.</para>
            <para>maximum: The highest possible value.</para>
            <para>singleStep: The smaller of two natural steps that an abstract
            sliders provides and typically corresponds to the user pressing an arrow
            key.</para>
            <para>pageStep: The larger of two natural steps that an abstract slider
            provides and typically corresponds to the user pressing PageUp or
            PageDown.</para>
            <para>tracking: Whether slider tracking is enabled.</para>
            <para>sliderPosition: The current position of the slider. If tracking
            is enabled (the default), this is identical to value.</para>
            <para></para>
            <para>Unity (1) may be viewed as a third step size. setValue() lets you
            set the current value to any integer in the allowed range, not just
            minimum() + n * singleStep() for integer values of n. Some widgets may
            allow the user to set any value at all; others may just provide multiples
            of singleStep() or pageStep().</para>
            <para>QAbstractSlider emits a comprehensive set of signals:</para>
            <para></para>
            <para> SignalEmitted when</para>
            <para>valueChanged()	the value has changed. The tracking determines
            whether this signal is emitted during user interaction.</para>
            <para>sliderPressed()	the user starts to drag the slider.</para>
            <para>sliderMoved()	the user drags the slider.</para>
            <para>sliderReleased()	the user releases the slider.</para>
            <para>actionTriggered()	a slider action was triggerd.</para>
            <para>rangeChanged()	a the range has changed.</para>
            <para></para>
            <para>QAbstractSlider provides a virtual sliderChange() function that
            is well suited for updating the on-screen representation of sliders. By
            calling triggerAction(), subclasses trigger slider actions. Two helper
            functions QStyle::sliderPositionFromValue() and
            QStyle::sliderValueFromPosition() help subclasses and styles to map screen
            coordinates to logical range values.</para>
            <para></para>
            <para>See also QAbstractSpinBox, QSlider, QDial, QScrollBar, and
            Sliders Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QAbstractSlider.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs an abstract slider.</para>
            <para>The parent argument is sent to the QWidget constructor.</para>
            <para>The minimum defaults to 0, the maximum to 99, with a singleStep
            size of 1 and a pageStep size of 10, and an initial value of 0.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSlider.SetTracking(System.Boolean)">
            <summary>
            <para>This property holds whether slider tracking is enabled.</para>
            <para>If tracking is enabled (the default), the slider emits the
            valueChanged() signal while the slider is being dragged. If tracking is
            disabled, the slider emits the valueChanged() signal only when the user
            releases the slider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasTracking() const</para>
            <para> void 	setTracking(bool enable)</para>
            <para></para>
            <para>See also sliderDown.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSlider.TriggerAction(QtWidgets.QAbstractSlider.SliderAction)">
            <summary>
            <para>Triggers a slider action. Possible actions are
            SliderSingleStepAdd, SliderSingleStepSub, SliderPageStepAdd,
            SliderPageStepSub, SliderToMinimum, SliderToMaximum, and SliderMove.</para>
            <para>See also actionTriggered().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSlider.SetRange(System.Int32,System.Int32)">
            <summary>
            <para>Sets the slider's minimum to min and its maximum to max.</para>
            <para>If max is smaller than min, min becomes the only legal
            value.</para>
            <para>See also minimum and maximum.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSlider.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSlider.SetRepeatAction(QtWidgets.QAbstractSlider.SliderAction,System.Int32,System.Int32)">
            <summary>
            <para>Sets action action to be triggered repetitively in intervals of
            repeatTime, after an initial delay of thresholdTime.</para>
            <para>See also triggerAction() and repeatAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSlider.sliderChange(QtWidgets.QAbstractSlider.SliderChange)">
            <summary>
            <para>Reimplement this virtual function to track slider changes such as
            SliderRangeChange, SliderOrientationChange, SliderStepsChange, or
            SliderValueChange. The default implementation only updates the display and
            ignores the change parameter.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSlider.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSlider.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSlider.OnWheelEvent(QtGui.QWheelEvent)">
            <summary>
            <para>Reimplemented from QWidget::wheelEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractSlider.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractSlider.ValueChanged">
            <summary>
            <para>This property holds the slider's current value.</para>
            <para>The slider forces the value to be within the legal range: minimum &lt;= value &lt;= maximum.</para>
            <para>Changing the value also changes the sliderPosition.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	value() const</para>
            <para> void 	setValue(int)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	valueChanged(int value)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractSlider.SliderPressed">
            <summary>
            <para>This signal is emitted when the user presses the slider with the mouse, or programmatically when setSliderDown(true) is called.</para>
            <para>See also sliderReleased(), sliderMoved(), and isSliderDown().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractSlider.SliderMoved">
            <summary>
            <para>This property holds the current slider position.</para>
            <para>If tracking is enabled (the default), this is identical to value.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	sliderPosition() const</para>
            <para> void 	setSliderPosition(int)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	sliderMoved(int value)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractSlider.SliderReleased">
            <summary>
            <para>This signal is emitted when the user releases the slider with the mouse, or programmatically when setSliderDown(false) is called.</para>
            <para>See also sliderPressed(), sliderMoved(), and sliderDown.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractSlider.RangeChanged">
            <summary>
            <para>This signal is emitted when the slider range has changed, with min being the new minimum, and max being the new maximum.</para>
            <para>See also minimum and maximum.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractSlider.ActionTriggered">
            <summary>
            <para>This signal is emitted when the slider action action is triggered. Actions are SliderSingleStepAdd, SliderSingleStepSub, SliderPageStepAdd, SliderPageStepSub, SliderToMinimum, SliderToMaximum, and SliderMove.</para>
            <para>When the signal is emitted, the sliderPosition has been adjusted according to the action, but the value has not yet been propagated (meaning the valueChanged() signal was not yet emitted), and the visual display has not been updated. In slots connected to this signal you can thus safely adjust any action by calling setSliderPosition() yourself, based on both the action and the slider's value.</para>
            <para>See also triggerAction().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSlider.Minimum">
            <summary>
            <para>This property holds the sliders's minimum value.</para>
            <para>When setting this property, the maximum is adjusted if necessary
            to ensure that the range remains valid. Also the slider's current value is
            adjusted to be within the new range.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSlider.Maximum">
            <summary>
            <para>This property holds the slider's maximum value.</para>
            <para>When setting this property, the minimum is adjusted if necessary
            to ensure that the range remains valid. Also the slider's current value is
            adjusted to be within the new range.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSlider.SingleStep">
            <summary>
            <para>This property holds the single step.</para>
            <para>The smaller of two natural steps that an abstract sliders
            provides and typically corresponds to the user pressing an arrow
            key.</para>
            <para>If the property is modified during an auto repeating key event,
            behavior is undefined.</para>
            <para>See also pageStep.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSlider.PageStep">
            <summary>
            <para>This property holds the page step.</para>
            <para>The larger of two natural steps that an abstract slider provides
            and typically corresponds to the user pressing PageUp or PageDown.</para>
            <para>See also singleStep.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSlider.SliderDown">
            <summary>
            <para>This property holds whether the slider is pressed down.</para>
            <para>The property is set by subclasses in order to let the abstract
            slider know whether or not tracking has any effect.</para>
            <para>Changing the slider down property emits the sliderPressed() and
            sliderReleased() signals.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSlider.SliderPosition">
            <summary>
            <para>This property holds the current slider position.</para>
            <para>If tracking is enabled (the default), this is identical to
            value.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSlider.InvertedAppearance">
            <summary>
            <para>This property holds whether or not a slider shows its values
            inverted.</para>
            <para>If this property is false (the default), the minimum and maximum
            will be shown in its classic position for the inherited widget. If the
            value is true, the minimum and maximum appear at their opposite
            location.</para>
            <para>Note: This property makes most sense for sliders and dials. For
            scroll bars, the visual effect of the scroll bar subcontrols depends on
            whether or not the styles understand inverted appearance; most styles
            ignore this property for scroll bars.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSlider.InvertedControls">
            <summary>
            <para>This property holds whether or not the slider inverts its wheel
            and key events.</para>
            <para>If this property is false, scrolling the mouse wheel
            &quot;up&quot; and using keys like page up will increase the slider's value
            towards its maximum. Otherwise pressing page up will move value towards the
            slider's minimum.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSlider.Value">
            <summary>
            <para>This property holds the slider's current value.</para>
            <para>The slider forces the value to be within the legal range: minimum
            &lt;= value &lt;= maximum.</para>
            <para>Changing the value also changes the sliderPosition.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSlider.Orientation">
            <summary>
            <para>This property holds the orientation of the slider.</para>
            <para>The orientation must be Qt::Vertical (the default) or
            Qt::Horizontal.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSlider.RepeatAction">
            <summary>
            <para>Returns the current repeat action.</para>
            <para>See also setRepeatAction().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractSlider.HasTracking">
            <summary>
            <para>This property holds whether slider tracking is enabled.</para>
            <para>If tracking is enabled (the default), the slider emits the
            valueChanged() signal while the slider is being dragged. If tracking is
            disabled, the slider emits the valueChanged() signal only when the user
            releases the slider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasTracking() const</para>
            <para> void 	setTracking(bool enable)</para>
            <para></para>
            <para>See also sliderDown.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QSlider">
            <summary>
            <para>The QSlider widget provides a vertical or horizontal
            slider.</para>
            </summary>
            <remarks>
            <para>The slider is the classic widget for controlling a bounded value.
            It lets the user move a slider handle along a horizontal or vertical groove
            and translates the handle's position into an integer value within the legal
            range.</para>
            <para>QSlider has very few of its own functions; most of the
            functionality is in QAbstractSlider. The most useful functions are
            setValue() to set the slider directly to some value; triggerAction() to
            simulate the effects of clicking (useful for shortcut keys);
            setSingleStep(), setPageStep() to set the steps; and setMinimum() and
            setMaximum() to define the range of the scroll bar.</para>
            <para>QSlider provides methods for controlling tickmarks. You can use
            setTickPosition() to indicate where you want the tickmarks to be,
            setTickInterval() to indicate how many of them you want. the currently set
            tick position and interval can be queried using the tickPosition() and
            tickInterval() functions, respectively.</para>
            <para>QSlider inherits a comprehensive set of signals:</para>
            <para></para>
            <para> SignalDescription</para>
            <para>valueChanged()	Emitted when the slider's value has changed. The
            tracking() determines whether this signal is emitted during user
            interaction.</para>
            <para>sliderPressed()	Emitted when the user starts to drag the
            slider.</para>
            <para>sliderMoved()	Emitted when the user drags the slider.</para>
            <para>sliderReleased()	Emitted when the user releases the
            slider.</para>
            <para></para>
            <para>QSlider only provides integer ranges. Note that although QSlider
            handles very large numbers, it becomes difficult for users to use a slider
            accurately for very large ranges.</para>
            <para>A slider accepts focus on Tab and provides both a mouse wheel and
            a keyboard interface. The keyboard interface is the following:</para>
            <para></para>
            <para>Left/Right move a horizontal slider by one single step.</para>
            <para>Up/Down move a vertical slider by one single step.</para>
            <para>PageUp moves up one page.</para>
            <para>PageDown moves down one page.</para>
            <para>Home moves to the start (mininum).</para>
            <para>End moves to the end (maximum).</para>
            <para></para>
            <para></para>
            <para> 	A slider shown in the Macintosh widget style.</para>
            <para>	A slider shown in the Windows Vista widget style.</para>
            <para>	A slider shown in the Fusion widget style.</para>
            <para></para>
            <para></para>
            <para>See also QScrollBar, QSpinBox, QDial, GUI Design Handbook:
            Slider, and Sliders Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QSlider.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a vertical slider with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSlider.#ctor(QtCore.Qt.Orientation,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a slider with the given parent. The orientation
            parameter determines whether the slider is horizontal or vertical; the
            valid values are Qt::Vertical and Qt::Horizontal.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSlider.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSlider.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSlider.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSlider.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSlider.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSlider.InitStyleOption(QtWidgets.QStyleOptionSlider)">
            <summary>
            <para>Initialize option with the values from this QSlider. This method
            is useful for subclasses when they need a QStyleOptionSlider, but don't
            want to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSlider.tickPosition">
            <summary>
            <para>This property holds the tickmark position for this slider.</para>
            <para>The valid values are described by the QSlider::TickPosition
            enum.</para>
            <para>The default value is QSlider::NoTicks.</para>
            <para>See also tickInterval.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSlider.TickInterval">
            <summary>
            <para>This property holds the interval between tickmarks.</para>
            <para>This is a value interval, not a pixel interval. If it is 0, the
            slider will choose between singleStep and pageStep.</para>
            <para>The default value is 0.</para>
            <para>See also tickPosition, singleStep, and pageStep.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSlider.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSlider.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QSlider.TickPosition">
            <summary>
            <para>This enum specifies where the tick marks are to be drawn relative
            to the slider's groove and the handle the user moves.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QSlider.TickPosition.NoTicks">
            <summary>Do not draw any tick marks.</summary>
        </member>
        <member name="F:QtWidgets.QSlider.TickPosition.TicksAbove">
            <summary>Draw tick marks above the (horizontal) slider</summary>
        </member>
        <member name="F:QtWidgets.QSlider.TickPosition.TicksLeft">
            <summary>Draw tick marks to the left of the (vertical) slider</summary>
        </member>
        <member name="F:QtWidgets.QSlider.TickPosition.TicksBelow">
            <summary>Draw tick marks below the (horizontal) slider</summary>
        </member>
        <member name="F:QtWidgets.QSlider.TickPosition.TicksRight">
            <summary>Draw tick marks to the right of the (vertical) slider</summary>
        </member>
        <member name="F:QtWidgets.QSlider.TickPosition.TicksBothSides">
            <summary>Draw tick marks on both sides of the groove.</summary>
        </member>
        <member name="T:QtWidgets.QStyle">
            <summary>
            <para>The QStyle class is an abstract base class that encapsulates the
            look and feel of a GUI.</para>
            </summary>
            <remarks>
            <para>Qt contains a set of QStyle subclasses that emulate the styles of
            the different platforms supported by Qt (QWindowsStyle, QMacStyle etc.). By
            default, these styles are built into the Qt GUI module. Styles can also be
            made available as plugins.</para>
            <para>Qt's built-in widgets use QStyle to perform nearly all of their
            drawing, ensuring that they look exactly like the equivalent native
            widgets. The diagram below shows a QComboBox in eight different
            styles.</para>
            <para></para>
            <para>Topics:</para>
            <para></para>
            <para>Setting a Style</para>
            <para>The style of the entire application can be set using the
            QApplication::setStyle() function. It can also be specified by the user of
            the application, using the -style command-line option:</para>
            <para>./myapplication -style windows</para>
            <para>If no style is specified, Qt will choose the most appropriate
            style for the user's platform or desktop environment.</para>
            <para>A style can also be set on an individual widget using the
            QWidget::setStyle() function.</para>
            <para></para>
            <para>Developing Style-Aware Custom Widgets</para>
            <para>If you are developing custom widgets and want them to look good
            on all platforms, you can use QStyle functions to perform parts of the
            widget drawing, such as drawItemText(), drawItemPixmap(), drawPrimitive(),
            drawControl(), and drawComplexControl().</para>
            <para>Most QStyle draw functions take four arguments:</para>
            <para></para>
            <para>an enum value specifying which graphical element to draw</para>
            <para>a QStyleOption specifying how and where to render that
            element</para>
            <para>a QPainter that should be used to draw the element</para>
            <para>a QWidget on which the drawing is performed (optional)</para>
            <para></para>
            <para>For example, if you want to draw a focus rectangle on your
            widget, you can write:</para>
            <para>void MyWidget::paintEvent(QPaintEvent * /* event */)</para>
            <para>{</para>
            <para>    QPainter painter(this);</para>
            <para></para>
            <para>    QStyleOptionFocusRect option;</para>
            <para>    option.initFrom(this);</para>
            <para>    option.backgroundColor =
            palette().color(QPalette::Background);</para>
            <para></para>
            <para>    style()-&gt;drawPrimitive(QStyle::PE_FrameFocusRect,
            &amp;option, &amp;painter, this);</para>
            <para>}</para>
            <para>QStyle gets all the information it needs to render the graphical
            element from QStyleOption. The widget is passed as the last argument in
            case the style needs it to perform special effects (such as animated
            default buttons on Mac OS X), but it isn't mandatory. In fact, you can use
            QStyle to draw on any paint device, not just widgets, by setting the
            QPainter properly.</para>
            <para>QStyleOption has various subclasses for the various types of
            graphical elements that can be drawn. For example, PE_FrameFocusRect
            expects a QStyleOptionFocusRect argument.</para>
            <para>To ensure that drawing operations are as fast as possible,
            QStyleOption and its subclasses have public data members. See the
            QStyleOption class documentation for details on how to use it.</para>
            <para>For convenience, Qt provides the QStylePainter class, which
            combines a QStyle, a QPainter, and a QWidget. This makes it possible to
            write</para>
            <para>    QStylePainter painter(this);</para>
            <para>    ...</para>
            <para>    painter.drawPrimitive(QStyle::PE_FrameFocusRect,
            option);</para>
            <para>instead of</para>
            <para>    QPainter painter(this);</para>
            <para>    ...</para>
            <para>    style()-&gt;drawPrimitive(QStyle::PE_FrameFocusRect,
            &amp;option, &amp;painter, this);</para>
            <para></para>
            <para>Creating a Custom Style</para>
            <para>You can create a custom look and feel for your application by
            creating a custom style. There are two approaches to creating a custom
            style. In the static approach, you either choose an existing QStyle class,
            subclass it, and reimplement virtual functions to provide the custom
            behavior, or you create an entire QStyle class from scratch. In the dynamic
            approach, you modify the behavior of your system style at runtime. The
            static approach is described below. The dynamic approach is described in
            QProxyStyle.</para>
            <para>The first step in the static approach is to pick one of the
            styles provided by Qt from which you will build your custom style. Your
            choice of QStyle class will depend on which style resembles your desired
            style the most. The most general class that you can use as a base is
            QCommonStyle (not QStyle). This is because Qt requires its styles to be
            QCommonStyles.</para>
            <para>Depending on which parts of the base style you want to change,
            you must reimplement the functions that are used to draw those parts of the
            interface. To illustrate this, we will modify the look of the spin box
            arrows drawn by QWindowsStyle. The arrows are primitive elements that are
            drawn by the drawPrimitive() function, so we need to reimplement that
            function. We need the following class declaration:</para>
            <para>class CustomStyle : public QProxyStyle</para>
            <para>{</para>
            <para>    Q_OBJECT</para>
            <para></para>
            <para>public:</para>
            <para>    CustomStyle();</para>
            <para>    ~CustomStyle() {}</para>
            <para></para>
            <para>    void drawPrimitive(PrimitiveElement element, const
            QStyleOption *option,</para>
            <para>                       QPainter *painter, const QWidget *widget)
            const;</para>
            <para>};</para>
            <para>To draw its up and down arrows, QSpinBox uses the
            PE_IndicatorSpinUp and PE_IndicatorSpinDown primitive elements. Here's how
            to reimplement the drawPrimitive() function to draw them
            differently:</para>
            <para>void CustomStyle::drawPrimitive(PrimitiveElement element, const
            QStyleOption *option,</para>
            <para>                                QPainter *painter, const QWidget
            *widget) const</para>
            <para>{</para>
            <para>    if (element == PE_IndicatorSpinUp || element ==
            PE_IndicatorSpinDown) {</para>
            <para>        QPolygon points(3);</para>
            <para>        int x = option-&gt;rect.x();</para>
            <para>        int y = option-&gt;rect.y();</para>
            <para>        int w = option-&gt;rect.width() / 2;</para>
            <para>        int h = option-&gt;rect.height() / 2;</para>
            <para>        x += (option-&gt;rect.width() - w) / 2;</para>
            <para>        y += (option-&gt;rect.height() - h) / 2;</para>
            <para></para>
            <para>        if (element == PE_IndicatorSpinUp) {</para>
            <para>            points[0] = QPoint(x, y + h);</para>
            <para>            points[1] = QPoint(x + w, y + h);</para>
            <para>            points[2] = QPoint(x + w / 2, y);</para>
            <para>        } else { // PE_SpinBoxDown</para>
            <para>            points[0] = QPoint(x, y);</para>
            <para>            points[1] = QPoint(x + w, y);</para>
            <para>            points[2] = QPoint(x + w / 2, y + h);</para>
            <para>        }</para>
            <para></para>
            <para>        if (option-&gt;state &amp; State_Enabled) {</para>
            <para>
            painter-&gt;setPen(option-&gt;palette.mid().color());</para>
            <para>
            painter-&gt;setBrush(option-&gt;palette.buttonText());</para>
            <para>        } else {</para>
            <para>
            painter-&gt;setPen(option-&gt;palette.buttonText().color());</para>
            <para>
            painter-&gt;setBrush(option-&gt;palette.mid());</para>
            <para>        }</para>
            <para>        painter-&gt;drawPolygon(points);</para>
            <para>    } else {</para>
            <para>    QProxyStyle::drawPrimitive(element, option, painter,
            widget);</para>
            <para>    }</para>
            <para>}</para>
            <para>Notice that we don't use the widget argument, except to pass it
            on to the QWindowStyle::drawPrimitive() function. As mentioned earlier, the
            information about what is to be drawn and how it should be drawn is
            specified by a QStyleOption object, so there is no need to ask the
            widget.</para>
            <para>If you need to use the widget argument to obtain additional
            information, be careful to ensure that it isn't 0 and that it is of the
            correct type before using it. For example:</para>
            <para>    const QSpinBox *spinBox = qobject_cast&lt;const QSpinBox
            *&gt;(widget);</para>
            <para>    if (spinBox) {</para>
            <para>    ...</para>
            <para>    }</para>
            <para>When implementing a custom style, you cannot assume that the
            widget is a QSpinBox just because the enum value is called
            PE_IndicatorSpinUp or PE_IndicatorSpinDown.</para>
            <para>The documentation for the Styles example covers this topic in
            more detail.</para>
            <para>Warning: Qt style sheets are currently not supported for custom
            QStyle subclasses. We plan to address this in some future release.</para>
            <para></para>
            <para>Using a Custom Style</para>
            <para>There are several ways of using a custom style in a Qt
            application. The simplest way is to pass the custom style to the
            QApplication::setStyle() static function before creating the QApplication
            object:</para>
            <para>#include &lt;QtWidgets&gt;</para>
            <para></para>
            <para>#include &quot;customstyle.h&quot;</para>
            <para></para>
            <para>int main(int argc, char *argv[])</para>
            <para>{</para>
            <para>    QApplication::setStyle(new CustomStyle);</para>
            <para>    QApplication app(argc, argv);</para>
            <para>    QSpinBox spinBox;</para>
            <para>    spinBox.show();</para>
            <para>    return app.exec();</para>
            <para>}</para>
            <para>You can call QApplication::setStyle() at any time, but by calling
            it before the constructor, you ensure that the user's preference, set using
            the -style command-line option, is respected.</para>
            <para>You may want to make your custom style available for use in other
            applications, which may not be yours and hence not available for you to
            recompile. The Qt Plugin system makes it possible to create styles as
            plugins. Styles created as plugins are loaded as shared objects at runtime
            by Qt itself. Please refer to the Qt Plugin documentation for more
            information on how to go about creating a style plugin.</para>
            <para>Compile your plugin and put it into Qt's plugins/styles
            directory. We now have a pluggable style that Qt can load automatically. To
            use your new style with existing applications, simply start the application
            with the following argument:</para>
            <para>./myapplication -style custom</para>
            <para>The application will use the look and feel from the custom style
            you implemented.</para>
            <para></para>
            <para>Right-to-Left Desktops</para>
            <para>Languages written from right to left (such as Arabic and Hebrew)
            usually also mirror the whole layout of widgets, and require the light to
            come from the screen's top-right corner instead of top-left.</para>
            <para>If you create a custom style, you should take special care when
            drawing asymmetric elements to make sure that they also look correct in a
            mirrored layout. An easy way to test your styles is to run applications
            with the -reverse command-line option or to call
            QApplication::setLayoutDirection() in your main() function.</para>
            <para>Here are some things to keep in mind when making a style work
            well in a right-to-left environment:</para>
            <para></para>
            <para>subControlRect() and subElementRect() return rectangles in screen
            coordinates</para>
            <para>QStyleOption::direction indicates in which direction the item
            should be drawn in</para>
            <para>If a style is not right-to-left aware it will display items as if
            it were left-to-right</para>
            <para>visualRect(), visualPos(), and visualAlignment() are helpful
            functions that will translate from logical to screen
            representations.</para>
            <para>alignedRect() will return a logical rect aligned for the current
            direction</para>
            <para></para>
            <para></para>
            <para>Styles in Item Views</para>
            <para>The painting of items in views is performed by a delegate. Qt's
            default delegate, QStyledItemDelegate, is also used for calculating
            bounding rectangles of items, and their sub-elements for the various kind
            of item data roles QStyledItemDelegate supports. See the
            QStyledItemDelegate class description to find out which datatypes and roles
            are supported. You can read more about item data roles in Model/View
            Programming.</para>
            <para>When QStyledItemDelegate paints its items, it draws
            CE_ItemViewItem, and calculates their size with CT_ItemViewItem. Note also
            that it uses SE_ItemViewItemText to set the size of editors. When
            implementing a style to customize drawing of item views, you need to check
            the implementation of QCommonStyle (and any other subclasses from which
            your style inherits). This way, you find out which and how other style
            elements are painted, and you can then reimplement the painting of elements
            that should be drawn differently.</para>
            <para>We include a small example where we customize the drawing of item
            backgrounds.</para>
            <para>    switch (element) {</para>
            <para>        case (PE_PanelItemViewItem): {</para>
            <para>            painter-&gt;save();</para>
            <para></para>
            <para>            QPoint topLeft = option-&gt;rect.topLeft();</para>
            <para>            QPoint bottomRight =
            option-&gt;rect.topRight();</para>
            <para>            QLinearGradient backgroundGradient(topLeft,
            bottomRight);</para>
            <para>            backgroundGradient.setColorAt(0.0,
            QColor(Qt::yellow).lighter(190));</para>
            <para>            backgroundGradient.setColorAt(1.0, Qt::white);</para>
            <para>            painter-&gt;fillRect(option-&gt;rect,
            QBrush(backgroundGradient));</para>
            <para></para>
            <para>            painter-&gt;restore();</para>
            <para>        break;</para>
            <para>        }</para>
            <para>        default:</para>
            <para>            QProxyStyle::drawPrimitive(element, option, painter,
            widget);</para>
            <para>    }</para>
            <para>The primitive element PE_PanelItemViewItem is responsible for
            painting the background of items, and is called from QCommonStyle's
            implementation of CE_ItemViewItem.</para>
            <para>To add support for drawing of new datatypes and item data roles,
            it is necessary to create a custom delegate. But if you only need to
            support the datatypes implemented by the default delegate, a custom style
            does not need an accompanying delegate. The QStyledItemDelegate class
            description gives more information on custom delegates.</para>
            <para>The drawing of item view headers is also done by the style,
            giving control over size of header items and row and column sizes.</para>
            <para></para>
            <para>See also QStyleOption, QStylePainter, Styles Example, Styles and
            Style Aware Widgets, QStyledItemDelegate, and Styling.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyle.#ctor">
            <summary>
            <para>Constructs a style object.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.Polish(QtWidgets.QWidget)">
            <summary>
            <para>Initializes the appearance of the given widget.</para>
            <para>This function is called for every widget at some point after it
            has been fully created but just before it is shown for the very first
            time.</para>
            <para>Note that the default implementation does nothing. Reasonable
            actions in this function might be to call the QWidget::setBackgroundMode()
            function for the widget. Do not use the function to set, for example, the
            geometry. Reimplementing this function provides a back-door through which
            the appearance of a widget can be changed, but with Qt's style engine it is
            rarely necessary to implement this function; reimplement drawItemPixmap(),
            drawItemText(), drawPrimitive(), etc. instead.</para>
            <para>The QWidget::inherits() function may provide enough information
            to allow class-specific customizations. But because new QStyle subclasses
            are expected to work reasonably with all current and future widgets,
            limited use of hard-coded customization is recommended.</para>
            <para>See also unpolish().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.Unpolish(QtWidgets.QWidget)">
            <summary>
            <para>Uninitialize the given widget's appearance.</para>
            <para>This function is the counterpart to polish(). It is called for
            every polished widget whenever the style is dynamically changed; the former
            style has to unpolish its settings before the new style can polish them
            again.</para>
            <para>Note that unpolish() will only be called if the widget is
            destroyed. This can cause problems in some cases, e.g, if you remove a
            widget from the UI, cache it, and then reinsert it after the style has
            changed; some of Qt's classes cache their widgets.</para>
            <para>See also polish().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.Polish(QtWidgets.QApplication)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Late initialization of the given application object.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.Unpolish(QtWidgets.QApplication)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Uninitialize the given application.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.Polish(QtGui.QPalette)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Changes the palette according to style specific requirements for
            color palettes (if any).</para>
            <para>See also QPalette and QApplication::setPalette().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.ItemTextRect(QtGui.QFontMetrics,QtCore.QRect,System.Int32,System.Boolean,System.String)">
            <summary>
            <para>Returns the area within the given rectangle in which to draw the
            provided text according to the specified font metrics and alignment. The
            enabled parameter indicates whether or not the associated item is
            enabled.</para>
            <para>If the given rectangle is larger than the area needed to render
            the text, the rectangle that is returned will be offset within rectangle
            according to the specified alignment. For example, if alignment is
            Qt::AlignCenter, the returned rectangle will be centered within rectangle.
            If the given rectangle is smaller than the area needed, the returned
            rectangle will be the smallest rectangle large enough to render the
            text.</para>
            <para>See also Qt::Alignment.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.ItemPixmapRect(QtCore.QRect,System.Int32,QtGui.QPixmap)">
            <summary>
            <para>Returns the area within the given rectangle in which to draw the
            specified pixmap according to the defined alignment.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.DrawItemText(QtGui.QPainter,QtCore.QRect,System.Int32,QtGui.QPalette,System.Boolean,System.String,QtGui.QPalette.ColorRole)">
            <summary>
            <para>Draws the given text in the specified rectangle using the
            provided painter and palette.</para>
            <para>The text is drawn using the painter's pen, and aligned and
            wrapped according to the specified alignment. If an explicit textRole is
            specified, the text is drawn using the palette's color for the given role.
            The enabled parameter indicates whether or not the item is enabled; when
            reimplementing this function, the enabled parameter should influence how
            the item is drawn.</para>
            <para>See also Qt::Alignment and drawItemPixmap().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.DrawItemPixmap(QtGui.QPainter,QtCore.QRect,System.Int32,QtGui.QPixmap)">
            <summary>
            <para>Draws the given pixmap in the specified rectangle, according to
            the specified alignment, using the provided painter.</para>
            <para>See also drawItemText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.DrawPrimitive(QtWidgets.QStyle.PrimitiveElement,QtWidgets.QStyleOption,QtGui.QPainter,QtWidgets.QWidget)">
            <summary>
            <para>Draws the given primitive element with the provided painter using
            the style options specified by option.</para>
            <para>The widget argument is optional and may contain a widget that may
            aid in drawing the primitive element.</para>
            <para>The table below is listing the primitive elements and their
            associated style option subclasses. The style options contain all the
            parameters required to draw the elements, including QStyleOption::state
            which holds the style flags that are used when drawing. The table also
            describes which flags that are set when casting the given option to the
            appropriate subclass.</para>
            <para>Note that if a primitive element is not listed here, it is
            because it uses a plain QStyleOption object.</para>
            <para></para>
            <para> Primitive ElementQStyleOption SubclassStyle FlagRemark</para>
            <para>PE_FrameFocusRect	QStyleOptionFocusRect	State_FocusAtBorder
            Whether the focus is is at the border or inside the widget.</para>
            <para>PE_IndicatorCheckBox	QStyleOptionButton	State_NoChange	Indicates
            a &quot;tri-state&quot; checkbox.</para>
            <para>State_On	Indicates the indicator is checked.</para>
            <para>PE_IndicatorRadioButton	QStyleOptionButton	State_On	Indicates
            that a radio button is selected.</para>
            <para>State_NoChange	Indicates a &quot;tri-state&quot;
            controller.</para>
            <para>State_Enabled	Indicates the controller is enabled.</para>
            <para>PE_IndicatorBranch	QStyleOption	State_Children	Indicates that the
            control for expanding the tree to show child items, should be drawn.</para>
            <para>State_Item	Indicates that a horizontal branch (to show a child
            item), should be drawn.</para>
            <para>State_Open	Indicates that the tree branch is expanded.</para>
            <para>State_Sibling	Indicates that a vertical line (to show a sibling
            item), should be drawn.</para>
            <para>PE_IndicatorHeaderArrow	QStyleOptionHeader	State_UpArrow
            Indicates that the arrow should be drawn up; otherwise it should be
            down.</para>
            <para>PE_FrameGroupBox, PE_Frame, PE_FrameLineEdit, PE_FrameMenu,
            PE_FrameDockWidget, PE_FrameWindow	QStyleOptionFrame	State_Sunken	Indicates
            that the Frame should be sunken.</para>
            <para>PE_IndicatorToolBarHandle	QStyleOption	State_Horizontal	Indicates
            that the window handle is horizontal instead of vertical.</para>
            <para>PE_IndicatorSpinPlus, PE_IndicatorSpinMinus, PE_IndicatorSpinUp,
            PE_IndicatorSpinDown,	QStyleOptionSpinBox	State_Sunken	Indicates that the
            button is pressed.</para>
            <para>PE_PanelButtonCommand	QStyleOptionButton	State_Enabled	Set if the
            button is enabled.</para>
            <para>State_HasFocus	Set if the button has input focus.</para>
            <para>State_Raised	Set if the button is not down, not on and not
            flat.</para>
            <para>State_On	Set if the button is a toggle button and is toggled
            on.</para>
            <para>State_Sunken	Set if the button is down (i.e., the mouse button or
            the space bar is pressed on the button).</para>
            <para></para>
            <para>See also drawComplexControl() and drawControl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.DrawControl(QtWidgets.QStyle.ControlElement,QtWidgets.QStyleOption,QtGui.QPainter,QtWidgets.QWidget)">
            <summary>
            <para>Draws the given element with the provided painter with the style
            options specified by option.</para>
            <para>The widget argument is optional and can be used as aid in drawing
            the control. The option parameter is a pointer to a QStyleOption object
            that can be cast to the correct subclass using the qstyleoption_cast()
            function.</para>
            <para>The table below is listing the control elements and their
            associated style option subclass. The style options contain all the
            parameters required to draw the controls, including QStyleOption::state
            which holds the style flags that are used when drawing. The table also
            describes which flags that are set when casting the given option to the
            appropriate subclass.</para>
            <para>Note that if a control element is not listed here, it is because
            it uses a plain QStyleOption object.</para>
            <para></para>
            <para> Control ElementQStyleOption SubclassStyle FlagRemark</para>
            <para>CE_MenuItem, CE_MenuBarItem	QStyleOptionMenuItem	State_Selected
            The menu item is currently selected item.</para>
            <para>State_Enabled	The item is enabled.</para>
            <para>State_DownArrow	Indicates that a scroll down arrow should be
            drawn.</para>
            <para>State_UpArrow	Indicates that a scroll up arrow should be
            drawn</para>
            <para>State_HasFocus	Set if the menu bar has input focus.</para>
            <para>CE_PushButton, CE_PushButtonBevel, CE_PushButtonLabel
            QStyleOptionButton	State_Enabled	Set if the button is enabled.</para>
            <para>State_HasFocus	Set if the button has input focus.</para>
            <para>State_Raised	Set if the button is not down, not on and not
            flat.</para>
            <para>State_On	Set if the button is a toggle button and is toggled
            on.</para>
            <para>State_Sunken	Set if the button is down (i.e., the mouse button or
            the space bar is pressed on the button).</para>
            <para>CE_RadioButton, CE_RadioButtonLabel, CE_CheckBox,
            CE_CheckBoxLabel	QStyleOptionButton	State_Enabled	Set if the button is
            enabled.</para>
            <para>State_HasFocus	Set if the button has input focus.</para>
            <para>State_On	Set if the button is checked.</para>
            <para>State_Off	Set if the button is not checked.</para>
            <para>State_NoChange	Set if the button is in the NoChange state.</para>
            <para>State_Sunken	Set if the button is down (i.e., the mouse button or
            the space bar is pressed on the button).</para>
            <para>CE_ProgressBarContents, CE_ProgressBarLabel, CE_ProgressBarGroove
            QStyleOptionProgressBar	State_Enabled	Set if the progress bar is
            enabled.</para>
            <para>State_HasFocus	Set if the progress bar has input focus.</para>
            <para>CE_Header, CE_HeaderSection, CE_HeaderLabel	QStyleOptionHeader
            </para>
            <para>CE_TabBarTab, CE_TabBarTabShape, CE_TabBarTabLabel
            QStyleOptionTab	State_Enabled	Set if the tab bar is enabled.</para>
            <para>State_Selected	The tab bar is the currently selected tab
            bar.</para>
            <para>State_HasFocus	Set if the tab bar tab has input focus.</para>
            <para>CE_ToolButtonLabel	QStyleOptionToolButton	State_Enabled	Set if
            the tool button is enabled.</para>
            <para>State_HasFocus	Set if the tool button has input focus.</para>
            <para>State_Sunken	Set if the tool button is down (i.e., a mouse button
            or the space bar is pressed).</para>
            <para>State_On	Set if the tool button is a toggle button and is toggled
            on.</para>
            <para>State_AutoRaise	Set if the tool button has auto-raise
            enabled.</para>
            <para>State_MouseOver	Set if the mouse pointer is over the tool
            button.</para>
            <para>State_Raised	Set if the button is not down and is not on.</para>
            <para>CE_ToolBoxTab	QStyleOptionToolBox	State_Selected	The tab is the
            currently selected tab.</para>
            <para>CE_HeaderSection	QStyleOptionHeader	State_Sunken	Indicates that
            the section is pressed.</para>
            <para>State_UpArrow	Indicates that the sort indicator should be
            pointing up.</para>
            <para>State_DownArrow	Indicates that the sort indicator should be
            pointing down.</para>
            <para></para>
            <para>See also drawPrimitive() and drawComplexControl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.SubElementRect(QtWidgets.QStyle.SubElement,QtWidgets.QStyleOption,QtWidgets.QWidget)">
            <summary>
            <para>Returns the sub-area for the given element as described in the
            provided style option. The returned rectangle is defined in screen
            coordinates.</para>
            <para>The widget argument is optional and can be used to aid
            determining the area. The QStyleOption object can be cast to the
            appropriate type using the qstyleoption_cast() function. See the table
            below for the appropriate option casts:</para>
            <para></para>
            <para> Sub ElementQStyleOption Subclass</para>
            <para>SE_PushButtonContents	QStyleOptionButton</para>
            <para>SE_PushButtonFocusRect	QStyleOptionButton</para>
            <para>SE_CheckBoxIndicator	QStyleOptionButton</para>
            <para>SE_CheckBoxContents	QStyleOptionButton</para>
            <para>SE_CheckBoxFocusRect	QStyleOptionButton</para>
            <para>SE_RadioButtonIndicator	QStyleOptionButton</para>
            <para>SE_RadioButtonContents	QStyleOptionButton</para>
            <para>SE_RadioButtonFocusRect	QStyleOptionButton</para>
            <para>SE_ComboBoxFocusRect	QStyleOptionComboBox</para>
            <para>SE_ProgressBarGroove	QStyleOptionProgressBar</para>
            <para>SE_ProgressBarContents	QStyleOptionProgressBar</para>
            <para>SE_ProgressBarLabel	QStyleOptionProgressBar</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.DrawComplexControl(QtWidgets.QStyle.ComplexControl,QtWidgets.QStyleOptionComplex,QtGui.QPainter,QtWidgets.QWidget)">
            <summary>
            <para>Draws the given control using the provided painter with the style
            options specified by option.</para>
            <para>The widget argument is optional and can be used as aid in drawing
            the control.</para>
            <para>The option parameter is a pointer to a QStyleOptionComplex object
            that can be cast to the correct subclass using the qstyleoption_cast()
            function. Note that the rect member of the specified option must be in
            logical coordinates. Reimplementations of this function should use
            visualRect() to change the logical coordinates into screen coordinates
            before calling the drawPrimitive() or drawControl() function.</para>
            <para>The table below is listing the complex control elements and their
            associated style option subclass. The style options contain all the
            parameters required to draw the controls, including QStyleOption::state
            which holds the style flags that are used when drawing. The table also
            describes which flags that are set when casting the given option to the
            appropriate subclass.</para>
            <para></para>
            <para> Complex ControlQStyleOptionComplex SubclassStyle
            FlagRemark</para>
            <para>CC_SpinBox	QStyleOptionSpinBox	State_Enabled	Set if the spin box
            is enabled.</para>
            <para>State_HasFocus	Set if the spin box has input focus.</para>
            <para>CC_ComboBox	QStyleOptionComboBox	State_Enabled	Set if the
            combobox is enabled.</para>
            <para>State_HasFocus	Set if the combobox has input focus.</para>
            <para>CC_ScrollBar	QStyleOptionSlider	State_Enabled	Set if the scroll
            bar is enabled.</para>
            <para>State_HasFocus	Set if the scroll bar has input focus.</para>
            <para>CC_Slider	QStyleOptionSlider	State_Enabled	Set if the slider is
            enabled.</para>
            <para>State_HasFocus	Set if the slider has input focus.</para>
            <para>CC_Dial	QStyleOptionSlider	State_Enabled	Set if the dial is
            enabled.</para>
            <para>State_HasFocus	Set if the dial has input focus.</para>
            <para>CC_ToolButton	QStyleOptionToolButton	State_Enabled	Set if the
            tool button is enabled.</para>
            <para>State_HasFocus	Set if the tool button has input focus.</para>
            <para>State_DownArrow	Set if the tool button is down (i.e., a mouse
            button or the space bar is pressed).</para>
            <para>State_On	Set if the tool button is a toggle button and is toggled
            on.</para>
            <para>State_AutoRaise	Set if the tool button has auto-raise
            enabled.</para>
            <para>State_Raised	Set if the button is not down, not on, and doesn't
            contain the mouse when auto-raise is enabled.</para>
            <para>CC_TitleBar	QStyleOptionTitleBar	State_Enabled	Set if the title
            bar is enabled.</para>
            <para></para>
            <para>See also drawPrimitive() and drawControl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.HitTestComplexControl(QtWidgets.QStyle.ComplexControl,QtWidgets.QStyleOptionComplex,QtCore.QPoint,QtWidgets.QWidget)">
            <summary>
            <para>Returns the sub control at the given position in the given
            complex control (with the style options specified by option).</para>
            <para>Note that the position is expressed in screen coordinates.</para>
            <para>The option argument is a pointer to a QStyleOptionComplex object
            (or one of its subclasses). The object can be cast to the appropriate type
            using the qstyleoption_cast() function. See drawComplexControl() for
            details. The widget argument is optional and can contain additional
            information for the function.</para>
            <para>See also drawComplexControl() and subControlRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.SubControlRect(QtWidgets.QStyle.ComplexControl,QtWidgets.QStyleOptionComplex,QtWidgets.QStyle.SubControl,QtWidgets.QWidget)">
            <summary>
            <para>Returns the rectangle containing the specified subControl of the
            given complex control (with the style specified by option). The rectangle
            is defined in screen coordinates.</para>
            <para>The option argument is a pointer to QStyleOptionComplex or one of
            its subclasses, and can be cast to the appropriate type using the
            qstyleoption_cast() function. See drawComplexControl() for details. The
            widget is optional and can contain additional information for the
            function.</para>
            <para>See also drawComplexControl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.pixelMetric(QtWidgets.QStyle.PixelMetric,QtWidgets.QStyleOption,QtWidgets.QWidget)">
            <summary>
            <para>Returns the value of the given pixel metric.</para>
            <para>The specified option and widget can be used for calculating the
            metric. In general, the widget argument is not used. The option can be cast
            to the appropriate type using the qstyleoption_cast() function. Note that
            the option may be zero even for PixelMetrics that can make use of it. See
            the table below for the appropriate option casts:</para>
            <para></para>
            <para> Pixel MetricQStyleOption Subclass</para>
            <para>PM_SliderControlThickness	QStyleOptionSlider</para>
            <para>PM_SliderLength	QStyleOptionSlider</para>
            <para>PM_SliderTickmarkOffset	QStyleOptionSlider</para>
            <para>PM_SliderSpaceAvailable	QStyleOptionSlider</para>
            <para>PM_ScrollBarExtent	QStyleOptionSlider</para>
            <para>PM_TabBarTabOverlap	QStyleOptionTab</para>
            <para>PM_TabBarTabHSpace	QStyleOptionTab</para>
            <para>PM_TabBarTabVSpace	QStyleOptionTab</para>
            <para>PM_TabBarBaseHeight	QStyleOptionTab</para>
            <para>PM_TabBarBaseOverlap	QStyleOptionTab</para>
            <para></para>
            <para>Some pixel metrics are called from widgets and some are only
            called internally by the style. If the metric is not called by a widget, it
            is the discretion of the style author to make use of it. For some styles,
            this may not be appropriate.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.SizeFromContents(QtWidgets.QStyle.ContentsType,QtWidgets.QStyleOption,QtCore.QSize,QtWidgets.QWidget)">
            <summary>
            <para>Returns the size of the element described by the specified option
            and type, based on the provided contentsSize.</para>
            <para>The option argument is a pointer to a QStyleOption or one of its
            subclasses. The option can be cast to the appropriate type using the
            qstyleoption_cast() function. The widget is an optional argument and can
            contain extra information used for calculating the size.</para>
            <para>See the table below for the appropriate option casts:</para>
            <para></para>
            <para> Contents TypeQStyleOption Subclass</para>
            <para>CT_CheckBox	QStyleOptionButton</para>
            <para>CT_ComboBox	QStyleOptionComboBox</para>
            <para>CT_GroupBox	QStyleOptionGroupBox</para>
            <para>CT_HeaderSection	QStyleOptionHeader</para>
            <para>CT_ItemViewItem	QStyleOptionViewItem</para>
            <para>CT_LineEdit	QStyleOptionFrame</para>
            <para>CT_MdiControls	QStyleOptionComplex</para>
            <para>CT_Menu	QStyleOption</para>
            <para>CT_MenuItem	QStyleOptionMenuItem</para>
            <para>CT_MenuBar	QStyleOptionMenuItem</para>
            <para>CT_MenuBarItem	QStyleOptionMenuItem</para>
            <para>CT_ProgressBar	QStyleOptionProgressBar</para>
            <para>CT_PushButton	QStyleOptionButton</para>
            <para>CT_RadioButton	QStyleOptionButton</para>
            <para>CT_ScrollBar	QStyleOptionSlider</para>
            <para>CT_SizeGrip	QStyleOption</para>
            <para>CT_Slider	QStyleOptionSlider</para>
            <para>CT_SpinBox	QStyleOptionSpinBox</para>
            <para>CT_Splitter	QStyleOption</para>
            <para>CT_TabBarTab	QStyleOptionTab</para>
            <para>CT_TabWidget	QStyleOptionTabWidgetFrame</para>
            <para>CT_ToolButton	QStyleOptionToolButton</para>
            <para></para>
            <para>See also ContentsType and QStyleOption.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.styleHint(QtWidgets.QStyle.StyleHint,QtWidgets.QStyleOption,QtWidgets.QWidget,QtWidgets.QStyleHintReturn)">
            <summary>
            <para>Returns an integer representing the specified style hint for the
            given widget described by the provided style option.</para>
            <para>returnData is used when the querying widget needs more detailed
            data than the integer that styleHint() returns. See the QStyleHintReturn
            class description for details.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.standardPixmap(QtWidgets.QStyle.StandardPixmap,QtWidgets.QStyleOption,QtWidgets.QWidget)">
            <summary>
            <para>Returns a pixmap for the given standardPixmap.</para>
            <para>A standard pixmap is a pixmap that can follow some existing GUI
            style or guideline. The option argument can be used to pass extra
            information required when defining the appropriate pixmap. The widget
            argument is optional and can also be used to aid the determination of the
            pixmap.</para>
            <para>Developers calling standardPixmap() should instead call
            standardIcon() Developers who re-implemented standardPixmap() should
            instead re-implement standardIcon().</para>
            <para>See also standardIcon().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.StandardIcon(QtWidgets.QStyle.StandardPixmap,QtWidgets.QStyleOption,QtWidgets.QWidget)">
            <summary>
            <para>Returns an icon for the given standardIcon.</para>
            <para>The standardIcon is a standard pixmap which can follow some
            existing GUI style or guideline. The option argument can be used to pass
            extra information required when defining the appropriate icon. The widget
            argument is optional and can also be used to aid the determination of the
            icon.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.GeneratedIconPixmap(QtGui.QIcon.Mode,QtGui.QPixmap,QtWidgets.QStyleOption)">
            <summary>
            <para>Returns a copy of the given pixmap, styled to conform to the
            specified iconMode and taking into account the palette specified by
            option.</para>
            <para>The option parameter can pass extra information, but it must
            contain a palette.</para>
            <para>Note that not all pixmaps will conform, in which case the
            returned pixmap is a plain copy.</para>
            <para>See also QIcon.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.LayoutSpacing(QtWidgets.QSizePolicy.ControlType,QtWidgets.QSizePolicy.ControlType,QtCore.Qt.Orientation,QtWidgets.QStyleOption,QtWidgets.QWidget)">
            <summary>
            <para>Returns the spacing that should be used between control1 and
            control2 in a layout. orientation specifies whether the controls are laid
            out side by side or stacked vertically. The option parameter can be used to
            pass extra information about the parent widget. The widget parameter is
            optional and can also be used if option is 0.</para>
            <para>This function is called by the layout system. It is used only if
            PM_LayoutHorizontalSpacing or PM_LayoutVerticalSpacing returns a negative
            value.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also combinedLayoutSpacing().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.CombinedLayoutSpacing(QtWidgets.QSizePolicy.ControlType,QtWidgets.QSizePolicy.ControlType,QtCore.Qt.Orientation,QtWidgets.QStyleOption,QtWidgets.QWidget)">
            <summary>
            <para>Returns the spacing that should be used between controls1 and
            controls2 in a layout. orientation specifies whether the controls are laid
            out side by side or stacked vertically. The option parameter can be used to
            pass extra information about the parent widget. The widget parameter is
            optional and can also be used if option is 0.</para>
            <para>controls1 and controls2 are OR-combination of zero or more
            control types.</para>
            <para>This function is called by the layout system. It is used only if
            PM_LayoutHorizontalSpacing or PM_LayoutVerticalSpacing returns a negative
            value.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also layoutSpacing().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.VisualRect(QtCore.Qt.LayoutDirection,QtCore.QRect,QtCore.QRect)">
            <summary>
            <para>Returns the given logicalRectangle converted to screen
            coordinates based on the specified direction. The boundingRectangle is used
            when performing the translation.</para>
            <para>This function is provided to support right-to-left desktops, and
            is typically used in implementations of the subControlRect()
            function.</para>
            <para>See also QWidget::layoutDirection.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.VisualPos(QtCore.Qt.LayoutDirection,QtCore.QRect,QtCore.QPoint)">
            <summary>
            <para>Returns the given logicalPosition converted to screen coordinates
            based on the specified direction. The boundingRectangle is used when
            performing the translation.</para>
            <para>See also QWidget::layoutDirection.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.SliderPositionFromValue(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>Converts the given logicalValue to a pixel position. The min
            parameter maps to 0, max maps to span and other values are distributed
            evenly in-between.</para>
            <para>This function can handle the entire integer range without
            overflow, providing that span is less than 4096.</para>
            <para>By default, this function assumes that the maximum value is on
            the right for horizontal items and on the bottom for vertical items. Set
            the upsideDown parameter to true to reverse this behavior.</para>
            <para>See also sliderValueFromPosition().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.SliderValueFromPosition(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>Converts the given pixel position to a logical value. 0 maps to
            the min parameter, span maps to max and other values are distributed evenly
            in-between.</para>
            <para>This function can handle the entire integer range without
            overflow.</para>
            <para>By default, this function assumes that the maximum value is on
            the right for horizontal items and on the bottom for vertical items. Set
            the upsideDown parameter to true to reverse this behavior.</para>
            <para>See also sliderPositionFromValue().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.VisualAlignment(QtCore.Qt.LayoutDirection,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>Transforms an alignment of Qt::AlignLeft or Qt::AlignRight
            without Qt::AlignAbsolute into Qt::AlignLeft or Qt::AlignRight with
            Qt::AlignAbsolute according to the layout direction. The other alignment
            flags are left untouched.</para>
            <para>If no horizontal alignment was specified, the function returns
            the default alignment for the given layout direction.</para>
            <para>QWidget::layoutDirection</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyle.AlignedRect(QtCore.Qt.LayoutDirection,QtCore.Qt.AlignmentFlag,QtCore.QSize,QtCore.QRect)">
            <summary>
            <para>Returns a new rectangle of the specified size that is aligned to
            the given rectangle according to the specified alignment and
            direction.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyle.StandardPalette">
            <summary>
            <para>Returns the style's standard palette.</para>
            <para>Note that on systems that support system colors, the style's
            standard palette is not used. In particular, the Windows XP, Vista, and Mac
            styles do not use the standard palette, but make use of native theme
            engines. With these styles, you should not set the palette with
            QApplication::setStandardPalette().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyle.Proxy">
            <summary>
            <para>This function returns the current proxy for this style. By
            default most styles will return themselves. However when a proxy style is
            in use, it will allow the style to call back into its proxy.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyle.StateFlag">
            <summary>
            <para>This enum describes flags that are used when drawing primitive
            elements.</para>
            <para>Note that not all primitives use all of these flags, and that the
            flags may mean different things to different items.</para>
            <para>The State type is a typedef for QFlags&lt;StateFlag&gt;. It
            stores an OR combination of StateFlag values.</para>
            <para>See also drawPrimitive().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_None">
            <summary>Indicates that the widget does not have a state.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_Enabled">
            <summary>Used to indicate if the widget is enabled.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_Raised">
            <summary>Used to indicate if a button is raised.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_Sunken">
            <summary>Used to indicate if the widget is sunken or pressed.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_Off">
            <summary>Used to indicate if the widget is not checked.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_NoChange">
            <summary>Used to indicate a tri-state checkbox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_On">
            <summary>Used to indicate if the widget is checked.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_DownArrow">
            <summary>Used to indicate if a down arrow should be visible on the widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_Horizontal">
            <summary>Used to indicate if the widget is laid out horizontally, for example. a tool bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_HasFocus">
            <summary>Used to indicate if the widget has focus.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_AutoRaise">
            <summary>Used to indicate if auto-raise appearance should be usd on a tool button.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_MouseOver">
            <summary>Used to indicate if the widget is under the mouse.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_UpArrow">
            <summary>Used to indicate if an up arrow should be visible on the widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_Selected">
            <summary>Used to indicate if a widget is selected.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_Active">
            <summary>Indicates that the widget is active.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_Open">
            <summary>Used by item views to indicate if the tree branch is open.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_Children">
            <summary>Used to indicate if an item view branch has children.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_Item">
            <summary>Used by item views to indicate if a horizontal branch should be drawn.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_Sibling">
            <summary>Used by item views to indicate if a vertical line needs to be drawn (for siblings).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_Editing">
            <summary>Used to indicate if an editor is opened on the widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_KeyboardFocusChange">
            <summary>Used to indicate if the focus was changed with the keyboard, e.g., tab, backtab or shortcut.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_ReadOnly">
            <summary>Used to indicate if a widget is read-only.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_Small">
            <summary>Used to indicate a small style Mac widget or button.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StateFlag.State_Mini">
            <summary>Used to indicate a mini style Mac widget or button.</summary>
        </member>
        <member name="T:QtWidgets.QStyle.SubControl">
            <summary>
            <para>This enum describes the available sub controls. A subcontrol is a
            control element within a complex control (ComplexControl).</para>
            <para>The SubControls type is a typedef for QFlags&lt;SubControl&gt;.
            It stores an OR combination of SubControl values.</para>
            <para>See also ComplexControl.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_None">
            <summary>Special value that matches no other sub control.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_ScrollBarAddLine">
            <summary>Scroll bar add line (i.e., down/right arrow); see also QScrollBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_ScrollBarSubLine">
            <summary>Scroll bar sub line (i.e., up/left arrow).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_ScrollBarAddPage">
            <summary>Scroll bar add page (i.e., page down).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_ScrollBarSubPage">
            <summary>Scroll bar sub page (i.e., page up).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_ScrollBarFirst">
            <summary>Scroll bar first line (i.e., home).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_ScrollBarLast">
            <summary>Scroll bar last line (i.e., end).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_ScrollBarSlider">
            <summary>Scroll bar slider handle.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_ScrollBarGroove">
            <summary>Special sub-control which contains the area in which the slider handle may move.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_SpinBoxUp">
            <summary>Spin widget up/increase; see also QSpinBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_SpinBoxDown">
            <summary>Spin widget down/decrease.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_SpinBoxFrame">
            <summary>Spin widget frame.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_SpinBoxEditField">
            <summary>Spin widget edit field.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_ComboBoxFrame">
            <summary>Combobox frame.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_ComboBoxEditField">
            <summary>Combobox edit field; see also QComboBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_ComboBoxArrow">
            <summary>Combobox arrow button.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_ComboBoxListBoxPopup">
            <summary>The reference rectangle for the combobox popup. Used to calculate the position of the popup.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_SliderGroove">
            <summary>Special sub-control which contains the area in which the slider handle may move.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_SliderHandle">
            <summary>Slider handle.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_SliderTickmarks">
            <summary>Slider tickmarks.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_ToolButton">
            <summary>Tool button (see also QToolButton).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_ToolButtonMenu">
            <summary>Sub-control for opening a popup menu in a tool button.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_TitleBarSysMenu">
            <summary>System menu button (i.e., restore, close, etc.).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_TitleBarMinButton">
            <summary>Minimize button.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_TitleBarMaxButton">
            <summary>Maximize button.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_TitleBarCloseButton">
            <summary>Close button.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_TitleBarNormalButton">
            <summary>Normal (restore) button.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_TitleBarShadeButton">
            <summary>Shade button.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_TitleBarUnshadeButton">
            <summary>Unshade button.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_TitleBarContextHelpButton">
            <summary>Context Help button.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_TitleBarLabel">
            <summary>Window title label.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_DialGroove">
            <summary>The groove for the dial.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_DialHandle">
            <summary>The handle of the dial (i.e. what you use to control the dial).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_DialTickmarks">
            <summary>The tickmarks for the dial.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_GroupBoxCheckBox">
            <summary>The optional check box of a group box.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_GroupBoxLabel">
            <summary>The title of a group box.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_GroupBoxContents">
            <summary>The group box contents.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_GroupBoxFrame">
            <summary>The frame of a group box.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_MdiMinButton">
            <summary>The minimize button for a MDI subwindow in the menu bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_MdiNormalButton">
            <summary>The normal button for a MDI subwindow in the menu bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_MdiCloseButton">
            <summary>The close button for a MDI subwindow in the menu bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubControl.SC_All">
            <summary>Special value that matches all sub-controls.</summary>
        </member>
        <member name="T:QtWidgets.QStyle.PrimitiveElement">
            <summary>
            <para>This enum describes the various primitive elements. A primitive
            element is a common GUI element, such as a checkbox indicator or button
            bevel.</para>
            <para>See also drawPrimitive().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_Frame">
            <summary>Generic frame</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_FrameDefaultButton">
            <summary>This frame around a default button, e.g. in a dialog.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_FrameDockWidget">
            <summary>Panel frame for dock windows and toolbars.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_FrameFocusRect">
            <summary>Generic focus indicator.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_FrameGroupBox">
            <summary>Panel frame around group boxes.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_FrameLineEdit">
            <summary>Panel frame for line edits.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_FrameMenu">
            <summary>Frame for popup windows/menus; see also QMenu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_FrameStatusBar">
            <summary>Obsolete. Use PE_FrameStatusBarItem instead.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_FrameStatusBarItem">
            <summary>Frame for an item of a status bar; see also QStatusBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_FrameTabWidget">
            <summary>Frame for tab widgets.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_FrameWindow">
            <summary>Frame around a MDI window or a docking window.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_FrameButtonBevel">
            <summary>Panel frame for a button bevel.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_FrameButtonTool">
            <summary>Panel frame for a tool button.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_FrameTabBarBase">
            <summary>The frame that is drawn for a tab bar, ususally drawn for a tab bar that isn't part of a tab widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_PanelButtonCommand">
            <summary>Button used to initiate an action, for example, a QPushButton.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_PanelButtonBevel">
            <summary>Generic panel with a button bevel.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_PanelButtonTool">
            <summary>Panel for a Tool button, used with QToolButton.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_PanelMenuBar">
            <summary>Panel for menu bars.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_PanelToolBar">
            <summary>The panel for a toolbar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_PanelLineEdit">
            <summary>Panel for a QLineEdit.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorArrowDown">
            <summary>Generic Down arrow.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorArrowLeft">
            <summary>Generic Left arrow.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorArrowRight">
            <summary>Generic Right arrow.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorArrowUp">
            <summary>Generic Up arrow.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorBranch">
            <summary>Lines used to represent the branch of a tree in a tree view.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorButtonDropDown">
            <summary>Indicator for a drop down button, for example, a tool button that displays a menu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorItemViewItemCheck">
            <summary>On/off indicator for a view item.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorCheckBox">
            <summary>On/off indicator, for example, a QCheckBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorDockWidgetResizeHandle">
            <summary>Resize handle for dock windows.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorHeaderArrow">
            <summary>Arrow used to indicate sorting on a list or table header.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorMenuCheckMark">
            <summary>Check mark used in a menu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorProgressChunk">
            <summary>Section of a progress bar indicator; see also QProgressBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorRadioButton">
            <summary>Exclusive on/off indicator, for example, a QRadioButton.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorSpinDown">
            <summary>Down symbol for a spin widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorSpinMinus">
            <summary>Decrease symbol for a spin widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorSpinPlus">
            <summary>Increase symbol for a spin widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorSpinUp">
            <summary>Up symbol for a spin widget, for example a QSpinBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorToolBarHandle">
            <summary>The handle of a toolbar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorToolBarSeparator">
            <summary>The separator in a toolbar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_PanelTipLabel">
            <summary>The panel for a tip label.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorTabTear">
            <summary>An indicator that a tab is partially scrolled out of the visible tab bar when there are many tabs.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_PanelScrollAreaCorner">
            <summary>Panel at the bottom-right (or bottom-left) corner of a scroll area.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_Widget">
            <summary>A plain QWidget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorColumnViewArrow">
            <summary>An arrow in a QColumnView.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorItemViewItemDrop">
            <summary>An indicator that is drawn to show where an item in an item view is about to be dropped during a drag-and-drop operation in an item view.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_PanelItemViewItem">
            <summary>The background for an item in an item view.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_PanelItemViewRow">
            <summary>The background of a row in an item view.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_PanelStatusBar">
            <summary>The panel for a status bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_IndicatorTabClose">
            <summary>The close button on a tab bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_PanelMenu">
            <summary>The panel for a menu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PrimitiveElement.PE_CustomBase">
            <summary>Base value for custom primitive elements. All values above this are reserved for custom use. Custom values must be greater than this value.</summary>
        </member>
        <member name="T:QtWidgets.QStyle.ControlElement">
            <summary>
            <para>This enum represents a control element. A control element is a
            part of a widget that performs some action or displays information to the
            user.</para>
            <para>See also drawControl().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_PushButton">
            <summary>A QPushButton, draws CE_PushButtonBevel, CE_PushButtonLabel and PE_FrameFocusRect.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_PushButtonBevel">
            <summary>The bevel and default indicator of a QPushButton.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_PushButtonLabel">
            <summary>The label (an icon with text or pixmap) of a QPushButton.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_CheckBox">
            <summary>A QCheckBox, draws a PE_IndicatorCheckBox, a CE_CheckBoxLabel and a PE_FrameFocusRect.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_CheckBoxLabel">
            <summary>The label (text or pixmap) of a QCheckBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_RadioButton">
            <summary>A QRadioButton, draws a PE_IndicatorRadioButton, a CE_RadioButtonLabel and a PE_FrameFocusRect.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_RadioButtonLabel">
            <summary>The label (text or pixmap) of a QRadioButton.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_TabBarTab">
            <summary>The tab and label within a QTabBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_TabBarTabShape">
            <summary>The tab shape within a tab bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_TabBarTabLabel">
            <summary>The label within a tab.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ProgressBar">
            <summary>A QProgressBar, draws CE_ProgressBarGroove, CE_ProgressBarContents and CE_ProgressBarLabel.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ProgressBarGroove">
            <summary>The groove where the progress indicator is drawn in a QProgressBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ProgressBarContents">
            <summary>The progress indicator of a QProgressBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ProgressBarLabel">
            <summary>The text label of a QProgressBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_MenuItem">
            <summary>A menu item in a QMenu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_MenuScroller">
            <summary>Scrolling areas in a QMenu when the style supports scrolling.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_MenuVMargin">
            <summary>The vertical extra space on the top/bottom of a menu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_MenuHMargin">
            <summary>The horizontal extra space on the left/right of a menu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_MenuTearoff">
            <summary>A menu item representing the tear off section of a QMenu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_MenuEmptyArea">
            <summary>The area in a menu without menu items.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_MenuBarItem">
            <summary>A menu item in a QMenuBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_MenuBarEmptyArea">
            <summary>The empty area of a QMenuBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ToolButtonLabel">
            <summary>A tool button's label.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_Header">
            <summary>A header.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_HeaderSection">
            <summary>A header section.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_HeaderLabel">
            <summary>The header's label.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ToolBoxTab">
            <summary>The toolbox's tab and label within a QToolBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_SizeGrip">
            <summary>Window resize handle; see also QSizeGrip.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_Splitter">
            <summary>Splitter handle; see also QSplitter.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_RubberBand">
            <summary>Rubber band used in for example an icon view.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_DockWidgetTitle">
            <summary>Dock window title.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ScrollBarAddLine">
            <summary>Scroll bar line increase indicator. (i.e., scroll down); see also QScrollBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ScrollBarSubLine">
            <summary>Scroll bar line decrease indicator (i.e., scroll up).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ScrollBarAddPage">
            <summary>Scolllbar page increase indicator (i.e., page down).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ScrollBarSubPage">
            <summary>Scroll bar page decrease indicator (i.e., page up).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ScrollBarSlider">
            <summary>Scroll bar slider.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ScrollBarFirst">
            <summary>Scroll bar first line indicator (i.e., home).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ScrollBarLast">
            <summary>Scroll bar last line indicator (i.e., end).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_FocusFrame">
            <summary>Focus frame that is style controlled.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ComboBoxLabel">
            <summary>The label of a non-editable QComboBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ToolBar">
            <summary>A toolbar like QToolBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ToolBoxTabShape">
            <summary>The toolbox's tab shape.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ToolBoxTabLabel">
            <summary>The toolbox's tab label.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_HeaderEmptyArea">
            <summary>The area of a header view where there are no header sections.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ItemViewItem">
            <summary>An item inside an item view.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_ShapedFrame">
            <summary>The frame with the shape specified in the QStyleOptionFrameV3; see QFrame.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ControlElement.CE_CustomBase">
            <summary>Base value for custom control elements; custom values must be greater than this value.</summary>
        </member>
        <member name="T:QtWidgets.QStyle.SubElement">
            <summary>
            <para>This enum represents a sub-area of a widget. Style
            implementations use these areas to draw the different parts of a
            widget.</para>
            <para>See also subElementRect().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_PushButtonContents">
            <summary>Area containing the label (icon with text or pixmap).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_PushButtonFocusRect">
            <summary>Area for the focus rect (usually larger than the contents rect).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_CheckBoxIndicator">
            <summary>Area for the state indicator (e.g., check mark).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_CheckBoxContents">
            <summary>Area for the label (text or pixmap).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_CheckBoxFocusRect">
            <summary>Area for the focus indicator.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_CheckBoxClickRect">
            <summary>Clickable area, defaults to SE_CheckBoxFocusRect.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_RadioButtonIndicator">
            <summary>Area for the state indicator.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_RadioButtonContents">
            <summary>Area for the label.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_RadioButtonFocusRect">
            <summary>Area for the focus indicator.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_RadioButtonClickRect">
            <summary>Clickable area, defaults to SE_RadioButtonFocusRect.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_ComboBoxFocusRect">
            <summary>Area for the focus indicator.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_SliderFocusRect">
            <summary>Area for the focus indicator.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_ProgressBarGroove">
            <summary>Area for the groove.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_ProgressBarContents">
            <summary>Area for the progress indicator.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_ProgressBarLabel">
            <summary>Area for the text label.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_ToolBoxTabContents">
            <summary>Area for a toolbox tab's icon and label.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_HeaderLabel">
            <summary>Area for the label in a header.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_HeaderArrow">
            <summary>Area for the sort indicator for a header.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_TabWidgetTabBar">
            <summary>Area for the tab bar widget in a tab widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_TabWidgetTabPane">
            <summary>Area for the pane of a tab widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_TabWidgetTabContents">
            <summary>Area for the contents of the tab widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_TabWidgetLeftCorner">
            <summary>Area for the left corner widget in a tab widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_TabWidgetRightCorner">
            <summary>Area for the right corner widget in a tab widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_ItemViewItemCheckIndicator">
            <summary>Area for a view item's check mark.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_TabBarTearIndicator">
            <summary>Area for the tear indicator on a tab bar with scroll arrows.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_TreeViewDisclosureItem">
            <summary>Area for the actual disclosure item in a tree branch.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_LineEditContents">
            <summary>Area for a line edit's contents.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_FrameContents">
            <summary>Area for a frame's contents.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_DockWidgetCloseButton">
            <summary>The close button of a dock widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_DockWidgetFloatButton">
            <summary>The float button of a dock widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_DockWidgetTitleBarText">
            <summary>The text bounds of the dock widgets title.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_DockWidgetIcon">
            <summary>The icon of a dock widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_CheckBoxLayoutItem">
            <summary>Area that counts for the parent layout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_ComboBoxLayoutItem">
            <summary>Area that counts for the parent layout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_DateTimeEditLayoutItem">
            <summary>Area that counts for the parent layout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_DialogButtonBoxLayoutItem">
            <summary>Area that counts for the parent layout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_LabelLayoutItem">
            <summary>Area that counts for the parent layout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_ProgressBarLayoutItem">
            <summary>Area that counts for the parent layout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_PushButtonLayoutItem">
            <summary>Area that counts for the parent layout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_RadioButtonLayoutItem">
            <summary>Area that counts for the parent layout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_SliderLayoutItem">
            <summary>Area that counts for the parent layout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_SpinBoxLayoutItem">
            <summary>Area that counts for the parent layout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_ToolButtonLayoutItem">
            <summary>Area that counts for the parent layout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_FrameLayoutItem">
            <summary>Area that counts for the parent layout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_GroupBoxLayoutItem">
            <summary>Area that counts for the parent layout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_TabWidgetLayoutItem">
            <summary>Area that counts for the parent layout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_ItemViewItemDecoration">
            <summary>Area for a view item's decoration (icon).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_ItemViewItemText">
            <summary>Area for a view item's text.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_ItemViewItemFocusRect">
            <summary>Area for a view item's focus rect.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_TabBarTabLeftButton">
            <summary>Area for a widget on the left side of a tab in a tab bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_TabBarTabRightButton">
            <summary>Area for a widget on the right side of a tab in a tab bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_TabBarTabText">
            <summary>Area for the text on a tab in a tab bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_ShapedFrameContents">
            <summary>Area for a frame's contents using the shape in QStyleOptionFrameV3; see QFrame</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_ToolBarHandle">
            <summary>Area for the handle of a tool bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.SubElement.SE_CustomBase">
            <summary>Base value for custom sub-elements. Custom values must be greater than this value.</summary>
        </member>
        <member name="T:QtWidgets.QStyle.ComplexControl">
            <summary>
            <para>This enum describes the available complex controls. Complex
            controls have different behavior depending upon where the user clicks on
            them or which keys are pressed.</para>
            <para>See also SubControl and drawComplexControl().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyle.ComplexControl.CC_SpinBox">
            <summary>A spinbox, like QSpinBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ComplexControl.CC_ComboBox">
            <summary>A combobox, like QComboBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ComplexControl.CC_ScrollBar">
            <summary>A scroll bar, like QScrollBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ComplexControl.CC_Slider">
            <summary>A slider, like QSlider.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ComplexControl.CC_ToolButton">
            <summary>A tool button, like QToolButton.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ComplexControl.CC_TitleBar">
            <summary>A Title bar, like those used in QMdiSubWindow.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ComplexControl.CC_Dial">
            <summary>A dial, like QDial.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ComplexControl.CC_GroupBox">
            <summary>A group box, like QGroupBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ComplexControl.CC_MdiControls">
            <summary>The minimize, close, and normal button in the menu bar for a maximized MDI subwindow.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ComplexControl.CC_CustomBase">
            <summary>Base value for custom complex controls. Custom values must be greater than this value.</summary>
        </member>
        <member name="T:QtWidgets.QStyle.PixelMetric">
            <summary>
            <para>This enum describes the various available pixel metrics. A pixel
            metric is a style dependent size represented by a single pixel
            value.</para>
            <para>The following values are obsolete:</para>
            <para>See also pixelMetric().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ButtonMargin">
            <summary>Amount of whitespace between push button labels and the frame.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ButtonDefaultIndicator">
            <summary>Width of the default-button indicator frame.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MenuButtonIndicator">
            <summary>Width of the menu button indicator proportional to the widget height.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ButtonShiftHorizontal">
            <summary>Horizontal contents shift of a button when the button is down.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ButtonShiftVertical">
            <summary>Vertical contents shift of a button when the button is down.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_DefaultFrameWidth">
            <summary>Default frame width (usually 2).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_SpinBoxFrameWidth">
            <summary>Frame width of a spin box, defaults to PM_DefaultFrameWidth.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ComboBoxFrameWidth">
            <summary>Frame width of a combo box, defaults to PM_DefaultFrameWidth.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MaximumDragDistance">
            <summary>The maximum allowed distance between the mouse and a scrollbar when dragging. Exceeding the specified distance will cause the slider to jump back to the original position; a value of -1 disables this behavior.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ScrollBarExtent">
            <summary>Width of a vertical scroll bar and the height of a horizontal scroll bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ScrollBarSliderMin">
            <summary>The minimum height of a vertical scroll bar's slider and the minimum width of a horizontal scroll bar's slider.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_SliderThickness">
            <summary>Total slider thickness.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_SliderControlThickness">
            <summary>Thickness of the slider handle.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_SliderLength">
            <summary>Length of the slider.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_SliderTickmarkOffset">
            <summary>The offset between the tickmarks and the slider.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_SliderSpaceAvailable">
            <summary>The available space for the slider to move.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_DockWidgetSeparatorExtent">
            <summary>Width of a separator in a horizontal dock window and the height of a separator in a vertical dock window.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_DockWidgetHandleExtent">
            <summary>Width of the handle in a horizontal dock window and the height of the handle in a vertical dock window.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_DockWidgetFrameWidth">
            <summary>Frame width of a dock window.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_TabBarTabOverlap">
            <summary>Number of pixels the tabs should overlap. (Currently only used in styles, not inside of QTabBar)</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_TabBarTabHSpace">
            <summary>Extra space added to the tab width.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_TabBarTabVSpace">
            <summary>Extra space added to the tab height.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_TabBarBaseHeight">
            <summary>Height of the area between the tab bar and the tab pages.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_TabBarBaseOverlap">
            <summary>Number of pixels the tab bar overlaps the tab bar base.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ProgressBarChunkWidth">
            <summary>Width of a chunk in a progress bar indicator.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_SplitterWidth">
            <summary>Width of a splitter.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_TitleBarHeight">
            <summary>Height of the title bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MenuScrollerHeight">
            <summary>Height of the scroller area in a QMenu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MenuHMargin">
            <summary>Additional border (used on left and right) for a QMenu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MenuVMargin">
            <summary>Additional border (used for bottom and top) for a QMenu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MenuPanelWidth">
            <summary>Border width (applied on all sides) for a QMenu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MenuTearoffHeight">
            <summary>Height of a tear off area in a QMenu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MenuDesktopFrameWidth">
            <summary>The frame width for the menu on the desktop.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MenuBarPanelWidth">
            <summary>Frame width of a menu bar, defaults to PM_DefaultFrameWidth.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MenuBarItemSpacing">
            <summary>Spacing between menu bar items.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MenuBarVMargin">
            <summary>Spacing between menu bar items and top/bottom of bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MenuBarHMargin">
            <summary>Spacing between menu bar items and left/right of bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_IndicatorWidth">
            <summary>Width of a check box indicator.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_IndicatorHeight">
            <summary>Height of a checkbox indicator.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ExclusiveIndicatorWidth">
            <summary>Width of a radio button indicator.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ExclusiveIndicatorHeight">
            <summary>Height of a radio button indicator.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MdiSubWindowFrameWidth">
            <summary>Frame width of an MDI window.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MDIFrameWidth">
            <summary>Obsolete. Use PM_MdiSubWindowFrameWidth instead.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MdiSubWindowMinimizedWidth">
            <summary>Width of a minimized MDI window.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MDIMinimizedWidth">
            <summary>Obsolete. Use PM_MdiSubWindowMinimizedWidth instead.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_HeaderMargin">
            <summary>The size of the margin between the sort indicator and the text.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_HeaderMarkSize">
            <summary>The size of the sort indicator in a header.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_HeaderGripMargin">
            <summary>The size of the resize grip in a header.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_TabBarTabShiftHorizontal">
            <summary>Horizontal pixel shift when a tab is selected.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_TabBarTabShiftVertical">
            <summary>Vertical pixel shift when a tab is selected.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ToolBarFrameWidth">
            <summary>Width of the frame around toolbars.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ToolBarHandleExtent">
            <summary>Width of a toolbar handle in a horizontal toolbar and the height of the handle in a vertical toolbar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ToolBarItemSpacing">
            <summary>Spacing between toolbar items.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ToolBarItemMargin">
            <summary>Spacing between the toolbar frame and the items.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ToolBarSeparatorExtent">
            <summary>Width of a toolbar separator in a horizontal toolbar and the height of a separator in a vertical toolbar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ToolBarExtensionExtent">
            <summary>Width of a toolbar extension button in a horizontal toolbar and the height of the button in a vertical toolbar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_SpinBoxSliderHeight">
            <summary>The height of the optional spin box slider.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_DefaultTopLevelMargin">
            <summary>Use PM_LayoutLeftMargin, PM_LayoutTopMargin, PM_LayoutRightMargin, and PM_LayoutBottomMargin instead.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_DefaultChildMargin">
            <summary>Use PM_LayoutLeftMargin, PM_LayoutTopMargin, PM_LayoutRightMargin, and PM_LayoutBottomMargin instead.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_DefaultLayoutSpacing">
            <summary>Use PM_LayoutHorizontalSpacing and PM_LayoutVerticalSpacing instead.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ToolBarIconSize">
            <summary>Default tool bar icon size</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ListViewIconSize">
            <summary>The default size for icons in a list view.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_IconViewIconSize">
            <summary>The default size for icons in an icon view.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_SmallIconSize">
            <summary>Default small icon size</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_LargeIconSize">
            <summary>Default large icon size</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_FocusFrameVMargin">
            <summary>Vertical margin that the focus frame will outset the widget by.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_FocusFrameHMargin">
            <summary>Horizontal margin that the focus frame will outset the widget by.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ToolTipLabelFrameWidth">
            <summary>The frame width for a tool tip label.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_CheckBoxLabelSpacing">
            <summary>The spacing between a check box indicator and its label.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_TabBarIconSize">
            <summary>The default icon size for a tab bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_SizeGripSize">
            <summary>The size of a size grip.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_DockWidgetTitleMargin">
            <summary>Margin of the dock window title.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_MessageBoxIconSize">
            <summary>The size of the standard icons in a message box</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ButtonIconSize">
            <summary>The default size of button icons</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_DockWidgetTitleBarButtonMargin">
            <summary>Amount of whitespace between dock widget's title bar button labels and the frame.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_RadioButtonLabelSpacing">
            <summary>The spacing between a radio button indicator and its label.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_LayoutLeftMargin">
            <summary>Default left margin for a QLayout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_LayoutTopMargin">
            <summary>Default top margin for a QLayout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_LayoutRightMargin">
            <summary>Default right margin for a QLayout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_LayoutBottomMargin">
            <summary>Default bottom margin for a QLayout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_LayoutHorizontalSpacing">
            <summary>Default horizontal spacing for a QLayout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_LayoutVerticalSpacing">
            <summary>Default vertical spacing for a QLayout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_TabBar_ScrollButtonOverlap">
            <summary>The distance between the left and right buttons in a tab bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_TextCursorWidth">
            <summary>The width of the cursor in a line edit or text edit</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_TabCloseIndicatorWidth">
            <summary>The default width of a close button on a tab in a tab bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_TabCloseIndicatorHeight">
            <summary>The default height of a close button on a tab in a tab bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ScrollView_ScrollBarSpacing">
            <summary>Distance between frame and scrollbar with SH_ScrollView_FrameOnlyAroundContents set.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_ScrollView_ScrollBarOverlap">
            <summary>Overlap between scroll bars and scroll content</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_SubMenuOverlap">
            <summary>The horizontal overlap between a submenu and its parent.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_TreeViewIndentation">
            <summary>The indentation of items in a tree view. This enum value has been introduced in Qt 5.4.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_HeaderDefaultSectionSizeHorizontal">
            <summary>The default size of sections in a horizontal header. This enum value has been introduced in Qt 5.5.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_HeaderDefaultSectionSizeVertical">
            <summary>The default size of sections in a vertical header. This enum value has been introduced in Qt 5.5.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.PixelMetric.PM_CustomBase">
            <summary>Base value for custom pixel metrics. Custom values must be greater than this value.</summary>
        </member>
        <member name="T:QtWidgets.QStyle.ContentsType">
            <summary>
            <para>This enum describes the available contents types. These are used
            to calculate sizes for the contents of various widgets.</para>
            <para>See also sizeFromContents().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_PushButton">
            <summary>A push button, like QPushButton.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_CheckBox">
            <summary>A check box, like QCheckBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_RadioButton">
            <summary>A radio button, like QRadioButton.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_ToolButton">
            <summary>A tool button, like QToolButton.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_ComboBox">
            <summary>A combo box, like QComboBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_Splitter">
            <summary>A splitter, like QSplitter.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_ProgressBar">
            <summary>A progress bar, like QProgressBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_MenuItem">
            <summary>A menu item, like QMenuItem.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_MenuBarItem">
            <summary>A menu bar item, like the buttons in a QMenuBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_MenuBar">
            <summary>A menu bar, like QMenuBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_Menu">
            <summary>A menu, like QMenu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_TabBarTab">
            <summary>A tab on a tab bar, like QTabBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_Slider">
            <summary>A slider, like QSlider.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_ScrollBar">
            <summary>A scroll bar, like QScrollBar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_LineEdit">
            <summary>A line edit, like QLineEdit.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_SpinBox">
            <summary>A spin box, like QSpinBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_SizeGrip">
            <summary>A size grip, like QSizeGrip.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_TabWidget">
            <summary>A tab widget, like QTabWidget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_HeaderSection">
            <summary>A header section, like QHeader.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_GroupBox">
            <summary>A group box, like QGroupBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_MdiControls">
            <summary>The minimize, normal, and close button in the menu bar for a maximized MDI subwindow.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_ItemViewItem">
            <summary>An item inside an item view.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.ContentsType.CT_CustomBase">
            <summary>Base value for custom contents types. Custom values must be greater than this value.</summary>
        </member>
        <member name="T:QtWidgets.QStyle.RequestSoftwareInputPanel">
            <summary>
            <para>This enum describes under what circumstances a software input
            panel will be requested by input capable widgets.</para>
            <para>See also QInputMethod.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyle.RequestSoftwareInputPanel.RSIP_OnMouseClickAndAlreadyFocused">
            <summary>Requests an input panel if the user clicks on the widget, but only if it is already focused.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.RequestSoftwareInputPanel.RSIP_OnMouseClick">
            <summary>Requests an input panel if the user clicks on the widget.</summary>
        </member>
        <member name="T:QtWidgets.QStyle.StyleHint">
            <summary>
            <para>This enum describes the available style hints. A style hint is a
            general look and/or feel hint.</para>
            <para>See also styleHint().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_EtchDisabledText">
            <summary>Disabled text is "etched" as it is on Windows.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_DitherDisabledText">
            <summary>Disabled text is dithered as it is on Motif.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ScrollBar_MiddleClickAbsolutePosition">
            <summary>A boolean value. If true, middle clicking on a scroll bar causes the slider to jump to that position. If false, middle clicking is ignored.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ScrollBar_ScrollWhenPointerLeavesControl">
            <summary>A boolean value. If true, when clicking a scroll bar SubControl, holding the mouse button down and moving the pointer outside the SubControl, the scroll bar continues to scroll. If false, the scollbar stops scrolling when the pointer leaves the SubControl.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_TabBar_SelectMouseType">
            <summary>Which type of mouse event should cause a tab to be selected.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_TabBar_Alignment">
            <summary>The alignment for tabs in a QTabWidget. Possible values are Qt::AlignLeft, Qt::AlignCenter and Qt::AlignRight.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Header_ArrowAlignment">
            <summary>The placement of the sorting indicator may appear in list or table headers. Possible values are Qt::Alignment values (that is, an OR combination of Qt::AlignmentFlag flags).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Slider_SnapToValue">
            <summary>Sliders snap to values while moving, as they do on Windows.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Slider_SloppyKeyEvents">
            <summary>Key presses handled in a sloppy manner, i.e., left on a vertical slider subtracts a line.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ProgressDialog_CenterCancelButton">
            <summary>Center button on progress dialogs, otherwise right aligned.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ProgressDialog_TextLabelAlignment">
            <summary>The alignment for text labels in progress dialogs; Qt::AlignCenter on Windows, Qt::AlignVCenter otherwise.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_PrintDialog_RightAlignButtons">
            <summary>Right align buttons in the print dialog, as done on Windows.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_MainWindow_SpaceBelowMenuBar">
            <summary>One or two pixel space between the menu bar and the dockarea, as done on Windows.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_FontDialog_SelectAssociatedText">
            <summary>Select the text in the line edit, or when selecting an item from the listbox, or when the line edit receives focus, as done on Windows.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_AllowActiveAndDisabled">
            <summary>Allows disabled menu items to be active.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_SpaceActivatesItem">
            <summary>Pressing the space bar activates the item, as done on Motif.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_SubMenuPopupDelay">
            <summary>The number of milliseconds to wait before opening a submenu (256 on Windows, 96 on Motif).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ScrollView_FrameOnlyAroundContents">
            <summary>Whether scrollviews draw their frame only around contents (like Motif), or around contents, scroll bars and corner widgets (like Windows).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_MenuBar_AltKeyNavigation">
            <summary>Menu bars items are navigable by pressing Alt, followed by using the arrow keys to select the desired item.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ComboBox_ListMouseTracking">
            <summary>Mouse tracking in combobox drop-down lists.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_MouseTracking">
            <summary>Mouse tracking in popup menus.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_MenuBar_MouseTracking">
            <summary>Mouse tracking in menu bars.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ItemView_ChangeHighlightOnFocus">
            <summary>Gray out selected items when losing focus.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Widget_ShareActivation">
            <summary>Turn on sharing activation with floating modeless dialogs.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Workspace_FillSpaceOnMaximize">
            <summary>The workspace should maximize the client area.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ComboBox_Popup">
            <summary>Allows popups as a combobox drop-down menu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_TitleBar_NoBorder">
            <summary>The title bar has no border.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Slider_StopMouseOverSlider">
            <summary>Stops auto-repeat when the slider reaches the mouse position.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ScrollBar_StopMouseOverSlider">
            <summary>Obsolete. Use SH_Slider_StopMouseOverSlider instead.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_BlinkCursorWhenTextSelected">
            <summary>Whether cursor should blink when text is selected.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_RichText_FullWidthSelection">
            <summary>Whether richtext selections should extend to the full width of the document.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_Scrollable">
            <summary>Whether popup menus must support scrolling.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_GroupBox_TextLabelVerticalAlignment">
            <summary>How to vertically align a group box's text label.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_GroupBox_TextLabelColor">
            <summary>How to paint a group box's text label.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_SloppySubMenus">
            <summary>Whether popup menus must support the user moving the mouse cursor to a submenu while crossing other items of the menu. This is supported on most modern desktop platforms.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Table_GridLineColor">
            <summary>The RGB value of the grid for a table.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_LineEdit_PasswordCharacter">
            <summary>The Unicode character to be used for passwords.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_DialogButtons_DefaultButton">
            <summary>Which button gets the default status in a dialog's button widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ToolBox_SelectedPageTitleBold">
            <summary>Boldness of the selected page title in a QToolBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_TabBar_PreferNoArrows">
            <summary>Whether a tab bar should suggest a size to prevent scoll arrows.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ScrollBar_LeftClickAbsolutePosition">
            <summary>A boolean value. If true, left clicking on a scroll bar causes the slider to jump to that position. If false, left clicking will behave as appropriate for each control.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ListViewExpand_SelectMouseType">
            <summary>Which type of mouse event should cause a list view expansion to be selected.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_UnderlineShortcut">
            <summary>Whether shortcuts are underlined.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_SpinBox_AnimateButton">
            <summary>Animate a click when up or down is pressed in a spin box.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_SpinBox_KeyPressAutoRepeatRate">
            <summary>Auto-repeat interval for spinbox key presses.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_SpinBox_ClickAutoRepeatRate">
            <summary>Auto-repeat interval for spinbox mouse clicks.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_FillScreenWithScroll">
            <summary>Whether scrolling popups should fill the screen as they are scrolled.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ToolTipLabel_Opacity">
            <summary>An integer indicating the opacity for the tip label, 0 is completely transparent, 255 is completely opaque.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_DrawMenuBarSeparator">
            <summary>Indicates whether or not the menu bar draws separators.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_TitleBar_ModifyNotification">
            <summary>Indicates if the title bar should show a '*' for windows that are modified.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Button_FocusPolicy">
            <summary>The default focus policy for buttons.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_MessageBox_UseBorderForButtonSpacing">
            <summary>A boolean indicating what the to use the border of the buttons (computed as half the button height) for the spacing of the button in a message box.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_TitleBar_AutoRaise">
            <summary>A boolean indicating whether controls on a title bar ought to update when the mouse is over them.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ToolButton_PopupDelay">
            <summary>An int indicating the popup delay in milliseconds for menus attached to tool buttons.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_FocusFrame_Mask">
            <summary>The mask of the focus frame.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_RubberBand_Mask">
            <summary>The mask of the rubber band.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_WindowFrame_Mask">
            <summary>The mask of the window frame.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_SpinControls_DisableOnBounds">
            <summary>Determines if the spin controls will shown as disabled when reaching the spin range boundary.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Dial_BackgroundRole">
            <summary>Defines the style's preferred background role (as QPalette::ColorRole) for a dial widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ComboBox_LayoutDirection">
            <summary>The layout direction for the combo box. By default it should be the same as indicated by the QStyleOption::direction variable.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ItemView_EllipsisLocation">
            <summary>The location where ellipses should be added for item text that is too long to fit in an view item.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ItemView_ShowDecorationSelected">
            <summary>When an item in an item view is selected, also highlight the branch or other decoration.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ItemView_ActivateItemOnSingleClick">
            <summary>Emit the activated signal when the user single clicks on an item in an item in an item view. Otherwise the signal is emitted when the user double clicks on an item.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ScrollBar_ContextMenu">
            <summary>Whether or not a scroll bar has a context menu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ScrollBar_RollBetweenButtons">
            <summary>A boolean value. If true, when clicking a scroll bar button (SC_ScrollBarAddLine or SC_ScrollBarSubLine) and dragging over to the opposite button (rolling) will press the new button and release the old one. When it is false, the original button is released and nothing happens (like a push button).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Slider_AbsoluteSetButtons">
            <summary>Which mouse buttons cause a slider to set the value to the position clicked on.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Slider_PageSetButtons">
            <summary>Which mouse buttons cause a slider to page step the value.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_KeyboardSearch">
            <summary>Typing causes a menu to be search for relevant items, otherwise only mnemnonic is considered.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_TabBar_ElideMode">
            <summary>The default eliding style for a tab bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_DialogButtonLayout">
            <summary>Controls how buttons are laid out in a QDialogButtonBox, returns a QDialogButtonBox::ButtonLayout enum.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ComboBox_PopupFrameStyle">
            <summary>The frame style used when drawing a combobox popup menu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_MessageBox_TextInteractionFlags">
            <summary>A boolean indicating if the text in a message box should allow user interfactions (e.g. selection) or not.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_DialogButtonBox_ButtonsHaveIcons">
            <summary>Indicates whether or not StandardButtons in QDialogButtonBox should have icons or not.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_SpellCheckUnderlineStyle">
            <summary>A QTextCharFormat::UnderlineStyle value that specifies the way misspelled words should be underlined.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_MessageBox_CenterButtons">
            <summary>A boolean indicating whether the buttons in the message box should be centered or not (see QDialogButtonBox::setCentered()).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_SelectionWrap">
            <summary>Whether popups should allow the selections to wrap, that is when selection should the next item be the first item.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ItemView_MovementWithoutUpdatingSelection">
            <summary>The item view is able to indicate a current item without changing the selection.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ToolTip_Mask">
            <summary>The mask of a tool tip.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_FocusFrame_AboveWidget">
            <summary>The FocusFrame is stacked above the widget that it is "focusing on".</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_TextControl_FocusIndicatorTextCharFormat">
            <summary>Specifies the text format used to highlight focused anchors in rich text documents displayed for example in QTextBrowser. The format has to be a QTextCharFormat returned in the variant of the QStyleHintReturnVariant return value. The QTextFormat::OutlinePen property is used for the outline and QTextFormat::BackgroundBrush for the background of the highlighted area.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_WizardStyle">
            <summary>Controls the look and feel of a QWizard. Returns a QWizard::WizardStyle enum.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ItemView_ArrowKeysNavigateIntoChildren">
            <summary>Controls whether the tree view will select the first child when it is exapanded and the right arrow key is pressed.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_Mask">
            <summary>The mask for a popup menu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_FlashTriggeredItem">
            <summary>Flash triggered item.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_FadeOutOnHide">
            <summary>Fade out the menu instead of hiding it immediately.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_SpinBox_ClickAutoRepeatThreshold">
            <summary>Auto-repeat threshold for spinbox mouse clicks.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ItemView_PaintAlternatingRowColorsForEmptyArea">
            <summary>Whether QTreeView paints alternating row colors for the area that does not have any items.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_FormLayoutWrapPolicy">
            <summary>Provides a default for how rows are wrapped in a QFormLayout. Returns a QFormLayout::RowWrapPolicy enum.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_TabWidget_DefaultTabPosition">
            <summary>Default position of the tab bar in a tab widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ToolBar_Movable">
            <summary>Determines if the tool bar is movable by default.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_FormLayoutFieldGrowthPolicy">
            <summary>Provides a default for how fields can grow in a QFormLayout. Returns a QFormLayout::FieldGrowthPolicy enum.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_FormLayoutFormAlignment">
            <summary>Provides a default for how a QFormLayout aligns its contents within the available space. Returns a Qt::Alignment enum.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_FormLayoutLabelAlignment">
            <summary>Provides a default for how a QFormLayout aligns labels within the available space. Returns a Qt::Alignment enum.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ItemView_DrawDelegateFrame">
            <summary>Determines if there should be a frame for a delegate widget.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_TabBar_CloseButtonPosition">
            <summary>Determines the position of the close button on a tab in a tab bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_DockWidget_ButtonsHaveFrame">
            <summary>Determines if dockwidget buttons should have frames. Default is true.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ToolButtonStyle">
            <summary>Determines the default system style for tool buttons that uses Qt::ToolButtonFollowStyle.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_RequestSoftwareInputPanel">
            <summary>Determines when a software input panel should be requested by input widgets. Returns an enum of type QStyle::RequestSoftwareInputPanel.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ScrollBar_Transient">
            <summary>Determines if the style supports transient scroll bars. Transient scroll bars appear when the content is scrolled and disappear when they are no longer needed.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_SupportsSections">
            <summary>Determines if the style displays sections in menus or treat them as plain separators. Sections are separators with a text and icon hint.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ToolTip_WakeUpDelay">
            <summary>Determines the delay before a tooltip is shown, in milliseconds.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_ToolTip_FallAsleepDelay">
            <summary>Determines the delay (in milliseconds) before a new wake time is needed when a tooltip is shown (notice: shown, not hidden). When a new wake isn't needed, a user-requested tooltip will be shown nearly instantly.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Widget_Animate">
            <summary>Determines if the widget should show animations or not, for example a transition between checked and unchecked statuses in a checkbox. This enum value has been introduced in Qt 5.2.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Splitter_OpaqueResize">
            <summary>Determines if resizing is opaque This enum value has been introduced in Qt 5.2</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_LineEdit_PasswordMaskDelay">
            <summary>Determines the delay before visible character is masked with password character, in milliseconds. This enum value was added in Qt 5.4.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_TabBar_ChangeCurrentDelay">
            <summary>Determines the delay before the current tab is changed while dragging over the tabbar, in milliseconds. This enum value has been introduced in Qt 5.4</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_SubMenuUniDirection">
            <summary>Since Qt 5.5. If the cursor has to move towards the submenu (like it is on OS X), or if the cursor can move in any direction as long as it reaches the submenu before the sloppy timeout.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_SubMenuUniDirectionFailCount">
            <summary>Since Qt 5.5. When SH_Menu_SubMenuUniDirection is defined this enum defines the number of failed mouse moves before the sloppy submenu is discarded. This can be used to control the "strictness" of the uni direction algorithm.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_SubMenuSloppySelectOtherActions">
            <summary>Since Qt 5.5. Should other action items be selected when the mouse moves towards a sloppy submenu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_SubMenuSloppyCloseTimeout">
            <summary>Since Qt 5.5. The timeout used to close sloppy submenus.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_SubMenuResetWhenReenteringParent">
            <summary>Since Qt 5.5. When entering parent from child submenu, should the sloppy state be reset, effectively closing the child and making the current submenu active.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_Menu_SubMenuDontStartSloppyOnLeave">
            <summary>Since Qt 5.5. Do not start sloppy timers when the mouse leaves a sub-menu.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StyleHint.SH_CustomBase">
            <summary>Base value for custom style hints. Custom values must be greater than this value.</summary>
        </member>
        <member name="T:QtWidgets.QStyle.StandardPixmap">
            <summary>
            <para>This enum describes the available standard pixmaps. A standard
            pixmap is a pixmap that can follow some existing GUI style or
            guideline.</para>
            <para>See also standardIcon().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_TitleBarMenuButton">
            <summary>Menu button on a title bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_TitleBarMinButton">
            <summary>Minimize button on title bars (e.g., in QMdiSubWindow).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_TitleBarMaxButton">
            <summary>Maximize button on title bars.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_TitleBarCloseButton">
            <summary>Close button on title bars.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_TitleBarNormalButton">
            <summary>Normal (restore) button on title bars.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_TitleBarShadeButton">
            <summary>Shade button on title bars.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_TitleBarUnshadeButton">
            <summary>Unshade button on title bars.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_TitleBarContextHelpButton">
            <summary>The Context help button on title bars.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DockWidgetCloseButton">
            <summary>Close button on dock windows (see also QDockWidget).</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_MessageBoxInformation">
            <summary>The "information" icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_MessageBoxWarning">
            <summary>The "warning" icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_MessageBoxCritical">
            <summary>The "critical" icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_MessageBoxQuestion">
            <summary>The "question" icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DesktopIcon">
            <summary>The "desktop" icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_TrashIcon">
            <summary>The "trash" icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_ComputerIcon">
            <summary>The "My computer" icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DriveFDIcon">
            <summary>The floppy icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DriveHDIcon">
            <summary>The harddrive icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DriveCDIcon">
            <summary>The CD icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DriveDVDIcon">
            <summary>The DVD icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DriveNetIcon">
            <summary>The network icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DirOpenIcon">
            <summary>The open directory icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DirClosedIcon">
            <summary>The closed directory icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DirLinkIcon">
            <summary>The link to directory icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DirLinkOpenIcon">
            <summary>The link to open directory icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_FileIcon">
            <summary>The file icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_FileLinkIcon">
            <summary>The link to file icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_ToolBarHorizontalExtensionButton">
            <summary>Extension button for horizontal toolbars.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_ToolBarVerticalExtensionButton">
            <summary>Extension button for vertical toolbars.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_FileDialogStart">
            <summary>The "start" icon in a file dialog.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_FileDialogEnd">
            <summary>The "end" icon in a file dialog.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_FileDialogToParent">
            <summary>The "parent directory" icon in a file dialog.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_FileDialogNewFolder">
            <summary>The "create new folder" icon in a file dialog.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_FileDialogDetailedView">
            <summary>The detailed view icon in a file dialog.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_FileDialogInfoView">
            <summary>The file info icon in a file dialog.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_FileDialogContentsView">
            <summary>The contents view icon in a file dialog.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_FileDialogListView">
            <summary>The list view icon in a file dialog.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_FileDialogBack">
            <summary>The back arrow in a file dialog.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DirIcon">
            <summary>The directory icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DialogOkButton">
            <summary>Icon for a standard OK button in a QDialogButtonBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DialogCancelButton">
            <summary>Icon for a standard Cancel button in a QDialogButtonBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DialogHelpButton">
            <summary>Icon for a standard Help button in a QDialogButtonBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DialogOpenButton">
            <summary>Icon for a standard Open button in a QDialogButtonBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DialogSaveButton">
            <summary>Icon for a standard Save button in a QDialogButtonBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DialogCloseButton">
            <summary>Icon for a standard Close button in a QDialogButtonBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DialogApplyButton">
            <summary>Icon for a standard Apply button in a QDialogButtonBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DialogResetButton">
            <summary>Icon for a standard Reset button in a QDialogButtonBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DialogDiscardButton">
            <summary>Icon for a standard Discard button in a QDialogButtonBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DialogYesButton">
            <summary>Icon for a standard Yes button in a QDialogButtonBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DialogNoButton">
            <summary>Icon for a standard No button in a QDialogButtonBox.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_ArrowUp">
            <summary>Icon arrow pointing up.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_ArrowDown">
            <summary>Icon arrow pointing down.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_ArrowLeft">
            <summary>Icon arrow pointing left.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_ArrowRight">
            <summary>Icon arrow pointing right.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_ArrowBack">
            <summary>Equivalent to SP_ArrowLeft when the current layout direction is Qt::LeftToRight, otherwise SP_ArrowRight.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_ArrowForward">
            <summary>Equivalent to SP_ArrowRight when the current layout direction is Qt::LeftToRight, otherwise SP_ArrowLeft.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_DirHomeIcon">
            <summary>The home directory icon.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_CommandLink">
            <summary>Icon used to indicate a Vista style command link glyph.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_VistaShield">
            <summary>Icon used to indicate UAC prompts on Windows Vista. This will return a null pixmap or icon on all other platforms.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_BrowserReload">
            <summary>Icon indicating that the current page should be reloaded.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_BrowserStop">
            <summary>Icon indicating that the page loading should stop.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_MediaPlay">
            <summary>Icon indicating that media should begin playback.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_MediaStop">
            <summary>Icon indicating that media should stop playback.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_MediaPause">
            <summary>Icon indicating that media should pause playback.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_MediaSkipForward">
            <summary>Icon indicating that media should skip forward.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_MediaSkipBackward">
            <summary>Icon indicating that media should skip backward.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_MediaSeekForward">
            <summary>Icon indicating that media should seek forward.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_MediaSeekBackward">
            <summary>Icon indicating that media should seek backward.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_MediaVolume">
            <summary>Icon indicating a volume control.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_MediaVolumeMuted">
            <summary>Icon indicating a muted volume control.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_LineEditClearButton">
            <summary>Icon for a standard clear button in a QLineEdit. This enum value was added in Qt 5.2.</summary>
        </member>
        <member name="F:QtWidgets.QStyle.StandardPixmap.SP_CustomBase">
            <summary>Base value for custom standard pixmaps; custom values must be greater than this value.</summary>
        </member>
        <member name="T:QtWidgets.QTabBar">
            <summary>
            <para>The QTabBar class provides a tab bar, e.g. for use in tabbed
            dialogs.</para>
            </summary>
            <remarks>
            <para>QTabBar is straightforward to use; it draws the tabs using one of
            the predefined shapes, and emits a signal when a tab is selected. It can be
            subclassed to tailor the look and feel. Qt also provides a ready-made
            QTabWidget.</para>
            <para>Each tab has a tabText(), an optional tabIcon(), an optional
            tabToolTip(), optional tabWhatsThis() and optional tabData(). The tabs's
            attributes can be changed with setTabText(), setTabIcon(), setTabToolTip(),
            setTabWhatsThis and setTabData(). Each tabs can be enabled or disabled
            individually with setTabEnabled().</para>
            <para>Each tab can display text in a distinct color. The current text
            color for a tab can be found with the tabTextColor() function. Set the text
            color for a particular tab with setTabTextColor().</para>
            <para>Tabs are added using addTab(), or inserted at particular
            positions using insertTab(). The total number of tabs is given by count().
            Tabs can be removed from the tab bar with removeTab(). Combining
            removeTab() and insertTab() allows you to move tabs to different
            positions.</para>
            <para>The shape property defines the tabs' appearance. The choice of
            shape is a matter of taste, although tab dialogs (for preferences and
            similar) invariably use RoundedNorth. Tab controls in windows other than
            dialogs almost always use either RoundedSouth or TriangularSouth. Many
            spreadsheets and other tab controls in which all the pages are essentially
            similar use TriangularSouth, whereas RoundedSouth is used mostly when the
            pages are different (e.g. a multi-page tool palette). The default in
            QTabBar is RoundedNorth.</para>
            <para>The most important part of QTabBar's API is the currentChanged()
            signal. This is emitted whenever the current tab changes (even at startup,
            when the current tab changes from 'none'). There is also a slot,
            setCurrentIndex(), which can be used to select a tab programmatically. The
            function currentIndex() returns the index of the current tab, count holds
            the number of tabs.</para>
            <para>QTabBar creates automatic mnemonic keys in the manner of
            QAbstractButton; e.g. if a tab's label is &quot;&amp;Graphics&quot;, Alt+G
            becomes a shortcut key for switching to that tab.</para>
            <para>The following virtual functions may need to be reimplemented in
            order to tailor the look and feel or store extra data with each tab:</para>
            <para></para>
            <para>tabSizeHint() calcuates the size of a tab.</para>
            <para>tabInserted() notifies that a new tab was added.</para>
            <para>tabRemoved() notifies that a tab was removed.</para>
            <para>tabLayoutChange() notifies that the tabs have been re-laid
            out.</para>
            <para>paintEvent() paints all tabs.</para>
            <para></para>
            <para>For subclasses, you might also need the tabRect() functions which
            returns the visual geometry of a single tab.</para>
            <para></para>
            <para> 	A tab bar shown in the Fusion widget style.</para>
            <para>	A truncated tab bar shown in the Fusion widget style.</para>
            <para></para>
            <para></para>
            <para>See also QTabWidget.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QTabBar.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Creates a new tab bar with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.AddTab(System.String)">
            <summary>
            <para>Adds a new tab with text text. Returns the new tab's
            index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.AddTab(QtGui.QIcon,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Adds a new tab with icon icon and text text. Returns the new
            tab's index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.InsertTab(System.Int32,System.String)">
            <summary>
            <para>Inserts a new tab with text text at position index. If index is
            out of range, the new tab is appened. Returns the new tab's index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.InsertTab(System.Int32,QtGui.QIcon,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts a new tab with icon icon and text text at position index.
            If index is out of range, the new tab is appended. Returns the new tab's
            index.</para>
            <para>If the QTabBar was empty before this function is called, the
            inserted tab becomes the current tab.</para>
            <para>Inserting a new tab at an index less than or equal to the current
            index will increment the current index, but keep the current tab.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.RemoveTab(System.Int32)">
            <summary>
            <para>Removes the tab at position index.</para>
            <para>See also SelectionBehavior.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.MoveTab(System.Int32,System.Int32)">
            <summary>
            <para>Moves the item at index position from to index position
            to.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also tabMoved() and tabLayoutChange().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.IsTabEnabled(System.Int32)">
            <summary>
            <para>Returns true if the tab at position index is enabled; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.SetTabEnabled(System.Int32,System.Boolean)">
            <summary>
            <para>If enabled is true then the tab at position index is enabled;
            otherwise the item at position index is disabled.</para>
            <para>See also isTabEnabled().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.TabText(System.Int32)">
            <summary>
            <para>Returns the text of the tab at position index, or an empty string
            if index is out of range.</para>
            <para>See also setTabText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.SetTabText(System.Int32,System.String)">
            <summary>
            <para>Sets the text of the tab at position index to text.</para>
            <para>See also tabText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.TabTextColor(System.Int32)">
            <summary>
            <para>Returns the text color of the tab with the given index, or a
            invalid color if index is out of range.</para>
            <para>See also setTabTextColor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.SetTabTextColor(System.Int32,QtGui.QColor)">
            <summary>
            <para>Sets the color of the text in the tab with the given index to the
            specified color.</para>
            <para>If an invalid color is specified, the tab will use the QTabBar
            foreground role instead.</para>
            <para>See also tabTextColor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.TabIcon(System.Int32)">
            <summary>
            <para>Returns the icon of the tab at position index, or a null icon if
            index is out of range.</para>
            <para>See also setTabIcon().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.SetTabIcon(System.Int32,QtGui.QIcon)">
            <summary>
            <para>Sets the icon of the tab at position index to icon.</para>
            <para>See also tabIcon().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.SetTabToolTip(System.Int32,System.String)">
            <summary>
            <para>Sets the tool tip of the tab at position index to tip.</para>
            <para>See also tabToolTip().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.TabToolTip(System.Int32)">
            <summary>
            <para>Returns the tool tip of the tab at position index, or an empty
            string if index is out of range.</para>
            <para>See also setTabToolTip().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.SetTabWhatsThis(System.Int32,System.String)">
            <summary>
            <para>Sets the What's This help text of the tab at position index to
            text.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also tabWhatsThis().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.TabWhatsThis(System.Int32)">
            <summary>
            <para>Returns the What's This help text of the tab at position index,
            or an empty string if index is out of range.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setTabWhatsThis().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.SetTabData(System.Int32,QtCore.QVariant)">
            <summary>
            <para>Sets the data of the tab at position index to data.</para>
            <para>See also tabData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.TabData(System.Int32)">
            <summary>
            <para>Returns the data of the tab at position index, or a null variant
            if index is out of range.</para>
            <para>See also setTabData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.TabRect(System.Int32)">
            <summary>
            <para>Returns the visual rectangle of the tab at position index, or a
            null rectangle if index is out of range.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.TabAt(QtCore.QPoint)">
            <summary>
            <para>Returns the index of the tab that covers position or -1 if no tab
            covers position;</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.SetTabButton(System.Int32,QtWidgets.QTabBar.ButtonPosition,QtWidgets.QWidget)">
            <summary>
            <para>Sets widget on the tab index. The widget is placed on the left or
            right hand side depending upon the position.</para>
            <para>Any previously set widget in position is hidden.</para>
            <para>The tab bar will take ownership of the widget and so all widgets
            set here will be deleted by the tab bar when it is destroyed unless you
            separately reparent the widget after setting some other widget (or
            0).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also tabButton() and tabsClosable().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.TabButton(System.Int32,QtWidgets.QTabBar.ButtonPosition)">
            <summary>
            <para>Returns the widget set a tab index and position or 0 if one is
            not set.</para>
            <para>See also setTabButton().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.TabSizeHint(System.Int32)">
            <summary>
            <para>Returns the size hint for the tab at position index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.MinimumTabSizeHint(System.Int32)">
            <summary>
            <para>Returns the minimum tab size hint for the tab at position
            index.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.TabInserted(System.Int32)">
            <summary>
            <para>This virtual handler is called after a new tab was added or
            inserted at position index.</para>
            <para>See also tabRemoved().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.TabRemoved(System.Int32)">
            <summary>
            <para>This virtual handler is called after a tab was removed from
            position index.</para>
            <para>See also tabInserted().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.TabLayoutChange">
            <summary>
            <para>This virtual handler is called whenever the tab layout
            changes.</para>
            <para>See also tabRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.OnHideEvent(QtGui.QHideEvent)">
            <summary>
            <para>Reimplemented from QWidget::hideEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.OnWheelEvent(QtGui.QWheelEvent)">
            <summary>
            <para>Reimplemented from QWidget::wheelEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabBar.InitStyleOption(QtWidgets.QStyleOptionTab,System.Int32)">
            <summary>
            <para>Initialize option with the values from the tab at tabIndex. This
            method is useful for subclasses when they need a QStyleOptionTab,
            QStyleOptionTabV2, or QStyleOptionTabV3 but don't want to fill in all the
            information themselves. This function will check the version of the
            QStyleOptionTab and fill in the additional values for a QStyleOptionTabV2
            and QStyleOptionTabV3.</para>
            <para>See also QStyleOption::initFrom() and
            QTabWidget::initStyleOption().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTabBar.CurrentChanged">
            <summary>
            <para>This property holds the index of the tab bar's visible tab.</para>
            <para>The current index is -1 if there is no current tab.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	currentIndex() const</para>
            <para> void 	setCurrentIndex(int index)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	currentChanged(int index)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTabBar.TabCloseRequested">
            <summary>
            <para>This signal is emitted when the close button on a tab is clicked. The index is the index that should be removed.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setTabsClosable().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTabBar.TabMoved">
            <summary>
            <para>This signal is emitted when the tab has moved the tab at index position from to index position to.</para>
            <para>note: QTabWidget will automatically move the page when this signal is emitted from its tab bar.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also moveTab().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTabBar.TabBarClicked">
            <summary>
            <para>This signal is emitted when user clicks on a tab at an index.</para>
            <para>index is the index of a clicked tab, or -1 if no tab is under the cursor.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTabBar.TabBarDoubleClicked">
            <summary>
            <para>This signal is emitted when the user double clicks on a tab at index.</para>
            <para>index refers to the tab clicked, or -1 if no tab is under the cursor.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabBar.shape">
            <summary>
            <para>This property holds the shape of the tabs in the tab bar.</para>
            <para>Possible values for this property are described by the Shape
            enum.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabBar.ElideMode">
            <summary>
            <para>This property holds how to elide text in the tab bar.</para>
            <para>This property controls how items are elided when there is not
            enough space to show them for a given tab bar size.</para>
            <para>By default the value is style dependent.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also QTabWidget::elideMode, usesScrollButtons, and
            QStyle::SH_TabBar_ElideMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabBar.DrawBase">
            <summary>
            <para>This property defines whether or not tab bar should draw its
            base.</para>
            <para>If true then QTabBar draws a base in relation to the styles
            overlab. Otherwise only the tabs are drawn.</para>
            <para>See also QStyle::pixelMetric(), QStyle::PM_TabBarBaseOverlap, and
            QStyleOptionTabBarBaseV2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabBar.IconSize">
            <summary>
            <para>This property holds the size for icons in the tab bar.</para>
            <para>The default value is style-dependent. iconSize is a maximum size;
            icons that are smaller are not scaled up.</para>
            <para>This property was introduced in  Qt 4.1.</para>
            <para>See also QTabWidget::iconSize.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabBar.UsesScrollButtons">
            <summary>
            <para>This property holds whether or not a tab bar should use buttons
            to scroll tabs when it has many tabs.</para>
            <para>When there are too many tabs in a tab bar for its size, the tab
            bar can either choose to expand its size or to add buttons that allow you
            to scroll through the tabs.</para>
            <para>By default the value is style dependant.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also elideMode, QTabWidget::usesScrollButtons, and
            QStyle::SH_TabBar_PreferNoArrows.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabBar.TabsClosable">
            <summary>
            <para>This property holds whether or not a tab bar should place close
            buttons on each tab.</para>
            <para>When tabsClosable is set to true a close button will appear on
            the tab on either the left or right hand side depending upon the style.
            When the button is clicked the tab the signal tabCloseRequested will be
            emitted.</para>
            <para>By default the value is false.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also setTabButton() and tabRemoved().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabBar.SelectionBehaviorOnRemove">
            <summary>
            <para>This property holds what tab should be set as current when
            removeTab is called if the removed tab is also the current tab.</para>
            <para>By default the value is SelectRightTab.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also removeTab().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabBar.Expanding">
            <summary>
            <para>This property holds when expanding is true QTabBar will expand
            the tabs to use the empty space.</para>
            <para>By default the value is true.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also QTabWidget::documentMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabBar.Movable">
            <summary>
            <para>This property holds this property holds whether the user can move
            the tabs within the tabbar area.</para>
            <para>By default, this property is false;</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabBar.DocumentMode">
            <summary>
            <para>This property holds whether or not the tab bar is rendered in a
            mode suitable for the main window.</para>
            <para>This property is used as a hint for styles to draw the tabs in a
            different way then they would normally look in a tab widget. On Mac OS X
            this will look similar to the tabs in Safari or Leopard's
            Terminal.app.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also QTabWidget::documentMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabBar.AutoHide">
            <summary>
            <para>This property holds if true, the tab bar is automatically hidden
            when it contains less than 2 tabs.</para>
            <para>By default, this property is false.</para>
            <para>This property was introduced in  Qt 5.4.</para>
            <para>See also QWidget::visible.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabBar.ChangeCurrentOnDrag">
            <summary>
            <para>This property holds if true, then the current tab is
            automatically changed when dragging over the tabbar.</para>
            <para>Note: You should also set acceptDrops property to true to make
            this feature work.</para>
            <para>By default, this property is false.</para>
            <para>This property was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabBar.CurrentIndex">
            <summary>
            <para>This property holds the index of the tab bar's visible
            tab.</para>
            <para>The current index is -1 if there is no current tab.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabBar.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabBar.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabBar.Count">
            <summary>
            <para>This property holds the number of tabs in the tab bar.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTabBar.Shape">
            <summary>
            <para>This enum type lists the built-in shapes supported by QTabBar.
            Treat these as hints as some styles may not render some of the shapes.
            However, position should be honored.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QTabBar.Shape.RoundedNorth">
            <summary>The normal rounded look above the pages</summary>
        </member>
        <member name="F:QtWidgets.QTabBar.Shape.RoundedSouth">
            <summary>The normal rounded look below the pages</summary>
        </member>
        <member name="F:QtWidgets.QTabBar.Shape.RoundedWest">
            <summary>The normal rounded look on the left side of the pages</summary>
        </member>
        <member name="F:QtWidgets.QTabBar.Shape.RoundedEast">
            <summary>The normal rounded look on the right side the pages</summary>
        </member>
        <member name="F:QtWidgets.QTabBar.Shape.TriangularNorth">
            <summary>Triangular tabs above the pages.</summary>
        </member>
        <member name="F:QtWidgets.QTabBar.Shape.TriangularSouth">
            <summary>Triangular tabs similar to those used in the Excel spreadsheet, for example</summary>
        </member>
        <member name="F:QtWidgets.QTabBar.Shape.TriangularWest">
            <summary>Triangular tabs on the left of the pages.</summary>
        </member>
        <member name="F:QtWidgets.QTabBar.Shape.TriangularEast">
            <summary>Triangular tabs on the right of the pages.</summary>
        </member>
        <member name="T:QtWidgets.QTabBar.ButtonPosition">
            <summary>
            <para>This enum type lists the location of the widget on a tab.</para>
            <para>This enum was introduced or modified in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QTabBar.ButtonPosition.LeftSide">
            <summary>Left side of the tab.</summary>
        </member>
        <member name="F:QtWidgets.QTabBar.ButtonPosition.RightSide">
            <summary>Right side of the tab.</summary>
        </member>
        <member name="T:QtWidgets.QTabBar.SelectionBehavior">
            <summary>
            <para>This enum type lists the behavior of QTabBar when a tab is
            removed and the tab being removed is also the current tab.</para>
            <para>This enum was introduced or modified in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QTabBar.SelectionBehavior.SelectLeftTab">
            <summary>Select the tab to the left of the one being removed.</summary>
        </member>
        <member name="F:QtWidgets.QTabBar.SelectionBehavior.SelectRightTab">
            <summary>Select the tab to the right of the one being removed.</summary>
        </member>
        <member name="F:QtWidgets.QTabBar.SelectionBehavior.SelectPreviousTab">
            <summary>Select the previously selected tab.</summary>
        </member>
        <member name="T:QtWidgets.QTabWidget">
            <summary>
            <para>The QTabWidget class provides a stack of tabbed widgets.</para>
            </summary>
            <remarks>
            <para>A tab widget provides a tab bar (see QTabBar) and a &quot;page
            area&quot; that is used to display pages related to each tab. By default,
            the tab bar is shown above the page area, but different configurations are
            available (see TabPosition). Each tab is associated with a different widget
            (called a page). Only the current page is shown in the page area; all the
            other pages are hidden. The user can show a different page by clicking on
            its tab or by pressing its Alt+letter shortcut if it has one.</para>
            <para>The normal way to use QTabWidget is to do the following:</para>
            <para></para>
            <para>Create a QTabWidget.</para>
            <para>Create a QWidget for each of the pages in the tab dialog, but do
            not specify parent widgets for them.</para>
            <para>Insert child widgets into the page widget, using layouts to
            position them as normal.</para>
            <para>Call addTab() or insertTab() to put the page widgets into the tab
            widget, giving each tab a suitable label with an optional keyboard
            shortcut.</para>
            <para></para>
            <para>The position of the tabs is defined by tabPosition, their shape
            by tabShape.</para>
            <para>The signal currentChanged() is emitted when the user selects a
            page.</para>
            <para>The current page index is available as currentIndex(), the
            current page widget with currentWidget(). You can retrieve a pointer to a
            page widget with a given index using widget(), and can find the index
            position of a widget with indexOf(). Use setCurrentWidget() or
            setCurrentIndex() to show a particular page.</para>
            <para>You can change a tab's text and icon using setTabText() or
            setTabIcon(). A tab and its associated page can be removed with
            removeTab().</para>
            <para>Each tab is either enabled or disabled at any given time (see
            setTabEnabled()). If a tab is enabled, the tab text is drawn normally and
            the user can select that tab. If it is disabled, the tab is drawn in a
            different way and the user cannot select that tab. Note that even if a tab
            is disabled, the page can still be visible, for example if all of the tabs
            happen to be disabled.</para>
            <para>Tab widgets can be a very good way to split up a complex dialog.
            An alternative is to use a QStackedWidget for which you provide some means
            of navigating between pages, for example, a QToolBar or a
            QListWidget.</para>
            <para>Most of the functionality in QTabWidget is provided by a QTabBar
            (at the top, providing the tabs) and a QStackedWidget (most of the area,
            organizing the individual pages).</para>
            <para></para>
            <para> 	</para>
            <para>A Windows Vista style tab widget.	A Macintosh style tab widget.	A
            Fusion style tab widget.</para>
            <para></para>
            <para></para>
            <para>See also QTabBar, QStackedWidget, QToolBox, and Tab Dialog
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QTabWidget.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a tabbed widget with parent parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.AddTab(QtWidgets.QWidget,System.String)">
            <summary>
            <para>Adds a tab with the given page and label to the tab widget, and
            returns the index of the tab in the tab bar.</para>
            <para>If the tab's label contains an ampersand, the letter following
            the ampersand is used as a shortcut for the tab, e.g. if the label is
            &quot;Bro&amp;wse&quot; then Alt+W becomes a shortcut which will move the
            focus to this tab.</para>
            <para>Note: If you call addTab() after show(), the layout system will
            try to adjust to the changes in its widgets hierarchy and may cause
            flicker. To prevent this, you can set the QWidget::updatesEnabled property
            to false prior to changes; remember to set the property to true when the
            changes are done, making the widget receive paint events again.</para>
            <para>See also insertTab().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.AddTab(QtWidgets.QWidget,QtGui.QIcon,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Adds a tab with the given page, icon, and label to the tab
            widget, and returns the index of the tab in the tab bar.</para>
            <para>This function is the same as addTab(), but with an additional
            icon.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.InsertTab(System.Int32,QtWidgets.QWidget,System.String)">
            <summary>
            <para>Inserts a tab with the given label and page into the tab widget
            at the specified index, and returns the index of the inserted tab in the
            tab bar.</para>
            <para>The label is displayed in the tab and may vary in appearance
            depending on the configuration of the tab widget.</para>
            <para>If the tab's label contains an ampersand, the letter following
            the ampersand is used as a shortcut for the tab, e.g. if the label is
            &quot;Bro&amp;wse&quot; then Alt+W becomes a shortcut which will move the
            focus to this tab.</para>
            <para>If index is out of range, the tab is simply appended. Otherwise
            it is inserted at the specified position.</para>
            <para>If the QTabWidget was empty before this function is called, the
            new page becomes the current page. Inserting a new tab at an index less
            than or equal to the current index will increment the current index, but
            keep the current page.</para>
            <para>Note: If you call insertTab() after show(), the layout system
            will try to adjust to the changes in its widgets hierarchy and may cause
            flicker. To prevent this, you can set the QWidget::updatesEnabled property
            to false prior to changes; remember to set the property to true when the
            changes are done, making the widget receive paint events again.</para>
            <para>See also addTab().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.InsertTab(System.Int32,QtWidgets.QWidget,QtGui.QIcon,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts a tab with the given label, page, and icon into the tab
            widget at the specified index, and returns the index of the inserted tab in
            the tab bar.</para>
            <para>This function is the same as insertTab(), but with an additional
            icon.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.RemoveTab(System.Int32)">
            <summary>
            <para>Removes the tab at position index from this stack of widgets. The
            page widget itself is not deleted.</para>
            <para>See also addTab() and insertTab().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.IsTabEnabled(System.Int32)">
            <summary>
            <para>Returns true if the page at position index is enabled; otherwise
            returns false.</para>
            <para>See also setTabEnabled() and QWidget::isEnabled().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.SetTabEnabled(System.Int32,System.Boolean)">
            <summary>
            <para>If enable is true, the page at position index is enabled;
            otherwise the page at position index is disabled. The page's tab is redrawn
            appropriately.</para>
            <para>QTabWidget uses QWidget::setEnabled() internally, rather than
            keeping a separate flag.</para>
            <para>Note that even a disabled tab/page may be visible. If the page is
            visible already, QTabWidget will not hide it; if all the pages are
            disabled, QTabWidget will show one of them.</para>
            <para>See also isTabEnabled() and QWidget::setEnabled().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.TabText(System.Int32)">
            <summary>
            <para>Returns the label text for the tab on the page at position
            index.</para>
            <para>See also setTabText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.SetTabText(System.Int32,System.String)">
            <summary>
            <para>Defines a new label for the page at position index's tab.</para>
            <para>If the provided text contains an ampersand character ('&amp;'), a
            shortcut is automatically created for it. The character that follows the
            '&amp;' will be used as the shortcut key. Any previous shortcut will be
            overwritten, or cleared if no shortcut is defined by the text. See the
            QShortcut documentation for details (to display an actual ampersand, use
            '&amp;&amp;').</para>
            <para>See also tabText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.TabIcon(System.Int32)">
            <summary>
            <para>Returns the icon for the tab on the page at position
            index.</para>
            <para>See also setTabIcon().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.SetTabIcon(System.Int32,QtGui.QIcon)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the icon for the tab at position index.</para>
            <para>See also tabIcon().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.SetTabToolTip(System.Int32,System.String)">
            <summary>
            <para>Sets the tab tool tip for the page at position index to
            tip.</para>
            <para>See also tabToolTip().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.TabToolTip(System.Int32)">
            <summary>
            <para>Returns the tab tool tip for the page at position index or an
            empty string if no tool tip has been set.</para>
            <para>See also setTabToolTip().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.SetTabWhatsThis(System.Int32,System.String)">
            <summary>
            <para>Sets the What's This help text for the page at position index to
            text.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also tabWhatsThis().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.TabWhatsThis(System.Int32)">
            <summary>
            <para>Returns the What's This help text for the page at position index,
            or an empty string if no help text has been set.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setTabWhatsThis().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.Widget(System.Int32)">
            <summary>
            <para>Returns the tab page at index position index or 0 if the index is
            out of range.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.IndexOf(QtWidgets.QWidget)">
            <summary>
            <para>Returns the index position of the page occupied by the widget w,
            or -1 if the widget cannot be found.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.HeightForWidth(System.Int32)">
            <summary>
            <para>Reimplemented from QWidget::heightForWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.SetCornerWidget(QtWidgets.QWidget,QtCore.Qt.Corner)">
            <summary>
            <para>Sets the given widget to be shown in the specified corner of the
            tab widget. The geometry of the widget is determined based on the widget's
            sizeHint() and the style().</para>
            <para>Only the horizontal element of the corner will be used.</para>
            <para>Passing 0 shows no widget in the corner.</para>
            <para>Any previously set corner widget is hidden.</para>
            <para>All widgets set here will be deleted by the tab widget when it is
            destroyed unless you separately reparent the widget after setting some
            other corner widget (or 0).</para>
            <para>Note: Corner widgets are designed for North and South tab
            positions; other orientations are known to not work properly.</para>
            <para>See also cornerWidget() and setTabPosition().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.CornerWidget(QtCore.Qt.Corner)">
            <summary>
            <para>Returns the widget shown in the corner of the tab widget or
            0.</para>
            <para>See also setCornerWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.Clear">
            <summary>
            <para>Removes all the pages, but does not delete them. Calling this
            function is equivalent to calling removeTab() until the tab widget is
            empty.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.TabInserted(System.Int32)">
            <summary>
            <para>This virtual handler is called after a new tab was added or
            inserted at position index.</para>
            <para>See also tabRemoved().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.TabRemoved(System.Int32)">
            <summary>
            <para>This virtual handler is called after a tab was removed from
            position index.</para>
            <para>See also tabInserted().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            <para>Paints the tab widget's tab bar in response to the paint
            event.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTabWidget.InitStyleOption(QtWidgets.QStyleOptionTabWidgetFrame)">
            <summary>
            <para>Initialize option with the values from this QTabWidget. This
            method is useful for subclasses when they need a
            QStyleOptionTabWidgetFrame, but don't want to fill in all the information
            themselves.</para>
            <para>See also QStyleOption::initFrom() and
            QTabBar::initStyleOption().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTabWidget.CurrentChanged">
            <summary>
            <para>This property holds the index position of the current tab page.</para>
            <para>The current index is -1 if there is no current widget.</para>
            <para>By default, this property contains a value of -1 because there are initially no tabs in the widget.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	currentIndex() const</para>
            <para> void 	setCurrentIndex(int index)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	currentChanged(int index)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTabWidget.TabCloseRequested">
            <summary>
            <para>This signal is emitted when the close button on a tab is clicked. The index is the index that should be removed.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setTabsClosable().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTabWidget.TabBarClicked">
            <summary>
            <para>This signal is emitted when user clicks on a tab at an index.</para>
            <para>index refers to the tab clicked, or -1 if no tab is under the cursor.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTabWidget.TabBarDoubleClicked">
            <summary>
            <para>This signal is emitted when the user double clicks on a tab at an index.</para>
            <para>index is the index of a clicked tab, or -1 if no tab is under the cursor.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabWidget.tabPosition">
            <summary>
            <para>This property holds the position of the tabs in this tab
            widget.</para>
            <para>Possible values for this property are described by the
            TabPosition enum.</para>
            <para>By default, this property is set to North.</para>
            <para>See also TabPosition.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabWidget.TabsClosable">
            <summary>
            <para>This property holds whether close buttons are automatically added
            to each tab.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also QTabBar::tabsClosable().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabWidget.Movable">
            <summary>
            <para>This property holds this property holds whether the user can move
            the tabs within the tabbar area.</para>
            <para>By default, this property is false;</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabWidget.tabShape">
            <summary>
            <para>This property holds the shape of the tabs in this tab
            widget.</para>
            <para>Possible values for this property are QTabWidget::Rounded
            (default) or QTabWidget::Triangular.</para>
            <para>See also TabShape.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabWidget.ElideMode">
            <summary>
            <para>This property holds how to elide text in the tab bar.</para>
            <para>This property controls how items are elided when there is not
            enough space to show them for a given tab bar size.</para>
            <para>By default the value is style dependant.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also QTabBar::elideMode, usesScrollButtons, and
            QStyle::SH_TabBar_ElideMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabWidget.IconSize">
            <summary>
            <para>This property holds the size for icons in the tab bar.</para>
            <para>The default value is style-dependent. This is the maximum size
            that the icons will have. Icons are not scaled up if they are of smaller
            size.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also QTabBar::iconSize.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabWidget.UsesScrollButtons">
            <summary>
            <para>This property holds whether or not a tab bar should use buttons
            to scroll tabs when it has many tabs.</para>
            <para>When there are too many tabs in a tab bar for its size, the tab
            bar can either choose to expand its size or to add buttons that allow you
            to scroll through the tabs.</para>
            <para>By default the value is style dependant.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also elideMode, QTabBar::usesScrollButtons, and
            QStyle::SH_TabBar_PreferNoArrows.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabWidget.DocumentMode">
            <summary>
            <para>This property holds whether or not the tab widget is rendered in
            a mode suitable for document pages. This is the same as document mode on
            Mac OS X.</para>
            <para>When this property is set the tab widget frame is not rendered.
            This mode is useful for showing document-type pages where the page covers
            most of the tab widget area.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also elideMode, QTabBar::documentMode,
            QTabBar::usesScrollButtons, and QStyle::SH_TabBar_PreferNoArrows.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabWidget.TabBarAutoHide">
            <summary>
            <para>This property holds if true, the tab bar is automatically hidden
            when it contains less than 2 tabs.</para>
            <para>By default, this property is false.</para>
            <para>This property was introduced in  Qt 5.4.</para>
            <para>See also QWidget::visible.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabWidget.CurrentIndex">
            <summary>
            <para>This property holds the index position of the current tab
            page.</para>
            <para>The current index is -1 if there is no current widget.</para>
            <para>By default, this property contains a value of -1 because there
            are initially no tabs in the widget.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabWidget.CurrentWidget">
            <summary>
            <para>Returns a pointer to the page currently being displayed by the
            tab dialog. The tab dialog does its best to make sure that this value is
            never 0 (but if you try hard enough, it can be).</para>
            <para>See also currentIndex() and setCurrentWidget().</para>
            <para></para>
            <para>Makes widget the current widget. The widget used must be a page
            in this tab widget.</para>
            <para>See also addTab(), setCurrentIndex(), and currentWidget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabWidget.TabBar">
            <summary>
            <para>Returns the current QTabBar.</para>
            <para>See also setTabBar().</para>
            <para></para>
            <para>Replaces the dialog's QTabBar heading with the tab bar tb. Note
            that this must be called before any tabs have been added, or the behavior
            is undefined.</para>
            <para>See also tabBar().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabWidget.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabWidget.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            <para>Returns a suitable minimum size for the tab widget.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabWidget.HasHeightForWidth">
            <summary>
            <para>Reimplemented from QWidget::hasHeightForWidth().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTabWidget.Count">
            <summary>
            <para>This property holds the number of tabs in the tab bar.</para>
            <para>By default, this property contains a value of 0.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTabWidget.TabPosition">
            <summary>
            <para>This enum type defines where QTabWidget draws the tab row:</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QTabWidget.TabPosition.North">
            <summary>The tabs are drawn above the pages.</summary>
        </member>
        <member name="F:QtWidgets.QTabWidget.TabPosition.South">
            <summary>The tabs are drawn below the pages.</summary>
        </member>
        <member name="F:QtWidgets.QTabWidget.TabPosition.West">
            <summary>The tabs are drawn to the left of the pages.</summary>
        </member>
        <member name="F:QtWidgets.QTabWidget.TabPosition.East">
            <summary>The tabs are drawn to the right of the pages.</summary>
        </member>
        <member name="T:QtWidgets.QTabWidget.TabShape">
            <summary>
            <para>This enum type defines the shape of the tabs:</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QTabWidget.TabShape.Rounded">
            <summary>The tabs are drawn with a rounded look. This is the default shape.</summary>
        </member>
        <member name="F:QtWidgets.QTabWidget.TabShape.Triangular">
            <summary>The tabs are drawn with a triangular look.</summary>
        </member>
        <member name="T:QtWidgets.QRubberBand">
            <summary>
            <para>The QRubberBand class provides a rectangle or line that can
            indicate a selection or a boundary.</para>
            </summary>
            <remarks>
            <para>A rubber band is often used to show a new bounding area (as in a
            QSplitter or a QDockWidget that is undocking). Historically this has been
            implemented using a QPainter and XOR, but this approach doesn't always work
            properly since rendering can happen in the window below the rubber band,
            but before the rubber band has been &quot;erased&quot;.</para>
            <para>You can create a QRubberBand whenever you need to render a rubber
            band around a given area (or to represent a single line), then call
            setGeometry(), move() or resize() to position and size it. A common pattern
            is to do this in conjunction with mouse events. For example:</para>
            <para>void Widget::mousePressEvent(QMouseEvent *event)</para>
            <para>{</para>
            <para>    origin = event-&gt;pos();</para>
            <para>    if (!rubberBand)</para>
            <para>        rubberBand = new QRubberBand(QRubberBand::Rectangle,
            this);</para>
            <para>    rubberBand-&gt;setGeometry(QRect(origin, QSize()));</para>
            <para>    rubberBand-&gt;show();</para>
            <para>}</para>
            <para></para>
            <para>void Widget::mouseMoveEvent(QMouseEvent *event)</para>
            <para>{</para>
            <para>    rubberBand-&gt;setGeometry(QRect(origin,
            event-&gt;pos()).normalized());</para>
            <para>}</para>
            <para></para>
            <para>void Widget::mouseReleaseEvent(QMouseEvent *event)</para>
            <para>{</para>
            <para>    rubberBand-&gt;hide();</para>
            <para>    // determine selection, for example using
            QRect::intersects()</para>
            <para>    // and QRect::contains().</para>
            <para>}</para>
            <para>If you pass a parent to QRubberBand's constructor, the rubber
            band will display only inside its parent, but stays on top of other child
            widgets. If no parent is passed, QRubberBand will act as a top-level
            widget.</para>
            <para>Call show() to make the rubber band visible; also when the rubber
            band is not a top-level. Hiding or destroying the widget will make the
            rubber band disappear. The rubber band can be a Rectangle or a Line
            (vertical or horizontal), depending on the shape() it was given when
            constructed.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QRubberBand.#ctor(QtWidgets.QRubberBand.Shape,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a rubber band of shape s, with parent p.</para>
            <para>By default a rectangular rubber band (s is Rectangle) will use a
            mask, so that a small border of the rectangle is all that is visible. Some
            styles (e.g., native Mac OS X) will change this and call
            QWidget::setWindowOpacity() to make a semi-transparent filled selection
            rectangle.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRubberBand.SetGeometry(QtCore.QRect)">
            <summary>
            <para>Sets the geometry of the rubber band to rect, specified in the
            coordinate system of its parent widget.</para>
            <para>See also QWidget::geometry.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRubberBand.SetGeometry(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the geometry of the rubberband to the rectangle whose
            top-left corner lies at the point (x, y), and with dimensions specified by
            width and height. The geometry is specified in the parent widget's
            coordinate system.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRubberBand.Move(System.Int32,System.Int32)">
            <summary>
            <para>Moves the rubberband to point (x, y).</para>
            <para>See also resize().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRubberBand.Move(QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Moves the rubberband to point p.</para>
            <para>See also resize().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRubberBand.Resize(System.Int32,System.Int32)">
            <summary>
            <para>Resizes the rubberband so that its width is width, and its height
            is height.</para>
            <para>See also move().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRubberBand.Resize(QtCore.QSize)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Resizes the rubberband so that its new size is size.</para>
            <para>See also move().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRubberBand.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRubberBand.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRubberBand.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRubberBand.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRubberBand.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRubberBand.OnMoveEvent(QtGui.QMoveEvent)">
            <summary>
            <para>Reimplemented from QWidget::moveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRubberBand.InitStyleOption(QtWidgets.QStyleOptionRubberBand)">
            <summary>
            <para>Initialize option with the values from this QRubberBand. This
            method is useful for subclasses when they need a QStyleOptionRubberBand,
            but don't want to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QRubberBand.shape">
            <summary>
            <para>Returns the shape of this rubber band. The shape can only be set
            upon construction.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QRubberBand.Shape">
            <summary>
            <para>This enum specifies what shape a QRubberBand should have. This is
            a drawing hint that is passed down to the style system, and can be
            interpreted by each QStyle.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QRubberBand.Shape.Line">
            <summary>A QRubberBand can represent a vertical or horizontal line. Geometry is still given in rect() and the line will fill the given geometry on most styles.</summary>
        </member>
        <member name="F:QtWidgets.QRubberBand.Shape.Rectangle">
            <summary>A QRubberBand can represent a rectangle. Some styles will interpret this as a filled (often semi-transparent) rectangle, or a rectangular outline.</summary>
        </member>
        <member name="T:QtWidgets.QStyleOption">
            <summary>
            <para>The QStyleOption class stores the parameters used by QStyle
            functions.</para>
            </summary>
            <remarks>
            <para>QStyleOption and its subclasses contain all the information that
            QStyle functions need to draw a graphical element.</para>
            <para>For performance reasons, there are few member functions and the
            access to the member variables is direct (i.e., using the . or -&gt;
            operator). This low-level feel makes the structures straightforward to use
            and emphasizes that these are simply parameters used by the style
            functions.</para>
            <para>The caller of a QStyle function usually creates QStyleOption
            objects on the stack. This combined with Qt's extensive use of implicit
            sharing for types such as QString, QPalette, and QColor ensures that no
            memory allocation needlessly takes place.</para>
            <para>The following code snippet shows how to use a specific
            QStyleOption subclass to paint a push button:</para>
            <para>void MyPushButton::paintEvent(QPaintEvent *)</para>
            <para>{</para>
            <para>    QStyleOptionButton option;</para>
            <para>    option.initFrom(this);</para>
            <para>    option.state = isDown() ? QStyle::State_Sunken :
            QStyle::State_Raised;</para>
            <para>    if (isDefault())</para>
            <para>        option.features |=
            QStyleOptionButton::DefaultButton;</para>
            <para>    option.text = text();</para>
            <para>    option.icon = icon();</para>
            <para></para>
            <para>    QPainter painter(this);</para>
            <para>    style()-&gt;drawControl(QStyle::CE_PushButton, &amp;option,
            &amp;painter, this);</para>
            <para>}</para>
            <para>In our example, the control is a QStyle::CE_PushButton, and
            according to the QStyle::drawControl() documentation the corresponding
            class is QStyleOptionButton.</para>
            <para>When reimplementing QStyle functions that take a QStyleOption
            parameter, you often need to cast the QStyleOption to a subclass. For
            safety, you can use qstyleoption_cast() to ensure that the pointer type is
            correct. For example:</para>
            <para>void MyStyle::drawPrimitive(PrimitiveElement element,</para>
            <para>                            const QStyleOption *option,</para>
            <para>                            QPainter *painter,</para>
            <para>                            const QWidget *widget)</para>
            <para>{</para>
            <para>    if (element == PE_FrameFocusRect) {</para>
            <para>        const QStyleOptionFocusRect *focusRectOption =</para>
            <para>                qstyleoption_cast&lt;const QStyleOptionFocusRect
            *&gt;(option);</para>
            <para>        if (focusRectOption) {</para>
            <para>            // ...</para>
            <para>        }</para>
            <para>    }</para>
            <para>    // ...</para>
            <para>}</para>
            <para>The qstyleoption_cast() function will return 0 if the object to
            which option points is not of the correct type.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyle and QStylePainter.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOption.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Constructs a QStyleOption with the specified version and
            type.</para>
            <para>The version has no special meaning for QStyleOption; it can be
            used by subclasses to distinguish between different version of the same
            option type.</para>
            <para>The state member variable is initialized to
            QStyle::State_None.</para>
            <para>See also version and type.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOption.#ctor(QtWidgets.QStyleOption)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOption.Init(QtWidgets.QWidget)">
            <summary>
            <para>Use initFrom(widget) instead.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOption.InitFrom(QtWidgets.QWidget)">
            <summary>
            <para>Initializes the state, direction, rect, palette, fontMetrics and
            styleObject member variables based on the specified widget.</para>
            <para>This is a convenience function; the member variables can also be
            initialized manually.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also QWidget::layoutDirection(), QWidget::rect(),
            QWidget::palette(), and QWidget::fontMetrics().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOption.Version">
            <summary>
            <para>This variable holds the version of the style option.</para>
            <para>This value can be used by subclasses to implement extensions
            without breaking compatibility. If you use the qstyleoption_cast()
            function, you normally do not need to check it.</para>
            <para>The default value is 1.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOption.Type">
            <summary>
            <para>This variable holds the option type of the style option.</para>
            <para>The default value is SO_Default.</para>
            <para>See also OptionType.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOption.State">
            <summary>
            <para>This variable holds the style flags that are used when drawing
            the control.</para>
            <para>The default value is QStyle::State_None.</para>
            <para>See also initFrom(), QStyle::drawPrimitive(),
            QStyle::drawControl(), QStyle::drawComplexControl(), and
            QStyle::State.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOption.Direction">
            <summary>
            <para>This variable holds the text layout direction that should be used
            when drawing text in the control.</para>
            <para>By default, the layout direction is Qt::LeftToRight.</para>
            <para>See also initFrom().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOption.Rect">
            <summary>
            <para>This variable holds the area that should be used for various
            calculations and painting.</para>
            <para>This can have different meanings for different types of elements.
            For example, for a QStyle::CE_PushButton element it would be the rectangle
            for the entire button, while for a QStyle::CE_PushButtonLabel element it
            would be just the area for the push button label.</para>
            <para>The default value is a null rectangle, i.e. a rectangle with both
            the width and the height set to 0.</para>
            <para>See also initFrom().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOption.FontMetrics">
            <summary>
            <para>This variable holds the font metrics that should be used when
            drawing text in the control.</para>
            <para>By default, the application's default font is used.</para>
            <para>See also initFrom().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOption.Palette">
            <summary>
            <para>This variable holds the palette that should be used when painting
            the control.</para>
            <para>By default, the application's default palette is used.</para>
            <para>See also initFrom().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOption.StyleObject">
            <summary>
            <para>This variable holds the object being styled.</para>
            <para>The built-in styles support the following types: QWidget,
            QGraphicsObject and QQuickItem.</para>
            <para>See also initFrom().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOption.OptionType">
            <summary>
            <para>This enum is used internally by QStyleOption, its subclasses, and
            qstyleoption_cast() to determine the type of style option. In general you
            do not need to worry about this unless you want to create your own
            QStyleOption subclass and your own styles.</para>
            <para>The following values are used for custom controls:</para>
            <para>See also type.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_Default">
            <summary>QStyleOption</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_FocusRect">
            <summary>QStyleOptionFocusRect</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_Button">
            <summary>QStyleOptionButton</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_Tab">
            <summary>QStyleOptionTab</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_MenuItem">
            <summary>QStyleOptionMenuItem</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_Frame">
            <summary>QStyleOptionFrame</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_ProgressBar">
            <summary>QStyleOptionProgressBar</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_ToolBox">
            <summary>QStyleOptionToolBox</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_Header">
            <summary>QStyleOptionHeader</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_DockWidget">
            <summary>QStyleOptionDockWidget</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_ViewItem">
            <summary>QStyleOptionViewItem (used in Interviews)</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_TabWidgetFrame">
            <summary>QStyleOptionTabWidgetFrame</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_TabBarBase">
            <summary>QStyleOptionTabBarBase</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_RubberBand">
            <summary>QStyleOptionRubberBand</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_ToolBar">
            <summary>QStyleOptionToolBar</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_GraphicsItem">
            <summary>QStyleOptionGraphicsItem</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_Complex">
            <summary>QStyleOptionComplex</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_Slider">
            <summary>QStyleOptionSlider</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_SpinBox">
            <summary>QStyleOptionSpinBox</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_ToolButton">
            <summary>QStyleOptionToolButton</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_ComboBox">
            <summary>QStyleOptionComboBox</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_TitleBar">
            <summary>QStyleOptionTitleBar</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_GroupBox">
            <summary>QStyleOptionGroupBox</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_SizeGrip">
            <summary>QStyleOptionSizeGrip</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_CustomBase">
            <summary>Reserved for custom QStyleOptions; all custom controls values must be above this value</summary>
        </member>
        <member name="F:QtWidgets.QStyleOption.OptionType.SO_ComplexCustomBase">
            <summary>Reserved for custom QStyleOptions; all custom complex controls values must be above this value</summary>
        </member>
        <member name="T:QtWidgets.QStyleOption.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOption.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionFocusRect">
            <summary>
            <para>The QStyleOptionFocusRect class is used to describe the
            parameters for drawing a focus rectangle with QStyle.</para>
            </summary>
            <remarks>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionFocusRect.#ctor">
            <summary>
            <para>Constructs a QStyleOptionFocusRect, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionFocusRect.#ctor(QtWidgets.QStyleOptionFocusRect)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionFocusRect.BackgroundColor">
            <summary>
            <para>This variable holds the background color on which the focus
            rectangle is being drawn.</para>
            <para>The default value is an invalid color with the RGB value (0, 0,
            0). An invalid color is a color that is not properly set up for the
            underlying window system.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionFocusRect.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionFocusRect.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionFrame">
            <summary>
            <para>The QStyleOptionFrame class is used to describe the parameters
            for drawing a frame.</para>
            </summary>
            <remarks>
            <para>QStyleOptionFrame is used for drawing several built-in Qt
            widgets, including QFrame, QGroupBox, QLineEdit, and QMenu.</para>
            <para>An instance of the QStyleOptionFrame class has type SO_Frame and
            version 3.</para>
            <para>The type is used internally by QStyleOption, its subclasses, and
            qstyleoption_cast() to determine the type of style option. In general you
            do not need to worry about this unless you want to create your own
            QStyleOption subclass and your own styles. The version is used by
            QStyleOption subclasses to implement extensions without breaking
            compatibility. If you use qstyleoption_cast(), you normally do not need to
            check it.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionFrame.#ctor">
            <summary>
            <para>Constructs a QStyleOptionFrame, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionFrame.#ctor(QtWidgets.QStyleOptionFrame)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionFrame.LineWidth">
            <summary>
            <para>This variable holds the line width for drawing the frame.</para>
            <para>The default value is 0.</para>
            <para>See also QFrame::lineWidth.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionFrame.MidLineWidth">
            <summary>
            <para>This variable holds the mid-line width for drawing the
            frame.</para>
            <para>This is usually used in drawing sunken or raised frames.</para>
            <para>The default value is 0.</para>
            <para>See also QFrame::midLineWidth.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionFrame.Features">
            <summary>
            <para>This variable holds a bitwise OR of the features that describe
            this frame.</para>
            <para>See also FrameFeature.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionFrame.FrameShape">
            <summary>
            <para>This variable holds this property holds the frame shape value of
            the frame.</para>
            <para>See also QFrame::frameShape.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionFrame.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionFrame.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionFrame.FrameFeature">
            <summary>
            <para>This enum describes the different types of features a frame can
            have.</para>
            <para>The FrameFeatures type is a typedef for
            QFlags&lt;FrameFeature&gt;. It stores an OR combination of FrameFeature
            values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionFrame.FrameFeature.None">
            <summary>Indicates a normal frame.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionFrame.FrameFeature.Flat">
            <summary>Indicates a flat frame.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionFrame.FrameFeature.Rounded">
            <summary>Indicates a rounded frame.</summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionTabWidgetFrame">
            <summary>
            <para>The QStyleOptionTabWidgetFrame class is used to describe the
            parameters for drawing the frame around a tab widget.</para>
            </summary>
            <remarks>
            <para>QStyleOptionTabWidgetFrame contains all the information that
            QStyle functions need to draw the frame around QTabWidget.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption and QTabWidget.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionTabWidgetFrame.#ctor">
            <summary>
            <para>Constructs a QStyleOptionTabWidgetFrame, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionTabWidgetFrame.#ctor(QtWidgets.QStyleOptionTabWidgetFrame)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTabWidgetFrame.LineWidth">
            <summary>
            <para>This variable holds the line width for drawing the panel.</para>
            <para>The default value is 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTabWidgetFrame.MidLineWidth">
            <summary>
            <para>This variable holds the mid-line width for drawing the
            panel.</para>
            <para>The mid line width is usually used in drawing sunken or raised
            frames. The default value is 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTabWidgetFrame.Shape">
            <summary>
            <para>This variable holds the tab shape used to draw the tabs.</para>
            <para>The default value is QTabBar::RoundedNorth.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTabWidgetFrame.TabBarSize">
            <summary>
            <para>This variable holds the size of the tab bar.</para>
            <para>The default value is QSize(-1, -1), i.e. an invalid size.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTabWidgetFrame.RightCornerWidgetSize">
            <summary>
            <para>This variable holds the size of the right-corner widget.</para>
            <para>The default value is QSize(-1, -1), i.e. an invalid size.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTabWidgetFrame.LeftCornerWidgetSize">
            <summary>
            <para>This variable holds the size of the left-corner widget.</para>
            <para>The default value is QSize(-1, -1), i.e. an invalid size.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTabWidgetFrame.TabBarRect">
            <summary>
            <para>This variable holds the rectangle containing all the tabs.</para>
            <para>The default value is a null rectangle, i.e. a rectangle with both
            the width and the height set to 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTabWidgetFrame.SelectedTabRect">
            <summary>
            <para>This variable holds the rectangle containing the selected
            tab.</para>
            <para>This rectangle is contained within the tabBarRect. The default
            value is a null rectangle, i.e. a rectangle with both the width and the
            height set to 0.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionTabWidgetFrame.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionTabWidgetFrame.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionTabBarBase">
            <summary>
            <para>The QStyleOptionTabBarBase class is used to describe the base of
            a tab bar, i.e. the part that the tab bar usually overlaps with.</para>
            </summary>
            <remarks>
            <para>QStyleOptionTabBarBase contains all the information that QStyle
            functions need to draw the tab bar base. Note that this is only drawn for a
            standalone QTabBar (one that isn't part of a QTabWidget).</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption and QTabBar::drawBase().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionTabBarBase.#ctor">
            <summary>
            <para>Construct a QStyleOptionTabBarBase, initializing the members
            vaiables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionTabBarBase.#ctor(QtWidgets.QStyleOptionTabBarBase)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTabBarBase.Shape">
            <summary>
            <para>This variable holds the shape of the tab bar.</para>
            <para>The default value is QTabBar::RoundedNorth.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTabBarBase.TabBarRect">
            <summary>
            <para>This variable holds the rectangle containing all the tabs.</para>
            <para>The default value is a null rectangle, i.e. a rectangle with both
            the width and the height set to 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTabBarBase.SelectedTabRect">
            <summary>
            <para>This variable holds the rectangle containing the selected
            tab.</para>
            <para>This rectangle is contained within the tabBarRect. The default
            value is a null rectangle, i.e. a rectangle with both the width and the
            height set to 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTabBarBase.DocumentMode">
            <summary>
            <para>This variable holds whether the tabbar is in document
            mode.</para>
            <para>The default value is false;</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionTabBarBase.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionTabBarBase.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionHeader">
            <summary>
            <para>The QStyleOptionHeader class is used to describe the parameters
            for drawing a header.</para>
            </summary>
            <remarks>
            <para>QStyleOptionHeader contains all the information that QStyle
            functions need to draw the item views' header pane, header sort arrow, and
            header label.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionHeader.#ctor">
            <summary>
            <para>Constructs a QStyleOptionHeader, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionHeader.#ctor(QtWidgets.QStyleOptionHeader)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionHeader.Section">
            <summary>
            <para>This variable holds which section of the header is being
            painted.</para>
            <para>The default value is 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionHeader.Text">
            <summary>
            <para>This variable holds the text of the header.</para>
            <para>The default value is an empty string.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionHeader.TextAlignment">
            <summary>
            <para>This variable holds the alignment flags for the text of the
            header.</para>
            <para>The default value is Qt::AlignLeft.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionHeader.Icon">
            <summary>
            <para>This variable holds the icon of the header.</para>
            <para>The default value is an empty icon, i.e. an icon with neither a
            pixmap nor a filename.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionHeader.IconAlignment">
            <summary>
            <para>This variable holds the alignment flags for the icon of the
            header.</para>
            <para>The default value is Qt::AlignLeft.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionHeader.Position">
            <summary>
            <para>This variable holds the section's position in relation to the
            other sections.</para>
            <para>The default value is QStyleOptionHeader::Beginning.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionHeader.selectedPosition">
            <summary>
            <para>This variable holds the section's position in relation to the
            selected section.</para>
            <para>The default value is QStyleOptionHeader::NotAdjacent</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionHeader.sortIndicator">
            <summary>
            <para>This variable holds the direction the sort indicator should be
            drawn.</para>
            <para>The default value is QStyleOptionHeader::None.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionHeader.Orientation">
            <summary>
            <para>This variable holds the header's orientation (horizontal or
            vertical).</para>
            <para>The default orientation is Qt::Horizontal</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionHeader.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionHeader.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionHeader.SectionPosition">
            <summary>
            <para>This enum lets you know where the section's position is in
            relation to the other sections.</para>
            <para>See also position.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionHeader.SectionPosition.Beginning">
            <summary>At the beginining of the header</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionHeader.SectionPosition.Middle">
            <summary>In the middle of the header</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionHeader.SectionPosition.End">
            <summary>At the end of the header</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionHeader.SectionPosition.OnlyOneSection">
            <summary>Only one header section</summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionHeader.SelectedPosition">
            <summary>
            <para>This enum lets you know where the section's position is in
            relation to the selected section.</para>
            <para>See also selectedPosition.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionHeader.SelectedPosition.NotAdjacent">
            <summary>Not adjacent to the selected section</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionHeader.SelectedPosition.NextIsSelected">
            <summary>The next section is selected</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionHeader.SelectedPosition.PreviousIsSelected">
            <summary>The previous section is selected</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionHeader.SelectedPosition.NextAndPreviousAreSelected">
            <summary>Both the next and previous section are selected</summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionHeader.SortIndicator">
            <summary>
            <para>Indicates which direction the sort indicator should be
            drawn</para>
            <para>See also sortIndicator.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionHeader.SortIndicator.None">
            <summary>No sort indicator is needed</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionHeader.SortIndicator.SortUp">
            <summary>Draw an up indicator</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionHeader.SortIndicator.SortDown">
            <summary>Draw a down indicator</summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionButton">
            <summary>
            <para>The QStyleOptionButton class is used to describe the parameters
            for drawing buttons.</para>
            </summary>
            <remarks>
            <para>QStyleOptionButton contains all the information that QStyle
            functions need to draw graphical elements like QPushButton, QCheckBox, and
            QRadioButton.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption and QStyleOptionToolButton.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionButton.#ctor">
            <summary>
            <para>Constructs a QStyleOptionButton, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionButton.#ctor(QtWidgets.QStyleOptionButton)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionButton.Features">
            <summary>
            <para>This variable holds a bitwise OR of the features that describe
            this button.</para>
            <para>See also ButtonFeature.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionButton.Text">
            <summary>
            <para>This variable holds the text of the button.</para>
            <para>The default value is an empty string.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionButton.Icon">
            <summary>
            <para>This variable holds the icon of the button.</para>
            <para>The default value is an empty icon, i.e. an icon with neither a
            pixmap nor a filename.</para>
            <para>See also iconSize.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionButton.IconSize">
            <summary>
            <para>This variable holds the size of the icon for the button.</para>
            <para>The default value is QSize(-1, -1), i.e. an invalid size.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionButton.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionButton.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionButton.ButtonFeature">
            <summary>
            <para>This enum describes the different types of features a push button
            can have.</para>
            <para>The ButtonFeatures type is a typedef for
            QFlags&lt;ButtonFeature&gt;. It stores an OR combination of ButtonFeature
            values.</para>
            <para>See also features.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionButton.ButtonFeature.None">
            <summary>Indicates a normal push button.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionButton.ButtonFeature.Flat">
            <summary>Indicates a flat push button.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionButton.ButtonFeature.HasMenu">
            <summary>Indicates that the button has a drop down menu.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionButton.ButtonFeature.DefaultButton">
            <summary>Indicates that the button is a default button.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionButton.ButtonFeature.AutoDefaultButton">
            <summary>Indicates that the button is an auto default button.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionButton.ButtonFeature.CommandLinkButton">
            <summary>Indicates that the button is a Windows Vista type command link.</summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionTab">
            <summary>
            <para>The QStyleOptionTab class is used to describe the parameters for
            drawing a tab bar.</para>
            </summary>
            <remarks>
            <para>The QStyleOptionTab class is used for drawing several built-in Qt
            widgets including QTabBar and the panel for QTabWidget.</para>
            <para>An instance of the QStyleOptionTab class has type SO_Tab and
            version 3. The type is used internally by QStyleOption, its subclasses, and
            qstyleoption_cast() to determine the type of style option. In general you
            do not need to worry about this unless you want to create your own
            QStyleOption subclass and your own styles. The version is used by
            QStyleOption subclasses to implement extensions without breaking
            compatibility. If you use qstyleoption_cast(), you normally do not need to
            check it.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionTab.#ctor">
            <summary>
            <para>Constructs a QStyleOptionTab object, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionTab.#ctor(QtWidgets.QStyleOptionTab)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTab.Shape">
            <summary>
            <para>This variable holds the tab shape used to draw the tab; by
            default QTabBar::RoundedNorth.</para>
            <para>See also QTabBar::Shape.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTab.Text">
            <summary>
            <para>This variable holds the text of the tab.</para>
            <para>The default value is an empty string.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTab.Icon">
            <summary>
            <para>This variable holds the icon for the tab.</para>
            <para>The default value is an empty icon, i.e. an icon with neither a
            pixmap nor a filename.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTab.Row">
            <summary>
            <para>This variable holds which row the tab is currently in.</para>
            <para>The default value is 0, indicating the front row. Currently this
            property can only be 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTab.Position">
            <summary>
            <para>This variable holds the position of the tab in the tab
            bar.</para>
            <para>The default value is Beginning, i.e. the tab is the first tab in
            the tab bar.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTab.selectedPosition">
            <summary>
            <para>This variable holds the position of the selected tab in relation
            to this tab.</para>
            <para>The default value is NotAdjacent, i.e. the tab is not adjacent to
            a selected tab nor is it the selected tab.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTab.CornerWidgets">
            <summary>
            <para>This variable holds an OR combination of CornerWidget values
            indicating the corner widgets of the tab bar.</para>
            <para>The default value is NoCornerWidgets.</para>
            <para>See also CornerWidget.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTab.IconSize">
            <summary>
            <para>This variable holds the size for the icons.</para>
            <para>The default value is QSize(-1, -1), i.e. an invalid size; use
            QStyle::pixelMetric() to find the default icon size for tab bars.</para>
            <para>See also QTabBar::iconSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTab.DocumentMode">
            <summary>
            <para>This variable holds whether the tabbar is in document
            mode.</para>
            <para>The default value is false;</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTab.LeftButtonSize">
            <summary>
            <para>This variable holds the size for the left widget on the
            tab.</para>
            <para>The default value is QSize(-1, -1), i.e. an invalid size;</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTab.RightButtonSize">
            <summary>
            <para>This variable holds the size for the right widget on the
            tab.</para>
            <para>The default value is QSize(-1, -1), i.e. an invalid size;</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionTab.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionTab.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionTab.TabPosition">
            <summary>
            <para>This enum describes the position of the tab.</para>
            <para>See also position.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionTab.TabPosition.Beginning">
            <summary>The tab is the first tab in the tab bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionTab.TabPosition.Middle">
            <summary>The tab is neither the first nor the last tab in the tab bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionTab.TabPosition.End">
            <summary>The tab is the last tab in the tab bar.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionTab.TabPosition.OnlyOneTab">
            <summary>The tab is both the first and the last tab in the tab bar.</summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionTab.SelectedPosition">
            <summary>
            <para>This enum lets you know where the section's position is in
            relation to the selected section.</para>
            <para>See also selectedPosition.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionTab.CornerWidget">
            <summary>
            <para>These flags indicate the corner widgets in a tab.</para>
            <para>The CornerWidgets type is a typedef for
            QFlags&lt;CornerWidget&gt;. It stores an OR combination of CornerWidget
            values.</para>
            <para>See also cornerWidgets.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionTab.CornerWidget.NoCornerWidgets">
            <summary>There are no corner widgets</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionTab.CornerWidget.LeftCornerWidget">
            <summary>Left corner widget</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionTab.CornerWidget.RightCornerWidget">
            <summary>Right corner widget</summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionTab.TabFeature">
            <summary>
            <para>Describes the various features that a tab button can have.</para>
            <para>The TabFeatures type is a typedef for QFlags&lt;TabFeature&gt;.
            It stores an OR combination of TabFeature values.</para>
            <para>See also features.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionTab.TabFeature.None">
            <summary>A normal tab button.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionTab.TabFeature.HasFrame">
            <summary>The tab button is positioned on a tab frame</summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionToolBar">
            <summary>
            <para>The QStyleOptionToolBar class is used to describe the parameters
            for drawing a toolbar.</para>
            </summary>
            <remarks>
            <para>QStyleOptionToolBar contains all the information that QStyle
            functions need to draw QToolBar.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>The QStyleOptionToolBar class holds the lineWidth and the
            midLineWidth for drawing the widget. It also stores information about which
            area the toolbar should be located in, whether it is movable or not, which
            position the toolbar line should have (positionOfLine), and the toolbar's
            position within the line (positionWithinLine).</para>
            <para>In addition, the class provides a couple of enums: The
            ToolBarFeature enum is used to describe whether a toolbar is movable or
            not, and the ToolBarPosition enum is used to describe the position of a
            toolbar line, as well as the toolbar's position within the line.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionToolBar.#ctor">
            <summary>
            <para>Constructs a QStyleOptionToolBar, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionToolBar.#ctor(QtWidgets.QStyleOptionToolBar)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolBar.PositionOfLine">
            <summary>
            <para>This variable holds the position of the toolbar line.</para>
            <para>The default value is QStyleOptionToolBar::OnlyOne.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolBar.PositionWithinLine">
            <summary>
            <para>This variable holds the position of the toolbar within a
            line.</para>
            <para>The default value is QStyleOptionToolBar::OnlyOne.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolBar.ToolBarArea">
            <summary>
            <para>This variable holds the location for drawing the toolbar.</para>
            <para>The default value is Qt::TopToolBarArea.</para>
            <para>See also Qt::ToolBarArea.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolBar.Features">
            <summary>
            <para>This variable holds whether the toolbar is movable or not.</para>
            <para>The default value is None.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolBar.LineWidth">
            <summary>
            <para>This variable holds the line width for drawing the
            toolbar.</para>
            <para>The default value is 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolBar.MidLineWidth">
            <summary>
            <para>This variable holds the mid-line width for drawing the
            toolbar.</para>
            <para>The default value is 0.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionToolBar.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionToolBar.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionToolBar.ToolBarPosition">
            <summary>
            <para></para>
            <para>This enum is used to describe the position of a toolbar line, as
            well as the toolbar's position within the line.</para>
            <para>The order of the positions within a line starts at the top of a
            vertical line, and from the left within a horizontal line. The order of the
            positions for the lines is always from the parent widget's boundary
            edges.</para>
            <para>See also positionWithinLine and positionOfLine.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionToolBar.ToolBarPosition.Beginning">
            <summary>The toolbar is located at the beginning of the line, or the toolbar line is the first of several lines. There can only be one toolbar (and only one line) with this position.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionToolBar.ToolBarPosition.Middle">
            <summary>The toolbar is located in the middle of the line, or the toolbar line is in the middle of several lines. There can several toolbars (and lines) with this position.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionToolBar.ToolBarPosition.End">
            <summary>The toolbar is located at the end of the line, or the toolbar line is the last of several lines. There can only be one toolbar (and only one line) with this position.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionToolBar.ToolBarPosition.OnlyOne">
            <summary>There is only one toolbar or line. This is the default value of the positionOfLine and positionWithinLine variables.</summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionToolBar.ToolBarFeature">
            <summary>
            <para>This enum is used to describe whether a toolbar is movable or
            not.</para>
            <para>The ToolBarFeatures type is a typedef for
            QFlags&lt;ToolBarFeature&gt;. It stores an OR combination of ToolBarFeature
            values.</para>
            <para>See also features and QToolBar::isMovable().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionToolBar.ToolBarFeature.None">
            <summary>The toolbar cannot be moved. The default value.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionToolBar.ToolBarFeature.Movable">
            <summary>The toolbar is movable, and a handle will appear when holding the cursor over the toolbar's boundary.</summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionProgressBar">
            <summary>
            <para>The QStyleOptionProgressBar class is used to describe the
            parameters necessary for drawing a progress bar.</para>
            </summary>
            <remarks>
            <para>An instance of the QStyleOptionProgressBar class has type
            SO_ProgressBar and version 2.</para>
            <para>The type is used internally by QStyleOption, its subclasses, and
            qstyleoption_cast() to determine the type of style option. In general you
            do not need to worry about this unless you want to create your own
            QStyleOption subclass and your own styles. The version is used by
            QStyleOption subclasses to implement extensions without breaking
            compatibility. If you use qstyleoption_cast(), you normally do not need to
            check it.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionProgressBar.#ctor">
            <summary>
            <para>Constructs a QStyleOptionProgressBar, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionProgressBar.#ctor(QtWidgets.QStyleOptionProgressBar)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionProgressBar.Minimum">
            <summary>
            <para>This variable holds the minimum value for the progress
            bar.</para>
            <para>This is the minimum value in the progress bar. The default value
            is 0.</para>
            <para>See also QProgressBar::minimum.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionProgressBar.Maximum">
            <summary>
            <para>This variable holds the maximum value for the progress
            bar.</para>
            <para>This is the maximum value in the progress bar. The default value
            is 0.</para>
            <para>See also QProgressBar::maximum.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionProgressBar.Progress">
            <summary>
            <para>This variable holds the current progress for the progress
            bar.</para>
            <para>The current progress. A value of QStyleOptionProgressBar::minimum
            - 1 indicates that the progress hasn't started yet. The default value is
            0.</para>
            <para>See also QProgressBar::value.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionProgressBar.Text">
            <summary>
            <para>This variable holds the text for the progress bar.</para>
            <para>The progress bar text is usually just the progress expressed as a
            string. An empty string indicates that the progress bar has not started
            yet. The default value is an empty string.</para>
            <para>See also QProgressBar::text.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionProgressBar.TextAlignment">
            <summary>
            <para>This variable holds the text alignment for the text in the
            QProgressBar.</para>
            <para>This can be used as a guide on where the text should be in the
            progress bar. The default value is Qt::AlignLeft.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionProgressBar.TextVisible">
            <summary>
            <para>This variable holds a flag indicating whether or not text is
            visible.</para>
            <para>If this flag is true then the text is visible. Otherwise, the
            text is not visible. The default value is false.</para>
            <para>See also QProgressBar::textVisible.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionProgressBar.Orientation">
            <summary>
            <para>This variable holds the progress bar's orientation (horizontal or
            vertical); the default orentation is Qt::Horizontal.</para>
            <para>Use the QStyle::State_Horizontal flag instead (in the the
            QStyleOption::state member).</para>
            <para>See also QProgressBar::orientation.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionProgressBar.InvertedAppearance">
            <summary>
            <para>This variable holds whether the progress bar's appearance is
            inverted.</para>
            <para>The default value is false.</para>
            <para>See also QProgressBar::invertedAppearance.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionProgressBar.BottomToTop">
            <summary>
            <para>This variable holds whether the text reads from bottom to top
            when the progress bar is vertical.</para>
            <para>The default value is false.</para>
            <para>See also QProgressBar::textDirection.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionProgressBar.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionProgressBar.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionMenuItem">
            <summary>
            <para>The QStyleOptionMenuItem class is used to describe the parameter
            necessary for drawing a menu item.</para>
            </summary>
            <remarks>
            <para>QStyleOptionMenuItem contains all the information that QStyle
            functions need to draw the menu items from QMenu. It is also used for
            drawing other menu-related widgets.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionMenuItem.#ctor">
            <summary>
            <para>Constructs a QStyleOptionMenuItem, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionMenuItem.#ctor(QtWidgets.QStyleOptionMenuItem)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionMenuItem.menuItemType">
            <summary>
            <para>This variable holds the type of menu item.</para>
            <para>The default value is Normal.</para>
            <para>See also MenuItemType.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionMenuItem.checkType">
            <summary>
            <para>This variable holds the type of checkmark of the menu
            item.</para>
            <para>The default value is NotCheckable.</para>
            <para>See also CheckType.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionMenuItem.Checked">
            <summary>
            <para>This variable holds whether the menu item is checked or
            not.</para>
            <para>The default value is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionMenuItem.MenuHasCheckableItems">
            <summary>
            <para>This variable holds whether the menu as a whole has checkable
            items or not.</para>
            <para>The default value is true.</para>
            <para>If this option is set to false, then the menu has no checkable
            items. This makes it possible for GUI styles to save some horizontal space
            that would normally be used for the check column.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionMenuItem.MenuRect">
            <summary>
            <para>This variable holds the rectangle for the entire menu.</para>
            <para>The default value is a null rectangle, i.e. a rectangle with both
            the width and the height set to 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionMenuItem.Text">
            <summary>
            <para>This variable holds the text for the menu item.</para>
            <para>Note that the text format is something like this &quot;Menu
            text\tShortcut&quot;.</para>
            <para>If the menu item doesn't have a shortcut, it will just contain
            the menu item's text. The default value is an empty string.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionMenuItem.Icon">
            <summary>
            <para>This variable holds the icon for the menu item.</para>
            <para>The default value is an empty icon, i.e. an icon with neither a
            pixmap nor a filename.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionMenuItem.MaxIconWidth">
            <summary>
            <para>This variable holds the maximum icon width for the icon in the
            menu item.</para>
            <para>This can be used for drawing the icon into the correct place or
            properly aligning items. The variable must be set regardless of whether or
            not the menu item has an icon. The default value is 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionMenuItem.TabWidth">
            <summary>
            <para>This variable holds the tab width for the menu item.</para>
            <para>The tab width is the distance between the text of the menu item
            and the shortcut. The default value is 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionMenuItem.Font">
            <summary>
            <para>This variable holds the font used for the menu item text.</para>
            <para>This is the font that should be used for drawing the menu text
            minus the shortcut. The shortcut is usually drawn using the painter's font.
            By default, the application's default font is used.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionMenuItem.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionMenuItem.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionMenuItem.MenuItemType">
            <summary>
            <para>This enum indicates the type of menu item that the structure
            describes.</para>
            <para>See also menuItemType.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionMenuItem.MenuItemType.Normal">
            <summary>A normal menu item.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionMenuItem.MenuItemType.DefaultItem">
            <summary>A menu item that is the default action as specified with QMenu::defaultAction().</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionMenuItem.MenuItemType.Separator">
            <summary>A menu separator.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionMenuItem.MenuItemType.SubMenu">
            <summary>Indicates the menu item points to a sub-menu.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionMenuItem.MenuItemType.Scroller">
            <summary>A popup menu scroller (currently only used on Mac OS X).</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionMenuItem.MenuItemType.TearOff">
            <summary>A tear-off handle for the menu.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionMenuItem.MenuItemType.Margin">
            <summary>The margin of the menu.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionMenuItem.MenuItemType.EmptyArea">
            <summary>The empty area of the menu.</summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionMenuItem.CheckType">
            <summary>
            <para>This enum is used to indicate whether or not a check mark should
            be drawn for the item, or even if it should be drawn at all.</para>
            <para>See also checkType, QAction::checkable, QAction::checked, and
            QActionGroup::exclusive.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionMenuItem.CheckType.NotCheckable">
            <summary>The item is not checkable.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionMenuItem.CheckType.Exclusive">
            <summary>The item is an exclusive check item (like a radio button).</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionMenuItem.CheckType.NonExclusive">
            <summary>The item is a non-exclusive check item (like a check box).</summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionDockWidget">
            <summary>
            <para>The QStyleOptionDockWidget class is used to describe the
            parameters for drawing a dock widget.</para>
            </summary>
            <remarks>
            <para>QStyleOptionDockWidget contains all the information that QStyle
            functions need to draw graphical elements like QDockWidget.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionDockWidget.#ctor">
            <summary>
            <para>Constructs a QStyleOptionDockWidget, initializing the member
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionDockWidget.#ctor(QtWidgets.QStyleOptionDockWidget)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionDockWidget.Title">
            <summary>
            <para>This variable holds the title of the dock window.</para>
            <para>The default value is an empty string.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionDockWidget.Closable">
            <summary>
            <para>This variable holds whether the dock window is closable.</para>
            <para>The default value is true.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionDockWidget.Movable">
            <summary>
            <para>This variable holds whether the dock window is movable.</para>
            <para>The default value is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionDockWidget.Floatable">
            <summary>
            <para>This variable holds whether the dock window is floatable.</para>
            <para>The default value is true.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionDockWidget.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionDockWidget.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionViewItem">
            <summary>
            <para>The QStyleOptionViewItem class is used to describe the parameters
            used to draw an item in a view widget.</para>
            </summary>
            <remarks>
            <para>QStyleOptionViewItem contains all the information that QStyle
            functions need to draw the items for Qt's model/view classes.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption and Model/View Programming.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionViewItem.#ctor">
            <summary>
            <para>Constructs a QStyleOptionViewItem, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionViewItem.#ctor(QtWidgets.QStyleOptionViewItem)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionViewItem.DisplayAlignment">
            <summary>
            <para>This variable holds the alignment of the display value for the
            item.</para>
            <para>The default value is Qt::AlignLeft.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionViewItem.DecorationAlignment">
            <summary>
            <para>This variable holds the alignment of the decoration for the
            item.</para>
            <para>The default value is Qt::AlignLeft.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionViewItem.TextElideMode">
            <summary>
            <para>This variable holds where ellipsis should be added for text that
            is too long to fit into an item.</para>
            <para>The default value is Qt::ElideMiddle, i.e. the ellipsis appears
            in the middle of the text.</para>
            <para>See also Qt::TextElideMode and
            QStyle::SH_ItemView_EllipsisLocation.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionViewItem.DecorationPosition">
            <summary>
            <para>This variable holds the position of the decoration for the
            item.</para>
            <para>The default value is Left.</para>
            <para>See also Position.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionViewItem.DecorationSize">
            <summary>
            <para>This variable holds the size of the decoration for the
            item.</para>
            <para>The default value is QSize(-1, -1), i.e. an invalid size.</para>
            <para>See also decorationAlignment and decorationPosition.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionViewItem.Font">
            <summary>
            <para>This variable holds the font used for the item.</para>
            <para>By default, the application's default font is used.</para>
            <para>See also QFont.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionViewItem.ShowDecorationSelected">
            <summary>
            <para>This variable holds whether the decoration should be highlighted
            on selected items.</para>
            <para>If this option is true, the branch and any decorations on
            selected items should be highlighted, indicating that the item is selected;
            otherwise, no highlighting is required. The default value is false.</para>
            <para>See also QStyle::SH_ItemView_ShowDecorationSelected and
            QAbstractItemView.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionViewItem.Features">
            <summary>
            <para>This variable holds a bitwise OR of the features that describe
            this view item.</para>
            <para>See also ViewItemFeature.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionViewItem.Index">
            <summary>
            <para>The model index that is to be drawn.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionViewItem.CheckState">
            <summary>
            <para>If this view item is checkable, i.e.,
            ViewItemFeature::HasCheckIndicator is true, checkState is true if the item
            is checked; otherwise, it is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionViewItem.Icon">
            <summary>
            <para>The icon (if any) to be drawn in the view item.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionViewItem.Text">
            <summary>
            <para>The text (if any) to be drawn in the view item.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionViewItem.viewItemPosition">
            <summary>
            <para>Gives the position of this view item relative to other items. See
            the ViewItemPosition enum for the details.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionViewItem.BackgroundBrush">
            <summary>
            <para>The QBrush that should be used to paint the view items
            background.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionViewItem.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionViewItem.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionViewItem.Position">
            <summary>
            <para>This enum describes the position of the item's decoration.</para>
            <para>See also decorationPosition.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionViewItem.Position.Left">
            <summary>On the left of the text.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionViewItem.Position.Right">
            <summary>On the right of the text.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionViewItem.Position.Top">
            <summary>Above the text.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionViewItem.Position.Bottom">
            <summary>Below the text.</summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionViewItem.ViewItemFeature">
            <summary>
            <para>This enum describes the different types of features an item can
            have.</para>
            <para>The ViewItemFeatures type is a typedef for
            QFlags&lt;ViewItemFeature&gt;. It stores an OR combination of
            ViewItemFeature values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionViewItem.ViewItemFeature.None">
            <summary>Indicates a normal item.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionViewItem.ViewItemFeature.WrapText">
            <summary>Indicates an item with wrapped text.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionViewItem.ViewItemFeature.Alternate">
            <summary>Indicates that the item's background is rendered using alternateBase.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionViewItem.ViewItemFeature.HasCheckIndicator">
            <summary>Indicates that the item has a check state indicator.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionViewItem.ViewItemFeature.HasDisplay">
            <summary>Indicates that the item has a display role.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionViewItem.ViewItemFeature.HasDecoration">
            <summary>Indicates that the item has a decoration role.</summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionViewItem.ViewItemPosition">
            <summary>
            <para>This enum is used to represent the placement of the item on a
            row. This can be used to draw items differently depending on their
            placement, for example by putting rounded edges at the beginning and end,
            and straight edges in between.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionViewItem.ViewItemPosition.Invalid">
            <summary>The ViewItemPosition is unknown and should be disregarded.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionViewItem.ViewItemPosition.Beginning">
            <summary>The item appears at the beginning of the row.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionViewItem.ViewItemPosition.Middle">
            <summary>The item appears in the middle of the row.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionViewItem.ViewItemPosition.End">
            <summary>The item appears at the end of the row.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionViewItem.ViewItemPosition.OnlyOne">
            <summary>The item is the only one on the row, and is therefore both at the beginning and the end.</summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionToolBox">
            <summary>
            <para>The QStyleOptionToolBox class is used to describe the parameters
            needed for drawing a tool box.</para>
            </summary>
            <remarks>
            <para>QStyleOptionToolBox contains all the information that QStyle
            functions need to draw QToolBox.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption and QToolBox.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionToolBox.#ctor">
            <summary>
            <para>Creates a QStyleOptionToolBox, initializing the members variables
            to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionToolBox.#ctor(QtWidgets.QStyleOptionToolBox)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolBox.Text">
            <summary>
            <para>This variable holds the text for the tool box tab.</para>
            <para>The default value is an empty string.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolBox.Icon">
            <summary>
            <para>This variable holds the icon for the tool box tab.</para>
            <para>The default value is an empty icon, i.e. an icon with neither a
            pixmap nor a filename.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolBox.selectedPosition">
            <summary>
            <para>This variable holds the position of the selected tab in relation
            to this tab.</para>
            <para>The default value is NotAdjacent, i.e. the tab is not adjacent to
            a selected tab nor is it the selected tab.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionToolBox.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionToolBox.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionToolBox.TabPosition">
            <summary>
            <para>This enum describes the position of the tab.</para>
            <para>See also position.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionToolBox.SelectedPosition">
            <summary>
            <para>This enum lets you know where the section's position is in
            relation to the selected section.</para>
            <para>See also selectedPosition.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionRubberBand">
            <summary>
            <para>The QStyleOptionRubberBand class is used to describe the
            parameters needed for drawing a rubber band.</para>
            </summary>
            <remarks>
            <para>QStyleOptionRubberBand contains all the information that QStyle
            functions need to draw QRubberBand.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption and QRubberBand.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionRubberBand.#ctor">
            <summary>
            <para>Creates a QStyleOptionRubberBand, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionRubberBand.#ctor(QtWidgets.QStyleOptionRubberBand)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionRubberBand.Shape">
            <summary>
            <para>This variable holds the shape of the rubber band.</para>
            <para>The default shape is QRubberBand::Line.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionRubberBand.Opaque">
            <summary>
            <para>This variable holds whether the rubber band is required to be
            drawn in an opaque style.</para>
            <para>The default value is true.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionRubberBand.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionRubberBand.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionComplex">
            <summary>
            <para>The QStyleOptionComplex class is used to hold parameters that are
            common to all complex controls.</para>
            </summary>
            <remarks>
            <para>This class is not used on its own. Instead it is used to derive
            other complex control options, for example QStyleOptionSlider and
            QStyleOptionSpinBox.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator).</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionComplex.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Constructs a QStyleOptionComplex of the specified type and
            version, initializing the member variables to their default values. This
            constructor is usually called by subclasses.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionComplex.#ctor(QtWidgets.QStyleOptionComplex)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionComplex.SubControls">
            <summary>
            <para>This variable holds a bitwise OR of the sub-controls to be drawn
            for the complex control.</para>
            <para>The default value is QStyle::SC_All.</para>
            <para>See also QStyle::SubControl.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionComplex.ActiveSubControls">
            <summary>
            <para>This variable holds a bitwise OR of the sub-controls that are
            active for the complex control.</para>
            <para>The default value is QStyle::SC_None.</para>
            <para>See also QStyle::SubControl.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionComplex.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionComplex.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionSlider">
            <summary>
            <para>The QStyleOptionSlider class is used to describe the parameters
            needed for drawing a slider.</para>
            </summary>
            <remarks>
            <para>QStyleOptionSlider contains all the information that QStyle
            functions need to draw QSlider and QScrollBar.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOptionComplex, QSlider, and QScrollBar.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionSlider.#ctor">
            <summary>
            <para>Constructs a QStyleOptionSlider, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionSlider.#ctor(QtWidgets.QStyleOptionSlider)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionSlider.Orientation">
            <summary>
            <para>This variable holds the slider's orientation (horizontal or
            vertical).</para>
            <para>The default orientation is Qt::Horizontal.</para>
            <para>See also Qt::Orientation.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionSlider.Minimum">
            <summary>
            <para>This variable holds the minimum value for the slider.</para>
            <para>The default value is 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionSlider.Maximum">
            <summary>
            <para>This variable holds the maximum value for the slider.</para>
            <para>The default value is 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionSlider.TickPosition">
            <summary>
            <para>This variable holds the position of the slider's tick marks, if
            any.</para>
            <para>The default value is QSlider::NoTicks.</para>
            <para>See also QSlider::TickPosition.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionSlider.TickInterval">
            <summary>
            <para>This variable holds the interval that should be drawn between
            tick marks.</para>
            <para>The default value is 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionSlider.UpsideDown">
            <summary>
            <para>This variable holds the slider control orientation.</para>
            <para>Normally a slider increases as it moves up or to the right;
            upsideDown indicates that it should do the opposite (increase as it moves
            down or to the left). The default value is false, i.e. the slider increases
            as it moves up or to the right.</para>
            <para>See also QStyle::sliderPositionFromValue(),
            QStyle::sliderValueFromPosition(), and
            QAbstractSlider::invertedAppearance.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionSlider.SliderPosition">
            <summary>
            <para>This variable holds the position of the slider handle.</para>
            <para>If the slider has active feedback (i.e.,
            QAbstractSlider::tracking is true), this value will be the same as
            sliderValue. Otherwise, it will have the current position of the handle.
            The default value is 0.</para>
            <para>See also QAbstractSlider::tracking and sliderValue.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionSlider.SliderValue">
            <summary>
            <para>This variable holds the value of the slider.</para>
            <para>If the slider has active feedback (i.e.,
            QAbstractSlider::tracking is true), this value will be the same as
            sliderPosition. Otherwise, it will have the value the slider had before the
            mouse was pressed.</para>
            <para>The default value is 0.</para>
            <para>See also QAbstractSlider::tracking and sliderPosition.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionSlider.SingleStep">
            <summary>
            <para>This variable holds the size of the single step of the
            slider.</para>
            <para>The default value is 0.</para>
            <para>See also QAbstractSlider::singleStep.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionSlider.PageStep">
            <summary>
            <para>This variable holds the size of the page step of the
            slider.</para>
            <para>The default value is 0.</para>
            <para>See also QAbstractSlider::pageStep.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionSlider.NotchTarget">
            <summary>
            <para>This variable holds the number of pixel between notches.</para>
            <para>The default value is 0.0.</para>
            <para>See also QDial::notchTarget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionSlider.DialWrapping">
            <summary>
            <para>This variable holds whether the dial should wrap or not.</para>
            <para>The default value is false, i.e. the dial is not wrapped.</para>
            <para>See also QDial::wrapping().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionSlider.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionSlider.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionSpinBox">
            <summary>
            <para>The QStyleOptionSpinBox class is used to describe the parameters
            necessary for drawing a spin box.</para>
            </summary>
            <remarks>
            <para>QStyleOptionSpinBox contains all the information that QStyle
            functions need to draw QSpinBox and QDateTimeEdit.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption and QStyleOptionComplex.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionSpinBox.#ctor">
            <summary>
            <para>Constructs a QStyleOptionSpinBox, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionSpinBox.#ctor(QtWidgets.QStyleOptionSpinBox)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionSpinBox.ButtonSymbols">
            <summary>
            <para>This variable holds the type of button symbols to draw for the
            spin box.</para>
            <para>The default value is QAbstractSpinBox::UpDownArrows specufying
            little arrows in the classic style.</para>
            <para>See also QAbstractSpinBox::ButtonSymbols.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionSpinBox.StepEnabled">
            <summary>
            <para>This variable holds which buttons of the spin box that are
            enabled.</para>
            <para>The default value is QAbstractSpinBox::StepNone.</para>
            <para>See also QAbstractSpinBox::StepEnabled.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionSpinBox.Frame">
            <summary>
            <para>This variable holds whether the spin box has a frame.</para>
            <para>The default value is false, i.e. the spin box has no
            frame.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionSpinBox.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionSpinBox.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionToolButton">
            <summary>
            <para>The QStyleOptionToolButton class is used to describe the
            parameters for drawing a tool button.</para>
            </summary>
            <remarks>
            <para>QStyleOptionToolButton contains all the information that QStyle
            functions need to draw QToolButton.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption, QStyleOptionComplex, and
            QStyleOptionButton.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionToolButton.#ctor">
            <summary>
            <para>Constructs a QStyleOptionToolButton, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionToolButton.#ctor(QtWidgets.QStyleOptionToolButton)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolButton.Features">
            <summary>
            <para>This variable holds an OR combination of the tool button's
            features.</para>
            <para>The default value is None.</para>
            <para>See also ToolButtonFeature.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolButton.Icon">
            <summary>
            <para>This variable holds the icon for the tool button.</para>
            <para>The default value is an empty icon, i.e. an icon with neither a
            pixmap nor a filename.</para>
            <para>See also iconSize.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolButton.IconSize">
            <summary>
            <para>This variable holds the size of the icon for the tool
            button.</para>
            <para>The default value is QSize(-1, -1), i.e. an invalid size.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolButton.Text">
            <summary>
            <para>This variable holds the text of the tool button.</para>
            <para>This value is only used if toolButtonStyle is
            Qt::ToolButtonTextUnderIcon, Qt::ToolButtonTextBesideIcon, or
            Qt::ToolButtonTextOnly. The default value is an empty string.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolButton.ArrowType">
            <summary>
            <para>This variable holds the direction of the arrow for the tool
            button.</para>
            <para>This value is only used if features includes Arrow. The default
            value is Qt::DownArrow.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolButton.ToolButtonStyle">
            <summary>
            <para>This variable holds a Qt::ToolButtonStyle value describing the
            appearance of the tool button.</para>
            <para>The default value is Qt::ToolButtonIconOnly.</para>
            <para>See also QToolButton::toolButtonStyle().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolButton.Pos">
            <summary>
            <para>This variable holds the position of the tool button.</para>
            <para>The default value is a null point, i.e. (0, 0)</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionToolButton.Font">
            <summary>
            <para>This variable holds the font that is used for the text.</para>
            <para>This value is only used if toolButtonStyle is
            Qt::ToolButtonTextUnderIcon, Qt::ToolButtonTextBesideIcon, or
            Qt::ToolButtonTextOnly. By default, the application's default font is
            used.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionToolButton.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionToolButton.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionToolButton.ToolButtonFeature">
            <summary>
            <para>Describes the various features that a tool button can
            have.</para>
            <para>The ToolButtonFeatures type is a typedef for
            QFlags&lt;ToolButtonFeature&gt;. It stores an OR combination of
            ToolButtonFeature values.</para>
            <para>See also features, QToolButton::toolButtonStyle(), and
            QToolButton::popupMode().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionToolButton.ToolButtonFeature.None">
            <summary>A normal tool button.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionToolButton.ToolButtonFeature.Arrow">
            <summary>The tool button is an arrow.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionToolButton.ToolButtonFeature.Menu">
            <summary>The tool button has a menu.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionToolButton.ToolButtonFeature.MenuButtonPopup">
            <summary>The button should display an arrow to indicate that a menu is present.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionToolButton.ToolButtonFeature.PopupDelay">
            <summary>There is a delay to showing the menu.</summary>
        </member>
        <member name="F:QtWidgets.QStyleOptionToolButton.ToolButtonFeature.HasMenu">
            <summary>The button has a popup menu.</summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionComboBox">
            <summary>
            <para>The QStyleOptionComboBox class is used to describe the parameter
            for drawing a combobox.</para>
            </summary>
            <remarks>
            <para>QStyleOptionButton contains all the information that QStyle
            functions need to draw QComboBox.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption, QStyleOptionComplex, and QComboBox.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionComboBox.#ctor">
            <summary>
            <para>Creates a QStyleOptionComboBox, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionComboBox.#ctor(QtWidgets.QStyleOptionComboBox)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionComboBox.Editable">
            <summary>
            <para>This variable holds whether or not the combobox is editable or
            not.</para>
            <para>the default value is false</para>
            <para>See also QComboBox::isEditable().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionComboBox.PopupRect">
            <summary>
            <para>This variable holds the popup rectangle for the combobox.</para>
            <para>The default value is a null rectangle, i.e. a rectangle with both
            the width and the height set to 0.</para>
            <para>This variable is currently unused. You can safely ignore
            it.</para>
            <para>See also QStyle::SC_ComboBoxListBoxPopup.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionComboBox.Frame">
            <summary>
            <para>This variable holds whether the combo box has a frame.</para>
            <para>The default value is true.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionComboBox.CurrentText">
            <summary>
            <para>This variable holds the text for the current item of the combo
            box.</para>
            <para>The default value is an empty string.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionComboBox.CurrentIcon">
            <summary>
            <para>This variable holds the icon for the current item of the combo
            box.</para>
            <para>The default value is an empty icon, i.e. an icon with neither a
            pixmap nor a filename.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionComboBox.IconSize">
            <summary>
            <para>This variable holds the icon size for the current item of the
            combo box.</para>
            <para>The default value is QSize(-1, -1), i.e. an invalid size.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionComboBox.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionComboBox.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionTitleBar">
            <summary>
            <para>The QStyleOptionTitleBar class is used to describe the parameters
            for drawing a title bar.</para>
            </summary>
            <remarks>
            <para>QStyleOptionTitleBar contains all the information that QStyle
            functions need to draw the title bar of a QMdiSubWindow.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption, QStyleOptionComplex, and
            QMdiSubWindow.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionTitleBar.#ctor">
            <summary>
            <para>Constructs a QStyleOptionTitleBar, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionTitleBar.#ctor(QtWidgets.QStyleOptionTitleBar)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTitleBar.Text">
            <summary>
            <para>This variable holds the text of the title bar.</para>
            <para>The default value is an empty string.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTitleBar.Icon">
            <summary>
            <para>This variable holds the icon for the title bar.</para>
            <para>The default value is an empty icon, i.e. an icon with neither a
            pixmap nor a filename.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTitleBar.TitleBarState">
            <summary>
            <para>This variable holds the state of the title bar.</para>
            <para>This is basically the window state of the underlying widget. The
            default value is 0.</para>
            <para>See also QWidget::windowState().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionTitleBar.TitleBarFlags">
            <summary>
            <para>This variable holds the widget flags for the title bar.</para>
            <para>The default value is Qt::Widget.</para>
            <para>See also Qt::WindowFlags.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionTitleBar.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionTitleBar.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionGroupBox">
            <summary>
            <para>The QStyleOptionGroupBox class describes the parameters for
            drawing a group box.</para>
            </summary>
            <remarks>
            <para>QStyleOptionButton contains all the information that QStyle
            functions need the various graphical elements of a group box.</para>
            <para>It holds the lineWidth and the midLineWidth for drawing the
            panel, the group box's title and the title's alignment and color.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption, QStyleOptionComplex, and QGroupBox.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionGroupBox.#ctor">
            <summary>
            <para>Constructs a QStyleOptionGroupBox, initializing the members
            variables to their default values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionGroupBox.#ctor(QtWidgets.QStyleOptionGroupBox)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionGroupBox.Features">
            <summary>
            <para>This variable holds the features of the group box frame.</para>
            <para>The frame is flat by default.</para>
            <para>See also QStyleOptionFrame::FrameFeature.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionGroupBox.Text">
            <summary>
            <para>This variable holds the text of the group box.</para>
            <para>The default value is an empty string.</para>
            <para>See also QGroupBox::title.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionGroupBox.TextAlignment">
            <summary>
            <para>This variable holds the alignment of the group box title.</para>
            <para>The default value is Qt::AlignLeft.</para>
            <para>See also QGroupBox::alignment.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionGroupBox.TextColor">
            <summary>
            <para>This variable holds the color of the group box title.</para>
            <para>The default value is an invalid color with the RGB value (0, 0,
            0). An invalid color is a color that is not properly set up for the
            underlying window system.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionGroupBox.LineWidth">
            <summary>
            <para>This variable holds the line width for drawing the panel.</para>
            <para>The value of this variable is, currently, always 1.</para>
            <para>See also QFrame::lineWidth.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionGroupBox.MidLineWidth">
            <summary>
            <para>This variable holds the mid-line width for drawing the
            panel.</para>
            <para>The mid-line width is usually used when drawing sunken or raised
            group box frames. The value of this variable is, currently, always
            0.</para>
            <para>See also QFrame::midLineWidth.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionGroupBox.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionGroupBox.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionSizeGrip">
            <summary>
            <para>The QStyleOptionSizeGrip class is used to describe the parameter
            for drawing a size grip.</para>
            </summary>
            <remarks>
            <para>QStyleOptionButton contains all the information that QStyle
            functions need to draw QSizeGrip.</para>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters used by the style functions.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption, QStyleOptionComplex, and QSizeGrip.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionSizeGrip.#ctor">
            <summary>
            <para>Constructs a QStyleOptionSizeGrip.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionSizeGrip.#ctor(QtWidgets.QStyleOptionSizeGrip)">
            <summary>
            <para>Constructs a copy of the other style option.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionSizeGrip.Corner">
            <summary>
            <para>The corner in which the size grip is located.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionSizeGrip.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionSizeGrip.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionGraphicsItem">
            <summary>
            <para>The QStyleOptionGraphicsItem class is used to describe the
            parameters needed to draw a QGraphicsItem.</para>
            </summary>
            <remarks>
            <para>For performance reasons, the access to the member variables is
            direct (i.e., using the . or -&gt; operator). This low-level feel makes the
            structures straightforward to use and emphasizes that these are simply
            parameters.</para>
            <para>For an example demonstrating how style options can be used, see
            the Styles example.</para>
            <para></para>
            <para>See also QStyleOption and QGraphicsItem::paint().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleOptionGraphicsItem.#ctor">
            <summary>
            <para>Constructs a QStyleOptionGraphicsItem.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionGraphicsItem.#ctor(QtWidgets.QStyleOptionGraphicsItem)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleOptionGraphicsItem.LevelOfDetailFromTransform(QtGui.QTransform)">
            <summary>
            <para>Returns the level of detail from the worldTransform.</para>
            <para>Its value represents the maximum value of the height and width of
            a unity rectangle, mapped using the worldTransform of the painter used to
            draw the item. By default, if no transformations are applied, its value is
            1. If zoomed out 1:2, the level of detail will be 0.5, and if zoomed in
            2:1, its value is 2.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also QGraphicsScene::minimumRenderSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionGraphicsItem.ExposedRect">
            <summary>
            <para>This variable holds the exposed rectangle, in item
            coordinates.</para>
            <para>Make use of this rectangle to speed up item drawing when only
            parts of the item are exposed. If the whole item is exposed, this rectangle
            will be the same as QGraphicsItem::boundingRect().</para>
            <para>This member is only initialized for items that have the
            QGraphicsItem::ItemUsesExtendedStyleOption flag set.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionGraphicsItem.Matrix">
            <summary>
            <para>This variable holds the complete transformation matrix for the
            item.</para>
            <para>The QMatrix provided through this member does include information
            about any perspective transformations applied to the view or item. To get
            the correct transformation matrix, use QPainter::transform() on the painter
            passed into the QGraphicsItem::paint() implementation.</para>
            <para>This matrix is the combination of the item's scene matrix and the
            matrix of the painter used for drawing the item. It is provided for
            convenience, allowing anvanced level-of-detail metrics that can be used to
            speed up item drawing.</para>
            <para>To find the dimensions of an item in screen coordinates (i.e.,
            pixels), you can use the mapping functions of QMatrix, such as
            QMatrix::map().</para>
            <para>This member is only initialized for items that have the
            QGraphicsItem::ItemUsesExtendedStyleOption flag set.</para>
            <para>See also
            QStyleOptionGraphicsItem::levelOfDetailFromTransform().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleOptionGraphicsItem.LevelOfDetail">
            <summary>
            <para>Use QStyleOptionGraphicsItem::levelOfDetailFromTransform()
            together with QPainter::worldTransform() instead.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionGraphicsItem.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleOptionGraphicsItem.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleHintReturn">
            <summary>
            <para>The QStyleHintReturn class provides style hints that return more
            than basic data types.</para>
            </summary>
            <remarks>
            <para>QStyleHintReturn and its subclasses are used to pass information
            from a style back to the querying widget. This is most useful when the
            return value from QStyle::styleHint() does not provide enough detail; for
            example, when a mask is to be returned.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleHintReturn.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Constructs a QStyleHintReturn with version version and type
            type.</para>
            <para>The version has no special meaning for QStyleHintReturn; it can
            be used by subclasses to distinguish between different version of the same
            hint type.</para>
            <para>See also QStyleOption::version and QStyleOption::type.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleHintReturn.Version">
            <summary>
            <para>This variable holds the version of the style hint return
            container.</para>
            <para>This value can be used by subclasses to implement extensions
            without breaking compatibility. If you use qstyleoption_cast&lt;T&gt;(),
            you normally do not need to check it.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleHintReturn.Type">
            <summary>
            <para>This variable holds the type of the style hint container.</para>
            <para>See also HintReturnType.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStyleHintReturn.HintReturnType.SH_Default">
            <summary>QStyleHintReturn</summary>
        </member>
        <member name="F:QtWidgets.QStyleHintReturn.HintReturnType.SH_Mask">
            <summary>QStyle::SH_RubberBand_Mask QStyle::SH_FocusFrame_Mask</summary>
        </member>
        <member name="F:QtWidgets.QStyleHintReturn.HintReturnType.SH_Variant">
            <summary>QStyle::SH_TextControl_FocusIndicatorTextCharFormat</summary>
        </member>
        <member name="T:QtWidgets.QStyleHintReturn.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleHintReturn.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleHintReturnMask">
            <summary>
            <para>The QStyleHintReturnMask class provides style hints that return a
            QRegion.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleHintReturnMask.#ctor">
            <summary>
            <para>Constructs a QStyleHintReturnMask. The member variables are
            initialized to default values.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleHintReturnMask.Region">
            <summary>
            <para>This variable holds the region for style hints that return a
            QRegion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleHintReturnMask.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleHintReturnMask.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleHintReturnVariant">
            <summary>
            <para>The QStyleHintReturnVariant class provides style hints that
            return a QVariant.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyleHintReturnVariant.#ctor">
            <summary>
            <para>Constructs a QStyleHintReturnVariant. The member variables are
            initialized to default values.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleHintReturnVariant.Variant">
            <summary>
            <para>This variable holds the variant for style hints that return a
            QVariant.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleHintReturnVariant.StyleOptionType">
            <summary>
            <para>This enum is used to hold information about the type of the style
            option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The type is used internally by QStyleHintReturn, its subclasses,
            and qstyleoption_cast() to determine the type of style option. In general
            you do not need to worry about this unless you want to create your own
            QStyleHintReturn subclass and your own styles.</para>
            <para>See also StyleOptionVersion.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleHintReturnVariant.StyleOptionVersion">
            <summary>
            <para>This enum is used to hold information about the version of the
            style option, and is defined for each QStyleHintReturn subclass.</para>
            <para>The version is used by QStyleHintReturn subclasses to implement
            extensions without breaking compatibility. If you use qstyleoption_cast(),
            you normally do not need to check it.</para>
            <para>See also StyleOptionType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QAbstractItemDelegate">
            <summary>
            <para>The QAbstractItemDelegate class is used to display and edit data
            items from a model.</para>
            </summary>
            <remarks>
            <para>A QAbstractItemDelegate provides the interface and common
            functionality for delegates in the model/view architecture. Delegates
            display individual items in views, and handle the editing of model
            data.</para>
            <para>The QAbstractItemDelegate class is one of the Model/View Classes
            and is part of Qt's model/view framework.</para>
            <para>To render an item in a custom way, you must implement paint() and
            sizeHint(). The QItemDelegate class provides default implementations for
            these functions; if you do not need custom rendering, subclass that class
            instead.</para>
            <para>We give an example of drawing a progress bar in items; in our
            case for a package management program.</para>
            <para></para>
            <para>We create the WidgetDelegate class, which inherits from
            QStyledItemDelegate. We do the drawing in the paint() function:</para>
            <para>void WidgetDelegate::paint(QPainter *painter, const
            QStyleOptionViewItem &amp;option,</para>
            <para>                           const QModelIndex &amp;index)
            const</para>
            <para>{</para>
            <para>    if (index.column() == 1) {</para>
            <para>        int progress = index.data().toInt();</para>
            <para></para>
            <para>        QStyleOptionProgressBar progressBarOption;</para>
            <para>        progressBarOption.rect = option.rect;</para>
            <para>        progressBarOption.minimum = 0;</para>
            <para>        progressBarOption.maximum = 100;</para>
            <para>        progressBarOption.progress = progress;</para>
            <para>        progressBarOption.text = QString::number(progress) +
            &quot;%&quot;;</para>
            <para>        progressBarOption.textVisible = true;</para>
            <para></para>
            <para>
            QApplication::style()-&gt;drawControl(QStyle::CE_ProgressBar,</para>
            <para>
            &amp;progressBarOption, painter);</para>
            <para>    } else</para>
            <para>        QStyledItemDelegate::paint(painter, option,
            index);</para>
            <para>Notice that we use a QStyleOptionProgressBar and initialize its
            members. We can then use the current QStyle to draw it.</para>
            <para>To provide custom editing, there are two approaches that can be
            used. The first approach is to create an editor widget and display it
            directly on top of the item. To do this you must reimplement createEditor()
            to provide an editor widget, setEditorData() to populate the editor with
            the data from the model, and setModelData() so that the delegate can update
            the model with data from the editor.</para>
            <para>The second approach is to handle user events directly by
            reimplementing editorEvent().</para>
            <para></para>
            <para>See also Model/View Programming, QItemDelegate, Pixelator
            Example, QStyledItemDelegate, and QStyle.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QAbstractItemDelegate.#ctor(QtCore.QObject)">
            <summary>
            <para>Creates a new abstract item delegate with the given
            parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemDelegate.Paint(QtGui.QPainter,QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>This pure abstract function must be reimplemented if you want to
            provide custom rendering. Use the painter and style option to render the
            item specified by the item index.</para>
            <para>If you reimplement this you must also reimplement
            sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemDelegate.SizeHint(QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>This pure abstract function must be reimplemented if you want to
            provide custom rendering. The options are specified by option and the model
            item by index.</para>
            <para>If you reimplement this you must also reimplement paint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemDelegate.CreateEditor(QtWidgets.QWidget,QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>Returns the editor to be used for editing the data item with the
            given index. Note that the index contains information about the model being
            used. The editor's parent widget is specified by parent, and the item
            options by option.</para>
            <para>The base implementation returns 0. If you want custom editing you
            will need to reimplement this function.</para>
            <para>The returned editor widget should have Qt::StrongFocus;
            otherwise, QMouseEvents received by the widget will propagate to the view.
            The view's background will shine through unless the editor paints its own
            background (e.g., with setAutoFillBackground()).</para>
            <para>See also destroyEditor(), setModelData(), and
            setEditorData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemDelegate.DestroyEditor(QtWidgets.QWidget,QtCore.QModelIndex)">
            <summary>
            <para>Called when the editor is no longer needed for editing the data
            item with the given index and should be destroyed. The default behavior is
            a call to deleteLater on the editor. It is possible e.g. to avoid this
            delete by reimplementing this function.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also createEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemDelegate.SetEditorData(QtWidgets.QWidget,QtCore.QModelIndex)">
            <summary>
            <para>Sets the contents of the given editor to the data for the item at
            the given index. Note that the index contains information about the model
            being used.</para>
            <para>The base implementation does nothing. If you want custom editing
            you will need to reimplement this function.</para>
            <para>See also setModelData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemDelegate.SetModelData(QtWidgets.QWidget,QtCore.QAbstractItemModel,QtCore.QModelIndex)">
            <summary>
            <para>Sets the data for the item at the given index in the model to the
            contents of the given editor.</para>
            <para>The base implementation does nothing. If you want custom editing
            you will need to reimplement this function.</para>
            <para>See also setEditorData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemDelegate.UpdateEditorGeometry(QtWidgets.QWidget,QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>Updates the geometry of the editor for the item with the given
            index, according to the rectangle specified in the option. If the item has
            an internal layout, the editor will be laid out accordingly. Note that the
            index contains information about the model being used.</para>
            <para>The base implementation does nothing. If you want custom editing
            you must reimplement this function.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemDelegate.EditorEvent(QtCore.QEvent,QtCore.QAbstractItemModel,QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>When editing of an item starts, this function is called with the
            event that triggered the editing, the model, the index of the item, and the
            option used for rendering the item.</para>
            <para>Mouse events are sent to editorEvent() even if they don't start
            editing of the item. This can, for instance, be useful if you wish to open
            a context menu when the right mouse button is pressed on an item.</para>
            <para>The base implementation returns false (indicating that it has not
            handled the event).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemDelegate.HelpEvent(QtGui.QHelpEvent,QtWidgets.QAbstractItemView,QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>Whenever a help event occurs, this function is called with the
            event view option and the index that corresponds to the item where the
            event occurs.</para>
            <para>Returns true if the delegate can handle the event; otherwise
            returns false. A return value of true indicates that the data obtained
            using the index had the required role.</para>
            <para>For QEvent::ToolTip and QEvent::WhatsThis events that were
            handled successfully, the relevant popup may be shown depending on the
            user's system configuration.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also QHelpEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemDelegate.ElidedText(QtGui.QFontMetrics,System.Int32,QtCore.Qt.TextElideMode,System.String)">
            <summary>
            <para>Use QFontMetrics::elidedText() instead.</para>
            <para>For example, if you have code like</para>
            <para>QFontMetrics fm = ...</para>
            <para>QString str = QAbstractItemDelegate::elidedText(fm, width, mode,
            text);</para>
            <para>you can rewrite it as</para>
            <para>QFontMetrics fm = ...</para>
            <para>QString str = fm.elidedText(text, mode, width);</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractItemDelegate.CommitData">
            <summary>
            <para>This signal must be emitted when the editor widget has completed editing the data, and wants to write it back into the model.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractItemDelegate.CloseEditor">
            <summary>
            <para>This signal is emitted when the user has finished editing an item using the specified editor.</para>
            <para>The hint provides a way for the delegate to influence how the model and view behave after editing is completed. It indicates to these components what action should be performed next to provide a comfortable editing experience for the user. For example, if EditNextItem is specified, the view should use a delegate to open an editor on the next item in the model.</para>
            <para>See also EndEditHint.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractItemDelegate.SizeHintChanged">
            <summary>
            <para>This signal must be emitted when the sizeHint() of index changed.</para>
            <para>Views automatically connect to this signal and relayout items as necessary.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QAbstractItemDelegate.EndEditHint">
            <summary>
            <para>This enum describes the different hints that the delegate can
            give to the model and view components to make editing data in a model a
            comfortable experience for the user.</para>
            <para>These hints let the delegate influence the behavior of the
            view:</para>
            <para>Note that custom views may interpret the concepts of next and
            previous differently.</para>
            <para>The following hints are most useful when models are used that
            cache data, such as those that manipulate data locally in order to increase
            performance or conserve network bandwidth.</para>
            <para>Although models and views should respond to these hints in
            appropriate ways, custom components may ignore any or all of them if they
            are not relevant.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemDelegate.EndEditHint.NoHint">
            <summary>There is no recommended action to be performed.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemDelegate.EndEditHint.EditNextItem">
            <summary>The view should use the delegate to open an editor on the next item in the view.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemDelegate.EndEditHint.EditPreviousItem">
            <summary>The view should use the delegate to open an editor on the previous item in the view.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemDelegate.EndEditHint.SubmitModelCache">
            <summary>If the model caches data, it should write out cached data to the underlying data store.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemDelegate.EndEditHint.RevertModelCache">
            <summary>If the model caches data, it should discard cached data and replace it with data from the underlying data store.</summary>
        </member>
        <member name="T:QtWidgets.QAbstractItemView">
            <summary>
            <para>The QAbstractItemView class provides the basic functionality for
            item view classes.</para>
            </summary>
            <remarks>
            <para>QAbstractItemView class is the base class for every standard view
            that uses a QAbstractItemModel. QAbstractItemView is an abstract class and
            cannot itself be instantiated. It provides a standard interface for
            interoperating with models through the signals and slots mechanism,
            enabling subclasses to be kept up-to-date with changes to their models.
            This class provides standard support for keyboard and mouse navigation,
            viewport scrolling, item editing, and selections. The keyboard navigation
            implements this functionality:</para>
            <para></para>
            <para> KeysFunctionality</para>
            <para>Arrow keys	Changes the current item and selects it.</para>
            <para>Ctrl+Arrow keys	Changes the current item but does not select
            it.</para>
            <para>Shift+Arrow keys	Changes the current item and selects it. The
            previously selected item(s) is not deselected.</para>
            <para>Ctr+Space	Toggles selection of the current item.</para>
            <para>Tab/Backtab	Changes the current item to the next/previous
            item.</para>
            <para>Home/End	Selects the first/last item in the model.</para>
            <para>Page up/Page down	Scrolls the rows shown up/down by the number of
            visible rows in the view.</para>
            <para>Ctrl+A	Selects all items in the model.</para>
            <para></para>
            <para>Note that the above table assumes that the selection mode allows
            the operations. For instance, you cannot select items if the selection mode
            is QAbstractItemView::NoSelection.</para>
            <para>The QAbstractItemView class is one of the Model/View Classes and
            is part of Qt's model/view framework.</para>
            <para>The view classes that inherit QAbstractItemView only need to
            implement their own view-specific functionality, such as drawing items,
            returning the geometry of items, finding items, etc.</para>
            <para>QAbstractItemView provides common slots such as edit() and
            setCurrentIndex(). Many protected slots are also provided, including
            dataChanged(), rowsInserted(), rowsAboutToBeRemoved(), selectionChanged(),
            and currentChanged().</para>
            <para>The root item is returned by rootIndex(), and the current item by
            currentIndex(). To make sure that an item is visible use scrollTo().</para>
            <para>Some of QAbstractItemView's functions are concerned with
            scrolling, for example setHorizontalScrollMode() and
            setVerticalScrollMode(). To set the range of the scroll bars, you can, for
            example, reimplement the view's resizeEvent() function:</para>
            <para>void MyView::resizeEvent(QResizeEvent *event) {</para>
            <para>    horizontalScrollBar()-&gt;setRange(0, realWidth -
            width());</para>
            <para>    ...</para>
            <para>}</para>
            <para>Note that the range is not updated until the widget is
            shown.</para>
            <para>Several other functions are concerned with selection control; for
            example setSelectionMode(), and setSelectionBehavior(). This class provides
            a default selection model to work with (selectionModel()), but this can be
            replaced by using setSelectionModel() with an instance of
            QItemSelectionModel.</para>
            <para>For complete control over the display and editing of items you
            can specify a delegate with setItemDelegate().</para>
            <para>QAbstractItemView provides a lot of protected functions. Some are
            concerned with editing, for example, edit(), and commitData(), whilst
            others are keyboard and mouse event handlers.</para>
            <para>Note: If you inherit QAbstractItemView and intend to update the
            contents of the viewport, you should use viewport-&gt;update() instead of
            update() as all painting operations take place on the viewport.</para>
            <para></para>
            <para>See also View Classes, Model/View Programming,
            QAbstractItemModel, and Chart Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs an abstract item view with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.SetAutoScroll(System.Boolean)">
            <summary>
            <para>This property holds whether autoscrolling in drag move events is
            enabled.</para>
            <para>If this property is set to true (the default), the
            QAbstractItemView automatically scrolls the contents of the view if the
            user drags within 16 pixels of the viewport edge. If the current item
            changes, then the view will scroll automatically to ensure that the current
            item is fully visible.</para>
            <para>This property only works if the viewport accepts drops.
            Autoscroll is switched off by setting this property to false.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasAutoScroll() const</para>
            <para> void 	setAutoScroll(bool enable)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.SetDropIndicatorShown(System.Boolean)">
            <summary>
            <para>This property holds whether the drop indicator is shown when
            dragging items and dropping.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	showDropIndicator() const</para>
            <para> void 	setDropIndicatorShown(bool enable)</para>
            <para></para>
            <para>See also dragEnabled, DragDropMode, dragDropOverwriteMode, and
            acceptDrops.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.ShowDropIndicator">
            <summary>
            <para>This property holds whether the drop indicator is shown when
            dragging items and dropping.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	showDropIndicator() const</para>
            <para> void 	setDropIndicatorShown(bool enable)</para>
            <para></para>
            <para>See also dragEnabled, DragDropMode, dragDropOverwriteMode, and
            acceptDrops.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.KeyboardSearch(System.String)">
            <summary>
            <para>Moves to and selects the item best matching the string search. If
            no item is found nothing happens.</para>
            <para>In the default implementation, the search is reset if search is
            empty, or the time interval since the last search has exceeded
            QApplication::keyboardInputInterval().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.VisualRect(QtCore.QModelIndex)">
            <summary>
            <para>Returns the rectangle on the viewport occupied by the item at
            index.</para>
            <para>If your item is displayed in several areas then visualRect should
            return the primary area that contains index and not the complete area that
            index might encompasses, touch or cause drawing.</para>
            <para>In the base class this is a pure virtual function.</para>
            <para>See also indexAt() and visualRegionForSelection().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.ScrollTo(QtCore.QModelIndex,QtWidgets.QAbstractItemView.ScrollHint)">
            <summary>
            <para>Scrolls the view if necessary to ensure that the item at index is
            visible. The view will try to position the item according to the given
            hint.</para>
            <para>In the base class this is a pure virtual function.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.IndexAt(QtCore.QPoint)">
            <summary>
            <para>Returns the model index of the item at the viewport coordinates
            point.</para>
            <para>In the base class this is a pure virtual function.</para>
            <para>See also visualRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.SizeHintForIndex(QtCore.QModelIndex)">
            <summary>
            <para>Returns the size hint for the item with the specified index or an
            invalid size for invalid indexes.</para>
            <para>See also sizeHintForRow() and sizeHintForColumn().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.SizeHintForRow(System.Int32)">
            <summary>
            <para>Returns the height size hint for the specified row or -1 if there
            is no model.</para>
            <para>The returned height is calculated using the size hints of the
            given row's items, i.e. the returned value is the maximum height among the
            items. Note that to control the height of a row, you must reimplement the
            QAbstractItemDelegate::sizeHint() function.</para>
            <para>This function is used in views with a vertical header to find the
            size hint for a header section based on the contents of the given
            row.</para>
            <para>See also sizeHintForColumn().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.SizeHintForColumn(System.Int32)">
            <summary>
            <para>Returns the width size hint for the specified column or -1 if
            there is no model.</para>
            <para>This function is used in views with a horizontal header to find
            the size hint for a header section based on the contents of the given
            column.</para>
            <para>See also sizeHintForRow().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OpenPersistentEditor(QtCore.QModelIndex)">
            <summary>
            <para>Opens a persistent editor on the item at the given index. If no
            editor exists, the delegate will create a new editor.</para>
            <para>See also closePersistentEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.ClosePersistentEditor(QtCore.QModelIndex)">
            <summary>
            <para>Closes the persistent editor for the item at the given
            index.</para>
            <para>See also openPersistentEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.SetIndexWidget(QtCore.QModelIndex,QtWidgets.QWidget)">
            <summary>
            <para>Sets the given widget on the item at the given index, passing the
            ownership of the widget to the viewport.</para>
            <para>If index is invalid (e.g., if you pass the root index), this
            function will do nothing.</para>
            <para>The given widget's autoFillBackground property must be set to
            true, otherwise the widget's background will be transparent, showing both
            the model data and the item at the given index.</para>
            <para>If index widget A is replaced with index widget B, index widget A
            will be deleted. For example, in the code snippet below, the QLineEdit
            object will be deleted.</para>
            <para>setIndexWidget(index, new QLineEdit);</para>
            <para>...</para>
            <para>setIndexWidget(index, new QTextEdit);</para>
            <para>This function should only be used to display static content
            within the visible area corresponding to an item of data. If you want to
            display custom dynamic content or implement a custom editor widget,
            subclass QItemDelegate instead.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also indexWidget() and Delegate Classes.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.IndexWidget(QtCore.QModelIndex)">
            <summary>
            <para>Returns the widget for the item at the given index.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setIndexWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.SetItemDelegateForRow(System.Int32,QtWidgets.QAbstractItemDelegate)">
            <summary>
            <para>Sets the given item delegate used by this view and model for the
            given row. All items on row will be drawn and managed by delegate instead
            of using the default delegate (i.e., itemDelegate()).</para>
            <para>Any existing row delegate for row will be removed, but not
            deleted. QAbstractItemView does not take ownership of delegate.</para>
            <para>Note: If a delegate has been assigned to both a row and a column,
            the row delegate (i.e., this delegate) will take precedence and manage the
            intersecting cell index.</para>
            <para>Warning: You should not share the same instance of a delegate
            between views. Doing so can cause incorrect or unintuitive editing behavior
            since each view connected to a given delegate may receive the closeEditor()
            signal, and attempt to access, modify or close an editor that has already
            been closed.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also itemDelegateForRow(), setItemDelegateForColumn(), and
            itemDelegate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.ItemDelegateForRow(System.Int32)">
            <summary>
            <para>Returns the item delegate used by this view and model for the
            given row, or 0 if no delegate has been assigned. You can call
            itemDelegate() to get a pointer to the current delegate for a given
            index.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setItemDelegateForRow(), itemDelegateForColumn(), and
            setItemDelegate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.SetItemDelegateForColumn(System.Int32,QtWidgets.QAbstractItemDelegate)">
            <summary>
            <para>Sets the given item delegate used by this view and model for the
            given column. All items on column will be drawn and managed by delegate
            instead of using the default delegate (i.e., itemDelegate()).</para>
            <para>Any existing column delegate for column will be removed, but not
            deleted. QAbstractItemView does not take ownership of delegate.</para>
            <para>Note: If a delegate has been assigned to both a row and a column,
            the row delegate will take precedence and manage the intersecting cell
            index.</para>
            <para>Warning: You should not share the same instance of a delegate
            between views. Doing so can cause incorrect or unintuitive editing behavior
            since each view connected to a given delegate may receive the closeEditor()
            signal, and attempt to access, modify or close an editor that has already
            been closed.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also itemDelegateForColumn(), setItemDelegateForRow(), and
            itemDelegate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.ItemDelegateForColumn(System.Int32)">
            <summary>
            <para>Returns the item delegate used by this view and model for the
            given column. You can call itemDelegate() to get a pointer to the current
            delegate for a given index.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setItemDelegateForColumn(), itemDelegateForRow(), and
            itemDelegate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.GetItemDelegate(QtCore.QModelIndex)">
            <summary>
            <para>Returns the item delegate used by this view and model for the
            given index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.InputMethodQuery(QtCore.Qt.InputMethodQuery)">
            <summary>
            <para>Reimplemented from QWidget::inputMethodQuery().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.Reset">
            <summary>
            <para>Reset the internal state of the view.</para>
            <para>Warning: This function will reset open editors, scroll bar
            positions, selections, etc. Existing changes will not be committed. If you
            would like to save your changes when resetting the view, you can
            reimplement this function, commit your changes, and then call the
            superclass' implementation.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.SelectAll">
            <summary>
            <para>Selects all items in the view. This function will use the
            selection behavior set on the view when selecting.</para>
            <para>See also setSelection(), selectedIndexes(), and
            clearSelection().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.Edit(QtCore.QModelIndex)">
            <summary>
            <para>Starts editing the item corresponding to the given index if it is
            editable.</para>
            <para>Note that this function does not change the current index. Since
            the current index defines the next and previous items to edit, users may
            find that keyboard navigation does not work as expected. To provide
            consistent navigation behavior, call setCurrentIndex() before this function
            with the same model index.</para>
            <para>See also QModelIndex::flags().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.ClearSelection">
            <summary>
            <para>Deselects all selected items. The current index will not be
            changed.</para>
            <para>See also setSelection() and selectAll().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.ScrollToTop">
            <summary>
            <para>Scrolls the view to the top.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also scrollTo() and scrollToBottom().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.ScrollToBottom">
            <summary>
            <para>Scrolls the view to the bottom.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also scrollTo() and scrollToTop().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.Update(QtCore.QModelIndex)">
            <summary>
            <para>Updates the area occupied by the given index.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.RowsInserted(QtCore.QModelIndex,System.Int32,System.Int32)">
            <summary>
            <para>This slot is called when rows are inserted. The new rows are
            those under the given parent from start to end inclusive. The base class
            implementation calls fetchMore() on the model to check for more
            data.</para>
            <para>See also rowsAboutToBeRemoved().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.RowsAboutToBeRemoved(QtCore.QModelIndex,System.Int32,System.Int32)">
            <summary>
            <para>This slot is called when rows are about to be removed. The
            deleted rows are those under the given parent from start to end
            inclusive.</para>
            <para>See also rowsInserted().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.SelectionChanged(QtCore.QItemSelection,QtCore.QItemSelection)">
            <summary>
            <para>This slot is called when the selection is changed. The previous
            selection (which may be empty), is specified by deselected, and the new
            selection by selected.</para>
            <para>See also setSelection().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.CurrentChanged(QtCore.QModelIndex,QtCore.QModelIndex)">
            <summary>
            <para>This slot is called when a new item becomes the current item. The
            previous current item is specified by the previous index, and the new item
            by the current index.</para>
            <para>If you want to know about changes to items see the dataChanged()
            signal.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.UpdateGeometries">
            <summary>
            <para>Updates the geometry of the child widgets of the view.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.CloseEditor(QtWidgets.QWidget,QtWidgets.QAbstractItemDelegate.EndEditHint)">
            <summary>
            <para>Closes the given editor, and releases it. The hint is used to
            specify how the view should respond to the end of the editing operation.
            For example, the hint may indicate that the next item in the view should be
            opened for editing.</para>
            <para>See also edit() and commitData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.CommitData(QtWidgets.QWidget)">
            <summary>
            <para>Commit the data in the editor to the model.</para>
            <para>See also closeEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.EditorDestroyed(QtCore.QObject)">
            <summary>
            <para>This function is called when the given editor has been
            destroyed.</para>
            <para>See also closeEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.MoveCursor(QtWidgets.QAbstractItemView.CursorAction,QtCore.Qt.KeyboardModifier)">
            <summary>
            <para>Returns a QModelIndex object pointing to the next object in the
            view, based on the given cursorAction and keyboard modifiers specified by
            modifiers.</para>
            <para>In the base class this is a pure virtual function.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.IsIndexHidden(QtCore.QModelIndex)">
            <summary>
            <para>Returns true if the item referred to by the given index is hidden
            in the view, otherwise returns false.</para>
            <para>Hiding is a view specific feature. For example in TableView a
            column can be marked as hidden or a row in the TreeView.</para>
            <para>In the base class this is a pure virtual function.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.SetSelection(QtCore.QRect,QtCore.QItemSelectionModel.SelectionFlag)">
            <summary>
            <para>Applies the selection flags to the items in or touched by the
            rectangle, rect.</para>
            <para>When implementing your own itemview setSelection should call
            selectionModel()-&gt;select(selection, flags) where selection is either an
            empty QModelIndex or a QItemSelection that contains all items that are
            contained in rect.</para>
            <para>See also selectionCommand() and selectedIndexes().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.VisualRegionForSelection(QtCore.QItemSelection)">
            <summary>
            <para>Returns the region from the viewport of the items in the given
            selection.</para>
            <para>In the base class this is a pure virtual function.</para>
            <para>See also visualRect() and selectedIndexes().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.Edit(QtCore.QModelIndex,QtWidgets.QAbstractItemView.EditTrigger,QtCore.QEvent)">
            <summary>
            <para>Starts editing the item at index, creating an editor if
            necessary, and returns true if the view's State is now EditingState;
            otherwise returns false.</para>
            <para>The action that caused the editing process is described by
            trigger, and the associated event is specified by event.</para>
            <para>Editing can be forced by specifying the trigger to be
            QAbstractItemView::AllEditTriggers.</para>
            <para>See also closeEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.SelectionCommand(QtCore.QModelIndex,QtCore.QEvent)">
            <summary>
            <para>Returns the SelectionFlags to be used when updating a selection
            with to include the index specified. The event is a user input event, such
            as a mouse or keyboard event.</para>
            <para>Reimplement this function to define your own selection
            behavior.</para>
            <para>See also setSelection().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.StartDrag(QtCore.Qt.DropAction)">
            <summary>
            <para>Starts a drag by calling drag-&gt;exec() using the given
            supportedActions.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.ScheduleDelayedItemsLayout">
            <summary>
            <para>Schedules a layout of the items in the view to be executed when
            the event processing starts.</para>
            <para>Even if scheduleDelayedItemsLayout() is called multiple times
            before events are processed, the view will only do the layout once.</para>
            <para>See also executeDelayedItemsLayout().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.ExecuteDelayedItemsLayout">
            <summary>
            <para>Executes the scheduled layouts without waiting for the event
            processing to begin.</para>
            <para>See also scheduleDelayedItemsLayout().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.SetDirtyRegion(QtGui.QRegion)">
            <summary>
            <para>Marks the given region as dirty and schedules it to be updated.
            You only need to call this function if you are implementing your own view
            subclass.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also scrollDirtyRegion() and dirtyRegionOffset().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.ScrollDirtyRegion(System.Int32,System.Int32)">
            <summary>
            <para>Prepares the view for scrolling by (dx,dy) pixels by moving the
            dirty regions in the opposite direction. You only need to call this
            function if you are implementing a scrolling viewport in your view
            subclass.</para>
            <para>If you implement scrollContentsBy() in a subclass of
            QAbstractItemView, call this function before you call QWidget::scroll() on
            the viewport. Alternatively, just call update().</para>
            <para>See also scrollContentsBy(), dirtyRegionOffset(), and
            setDirtyRegion().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.DirtyRegionOffset">
            <summary>
            <para>Returns the offset of the dirty regions in the view.</para>
            <para>If you use scrollDirtyRegion() and implement a paintEvent() in a
            subclass of QAbstractItemView, you should translate the area given by the
            paint event with the offset returned from this function.</para>
            <para>See also scrollDirtyRegion() and setDirtyRegion().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.FocusNextPrevChild(System.Boolean)">
            <summary>
            <para>Reimplemented from QWidget::focusNextPrevChild().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OnViewportEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractScrollArea::viewportEvent().</para>
            <para>This function is used to handle tool tips, and What's This? mode,
            if the given event is a QEvent::ToolTip,or a QEvent::WhatsThis. It passes
            all other events on to its base class viewportEvent() handler.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            <para>This function is called with the given event when a mouse button
            is pressed while the cursor is inside the widget. If a valid item is
            pressed on it is made into the current item. This function emits the
            pressed() signal.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            <para>This function is called with the given event when a mouse move
            event is sent to the widget. If a selection is in progress and new items
            are moved over the selection is extended; if a drag is in progress it is
            continued.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            <para>This function is called with the given event when a mouse button
            is released, after a mouse press event on the widget. If a user presses the
            mouse inside your widget and then drags the mouse to another location
            before releasing the mouse button, your widget receives the release event.
            The function will emit the clicked() signal if an item was being
            pressed.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OnMouseDoubleClickEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseDoubleClickEvent().</para>
            <para>This function is called with the given event when a mouse button
            is double clicked inside the widget. If the double-click is on a valid item
            it emits the doubleClicked() signal and calls edit() on the item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OnDragEnterEvent(QtGui.QDragEnterEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragEnterEvent().</para>
            <para>This function is called with the given event when a drag and drop
            operation enters the widget. If the drag is over a valid dropping place
            (e.g. over an item that accepts drops), the event is accepted; otherwise it
            is ignored.</para>
            <para>See also dropEvent() and startDrag().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OnDragMoveEvent(QtGui.QDragMoveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragMoveEvent().</para>
            <para>This function is called continuously with the given event during
            a drag and drop operation over the widget. It can cause the view to scroll
            if, for example, the user drags a selection to view's right or bottom edge.
            In this case, the event will be accepted; otherwise it will be
            ignored.</para>
            <para>See also dropEvent() and startDrag().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OnDragLeaveEvent(QtGui.QDragLeaveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragLeaveEvent().</para>
            <para>This function is called when the item being dragged leaves the
            view. The event describes the state of the drag and drop operation.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OnDropEvent(QtGui.QDropEvent)">
            <summary>
            <para>Reimplemented from QWidget::dropEvent().</para>
            <para>This function is called with the given event when a drop event
            occurs over the widget. If the model accepts the even position the drop
            event is accepted; otherwise it is ignored.</para>
            <para>See also startDrag().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusInEvent().</para>
            <para>This function is called with the given event when the widget
            obtains the focus. By default, the event is ignored.</para>
            <para>See also setFocus() and focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusOutEvent().</para>
            <para>This function is called with the given event when the widget
            looses the focus. By default, the event is ignored.</para>
            <para>See also clearFocus() and focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            <para>This function is called with the given event when a key event is
            sent to the widget. The default implementation handles basic cursor
            movement, e.g. Up, Down, Left, Right, Home, PageUp, and PageDown; the
            activated() signal is emitted if the current index is valid and the
            activation key is pressed (e.g. Enter or Return, depending on the
            platform). This function is where editing is initiated by key press, e.g.
            if F2 is pressed.</para>
            <para>See also edit(), moveCursor(), keyboardSearch(), and
            tabKeyNavigation.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            <para>This function is called with the given event when a resize event
            is sent to the widget.</para>
            <para>See also QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            <para>This function is called with the given event when a timer event
            is sent to the widget.</para>
            <para>See also QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractItemView.OnInputMethodEvent(QtGui.QInputMethodEvent)">
            <summary>
            <para>Reimplemented from QWidget::inputMethodEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractItemView.Pressed">
            <summary>
            <para>This signal is emitted when a mouse button is pressed. The item the mouse was pressed on is specified by index. The signal is only emitted when the index is valid.</para>
            <para>Use the QApplication::mouseButtons() function to get the state of the mouse buttons.</para>
            <para>See also activated(), clicked(), doubleClicked(), and entered().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractItemView.Clicked">
            <summary>
            <para>This signal is emitted when a mouse button is left-clicked. The item the mouse was clicked on is specified by index. The signal is only emitted when the index is valid.</para>
            <para>See also activated(), doubleClicked(), entered(), and pressed().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractItemView.DoubleClicked">
            <summary>
            <para>This signal is emitted when a mouse button is double-clicked. The item the mouse was double-clicked on is specified by index. The signal is only emitted when the index is valid.</para>
            <para>See also clicked() and activated().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractItemView.Activated">
            <summary>
            <para>This signal is emitted when the item specified by index is activated by the user. How to activate items depends on the platform; e.g., by single- or double-clicking the item, or by pressing the Return or Enter key when the item is current.</para>
            <para>See also clicked(), doubleClicked(), entered(), and pressed().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractItemView.Entered">
            <summary>
            <para>This signal is emitted when the mouse cursor enters the item specified by index. Mouse tracking needs to be enabled for this feature to work.</para>
            <para>See also viewportEntered(), activated(), clicked(), doubleClicked(), and pressed().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractItemView.ViewportEntered">
            <summary>
            <para>This signal is emitted when the mouse cursor enters the viewport. Mouse tracking needs to be enabled for this feature to work.</para>
            <para>See also entered().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractItemView.IconSizeChanged">
            <summary>
            <para>This property holds the size of items' icons.</para>
            <para>Setting this property when the view is visible will cause the items to be laid out again.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QSize 	iconSize() const</para>
            <para> void 	setIconSize(const QSize &amp; size)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	iconSizeChanged(const QSize &amp; size)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.Model">
            <summary>
            <para>Returns the model that this view is presenting.</para>
            <para>See also setModel().</para>
            <para></para>
            <para>Sets the model for the view to present.</para>
            <para>This function will create and set a new selection model,
            replacing any model that was previously set with setSelectionModel().
            However, the old selection model will not be deleted as it may be shared
            between several views. We recommend that you delete the old selection model
            if it is no longer required. This is done with the following code:</para>
            <para>QItemSelectionModel *m = view-&gt;selectionModel();</para>
            <para>view-&gt;setModel(new model);</para>
            <para>delete m;</para>
            <para>If both the old model and the old selection model do not have
            parents, or if their parents are long-lived objects, it may be preferable
            to call their deleteLater() functions to explicitly delete them.</para>
            <para>The view does not take ownership of the model unless it is the
            model's parent object because the model may be shared between many
            different views.</para>
            <para>See also model(), selectionModel(), and
            setSelectionModel().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.SelectionModel">
            <summary>
            <para>Returns the current selection model.</para>
            <para>See also setSelectionModel() and selectedIndexes().</para>
            <para></para>
            <para>Sets the current selection model to the given
            selectionModel.</para>
            <para>Note that, if you call setModel() after this function, the given
            selectionModel will be replaced by one created by the view.</para>
            <para>Note: It is up to the application to delete the old selection
            model if it is no longer needed; i.e., if it is not being used by other
            views. This will happen automatically when its parent object is deleted.
            However, if it does not have a parent, or if the parent is a long-lived
            object, it may be preferable to call its deleteLater() function to
            explicitly delete it.</para>
            <para>See also selectionModel(), setModel(), and
            clearSelection().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.ItemDelegate">
            <summary>
            <para>Returns the item delegate used by this view and model. This is
            either one set with setItemDelegate(), or the default one.</para>
            <para>See also setItemDelegate().</para>
            <para></para>
            <para>Sets the item delegate for this view and its model to delegate.
            This is useful if you want complete control over the editing and display of
            items.</para>
            <para>Any existing delegate will be removed, but not deleted.
            QAbstractItemView does not take ownership of delegate.</para>
            <para>Warning: You should not share the same instance of a delegate
            between views. Doing so can cause incorrect or unintuitive editing behavior
            since each view connected to a given delegate may receive the closeEditor()
            signal, and attempt to access, modify or close an editor that has already
            been closed.</para>
            <para>See also itemDelegate().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.selectionMode">
            <summary>
            <para>This property holds which selection mode the view operates
            in.</para>
            <para>This property controls whether the user can select one or many
            items and, in many-item selections, whether the selection must be a
            continuous range of items.</para>
            <para>See also SelectionMode and SelectionBehavior.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.selectionBehavior">
            <summary>
            <para>This property holds which selection behavior the view
            uses.</para>
            <para>This property holds whether selections are done in terms of
            single items, rows or columns.</para>
            <para>See also SelectionMode and SelectionBehavior.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.EditTriggers">
            <summary>
            <para>This property holds which actions will initiate item
            editing.</para>
            <para>This property is a selection of flags defined by EditTrigger,
            combined using the OR operator. The view will only initiate the editing of
            an item if the action performed is set in this property.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.VerticalScrollMode">
            <summary>
            <para>This property holds how the view scrolls its contents in the
            vertical direction.</para>
            <para>This property controls how the view scroll its contents
            vertically. Scrolling can be done either per pixel or per item.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.HorizontalScrollMode">
            <summary>
            <para>This property holds how the view scrolls its contents in the
            horizontal direction.</para>
            <para>This property controls how the view scroll its contents
            horizontally. Scrolling can be done either per pixel or per item.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.AutoScrollMargin">
            <summary>
            <para>This property holds the size of the area when auto scrolling is
            triggered.</para>
            <para>This property controls the size of the area at the edge of the
            viewport that triggers autoscrolling. The default value is 16
            pixels.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.TabKeyNavigation">
            <summary>
            <para>This property holds whether item navigation with tab and backtab
            is enabled.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.DragEnabled">
            <summary>
            <para>This property holds whether the view supports dragging of its own
            items.</para>
            <para>See also showDropIndicator, DragDropMode, dragDropOverwriteMode,
            and acceptDrops.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.DragDropOverwriteMode">
            <summary>
            <para>This property holds the view's drag and drop behavior.</para>
            <para>If its value is true, the selected data will overwrite the
            existing item data when dropped, while moving the data will clear the item.
            If its value is false, the selected data will be inserted as a new item
            when the data is dropped. When the data is moved, the item is removed as
            well.</para>
            <para>The default value is false, as in the QListView and QTreeView
            subclasses. In the QTableView subclass, on the other hand, the property has
            been set to true.</para>
            <para>Note: This is not intended to prevent overwriting of items. The
            model's implementation of flags() should do that by not returning
            Qt::ItemIsDropEnabled.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also dragDropMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.dragDropMode">
            <summary>
            <para>This property holds the drag and drop event the view will act
            upon.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also showDropIndicator and dragDropOverwriteMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.DefaultDropAction">
            <summary>
            <para>This property holds the drop action that will be used by default
            in QAbstractItemView::drag().</para>
            <para>If the property is not set, the drop action is CopyAction when
            the supported actions support CopyAction.</para>
            <para>This property was introduced in  Qt 4.6.</para>
            <para>See also showDropIndicator and dragDropOverwriteMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.AlternatingRowColors">
            <summary>
            <para>This property holds whether to draw the background using
            alternating colors.</para>
            <para>If this property is true, the item background will be drawn using
            QPalette::Base and QPalette::AlternateBase; otherwise the background will
            be drawn using the QPalette::Base color.</para>
            <para>By default, this property is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.IconSize">
            <summary>
            <para>This property holds the size of items' icons.</para>
            <para>Setting this property when the view is visible will cause the
            items to be laid out again.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.TextElideMode">
            <summary>
            <para>This property holds the position of the &quot;...&quot; in elided
            text.</para>
            <para>The default value for all item views is Qt::ElideRight.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.RootIndex">
            <summary>
            <para>Returns the model index of the model's root item. The root item
            is the parent item to the view's toplevel items. The root can be
            invalid.</para>
            <para>See also setRootIndex().</para>
            <para></para>
            <para>Sets the root item to the item at the given index.</para>
            <para>See also rootIndex().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.CurrentIndex">
            <summary>
            <para>Returns the model index of the current item.</para>
            <para>See also setCurrentIndex().</para>
            <para></para>
            <para>Sets the current item to be the item at index.</para>
            <para>Unless the current selection mode is NoSelection, the item is
            also selected. Note that this function also updates the starting position
            for any new selections the user performs.</para>
            <para>To set an item as the current item without selecting it,
            call</para>
            <para>selectionModel()-&gt;setCurrentIndex(index,
            QItemSelectionModel::NoUpdate);</para>
            <para>See also currentIndex(), currentChanged(), and
            selectionMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.HorizontalStepsPerItem">
            <summary>
            <para>Returns the horizontal scroll bar's steps per item.</para>
            <para>See also setHorizontalStepsPerItem() and
            verticalStepsPerItem().</para>
            <para></para>
            <para>Sets the horizontal scroll bar's steps per item to steps.</para>
            <para>This is the number of steps used by the horizontal scroll bar to
            represent the width of an item.</para>
            <para>Note that if the view has a horizontal header, the item steps
            will be ignored and the header section size will be used instead.</para>
            <para>See also horizontalStepsPerItem() and
            setVerticalStepsPerItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.VerticalStepsPerItem">
            <summary>
            <para>Returns the vertical scroll bar's steps per item.</para>
            <para>See also setVerticalStepsPerItem() and
            horizontalStepsPerItem().</para>
            <para></para>
            <para>Sets the vertical scroll bar's steps per item to steps.</para>
            <para>This is the number of steps used by the vertical scroll bar to
            represent the height of an item.</para>
            <para>Note that if the view has a vertical header, the item steps will
            be ignored and the header section size will be used instead.</para>
            <para>See also verticalStepsPerItem() and
            setHorizontalStepsPerItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.state">
            <summary>
            <para>Returns the item view's state.</para>
            <para>See also setState().</para>
            <para></para>
            <para>Sets the item view's state to the given state.</para>
            <para>See also state().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.ViewportSizeHint">
            <summary>
            <para>Reimplemented from
            QAbstractScrollArea::viewportSizeHint().</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.HasAutoScroll">
            <summary>
            <para>This property holds whether autoscrolling in drag move events is
            enabled.</para>
            <para>If this property is set to true (the default), the
            QAbstractItemView automatically scrolls the contents of the view if the
            user drags within 16 pixels of the viewport edge. If the current item
            changes, then the view will scroll automatically to ensure that the current
            item is fully visible.</para>
            <para>This property only works if the viewport accepts drops.
            Autoscroll is switched off by setting this property to false.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasAutoScroll() const</para>
            <para> void 	setAutoScroll(bool enable)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.HorizontalOffset">
            <summary>
            <para>Returns the horizontal offset of the view.</para>
            <para>In the base class this is a pure virtual function.</para>
            <para>See also verticalOffset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.VerticalOffset">
            <summary>
            <para>Returns the vertical offset of the view.</para>
            <para>In the base class this is a pure virtual function.</para>
            <para>See also horizontalOffset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.ViewOptions">
            <summary>
            <para>Returns a QStyleOptionViewItem structure populated with the
            view's palette, font, state, alignments etc.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractItemView.dropIndicatorPosition">
            <summary>
            <para>Returns the position of the drop indicator in relation to the
            closest item.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QAbstractItemView.SelectionMode">
            <summary>
            <para>This enum indicates how the view responds to user
            selections:</para>
            <para>The most commonly used modes are SingleSelection and
            ExtendedSelection.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.SelectionMode.NoSelection">
            <summary>Items cannot be selected.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.SelectionMode.SingleSelection">
            <summary>When the user selects an item, any already-selected item becomes unselected, and the user cannot unselect the selected item by clicking on it.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.SelectionMode.MultiSelection">
            <summary>When the user selects an item in the usual way, the selection status of that item is toggled and the other items are left alone. Multiple items can be toggled by dragging the mouse over them.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.SelectionMode.ExtendedSelection">
            <summary>When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Ctrl key when clicking on an item, the clicked item gets toggled and all other items are left untouched. If the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item. Multiple items can be selected by dragging the mouse over them.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.SelectionMode.ContiguousSelection">
            <summary>When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.SelectionBehavior.SelectItems">
            <summary>Selecting single items.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.SelectionBehavior.SelectRows">
            <summary>Selecting only rows.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.SelectionBehavior.SelectColumns">
            <summary>Selecting only columns.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.ScrollHint.EnsureVisible">
            <summary>Scroll to ensure that the item is visible.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.ScrollHint.PositionAtTop">
            <summary>Scroll to position the item at the top of the viewport.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.ScrollHint.PositionAtBottom">
            <summary>Scroll to position the item at the bottom of the viewport.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.ScrollHint.PositionAtCenter">
            <summary>Scroll to position the item at the center of the viewport.</summary>
        </member>
        <member name="T:QtWidgets.QAbstractItemView.EditTrigger">
            <summary>
            <para>This enum describes actions which will initiate item
            editing.</para>
            <para>The EditTriggers type is a typedef for QFlags&lt;EditTrigger&gt;.
            It stores an OR combination of EditTrigger values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers">
            <summary>No editing possible.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.EditTrigger.CurrentChanged">
            <summary>Editing start whenever current item changes.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.EditTrigger.DoubleClicked">
            <summary>Editing starts when an item is double clicked.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.EditTrigger.SelectedClicked">
            <summary>Editing starts when clicking on an already selected item.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.EditTrigger.EditKeyPressed">
            <summary>Editing starts when the platform edit key has been pressed over an item.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.EditTrigger.AnyKeyPressed">
            <summary>Editing starts when any key is pressed over an item.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.EditTrigger.AllEditTriggers">
            <summary>Editing starts for all above actions.</summary>
        </member>
        <member name="T:QtWidgets.QAbstractItemView.ScrollMode">
            <summary>
            <para>This enum was introduced or modified in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.ScrollMode.ScrollPerItem">
            <summary>The view will scroll the contents one item at a time.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.ScrollMode.ScrollPerPixel">
            <summary>The view will scroll the contents one pixel at a time.</summary>
        </member>
        <member name="T:QtWidgets.QAbstractItemView.DragDropMode">
            <summary>
            <para>Describes the various drag and drop events the view can act upon.
            By default the view does not support dragging or dropping
            (NoDragDrop).</para>
            <para>Note that the model used needs to provide support for drag and
            drop operations.</para>
            <para>This enum was introduced or modified in  Qt 4.2.</para>
            <para>See also setDragDropMode() and Using drag and drop with item
            views.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.DragDropMode.NoDragDrop">
            <summary>Does not support dragging or dropping.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.DragDropMode.DragOnly">
            <summary>The view supports dragging of its own items</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.DragDropMode.DropOnly">
            <summary>The view accepts drops</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.DragDropMode.DragDrop">
            <summary>The view supports both dragging and dropping</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.DragDropMode.InternalMove">
            <summary>The view accepts move (not copy) operations only from itself.</summary>
        </member>
        <member name="T:QtWidgets.QAbstractItemView.CursorAction">
            <summary>
            <para>This enum describes the different ways to navigate between
            items,</para>
            <para>See also moveCursor().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.CursorAction.MoveUp">
            <summary>Move to the item above the current item.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.CursorAction.MoveDown">
            <summary>Move to the item below the current item.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.CursorAction.MoveLeft">
            <summary>Move to the item left of the current item.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.CursorAction.MoveRight">
            <summary>Move to the item right of the current item.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.CursorAction.MoveHome">
            <summary>Move to the top-left corner item.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.CursorAction.MoveEnd">
            <summary>Move to the bottom-right corner item.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.CursorAction.MovePageUp">
            <summary>Move one page up above the current item.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.CursorAction.MovePageDown">
            <summary>Move one page down below the current item.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.CursorAction.MoveNext">
            <summary>Move to the item after the current item.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.CursorAction.MovePrevious">
            <summary>Move to the item before the current item.</summary>
        </member>
        <member name="T:QtWidgets.QAbstractItemView.State">
            <summary>
            <para>Describes the different states the view can be in. This is
            usually only interesting when reimplementing your own view.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.State.NoState">
            <summary>The is the default state.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.State.DraggingState">
            <summary>The user is dragging items.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.State.DragSelectingState">
            <summary>The user is selecting items.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.State.EditingState">
            <summary>The user is editing an item in a widget editor.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.State.ExpandingState">
            <summary>The user is opening a branch of items.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.State.CollapsingState">
            <summary>The user is closing a branch of items.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.State.AnimatingState">
            <summary>The item view is performing an animation.</summary>
        </member>
        <member name="T:QtWidgets.QAbstractItemView.DropIndicatorPosition">
            <summary>
            <para>This enum indicates the position of the drop indicator in
            relation to the index at the current mouse position:</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.DropIndicatorPosition.OnItem">
            <summary>The item will be dropped on the index.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.DropIndicatorPosition.AboveItem">
            <summary>The item will be dropped above the index.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.DropIndicatorPosition.BelowItem">
            <summary>The item will be dropped below the index.</summary>
        </member>
        <member name="F:QtWidgets.QAbstractItemView.DropIndicatorPosition.OnViewport">
            <summary>The item will be dropped onto a region of the viewport with no items. The way each view handles items dropped onto the viewport depends on the behavior of the underlying model in use.</summary>
        </member>
        <member name="T:QtWidgets.QHeaderView">
            <summary>
            <para>The QHeaderView class provides a header row or header column for
            item views.</para>
            </summary>
            <remarks>
            <para>A QHeaderView displays the headers used in item views such as the
            QTableView and QTreeView classes. It takes the place of Qt3's QHeader class
            previously used for the same purpose, but uses the Qt's model/view
            architecture for consistency with the item view classes.</para>
            <para>The QHeaderView class is one of the Model/View Classes and is
            part of Qt's model/view framework.</para>
            <para>The header gets the data for each section from the model using
            the QAbstractItemModel::headerData() function. You can set the data by
            using QAbstractItemModel::setHeaderData().</para>
            <para>Each header has an orientation() and a number of sections, given
            by the count() function. A section refers to a part of the header - either
            a row or a column, depending on the orientation.</para>
            <para>Sections can be moved and resized using moveSection() and
            resizeSection(); they can also be hidden and shown with hideSection() and
            showSection().</para>
            <para>Each section of a header is described by a section ID, specified
            by its section(), and can be located at a particular visualIndex() in the
            header. A section can have a sort indicator set with setSortIndicator();
            this indicates whether the items in the associated item view will be sorted
            in the order given by the section.</para>
            <para>For a horizontal header the section is equivalent to a column in
            the model, and for a vertical header the section is equivalent to a row in
            the model.</para>
            <para></para>
            <para>Moving Header Sections</para>
            <para>A header can be fixed in place, or made movable with
            setSectionsMovable(). It can be made clickable with setSectionsClickable(),
            and has resizing behavior in accordance with setSectionResizeMode().</para>
            <para>Note: Double-clicking on a header to resize a section only
            applies for visible rows.</para>
            <para>A header will emit sectionMoved() if the user moves a section,
            sectionResized() if the user resizes a section, and sectionClicked() as
            well as sectionHandleDoubleClicked() in response to mouse clicks. A header
            will also emit sectionCountChanged().</para>
            <para>You can identify a section using the logicalIndex() and
            logicalIndexAt() functions, or by its index position, using the
            visualIndex() and visualIndexAt() functions. The visual index will change
            if a section is moved, but the logical index will not change.</para>
            <para></para>
            <para>Appearance</para>
            <para>QTableWidget and QTableView create default headers. If you want
            the headers to be visible, you can use setVisible().</para>
            <para>Not all ItemDataRoles will have an effect on a QHeaderView. If
            you need to draw other roles, you can subclass QHeaderView and reimplement
            paintEvent(). QHeaderView respects the following item data roles:
            TextAlignmentRole, DisplayRole, FontRole, DecorationRole, ForegroundRole,
            and BackgroundRole.</para>
            <para>Note: Each header renders the data for each section itself, and
            does not rely on a delegate. As a result, calling a header's
            setItemDelegate() function will have no effect.</para>
            <para></para>
            <para>See also Model/View Programming, QListView, QTableView, and
            QTreeView.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QHeaderView.#ctor(QtCore.Qt.Orientation,QtWidgets.QWidget)">
            <summary>
            <para>Creates a new generic header with the given orientation and
            parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SectionSizeHint(System.Int32)">
            <summary>
            <para>Returns a suitable size hint for the section specified by
            logicalIndex.</para>
            <para>Qt::SizeHintRole</para>
            <para>See also sizeHint(), defaultSectionSize(), minimumSectionSize(),
            and maximumSectionSize().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.VisualIndexAt(System.Int32)">
            <summary>
            <para>Returns the visual index of the section that covers the given
            position in the viewport.</para>
            <para>See also logicalIndexAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.LogicalIndexAt(System.Int32)">
            <summary>
            <para>Returns the section that covers the given position in the
            viewport.</para>
            <para>See also visualIndexAt() and isSectionHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.LogicalIndexAt(System.Int32,System.Int32)">
            <summary>
            <para>Returns the logical index of the section at the given coordinate.
            If the header is horizontal x will be used, otherwise y will be used to
            find the logical index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.LogicalIndexAt(QtCore.QPoint)">
            <summary>
            <para>Returns the logical index of the section at the position given in
            pos. If the header is horizontal the x-coordinate will be used, otherwise
            the y-coordinate will be used to find the logical index.</para>
            <para>See also sectionPosition().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SectionSize(System.Int32)">
            <summary>
            <para>Returns the width (or height for vertical headers) of the given
            logicalIndex.</para>
            <para>See also length(), setSectionResizeMode(), and
            defaultSectionSize().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SectionPosition(System.Int32)">
            <summary>
            <para>Returns the section position of the given logicalIndex, or -1 if
            the section is hidden. The position is measured in pixels from the first
            visible item's top-left corner to the top-left corner of the item with
            logicalIndex. The measurement is along the x-axis for horizontal headers
            and along the y-axis for vertical headers.</para>
            <para>See also sectionViewportPosition().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SectionViewportPosition(System.Int32)">
            <summary>
            <para>Returns the section viewport position of the given
            logicalIndex.</para>
            <para>If the section is hidden, the return value is undefined.</para>
            <para>See also sectionPosition() and isSectionHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.MoveSection(System.Int32,System.Int32)">
            <summary>
            <para>Moves the section at visual index from to occupy visual index
            to.</para>
            <para>See also sectionsMoved().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SwapSections(System.Int32,System.Int32)">
            <summary>
            <para>Swaps the section at visual index first with the section at
            visual index second.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also moveSection().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.ResizeSection(System.Int32,System.Int32)">
            <summary>
            <para>Resizes the section specified by logicalIndex to size measured in
            pixels. The size parameter must be a value larger or equal to zero. A size
            equal to zero is however not recommended. In that situation hideSection
            should be used instead.</para>
            <para>See also sectionResized(), resizeMode(), sectionSize(), and
            hideSection().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.ResizeSections(QtWidgets.QHeaderView.ResizeMode)">
            <summary>
            <para>Resizes the sections according to the given mode, ignoring the
            current resize mode.</para>
            <para>See also resizeMode() and sectionResized().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.IsSectionHidden(System.Int32)">
            <summary>
            <para>Returns true if the section specified by logicalIndex is
            explicitly hidden from the user; otherwise returns false.</para>
            <para>See also hideSection(), showSection(), setSectionHidden(), and
            hiddenSectionCount().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SetSectionHidden(System.Int32,System.Boolean)">
            <summary>
            <para>If hide is true the section specified by logicalIndex is hidden;
            otherwise the section is shown.</para>
            <para>See also isSectionHidden() and hiddenSectionCount().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.HideSection(System.Int32)">
            <summary>
            <para>Hides the section specified by logicalIndex.</para>
            <para>See also showSection(), isSectionHidden(), hiddenSectionCount(),
            and setSectionHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.ShowSection(System.Int32)">
            <summary>
            <para>Shows the section specified by logicalIndex.</para>
            <para>See also hideSection(), isSectionHidden(), hiddenSectionCount(),
            and setSectionHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.VisualIndex(System.Int32)">
            <summary>
            <para>Returns the visual index position of the section specified by the
            given logicalIndex, or -1 otherwise.</para>
            <para>Hidden sections still have valid visual indexes.</para>
            <para>See also logicalIndex().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.LogicalIndex(System.Int32)">
            <summary>
            <para>Returns the logicalIndex for the section at the given visualIndex
            position, or -1 if visualIndex &lt; 0 or visualIndex &gt;=
            QHeaderView::count().</para>
            <para>Note that the visualIndex is not affected by hidden
            sections.</para>
            <para>See also visualIndex() and sectionPosition().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SectionResizeMode(System.Int32)">
            <summary>
            <para>Returns the resize mode that applies to the section specified by
            the given logicalIndex.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also setSectionResizeMode().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SetSectionResizeMode(QtWidgets.QHeaderView.ResizeMode)">
            <summary>
            <para>Sets the constraints on how the header can be resized to those
            described by the given mode.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also sectionResizeMode(), resizeMode(), length(), and
            sectionResized().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SetSectionResizeMode(System.Int32,QtWidgets.QHeaderView.ResizeMode)">
            <summary>
            <para>Sets the constraints on how the section specified by logicalIndex
            in the header can be resized to those described by the given mode. The
            logical index should exist at the time this function is called.</para>
            <para>Note: This setting will be ignored for the last section if the
            stretchLastSection property is set to true. This is the default for the
            horizontal headers provided by QTreeView.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also setStretchLastSection() and
            resizeContentsPrecision().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SetSortIndicator(System.Int32,QtCore.Qt.SortOrder)">
            <summary>
            <para>Sets the sort indicator for the section specified by the given
            logicalIndex in the direction specified by order, and removes the sort
            indicator from any other section that was showing it.</para>
            <para>logicalIndex may be -1, in which case no sort indicator will be
            shown and the model will return to its natural, unsorted order. Note that
            not all models support this and may even crash in this case.</para>
            <para>See also sortIndicatorSection() and sortIndicatorOrder().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.ResetDefaultSectionSize">
            <summary>
            <para>This property holds the default size of the header sections
            before resizing.</para>
            <para>This property only affects sections that have Interactive or
            Fixed as their resize mode.</para>
            <para>By default, the value of this property is style dependent. Thus,
            when the style changes, this property updates from it. Calling
            setDefaultSectionSize() stops the updates, calling
            resetDefaultSectionSize() will restore default behavior.</para>
            <para>See also setSectionResizeMode() and minimumSectionSize.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SaveState">
            <summary>
            <para>Saves the current state of this header view.</para>
            <para>To restore the saved state, pass the return value to
            restoreState().</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also restoreState().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.RestoreState(QtCore.QByteArray)">
            <summary>
            <para>Restores the state of this header view. This function returns
            true if the state was restored; otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also saveState().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.Reset">
            <summary>
            <para>Reimplemented from QAbstractItemView::reset().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SetOffsetToSectionPosition(System.Int32)">
            <summary>
            <para>Sets the offset to the start of the section at the given
            visualSectionNumber. visualSectionNumber is the actual visible section when
            hiddenSections are not considered. That is not always the same as
            visualIndex().</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setOffset() and sectionPosition().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SetOffsetToLastSection">
            <summary>
            <para>Sets the offset to make the last section visible.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setOffset(), sectionPosition(), and
            setOffsetToSectionPosition().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.HeaderDataChanged(QtCore.Qt.Orientation,System.Int32,System.Int32)">
            <summary>
            <para>Updates the changed header sections with the given orientation,
            from logicalFirst to logicalLast inclusive.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.ResizeSections">
            <summary>
            <para>Resizes the sections according to their size hints. Normally, you
            do not have to call this function.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SectionsInserted(QtCore.QModelIndex,System.Int32,System.Int32)">
            <summary>
            <para>This slot is called when sections are inserted into the parent.
            logicalFirst and logicalLast indices signify where the new sections were
            inserted.</para>
            <para>If only one section is inserted, logicalFirst and logicalLast
            will be the same.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SectionsAboutToBeRemoved(QtCore.QModelIndex,System.Int32,System.Int32)">
            <summary>
            <para>This slot is called when sections are removed from the parent.
            logicalFirst and logicalLast signify where the sections were
            removed.</para>
            <para>If only one section is removed, logicalFirst and logicalLast will
            be the same.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.CurrentChanged(QtCore.QModelIndex,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemView::currentChanged().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.OnMouseDoubleClickEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseDoubleClickEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.OnViewportEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractScrollArea::viewportEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.PaintSection(QtGui.QPainter,QtCore.QRect,System.Int32)">
            <summary>
            <para>Paints the section specified by the given logicalIndex, using the
            given painter and rect.</para>
            <para>Normally, you do not have to call this function.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SectionSizeFromContents(System.Int32)">
            <summary>
            <para>Returns the size of the contents of the section specified by the
            given logicalIndex.</para>
            <para>See also defaultSectionSize().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.SetSelection(QtCore.QRect,QtCore.QItemSelectionModel.SelectionFlag)">
            <summary>
            <para>Reimplemented from QAbstractItemView::setSelection().</para>
            <para>Selects the items in the given rect according to the specified
            flags.</para>
            <para>The base class implementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHeaderView.InitStyleOption(QtWidgets.QStyleOptionHeader)">
            <summary>
            <para>Initialize option with the values from this QHeaderView. This
            method is useful for subclasses when they need a QStyleOptionHeader, but do
            not want to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QHeaderView.SectionMoved">
            <summary>
            <para>This signal is emitted when a section is moved. The section's logical index is specified by logicalIndex, the old index by oldVisualIndex, and the new index position by newVisualIndex.</para>
            <para>See also moveSection().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QHeaderView.SectionResized">
            <summary>
            <para>This signal is emitted when a section is resized. The section's logical number is specified by logicalIndex, the old size by oldSize, and the new size by newSize.</para>
            <para>See also resizeSection().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QHeaderView.SectionPressed">
            <summary>
            <para>This signal is emitted when a section is pressed. The section's logical index is specified by logicalIndex.</para>
            <para>See also setSectionsClickable().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QHeaderView.SectionClicked">
            <summary>
            <para>This signal is emitted when a section is clicked. The section's logical index is specified by logicalIndex.</para>
            <para>Note that the sectionPressed signal will also be emitted.</para>
            <para>See also setSectionsClickable() and sectionPressed().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QHeaderView.SectionEntered">
            <summary>
            <para>This signal is emitted when the cursor moves over the section and the left mouse button is pressed. The section's logical index is specified by logicalIndex.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setSectionsClickable() and sectionPressed().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QHeaderView.SectionDoubleClicked">
            <summary>
            <para>This signal is emitted when a section is double-clicked. The section's logical index is specified by logicalIndex.</para>
            <para>See also setSectionsClickable().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QHeaderView.SectionCountChanged">
            <summary>
            <para>This signal is emitted when the number of sections changes, i.e., when sections are added or deleted. The original count is specified by oldCount, and the new count by newCount.</para>
            <para>See also count(), length(), and headerDataChanged().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QHeaderView.SectionHandleDoubleClicked">
            <summary>
            <para>This signal is emitted when a section is double-clicked. The section's logical index is specified by logicalIndex.</para>
            <para>See also setSectionsClickable().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QHeaderView.GeometriesChanged">
            <summary>
            <para>This signal is emitted when the header's geometries have changed.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QHeaderView.SortIndicatorChanged">
            <summary>
            <para>This signal is emitted when the section containing the sort indicator or the order indicated is changed. The section's logical index is specified by logicalIndex and the sort order is specified by order.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setSortIndicator().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.Model">
            <summary>
            <para>Returns the model that this view is presenting.</para>
            <para>See also setModel().</para>
            <para></para>
            <para>Sets the model for the view to present.</para>
            <para>This function will create and set a new selection model,
            replacing any model that was previously set with setSelectionModel().
            However, the old selection model will not be deleted as it may be shared
            between several views. We recommend that you delete the old selection model
            if it is no longer required. This is done with the following code:</para>
            <para>QItemSelectionModel *m = view-&gt;selectionModel();</para>
            <para>view-&gt;setModel(new model);</para>
            <para>delete m;</para>
            <para>If both the old model and the old selection model do not have
            parents, or if their parents are long-lived objects, it may be preferable
            to call their deleteLater() functions to explicitly delete them.</para>
            <para>The view does not take ownership of the model unless it is the
            model's parent object because the model may be shared between many
            different views.</para>
            <para>See also model(), selectionModel(), and
            setSelectionModel().</para>
            <para></para>
            <para>Reimplemented from QAbstractItemView::setModel().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.Visible">
            <summary>
            <para>This property holds whether the widget is visible.</para>
            <para>Calling setVisible(true) or show() sets the widget to visible
            status if all its parent widgets up to the window are visible. If an
            ancestor is not visible, the widget won't become visible until all its
            ancestors are shown. If its size or position has changed, Qt guarantees
            that a widget gets move and resize events just before it is shown. If the
            widget has not been resized yet, Qt will adjust the widget's size to a
            useful default using adjustSize().</para>
            <para>Calling setVisible(false) or hide() hides a widget explicitly. An
            explicitly hidden widget will never become visible, even if all its
            ancestors become visible, unless you show it.</para>
            <para>A widget receives show and hide events when its visibility status
            changes. Between a hide and a show event, there is no need to waste CPU
            cycles preparing or displaying information to the user. A video
            application, for example, might simply stop generating new frames.</para>
            <para>A widget that happens to be obscured by other windows on the
            screen is considered to be visible. The same applies to iconified windows
            and windows that exist on another virtual desktop (on platforms that
            support this concept). A widget receives spontaneous show and hide events
            when its mapping status is changed by the window system, e.g. a spontaneous
            hide event when the user minimizes the window, and a spontaneous show event
            when the window is restored again.</para>
            <para>You almost never have to reimplement the setVisible() function.
            If you need to change some settings before a widget is shown, use
            showEvent() instead. If you need to do some delayed initialization use the
            Polish event delivered to the event() function.</para>
            <para>See also show(), hide(), isHidden(), isVisibleTo(),
            isMinimized(), showEvent(), and hideEvent().</para>
            <para></para>
            <para>Reimplemented from QWidget::setVisible().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.SectionsMovable">
            <summary>
            <para>Returns true if the header can be moved by the user; otherwise
            returns false.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also setSectionsMovable().</para>
            <para></para>
            <para>If movable is true, the header may be moved by the user;
            otherwise it is fixed in place.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also sectionsMovable() and sectionMoved().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.SectionsClickable">
            <summary>
            <para>Returns true if the header is clickable; otherwise returns false.
            A clickable header could be set up to allow the user to change the
            representation of the data in the view related to the header.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also setSectionsClickable().</para>
            <para></para>
            <para>If clickable is true, the header will respond to single
            clicks.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also sectionsClickable(), sectionClicked(), sectionPressed(),
            and setSortIndicatorShown().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.HighlightSections">
            <summary>
            <para>This property holds whether the sections containing selected
            items are highlighted.</para>
            <para>By default, this property is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.ResizeContentsPrecision">
            <summary>
            <para>Returns how precise QHeaderView will calculate on
            ResizeToContents.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also setResizeContentsPrecision() and
            setSectionResizeMode().</para>
            <para></para>
            <para>Sets how precise QHeaderView should calculate the size when
            ResizeToContents is used. A low value will provide a less accurate but fast
            auto resize while a higher value will provide a more accurate resize that
            however can be slow.</para>
            <para>The number precision specifies how many sections that should be
            consider when calculating the preferred size.</para>
            <para>The default value is 1000 meaning that a horizontal column with
            auto-resize will look at maximum 1000 rows on calculating when doing an
            auto resize.</para>
            <para>Special value 0 means that it will look at only the visible area.
            Special value -1 will imply looking at all elements.</para>
            <para>This value is used in QTableView::sizeHintForColumn(),
            QTableView::sizeHintForRow() and QTreeView::sizeHintForColumn().
            Reimplementing these functions can make this function not having an
            effect.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also resizeContentsPrecision(), setSectionResizeMode(),
            resizeSections(), QTableView::sizeHintForColumn(),
            QTableView::sizeHintForRow(), and QTreeView::sizeHintForColumn().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.SortIndicatorShown">
            <summary>
            <para>This property holds whether the sort indicator is shown.</para>
            <para>By default, this property is false.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isSortIndicatorShown() const</para>
            <para> void 	setSortIndicatorShown(bool show)</para>
            <para></para>
            <para>See also setSectionsClickable().</para>
            <para></para>
            <para>This property holds whether the sort indicator is shown.</para>
            <para>By default, this property is false.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isSortIndicatorShown() const</para>
            <para> void 	setSortIndicatorShown(bool show)</para>
            <para></para>
            <para>See also setSectionsClickable().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.StretchLastSection">
            <summary>
            <para>This property holds whether the last visible section in the
            header takes up all the available space.</para>
            <para>The default value is false.</para>
            <para>Note: The horizontal headers provided by QTreeView are configured
            with this property set to true, ensuring that the view does not waste any
            of the space assigned to it for its header. If this value is set to true,
            this property will override the resize mode set on the last section in the
            header.</para>
            <para>See also setSectionResizeMode().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.CascadingSectionResizes">
            <summary>
            <para>This property holds whether interactive resizing will be cascaded
            to the following sections once the section being resized by the user has
            reached its minimum size.</para>
            <para>This property only affects sections that have Interactive as
            their resize mode.</para>
            <para>The default value is false.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also setSectionResizeMode().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.DefaultSectionSize">
            <summary>
            <para>This property holds the default size of the header sections
            before resizing.</para>
            <para>This property only affects sections that have Interactive or
            Fixed as their resize mode.</para>
            <para>By default, the value of this property is style dependent. Thus,
            when the style changes, this property updates from it. Calling
            setDefaultSectionSize() stops the updates, calling
            resetDefaultSectionSize() will restore default behavior.</para>
            <para>See also setSectionResizeMode() and minimumSectionSize.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.MinimumSectionSize">
            <summary>
            <para>This property holds the minimum size of the header
            sections.</para>
            <para>The minimum section size is the smallest section size allowed. If
            the minimum section size is set to -1, QHeaderView will use the maximum of
            the global strut or the font metrics size.</para>
            <para>This property is honored by all resize modes.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also setSectionResizeMode() and defaultSectionSize.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.MaximumSectionSize">
            <summary>
            <para>This property holds the maximum size of the header
            sections.</para>
            <para>The maximum section size is the largest section size allowed. The
            default value for this property is 1048575, which is also the largest
            possible size for a section. Setting maximum to -1 will reset the value to
            the largest section size.</para>
            <para>With exception of stretch this property is honored by all resize
            modes</para>
            <para>This property was introduced in  Qt 5.2.</para>
            <para>See also setSectionResizeMode() and defaultSectionSize.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.DefaultAlignment">
            <summary>
            <para>This property holds the default alignment of the text in each
            header section.</para>
            <para>This property was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.Offset">
            <summary>
            <para>Returns the offset of the header: this is the header's left-most
            (or top-most for vertical headers) visible pixel.</para>
            <para>See also setOffset().</para>
            <para></para>
            <para>Sets the header's offset to offset.</para>
            <para>See also offset() and length().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            <para>Returns a suitable size hint for this header.</para>
            <para>See also sectionSizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.HorizontalOffset">
            <summary>
            <para>Reimplemented from QAbstractItemView::horizontalOffset().</para>
            <para>Returns the horizontal offset of the header. This is 0 for
            vertical headers.</para>
            <para>See also offset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.VerticalOffset">
            <summary>
            <para>Reimplemented from QAbstractItemView::verticalOffset().</para>
            <para>Returns the vertical offset of the header. This is 0 for
            horizontal headers.</para>
            <para>See also offset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.Orientation">
            <summary>
            <para>Returns the orientation of the header.</para>
            <para>See also Qt::Orientation.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.Length">
            <summary>
            <para>Returns the length along the orientation of the header.</para>
            <para>See also sizeHint(), setSectionResizeMode(), and offset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.HiddenSectionCount">
            <summary>
            <para>Returns the number of sections in the header that has been
            hidden.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setSectionHidden() and isSectionHidden().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.Count">
            <summary>
            <para>Returns the number of sections in the header.</para>
            <para>See also sectionCountChanged() and length().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.StretchSectionCount">
            <summary>
            <para>Returns the number of sections that are set to resize mode
            stretch. In views, this can be used to see if the headerview needs to
            resize the sections when the view's geometry changes.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also stretchLastSection and resizeMode().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.SortIndicatorSection">
            <summary>
            <para>Returns the logical index of the section that has a sort
            indicator. By default this is section 0.</para>
            <para>See also setSortIndicator(), sortIndicatorOrder(), and
            setSortIndicatorShown().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.SortIndicatorOrder">
            <summary>
            <para>Returns the order for the sort indicator. If no section has a
            sort indicator the return value of this function is undefined.</para>
            <para>See also setSortIndicator() and sortIndicatorSection().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.SectionsMoved">
            <summary>
            <para>Returns true if sections in the header has been moved; otherwise
            returns false;</para>
            <para>See also moveSection().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QHeaderView.SectionsHidden">
            <summary>
            <para>Returns true if sections in the header has been hidden; otherwise
            returns false;</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setSectionHidden().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QHeaderView.ResizeMode">
            <summary>
            <para>The resize mode specifies the behavior of the header sections. It
            can be set on the entire header view or on individual sections using
            setSectionResizeMode().</para>
            <para>The following values are obsolete:</para>
            <para>See also setResizeMode(), setSectionResizeMode(),
            stretchLastSection, and minimumSectionSize.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QHeaderView.ResizeMode.Interactive">
            <summary>The user can resize the section. The section can also be resized programmatically using resizeSection(). The section size defaults to defaultSectionSize. (See also cascadingSectionResizes.)</summary>
        </member>
        <member name="F:QtWidgets.QHeaderView.ResizeMode.Stretch">
            <summary>QHeaderView will automatically resize the section to fill the available space. The size cannot be changed by the user or programmatically.</summary>
        </member>
        <member name="F:QtWidgets.QHeaderView.ResizeMode.Fixed">
            <summary>The user cannot resize the section. The section can only be resized programmatically using resizeSection(). The section size defaults to defaultSectionSize.</summary>
        </member>
        <member name="F:QtWidgets.QHeaderView.ResizeMode.ResizeToContents">
            <summary>QHeaderView will automatically resize the section to its optimal size based on the contents of the entire column or row. The size cannot be changed by the user or programmatically. (This value was introduced in 4.2)</summary>
        </member>
        <member name="F:QtWidgets.QHeaderView.ResizeMode.Custom">
            <summary>Use Fixed instead.</summary>
        </member>
        <member name="T:QtWidgets.QDialog">
            <summary>
            <para>The QDialog class is the base class of dialog windows.</para>
            </summary>
            <remarks>
            <para>A dialog window is a top-level window mostly used for short-term
            tasks and brief communications with the user. QDialogs may be modal or
            modeless. QDialogs can provide a return value, and they can have default
            buttons. QDialogs can also have a QSizeGrip in their lower-right corner,
            using setSizeGripEnabled().</para>
            <para>Note that QDialog (and any other widget that has type Qt::Dialog)
            uses the parent widget slightly differently from other classes in Qt. A
            dialog is always a top-level widget, but if it has a parent, its default
            location is centered on top of the parent's top-level widget (if it is not
            top-level itself). It will also share the parent's taskbar entry.</para>
            <para>Use the overload of the QWidget::setParent() function to change
            the ownership of a QDialog widget. This function allows you to explicitly
            set the window flags of the reparented widget; using the overloaded
            function will clear the window flags specifying the window-system
            properties for the widget (in particular it will reset the Qt::Dialog
            flag).</para>
            <para></para>
            <para>Modal Dialogs</para>
            <para>A modal dialog is a dialog that blocks input to other visible
            windows in the same application. Dialogs that are used to request a file
            name from the user or that are used to set application preferences are
            usually modal. Dialogs can be application modal (the default) or window
            modal.</para>
            <para>When an application modal dialog is opened, the user must finish
            interacting with the dialog and close it before they can access any other
            window in the application. Window modal dialogs only block access to the
            window associated with the dialog, allowing the user to continue to use
            other windows in an application.</para>
            <para>The most common way to display a modal dialog is to call its
            exec() function. When the user closes the dialog, exec() will provide a
            useful return value. Typically, to get the dialog to close and return the
            appropriate value, we connect a default button, e.g. OK, to the accept()
            slot and a Cancel button to the reject() slot. Alternatively you can call
            the done() slot with Accepted or Rejected.</para>
            <para>An alternative is to call setModal(true) or setWindowModality(),
            then show(). Unlike exec(), show() returns control to the caller
            immediately. Calling setModal(true) is especially useful for progress
            dialogs, where the user must have the ability to interact with the dialog,
            e.g. to cancel a long running operation. If you use show() and
            setModal(true) together to perform a long operation, you must call
            QApplication::processEvents() periodically during processing to enable the
            user to interact with the dialog. (See QProgressDialog.)</para>
            <para></para>
            <para>Modeless Dialogs</para>
            <para>A modeless dialog is a dialog that operates independently of
            other windows in the same application. Find and replace dialogs in
            word-processors are often modeless to allow the user to interact with both
            the application's main window and with the dialog.</para>
            <para>Modeless dialogs are displayed using show(), which returns
            control to the caller immediately.</para>
            <para>If you invoke the show() function after hiding a dialog, the
            dialog will be displayed in its original position. This is because the
            window manager decides the position for windows that have not been
            explicitly placed by the programmer. To preserve the position of a dialog
            that has been moved by the user, save its position in your closeEvent()
            handler and then move the dialog to that position, before showing it
            again.</para>
            <para></para>
            <para></para>
            <para>Default Button</para>
            <para>A dialog's default button is the button that's pressed when the
            user presses Enter (Return). This button is used to signify that the user
            accepts the dialog's settings and wants to close the dialog. Use
            QPushButton::setDefault(), QPushButton::isDefault() and
            QPushButton::autoDefault() to set and control the dialog's default
            button.</para>
            <para></para>
            <para></para>
            <para>Escape Key</para>
            <para>If the user presses the Esc key in a dialog, QDialog::reject()
            will be called. This will cause the window to close: The close event cannot
            be ignored.</para>
            <para></para>
            <para>Extensibility</para>
            <para>Extensibility is the ability to show the dialog in two ways: a
            partial dialog that shows the most commonly used options, and a full dialog
            that shows all the options. Typically an extensible dialog will initially
            appear as a partial dialog, but with a More toggle button. If the user
            presses the More button down, the dialog is expanded. The Extension Example
            shows how to achieve extensible dialogs using Qt.</para>
            <para></para>
            <para></para>
            <para>Return Value (Modal Dialogs)</para>
            <para>Modal dialogs are often used in situations where a return value
            is required, e.g. to indicate whether the user pressed OK or Cancel. A
            dialog can be closed by calling the accept() or the reject() slots, and
            exec() will return Accepted or Rejected as appropriate. The exec() call
            returns the result of the dialog. The result is also available from
            result() if the dialog has not been destroyed.</para>
            <para>In order to modify your dialog's close behavior, you can
            reimplement the functions accept(), reject() or done(). The closeEvent()
            function should only be reimplemented to preserve the dialog's position or
            to override the standard close or reject behavior.</para>
            <para></para>
            <para></para>
            <para>Code Examples</para>
            <para>A modal dialog:</para>
            <para>void EditorWindow::countWords()</para>
            <para>{</para>
            <para>    WordCountDialog dialog(this);</para>
            <para>    dialog.setWordCount(document().wordCount());</para>
            <para>    dialog.exec();</para>
            <para>}</para>
            <para>A modeless dialog:</para>
            <para>void EditorWindow::find()</para>
            <para>{</para>
            <para>    if (!findDialog) {</para>
            <para>        findDialog = new FindDialog(this);</para>
            <para>        connect(findDialog, SIGNAL(findNext()), this,
            SLOT(findNext()));</para>
            <para>    }</para>
            <para></para>
            <para>    findDialog-&gt;show();</para>
            <para>    findDialog-&gt;raise();</para>
            <para>    findDialog-&gt;activateWindow();</para>
            <para>}</para>
            <para></para>
            <para>See also QDialogButtonBox, QTabWidget, QWidget, QProgressDialog,
            GUI Design Handbook: Dialogs, Standard, Extension Example, and Standard
            Dialogs Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QDialog.#ctor(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a dialog with parent parent.</para>
            <para>A dialog is always a top-level widget, but if it has a parent,
            its default location is centered on top of the parent. It will also share
            the parent's taskbar entry.</para>
            <para>The widget flags f are passed on to the QWidget constructor. If,
            for example, you don't want a What's This button in the title bar of the
            dialog, pass Qt::WindowTitleHint | Qt::WindowSystemMenuHint in f.</para>
            <para>See also QWidget::setWindowFlags().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialog.SetModal(System.Boolean)">
            <summary>
            <para>This property holds whether show() should pop up the dialog as
            modal or modeless.</para>
            <para>By default, this property is false and show() pops up the dialog
            as modeless. Setting his property to true is equivalent to setting
            QWidget::windowModality to Qt::ApplicationModal.</para>
            <para>exec() ignores the value of this property and always pops up the
            dialog as modal.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isModal() const</para>
            <para> void 	setModal(bool modal)</para>
            <para></para>
            <para>See also QWidget::windowModality, show(), and exec().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialog.Open">
            <summary>
            <para>Shows the dialog as a window modal dialog, returning
            immediately.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also exec(), show(), result(), and
            setWindowModality().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialog.Exec">
            <summary>
            <para>Shows the dialog as a modal dialog, blocking until the user
            closes it. The function returns a DialogCode result.</para>
            <para>If the dialog is application modal, users cannot interact with
            any other window in the same application until they close the dialog. If
            the dialog is window modal, only interaction with the parent window is
            blocked while the dialog is open. By default, the dialog is application
            modal.</para>
            <para>See also open(), show(), result(), and
            setWindowModality().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialog.Done(System.Int32)">
            <summary>
            <para>Closes the dialog and sets its result code to r. If this dialog
            is shown with exec(), done() causes the local event loop to finish, and
            exec() to return r.</para>
            <para>As with QWidget::close(), done() deletes the dialog if the
            Qt::WA_DeleteOnClose flag is set. If the dialog is the application's main
            widget, the application terminates. If the dialog is the last window
            closed, the QApplication::lastWindowClosed() signal is emitted.</para>
            <para>See also accept(), reject(), QApplication::activeWindow(), and
            QApplication::quit().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialog.Accept">
            <summary>
            <para>Hides the modal dialog and sets the result code to
            Accepted.</para>
            <para>See also reject() and done().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialog.Reject">
            <summary>
            <para>Hides the modal dialog and sets the result code to
            Rejected.</para>
            <para>See also accept() and done().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialog.ShowExtension(System.Boolean)">
            <summary>
            <para>If showIt is true, the dialog's extension is shown; otherwise the
            extension is hidden.</para>
            <para>Instead of using this functionality, we recommend that you simply
            call show() or hide() on the part of the dialog that you want to use as an
            extension. See the Extension Example for details.</para>
            <para>See also show(), setExtension(), and setOrientation().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialog.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialog.OnCloseEvent(QtGui.QCloseEvent)">
            <summary>
            <para>Reimplemented from QWidget::closeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialog.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialog.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialog.OnContextMenuEvent(QtGui.QContextMenuEvent)">
            <summary>
            <para>Reimplemented from QWidget::contextMenuEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialog.EventFilter(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::eventFilter().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDialog.Finished">
            <summary>
            <para>This signal is emitted when the dialog's result code has been set, either by the user or by calling done(), accept(), or reject().</para>
            <para>Note that this signal is not emitted when hiding the dialog with hide() or setVisible(false). This includes deleting the dialog while it is visible.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also accepted() and rejected().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDialog.Accepted">
            <summary>
            <para>This signal is emitted when the dialog has been accepted either by the user or by calling accept() or done() with the QDialog::Accepted argument.</para>
            <para>Note that this signal is not emitted when hiding the dialog with hide() or setVisible(false). This includes deleting the dialog while it is visible.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also finished() and rejected().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDialog.Rejected">
            <summary>
            <para>This signal is emitted when the dialog has been rejected either by the user or by calling reject() or done() with the QDialog::Rejected argument.</para>
            <para>Note that this signal is not emitted when hiding the dialog with hide() or setVisible(false). This includes deleting the dialog while it is visible.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also finished() and accepted().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDialog.Visible">
            <summary>
            <para>This property holds whether the widget is visible.</para>
            <para>Calling setVisible(true) or show() sets the widget to visible
            status if all its parent widgets up to the window are visible. If an
            ancestor is not visible, the widget won't become visible until all its
            ancestors are shown. If its size or position has changed, Qt guarantees
            that a widget gets move and resize events just before it is shown. If the
            widget has not been resized yet, Qt will adjust the widget's size to a
            useful default using adjustSize().</para>
            <para>Calling setVisible(false) or hide() hides a widget explicitly. An
            explicitly hidden widget will never become visible, even if all its
            ancestors become visible, unless you show it.</para>
            <para>A widget receives show and hide events when its visibility status
            changes. Between a hide and a show event, there is no need to waste CPU
            cycles preparing or displaying information to the user. A video
            application, for example, might simply stop generating new frames.</para>
            <para>A widget that happens to be obscured by other windows on the
            screen is considered to be visible. The same applies to iconified windows
            and windows that exist on another virtual desktop (on platforms that
            support this concept). A widget receives spontaneous show and hide events
            when its mapping status is changed by the window system, e.g. a spontaneous
            hide event when the user minimizes the window, and a spontaneous show event
            when the window is restored again.</para>
            <para>You almost never have to reimplement the setVisible() function.
            If you need to change some settings before a widget is shown, use
            showEvent() instead. If you need to do some delayed initialization use the
            Polish event delivered to the event() function.</para>
            <para>See also show(), hide(), isHidden(), isVisibleTo(),
            isMinimized(), showEvent(), and hideEvent().</para>
            <para></para>
            <para>Reimplemented from QWidget::setVisible().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDialog.Orientation">
            <summary>
            <para>Returns the dialog's extension orientation.</para>
            <para>Instead of using this functionality, we recommend that you simply
            call show() or hide() on the part of the dialog that you want to use as an
            extension. See the Extension Example for details.</para>
            <para>See also setOrientation() and extension().</para>
            <para></para>
            <para>If orientation is Qt::Horizontal, the extension will be displayed
            to the right of the dialog's main area. If orientation is Qt::Vertical, the
            extension will be displayed below the dialog's main area.</para>
            <para>Instead of using this functionality, we recommend that you simply
            call show() or hide() on the part of the dialog that you want to use as an
            extension. See the Extension Example for details.</para>
            <para>See also orientation() and setExtension().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDialog.Extension">
            <summary>
            <para>Returns the dialog's extension or 0 if no extension has been
            defined.</para>
            <para>Instead of using this functionality, we recommend that you simply
            call show() or hide() on the part of the dialog that you want to use as an
            extension. See the Extension Example for details.</para>
            <para>See also setExtension(), showExtension(), and
            setOrientation().</para>
            <para></para>
            <para>Sets the widget, extension, to be the dialog's extension,
            deleting any previous extension. The dialog takes ownership of the
            extension. Note that if 0 is passed any existing extension will be deleted.
            This function must only be called while the dialog is hidden.</para>
            <para>Instead of using this functionality, we recommend that you simply
            call show() or hide() on the part of the dialog that you want to use as an
            extension. See the Extension Example for details.</para>
            <para>See also extension(), showExtension(), and
            setOrientation().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDialog.SizeGripEnabled">
            <summary>
            <para>This property holds whether the size grip is enabled.</para>
            <para>A QSizeGrip is placed in the bottom-right corner of the dialog
            when this property is enabled. By default, the size grip is
            disabled.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDialog.Result">
            <summary>
            <para>In general returns the modal dialog's result code, Accepted or
            Rejected.</para>
            <para>Note: When called on a QMessageBox instance, the returned value
            is a value of the QMessageBox::StandardButton enum.</para>
            <para>Do not call this function if the dialog was constructed with the
            Qt::WA_DeleteOnClose attribute.</para>
            <para>See also setResult().</para>
            <para></para>
            <para>Sets the modal dialog's result code to i.</para>
            <para>Note: We recommend that you use one of the values defined by
            QDialog::DialogCode.</para>
            <para>See also result().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDialog.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDialog.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QDialog.DialogCode">
            <summary>
            <para>The value returned by a modal dialog.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QColorDialog">
            <summary>
            <para>The QColorDialog class provides a dialog widget for specifying
            colors.</para>
            </summary>
            <remarks>
            <para>The color dialog's function is to allow users to choose colors.
            For example, you might use this in a drawing program to allow the user to
            set the brush color.</para>
            <para>The static functions provide modal color dialogs.</para>
            <para>The static getColor() function shows the dialog, and allows the
            user to specify a color. This function can also be used to let users choose
            a color with a level of transparency: pass the ShowAlphaChannel option as
            an additional argument.</para>
            <para>The user can store customCount() different custom colors. The
            custom colors are shared by all color dialogs, and remembered during the
            execution of the program. Use setCustomColor() to set the custom colors,
            and use customColor() to get them.</para>
            <para>When pressing the &quot;Pick Screen Color&quot; button, the
            cursor changes to a haircross and the colors on the screen are scanned. The
            user can pick up one by clicking the mouse or the Enter button. Pressing
            Escape restores the last color selected before entering this mode.</para>
            <para>The Standard Dialogs example shows how to use QColorDialog as
            well as other built-in Qt dialogs.</para>
            <para></para>
            <para></para>
            <para>See also QColor, QFileDialog, QFontDialog, and Standard Dialogs
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QColorDialog.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a color dialog with the given parent.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColorDialog.#ctor(QtGui.QColor,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a color dialog with the given parent and specified
            initial color.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColorDialog.SetOption(QtWidgets.QColorDialog.ColorDialogOption,System.Boolean)">
            <summary>
            <para>Sets the given option to be enabled if on is true; otherwise,
            clears the given option.</para>
            <para>See also options and testOption().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColorDialog.TestOption(QtWidgets.QColorDialog.ColorDialogOption)">
            <summary>
            <para>Returns true if the given option is enabled; otherwise, returns
            false.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also options and setOption().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColorDialog.Open(QtCore.QObject,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Opens the dialog and connects its colorSelected() signal to the
            slot specified by receiver and member.</para>
            <para>The signal will be disconnected from the slot when the dialog is
            closed.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColorDialog.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColorDialog.Done(System.Int32)">
            <summary>
            <para>Reimplemented from QDialog::done().</para>
            <para>Closes the dialog and sets its result code to result. If this
            dialog is shown with exec(), done() causes the local event loop to finish,
            and exec() to return result.</para>
            <para>See also QDialog::done().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColorDialog.GetColor(QtGui.QColor,QtWidgets.QWidget,System.String,QtWidgets.QColorDialog.ColorDialogOption)">
            <summary>
            <para>Pops up a modal color dialog with the given window title (or
            &quot;Select Color&quot; if none is specified), lets the user choose a
            color, and returns that color. The color is initially set to initial. The
            dialog is a child of parent. It returns an invalid (see QColor::isValid())
            color if the user cancels the dialog.</para>
            <para>The options argument allows you to customize the dialog.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColorDialog.GetRgba(System.UInt32,System.Boolean@,QtWidgets.QWidget)">
            <summary>
            <para>Pops up a modal color dialog to allow the user to choose a color
            and an alpha channel (transparency) value. The color+alpha is initially set
            to initial. The dialog is a child of parent.</para>
            <para>If ok is non-null, *a ok is set to true if the user clicked OK,
            and to false if the user clicked Cancel.</para>
            <para>If the user clicks Cancel, the initial value is returned.</para>
            <para>Use QColorDialog::getColor() instead, passing the
            QColorDialog::ShowAlphaChannel option.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColorDialog.CustomColor(System.Int32)">
            <summary>
            <para>Returns the custom color at the given index as a QColor
            value.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setCustomColor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColorDialog.SetCustomColor(System.Int32,QtGui.QColor)">
            <summary>
            <para>Sets the custom color at index to the QColor color value.</para>
            <para>Note: This function does not apply to the Native Color Dialog on
            the Mac OS X platform. If you still require this function, use the
            QColorDialog::DontUseNativeDialog option.</para>
            <para>See also customColor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColorDialog.StandardColor(System.Int32)">
            <summary>
            <para>Returns the standard color at the given index as a QColor
            value.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also setStandardColor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColorDialog.SetStandardColor(System.Int32,QtGui.QColor)">
            <summary>
            <para>Sets the standard color at index to the QColor color
            value.</para>
            <para>Note: This function does not apply to the Native Color Dialog on
            the Mac OS X platform. If you still require this function, use the
            QColorDialog::DontUseNativeDialog option.</para>
            <para>See also standardColor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColorDialog.GetColor">
            <summary>
            <para>Pops up a modal color dialog with the given window title (or
            &quot;Select Color&quot; if none is specified), lets the user choose a
            color, and returns that color. The color is initially set to initial. The
            dialog is a child of parent. It returns an invalid (see QColor::isValid())
            color if the user cancels the dialog.</para>
            <para>The options argument allows you to customize the dialog.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColorDialog.GetRgba(System.UInt32)">
            <summary>
            <para>Pops up a modal color dialog to allow the user to choose a color
            and an alpha channel (transparency) value. The color+alpha is initially set
            to initial. The dialog is a child of parent.</para>
            <para>If ok is non-null, *a ok is set to true if the user clicked OK,
            and to false if the user clicked Cancel.</para>
            <para>If the user clicks Cancel, the initial value is returned.</para>
            <para>Use QColorDialog::getColor() instead, passing the
            QColorDialog::ShowAlphaChannel option.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QColorDialog.CurrentColorChanged">
            <summary>
            <para>This property holds the currently selected color in the dialog.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	currentColor() const</para>
            <para> void 	setCurrentColor(const QColor &amp; color)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	currentColorChanged(const QColor &amp; color)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QColorDialog.ColorSelected">
            <summary>
            <para>This signal is emitted just after the user has clicked OK to select a color to use. The chosen color is specified by color.</para>
            <para>See also color and currentColorChanged().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QColorDialog.CurrentColor">
            <summary>
            <para>This property holds the currently selected color in the
            dialog.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QColorDialog.Options">
            <summary>
            <para>This property holds the various options that affect the look and
            feel of the dialog.</para>
            <para>By default, all options are disabled.</para>
            <para>Options should be set before showing the dialog. Setting them
            while the dialog is visible is not guaranteed to have an immediate effect
            on the dialog (depending on the option and on the platform).</para>
            <para>See also setOption() and testOption().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QColorDialog.Visible">
            <summary>
            <para>This property holds whether the widget is visible.</para>
            <para>Calling setVisible(true) or show() sets the widget to visible
            status if all its parent widgets up to the window are visible. If an
            ancestor is not visible, the widget won't become visible until all its
            ancestors are shown. If its size or position has changed, Qt guarantees
            that a widget gets move and resize events just before it is shown. If the
            widget has not been resized yet, Qt will adjust the widget's size to a
            useful default using adjustSize().</para>
            <para>Calling setVisible(false) or hide() hides a widget explicitly. An
            explicitly hidden widget will never become visible, even if all its
            ancestors become visible, unless you show it.</para>
            <para>A widget receives show and hide events when its visibility status
            changes. Between a hide and a show event, there is no need to waste CPU
            cycles preparing or displaying information to the user. A video
            application, for example, might simply stop generating new frames.</para>
            <para>A widget that happens to be obscured by other windows on the
            screen is considered to be visible. The same applies to iconified windows
            and windows that exist on another virtual desktop (on platforms that
            support this concept). A widget receives spontaneous show and hide events
            when its mapping status is changed by the window system, e.g. a spontaneous
            hide event when the user minimizes the window, and a spontaneous show event
            when the window is restored again.</para>
            <para>You almost never have to reimplement the setVisible() function.
            If you need to change some settings before a widget is shown, use
            showEvent() instead. If you need to do some delayed initialization use the
            Polish event delivered to the event() function.</para>
            <para>See also show(), hide(), isHidden(), isVisibleTo(),
            isMinimized(), showEvent(), and hideEvent().</para>
            <para></para>
            <para>Reimplemented from QWidget::setVisible().</para>
            <para>Changes the visibility of the dialog. If visible is true, the
            dialog is shown; otherwise, it is hidden.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QColorDialog.SelectedColor">
            <summary>
            <para>Returns the color that the user selected by clicking the OK or
            equivalent button.</para>
            <para>Note: This color is not always the same as the color held by the
            currentColor property since the user can choose different colors before
            finally selecting the one to use.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QColorDialog.CustomCount">
            <summary>
            <para>Returns the number of custom colors supported by QColorDialog.
            All color dialogs share the same custom colors.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QColorDialog.ColorDialogOption">
            <summary>
            <para>This enum specifies various options that affect the look and feel
            of a color dialog.</para>
            <para>This enum was introduced or modified in  Qt 4.5.</para>
            <para>The ColorDialogOptions type is a typedef for
            QFlags&lt;ColorDialogOption&gt;. It stores an OR combination of
            ColorDialogOption values.</para>
            <para>See also options, setOption(), testOption(), and
            windowModality().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QColorDialog.ColorDialogOption.ShowAlphaChannel">
            <summary>Allow the user to select the alpha component of a color.</summary>
        </member>
        <member name="F:QtWidgets.QColorDialog.ColorDialogOption.NoButtons">
            <summary>Don't display OK and Cancel buttons. (Useful for "live dialogs".)</summary>
        </member>
        <member name="F:QtWidgets.QColorDialog.ColorDialogOption.DontUseNativeDialog">
            <summary>Use Qt's standard color dialog instead of the operating system native color dialog.</summary>
        </member>
        <member name="T:QtWidgets.QErrorMessage">
            <summary>
            <para>The QErrorMessage class provides an error message display
            dialog.</para>
            </summary>
            <remarks>
            <para>An error message widget consists of a text label and a checkbox.
            The checkbox lets the user control whether the same error message will be
            displayed again in the future, typically displaying the text, &quot;Show
            this message again&quot; translated into the appropriate local
            language.</para>
            <para>For production applications, the class can be used to display
            messages which the user only needs to see once. To use QErrorMessage like
            this, you create the dialog in the usual way, and show it by calling the
            showMessage() slot or connecting signals to it.</para>
            <para>The static qtHandler() function installs a message handler using
            qInstallMessageHandler() and creates a QErrorMessage that displays
            qDebug(), qWarning() and qFatal() messages. This is most useful in
            environments where no console is available to display warnings and error
            messages.</para>
            <para>In both cases QErrorMessage will queue pending messages and
            display them in order, with each new message being shown as soon as the
            user has accepted the previous message. Once the user has specified that a
            message is not to be shown again it is automatically skipped, and the
            dialog will show the next appropriate message in the queue.</para>
            <para>The Standard Dialogs example shows how to use QErrorMessage as
            well as other built-in Qt dialogs.</para>
            <para></para>
            <para></para>
            <para>See also QMessageBox, QStatusBar::showMessage(), and Standard
            Dialogs Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QErrorMessage.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs and installs an error handler window with the given
            parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QErrorMessage.ShowMessage(System.String)">
            <summary>
            <para>Shows the given message, message, and returns immediately. If the
            user has requested for the message not to be shown again, this function
            does nothing.</para>
            <para>Normally, the message is displayed immediately. However, if there
            are pending messages, it will be queued to be displayed later.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QErrorMessage.ShowMessage(System.String,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Shows the given message, message, and returns immediately. If the
            user has requested for messages of type, type, not to be shown again, this
            function does nothing.</para>
            <para>Normally, the message is displayed immediately. However, if there
            are pending messages, it will be queued to be displayed later.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also showMessage().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QErrorMessage.Done(System.Int32)">
            <summary>
            <para>Reimplemented from QDialog::done().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QErrorMessage.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QErrorMessage.QtHandler">
            <summary>
            <para>Returns a pointer to a QErrorMessage object that outputs the
            default Qt messages. This function creates such an object, if there isn't
            one already.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QFileDialog">
            <summary>
            <para>The QFileDialog class provides a dialog that allow users to
            select files or directories.</para>
            </summary>
            <remarks>
            <para>The QFileDialog class enables a user to traverse the file system
            in order to select one or many files or a directory.</para>
            <para>The easiest way to create a QFileDialog is to use the static
            functions.</para>
            <para>fileName = QFileDialog::getOpenFileName(this,</para>
            <para>    tr(&quot;Open Image&quot;), &quot;/home/jana&quot;,
            tr(&quot;Image Files (*.png *.jpg *.bmp)&quot;));</para>
            <para>In the above example, a modal QFileDialog is created using a
            static function. The dialog initially displays the contents of the
            &quot;/home/jana&quot; directory, and displays files matching the patterns
            given in the string &quot;Image Files (*.png *.jpg *.bmp)&quot;. The parent
            of the file dialog is set to this, and the window title is set to
            &quot;Open Image&quot;.</para>
            <para>If you want to use multiple filters, separate each one with two
            semicolons. For example:</para>
            <para>&quot;Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files
            (*.xml)&quot;</para>
            <para>You can create your own QFileDialog without using the static
            functions. By calling setFileMode(), you can specify what the user must
            select in the dialog:</para>
            <para>QFileDialog dialog(this);</para>
            <para>dialog.setFileMode(QFileDialog::AnyFile);</para>
            <para>In the above example, the mode of the file dialog is set to
            AnyFile, meaning that the user can select any file, or even specify a file
            that doesn't exist. This mode is useful for creating a &quot;Save As&quot;
            file dialog. Use ExistingFile if the user must select an existing file, or
            Directory if only a directory may be selected. See the
            QFileDialog::FileMode enum for the complete list of modes.</para>
            <para>The fileMode property contains the mode of operation for the
            dialog; this indicates what types of objects the user is expected to
            select. Use setNameFilter() to set the dialog's file filter. For
            example:</para>
            <para>dialog.setNameFilter(tr(&quot;Images (*.png *.xpm
            *.jpg)&quot;));</para>
            <para>In the above example, the filter is set to &quot;Images (*.png
            *.xpm *.jpg)&quot;, this means that only files with the extension png, xpm,
            or jpg will be shown in the QFileDialog. You can apply several filters by
            using setNameFilters(). Use selectNameFilter() to select one of the filters
            you've given as the file dialog's default filter.</para>
            <para>The file dialog has two view modes: List and Detail. List
            presents the contents of the current directory as a list of file and
            directory names. Detail also displays a list of file and directory names,
            but provides additional information alongside each name, such as the file
            size and modification date. Set the mode with setViewMode():</para>
            <para>dialog.setViewMode(QFileDialog::Detail);</para>
            <para>The last important function you will need to use when creating
            your own file dialog is selectedFiles().</para>
            <para>QStringList fileNames;</para>
            <para>if (dialog.exec())</para>
            <para>    fileNames = dialog.selectedFiles();</para>
            <para>In the above example, a modal file dialog is created and shown.
            If the user clicked OK, the file they selected is put in fileName.</para>
            <para>The dialog's working directory can be set with setDirectory().
            Each file in the current directory can be selected using the selectFile()
            function.</para>
            <para>The Standard Dialogs example shows how to use QFileDialog as well
            as other built-in Qt dialogs.</para>
            <para>By default, a platform-native file dialog will be used if the
            platform has one. In that case, the widgets which would otherwise be used
            to construct the dialog will not be instantiated, so related accessors such
            as layout() and itemDelegate() will return null. You can set the
            DontUseNativeDialog option to ensure that the widget-based implementation
            will be used instead of the native dialog.</para>
            <para></para>
            <para>See also QDir, QFileInfo, QFile, QColorDialog, QFontDialog,
            Standard Dialogs Example, and Application Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QFileDialog.#ctor(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a file dialog with the given parent and widget
            flags.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.#ctor(QtWidgets.QWidget,System.String,System.String,System.String)">
            <summary>
            <para>Constructs a file dialog with the given parent and caption that
            initially displays the contents of the specified directory. The contents of
            the directory are filtered before being shown in the dialog, using a
            semicolon-separated list of filters specified by filter.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.SetDirectory(System.String)">
            <summary>
            <para>Sets the file dialog's current directory.</para>
            <para>Note: On iOS, if you set directory to
            QStandardPaths::standardLocations(QStandardPaths::PicturesLocation).last(),
            a native image picker dialog will be used for accessing the user's photo
            album. The filename returned can be loaded using QFile and related APIs.
            This feature was added in Qt 5.5.</para>
            <para>See also directory().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.SelectFile(System.String)">
            <summary>
            <para>Selects the given filename in the file dialog.</para>
            <para>See also selectedFiles().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.SelectUrl(QtCore.QUrl)">
            <summary>
            <para>Selects the given url in the file dialog.</para>
            <para>Note: The non-native QFileDialog supports only local
            files.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also selectedUrls().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.SetNameFilter(System.String)">
            <summary>
            <para>Sets the filter used in the file dialog to the given
            filter.</para>
            <para>If filter contains a pair of parentheses containing one or more
            filename-wildcard patterns, separated by spaces, then only the text
            contained in the parentheses is used as the filter. This means that these
            calls are all equivalent:</para>
            <para>dialog.setNameFilter(&quot;All C++ files (*.cpp *.cc *.C *.cxx
            *.c++)&quot;);</para>
            <para>dialog.setNameFilter(&quot;*.cpp *.cc *.C *.cxx
            *.c++&quot;);</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setMimeTypeFilters() and setNameFilters().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.SelectNameFilter(System.String)">
            <summary>
            <para>Sets the current file type filter. Multiple filters can be passed
            in filter by separating them with semicolons or spaces.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setNameFilter(), setNameFilters(), and
            selectedNameFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.SelectMimeTypeFilter(System.String)">
            <summary>
            <para>Sets the current MIME type filter.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.SaveState">
            <summary>
            <para>Saves the state of the dialog's layout, history and current
            directory.</para>
            <para>Typically this is used in conjunction with QSettings to remember
            the size for a future session. A version number is stored as part of the
            data.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.RestoreState(QtCore.QByteArray)">
            <summary>
            <para>Restores the dialogs's layout, history and current directory to
            the state specified.</para>
            <para>Typically this is used in conjunction with QSettings to restore
            the size from a past session.</para>
            <para>Returns false if there are errors</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.SetLabelText(QtWidgets.QFileDialog.DialogLabel,System.String)">
            <summary>
            <para>Sets the text shown in the filedialog in the specified
            label.</para>
            <para>See also labelText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.LabelText(QtWidgets.QFileDialog.DialogLabel)">
            <summary>
            <para>Returns the text shown in the filedialog in the specified
            label.</para>
            <para>See also setLabelText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.SetOption(QtWidgets.QFileDialog.Option,System.Boolean)">
            <summary>
            <para>Sets the given option to be enabled if on is true; otherwise,
            clears the given option.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also options and testOption().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.TestOption(QtWidgets.QFileDialog.Option)">
            <summary>
            <para>Returns true if the given option is enabled; otherwise, returns
            false.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also options and setOption().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.Open(QtCore.QObject,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function connects one of its signals to the slot specified
            by receiver and member. The specific signal depends is filesSelected() if
            fileMode is ExistingFiles and fileSelected() if fileMode is anything
            else.</para>
            <para>The signal will be disconnected from the slot when the dialog is
            closed.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.Done(System.Int32)">
            <summary>
            <para>Reimplemented from QDialog::done().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.Accept">
            <summary>
            <para>Reimplemented from QDialog::accept().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.GetOpenFileName(QtWidgets.QWidget,System.String,System.String,System.String,System.String,QtWidgets.QFileDialog.Option)">
            <summary>
            <para>This is a convenience static function that returns an existing
            file selected by the user. If the user presses Cancel, it returns a null
            string.</para>
            <para>QString fileName = QFileDialog::getOpenFileName(this,
            tr(&quot;Open File&quot;),</para>
            <para>
            &quot;/home&quot;,</para>
            <para>                                                tr(&quot;Images
            (*.png *.xpm *.jpg)&quot;));</para>
            <para>The function creates a modal file dialog with the given parent
            widget. If parent is not 0, the dialog will be shown centered over the
            parent widget.</para>
            <para>The file dialog's working directory will be set to dir. If dir
            includes a file name, the file will be selected. Only files that match the
            given filter are shown. The filter selected is set to selectedFilter. The
            parameters dir, selectedFilter, and filter may be empty strings. If you
            want multiple filters, separate them with ';;', for example:</para>
            <para>&quot;Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files
            (*.xml)&quot;</para>
            <para>The options argument holds various options about how to run the
            dialog, see the QFileDialog::Option enum for more information on the flags
            you can pass.</para>
            <para>The dialog's caption is set to caption. If caption is not
            specified then a default caption will be used.</para>
            <para>On Windows, and Mac OS X, this static function will use the
            native file dialog and not a QFileDialog.</para>
            <para>On Windows the dialog will spin a blocking modal event loop that
            will not dispatch any QTimers, and if parent is not 0 then it will position
            the dialog just below the parent's title bar.</para>
            <para>On Unix/X11, the normal behavior of the file dialog is to resolve
            and follow symlinks. For example, if /usr/tmp is a symlink to /var/tmp, the
            file dialog will change to /var/tmp after entering /usr/tmp. If options
            includes DontResolveSymlinks, the file dialog will treat symlinks as
            regular directories.</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QFileDialog constructors.</para>
            <para>See also getOpenFileNames(), getSaveFileName(), and
            getExistingDirectory().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.GetOpenFileUrl(QtWidgets.QWidget,System.String,QtCore.QUrl,System.String,System.String,QtWidgets.QFileDialog.Option,QtCore.QStringList)">
            <summary>
            <para>This is a convenience static function that returns an existing
            file selected by the user. If the user presses Cancel, it returns an empty
            url.</para>
            <para>The function is used similarly to QFileDialog::getOpenFileName().
            In particular parent, caption, dir, filter, selectedFilter and options are
            used in the exact same way.</para>
            <para>The main difference with QFileDialog::getOpenFileName() comes
            from the ability offered to the user to select a remote file. That's why
            the return type and the type of dir is QUrl.</para>
            <para>The supportedSchemes argument allows to restrict the type of URLs
            the user will be able to select. It is a way for the application to declare
            the protocols it will support to fetch the file content. An empty list
            means that no restriction is applied (the default). Supported for local
            files (&quot;file&quot; scheme) is implicit and always enabled. it is not
            necessary to include in the restriction.</para>
            <para>When possible, this static function will use the native file
            dialog and not a QFileDialog. On platforms which don't support selecting
            remote files, Qt will allow to select only local files.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also getOpenFileName(), getOpenFileUrls(), getSaveFileUrl(),
            and getExistingDirectoryUrl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.GetSaveFileName(QtWidgets.QWidget,System.String,System.String,System.String,System.String,QtWidgets.QFileDialog.Option)">
            <summary>
            <para>This is a convenience static function that will return a file
            name selected by the user. The file does not have to exist.</para>
            <para>It creates a modal file dialog with the given parent widget. If
            parent is not 0, the dialog will be shown centered over the parent
            widget.</para>
            <para>QString fileName = QFileDialog::getSaveFileName(this,
            tr(&quot;Save File&quot;),</para>
            <para>
            &quot;/home/jana/untitled.png&quot;,</para>
            <para>                           tr(&quot;Images (*.png *.xpm
            *.jpg)&quot;));</para>
            <para>The file dialog's working directory will be set to dir. If dir
            includes a file name, the file will be selected. Only files that match the
            filter are shown. The filter selected is set to selectedFilter. The
            parameters dir, selectedFilter, and filter may be empty strings. Multiple
            filters are separated with ';;'. For instance:</para>
            <para>&quot;Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files
            (*.xml)&quot;</para>
            <para>The options argument holds various options about how to run the
            dialog, see the QFileDialog::Option enum for more information on the flags
            you can pass.</para>
            <para>The default filter can be chosen by setting selectedFilter to the
            desired value.</para>
            <para>The dialog's caption is set to caption. If caption is not
            specified, a default caption will be used.</para>
            <para>On Windows, and Mac OS X, this static function will use the
            native file dialog and not a QFileDialog.</para>
            <para>On Windows the dialog will spin a blocking modal event loop that
            will not dispatch any QTimers, and if parent is not 0 then it will position
            the dialog just below the parent's title bar. On Mac OS X, with its native
            file dialog, the filter argument is ignored.</para>
            <para>On Unix/X11, the normal behavior of the file dialog is to resolve
            and follow symlinks. For example, if /usr/tmp is a symlink to /var/tmp, the
            file dialog will change to /var/tmp after entering /usr/tmp. If options
            includes DontResolveSymlinks the file dialog will treat symlinks as regular
            directories.</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QFileDialog constructors.</para>
            <para>See also getOpenFileName(), getOpenFileNames(), and
            getExistingDirectory().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.GetSaveFileUrl(QtWidgets.QWidget,System.String,QtCore.QUrl,System.String,System.String,QtWidgets.QFileDialog.Option,QtCore.QStringList)">
            <summary>
            <para>This is a convenience static function that returns a file
            selected by the user. The file does not have to exist. If the user presses
            Cancel, it returns an empty url.</para>
            <para>The function is used similarly to QFileDialog::getSaveFileName().
            In particular parent, caption, dir, filter, selectedFilter and options are
            used in the exact same way.</para>
            <para>The main difference with QFileDialog::getSaveFileName() comes
            from the ability offered to the user to select a remote file. That's why
            the return type and the type of dir is QUrl.</para>
            <para>The supportedSchemes argument allows to restrict the type of URLs
            the user will be able to select. It is a way for the application to declare
            the protocols it will support to save the file content. An empty list means
            that no restriction is applied (the default). Supported for local files
            (&quot;file&quot; scheme) is implicit and always enabled. it is not
            necessary to include in the restriction.</para>
            <para>When possible, this static function will use the native file
            dialog and not a QFileDialog. On platforms which don't support selecting
            remote files, Qt will allow to select only local files.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also getSaveFileName(), getOpenFileUrl(), getOpenFileUrls(),
            and getExistingDirectoryUrl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.GetExistingDirectory(QtWidgets.QWidget,System.String,System.String,QtWidgets.QFileDialog.Option)">
            <summary>
            <para>This is a convenience static function that will return an
            existing directory selected by the user.</para>
            <para>QString dir = QFileDialog::getExistingDirectory(this,
            tr(&quot;Open Directory&quot;),</para>
            <para>
            &quot;/home&quot;,</para>
            <para>
            QFileDialog::ShowDirsOnly</para>
            <para>                                                |
            QFileDialog::DontResolveSymlinks);</para>
            <para>This function creates a modal file dialog with the given parent
            widget. If parent is not 0, the dialog will be shown centered over the
            parent widget.</para>
            <para>The dialog's working directory is set to dir, and the caption is
            set to caption. Either of these may be an empty string in which case the
            current directory and a default caption will be used respectively.</para>
            <para>The options argument holds various options about how to run the
            dialog, see the QFileDialog::Option enum for more information on the flags
            you can pass. To ensure a native file dialog, ShowDirsOnly must be
            set.</para>
            <para>On Windows, and Mac OS X, this static function will use the
            native file dialog and not a QFileDialog. On Windows CE, if the device has
            no native file dialog, a QFileDialog will be used.</para>
            <para>On Unix/X11, the normal behavior of the file dialog is to resolve
            and follow symlinks. For example, if /usr/tmp is a symlink to /var/tmp, the
            file dialog will change to /var/tmp after entering /usr/tmp. If options
            includes DontResolveSymlinks, the file dialog will treat symlinks as
            regular directories.</para>
            <para>On Windows the dialog will spin a blocking modal event loop that
            will not dispatch any QTimers, and if parent is not 0 then it will position
            the dialog just below the parent's title bar.</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QFileDialog constructors.</para>
            <para>See also getOpenFileName(), getOpenFileNames(), and
            getSaveFileName().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.GetExistingDirectoryUrl(QtWidgets.QWidget,System.String,QtCore.QUrl,QtWidgets.QFileDialog.Option,QtCore.QStringList)">
            <summary>
            <para>This is a convenience static function that will return an
            existing directory selected by the user. If the user presses Cancel, it
            returns an empty url.</para>
            <para>The function is used similarly to
            QFileDialog::getExistingDirectory(). In particular parent, caption, dir and
            options are used in the exact same way.</para>
            <para>The main difference with QFileDialog::getExistingDirectory()
            comes from the ability offered to the user to select a remote directory.
            That's why the return type and the type of dir is QUrl.</para>
            <para>The supportedSchemes argument allows to restrict the type of URLs
            the user will be able to select. It is a way for the application to declare
            the protocols it will support to fetch the file content. An empty list
            means that no restriction is applied (the default). Supported for local
            files (&quot;file&quot; scheme) is implicit and always enabled. it is not
            necessary to include in the restriction.</para>
            <para>When possible, this static function will use the native file
            dialog and not a QFileDialog. On platforms which don't support selecting
            remote files, Qt will allow to select only local files.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also getExistingDirectory(), getOpenFileUrl(),
            getOpenFileUrls(), and getSaveFileUrl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.GetOpenFileNames(QtWidgets.QWidget,System.String,System.String,System.String,System.String,QtWidgets.QFileDialog.Option)">
            <summary>
            <para>This is a convenience static function that will return one or
            more existing files selected by the user.</para>
            <para>QStringList files = QFileDialog::getOpenFileNames(</para>
            <para>                        this,</para>
            <para>                        &quot;Select one or more files to
            open&quot;,</para>
            <para>                        &quot;/home&quot;,</para>
            <para>                        &quot;Images (*.png *.xpm
            *.jpg)&quot;);</para>
            <para>This function creates a modal file dialog with the given parent
            widget. If parent is not 0, the dialog will be shown centered over the
            parent widget.</para>
            <para>The file dialog's working directory will be set to dir. If dir
            includes a file name, the file will be selected. The filter is set to
            filter so that only those files which match the filter are shown. The
            filter selected is set to selectedFilter. The parameters dir,
            selectedFilter and filter may be empty strings. If you need multiple
            filters, separate them with ';;', for instance:</para>
            <para>&quot;Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files
            (*.xml)&quot;</para>
            <para>The dialog's caption is set to caption. If caption is not
            specified then a default caption will be used.</para>
            <para>On Windows, and Mac OS X, this static function will use the
            native file dialog and not a QFileDialog.</para>
            <para>On Windows the dialog will spin a blocking modal event loop that
            will not dispatch any QTimers, and if parent is not 0 then it will position
            the dialog just below the parent's title bar.</para>
            <para>On Unix/X11, the normal behavior of the file dialog is to resolve
            and follow symlinks. For example, if /usr/tmp is a symlink to /var/tmp, the
            file dialog will change to /var/tmp after entering /usr/tmp. The options
            argument holds various options about how to run the dialog, see the
            QFileDialog::Option enum for more information on the flags you can
            pass.</para>
            <para>Note: If you want to iterate over the list of files, you should
            iterate over a copy. For example:</para>
            <para>QStringList list = files;</para>
            <para>QStringList::Iterator it = list.begin();</para>
            <para>while(it != list.end()) {</para>
            <para>    myProcessing(*it);</para>
            <para>    ++it;</para>
            <para>}</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QFileDialog constructors.</para>
            <para>See also getOpenFileName(), getSaveFileName(), and
            getExistingDirectory().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.GetOpenFileUrl(QtWidgets.QWidget,System.String)">
            <summary>
            <para>This is a convenience static function that returns an existing
            file selected by the user. If the user presses Cancel, it returns an empty
            url.</para>
            <para>The function is used similarly to QFileDialog::getOpenFileName().
            In particular parent, caption, dir, filter, selectedFilter and options are
            used in the exact same way.</para>
            <para>The main difference with QFileDialog::getOpenFileName() comes
            from the ability offered to the user to select a remote file. That's why
            the return type and the type of dir is QUrl.</para>
            <para>The supportedSchemes argument allows to restrict the type of URLs
            the user will be able to select. It is a way for the application to declare
            the protocols it will support to fetch the file content. An empty list
            means that no restriction is applied (the default). Supported for local
            files (&quot;file&quot; scheme) is implicit and always enabled. it is not
            necessary to include in the restriction.</para>
            <para>When possible, this static function will use the native file
            dialog and not a QFileDialog. On platforms which don't support selecting
            remote files, Qt will allow to select only local files.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also getOpenFileName(), getOpenFileUrls(), getSaveFileUrl(),
            and getExistingDirectoryUrl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.GetOpenFileUrl(QtWidgets.QWidget,System.String,QtCore.QUrl,System.String,System.String,QtWidgets.QFileDialog.Option)">
            <summary>
            <para>This is a convenience static function that returns an existing
            file selected by the user. If the user presses Cancel, it returns an empty
            url.</para>
            <para>The function is used similarly to QFileDialog::getOpenFileName().
            In particular parent, caption, dir, filter, selectedFilter and options are
            used in the exact same way.</para>
            <para>The main difference with QFileDialog::getOpenFileName() comes
            from the ability offered to the user to select a remote file. That's why
            the return type and the type of dir is QUrl.</para>
            <para>The supportedSchemes argument allows to restrict the type of URLs
            the user will be able to select. It is a way for the application to declare
            the protocols it will support to fetch the file content. An empty list
            means that no restriction is applied (the default). Supported for local
            files (&quot;file&quot; scheme) is implicit and always enabled. it is not
            necessary to include in the restriction.</para>
            <para>When possible, this static function will use the native file
            dialog and not a QFileDialog. On platforms which don't support selecting
            remote files, Qt will allow to select only local files.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also getOpenFileName(), getOpenFileUrls(), getSaveFileUrl(),
            and getExistingDirectoryUrl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.GetSaveFileUrl(QtWidgets.QWidget,System.String)">
            <summary>
            <para>This is a convenience static function that returns a file
            selected by the user. The file does not have to exist. If the user presses
            Cancel, it returns an empty url.</para>
            <para>The function is used similarly to QFileDialog::getSaveFileName().
            In particular parent, caption, dir, filter, selectedFilter and options are
            used in the exact same way.</para>
            <para>The main difference with QFileDialog::getSaveFileName() comes
            from the ability offered to the user to select a remote file. That's why
            the return type and the type of dir is QUrl.</para>
            <para>The supportedSchemes argument allows to restrict the type of URLs
            the user will be able to select. It is a way for the application to declare
            the protocols it will support to save the file content. An empty list means
            that no restriction is applied (the default). Supported for local files
            (&quot;file&quot; scheme) is implicit and always enabled. it is not
            necessary to include in the restriction.</para>
            <para>When possible, this static function will use the native file
            dialog and not a QFileDialog. On platforms which don't support selecting
            remote files, Qt will allow to select only local files.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also getSaveFileName(), getOpenFileUrl(), getOpenFileUrls(),
            and getExistingDirectoryUrl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.GetSaveFileUrl(QtWidgets.QWidget,System.String,QtCore.QUrl,System.String,System.String,QtWidgets.QFileDialog.Option)">
            <summary>
            <para>This is a convenience static function that returns a file
            selected by the user. The file does not have to exist. If the user presses
            Cancel, it returns an empty url.</para>
            <para>The function is used similarly to QFileDialog::getSaveFileName().
            In particular parent, caption, dir, filter, selectedFilter and options are
            used in the exact same way.</para>
            <para>The main difference with QFileDialog::getSaveFileName() comes
            from the ability offered to the user to select a remote file. That's why
            the return type and the type of dir is QUrl.</para>
            <para>The supportedSchemes argument allows to restrict the type of URLs
            the user will be able to select. It is a way for the application to declare
            the protocols it will support to save the file content. An empty list means
            that no restriction is applied (the default). Supported for local files
            (&quot;file&quot; scheme) is implicit and always enabled. it is not
            necessary to include in the restriction.</para>
            <para>When possible, this static function will use the native file
            dialog and not a QFileDialog. On platforms which don't support selecting
            remote files, Qt will allow to select only local files.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also getSaveFileName(), getOpenFileUrl(), getOpenFileUrls(),
            and getExistingDirectoryUrl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.GetExistingDirectoryUrl(QtWidgets.QWidget,System.String)">
            <summary>
            <para>This is a convenience static function that will return an
            existing directory selected by the user. If the user presses Cancel, it
            returns an empty url.</para>
            <para>The function is used similarly to
            QFileDialog::getExistingDirectory(). In particular parent, caption, dir and
            options are used in the exact same way.</para>
            <para>The main difference with QFileDialog::getExistingDirectory()
            comes from the ability offered to the user to select a remote directory.
            That's why the return type and the type of dir is QUrl.</para>
            <para>The supportedSchemes argument allows to restrict the type of URLs
            the user will be able to select. It is a way for the application to declare
            the protocols it will support to fetch the file content. An empty list
            means that no restriction is applied (the default). Supported for local
            files (&quot;file&quot; scheme) is implicit and always enabled. it is not
            necessary to include in the restriction.</para>
            <para>When possible, this static function will use the native file
            dialog and not a QFileDialog. On platforms which don't support selecting
            remote files, Qt will allow to select only local files.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also getExistingDirectory(), getOpenFileUrl(),
            getOpenFileUrls(), and getSaveFileUrl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileDialog.GetExistingDirectoryUrl(QtWidgets.QWidget,System.String,QtCore.QUrl,QtWidgets.QFileDialog.Option)">
            <summary>
            <para>This is a convenience static function that will return an
            existing directory selected by the user. If the user presses Cancel, it
            returns an empty url.</para>
            <para>The function is used similarly to
            QFileDialog::getExistingDirectory(). In particular parent, caption, dir and
            options are used in the exact same way.</para>
            <para>The main difference with QFileDialog::getExistingDirectory()
            comes from the ability offered to the user to select a remote directory.
            That's why the return type and the type of dir is QUrl.</para>
            <para>The supportedSchemes argument allows to restrict the type of URLs
            the user will be able to select. It is a way for the application to declare
            the protocols it will support to fetch the file content. An empty list
            means that no restriction is applied (the default). Supported for local
            files (&quot;file&quot; scheme) is implicit and always enabled. it is not
            necessary to include in the restriction.</para>
            <para>When possible, this static function will use the native file
            dialog and not a QFileDialog. On platforms which don't support selecting
            remote files, Qt will allow to select only local files.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also getExistingDirectory(), getOpenFileUrl(),
            getOpenFileUrls(), and getSaveFileUrl().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QFileDialog.FileSelected">
            <summary>
            <para>When the selection changes for local operations and the dialog is accepted, this signal is emitted with the (possibly empty) selected file.</para>
            <para>See also currentChanged() and QDialog::Accepted.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QFileDialog.FilesSelected">
            <summary>
            <para>When the selection changes for local operations and the dialog is accepted, this signal is emitted with the (possibly empty) list of selected files.</para>
            <para>See also currentChanged() and QDialog::Accepted.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QFileDialog.CurrentChanged">
            <summary>
            <para>When the current file changes for local operations, this signal is emitted with the new file name as the path parameter.</para>
            <para>See also filesSelected().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QFileDialog.DirectoryEntered">
            <summary>
            <para>This signal is emitted for local operations when the user enters a directory.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QFileDialog.UrlSelected">
            <summary>
            <para>When the selection changes and the dialog is accepted, this signal is emitted with the (possibly empty) selected url.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also currentUrlChanged() and QDialog::Accepted.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QFileDialog.CurrentUrlChanged">
            <summary>
            <para>When the current file changes, this signal is emitted with the new file URL as the url parameter.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also urlsSelected().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QFileDialog.DirectoryUrlEntered">
            <summary>
            <para>This signal is emitted when the user enters a directory.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QFileDialog.FilterSelected">
            <summary>
            <para>This signal is emitted when the user selects a filter.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.Directory">
            <summary>
            <para>Returns the directory currently being displayed in the
            dialog.</para>
            <para>See also setDirectory().</para>
            <para></para>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.DirectoryUrl">
            <summary>
            <para>Returns the url of the directory currently being displayed in the
            dialog.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also setDirectoryUrl().</para>
            <para></para>
            <para>Sets the file dialog's current directory url.</para>
            <para>Note: The non-native QFileDialog supports only local
            files.</para>
            <para>Note: On Windows, it is possible to pass URLs representing one of
            the virtual folders, such as &quot;Computer&quot; or &quot;Network&quot;.
            This is done by passing a QUrl using the scheme clsid followed by the CLSID
            value with the curly braces removed. For example the URL
            clsid:374DE290-123F-4565-9164-39C4925E467B denotes the download location.
            For a complete list of possible values, see the MSDN documentation on
            KNOWNFOLDERID. This feature was added in Qt 5.5.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also directoryUrl() and QUuid.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.NameFilterDetailsVisible">
            <summary>
            <para>This property holds this property holds whether the filter
            details is shown or not.</para>
            <para>When this property is true (the default), the filter details are
            shown in the combo box. When the property is set to false, these are
            hidden.</para>
            <para>Use setOption(HideNameFilterDetails, !enabled) or
            !testOption(HideNameFilterDetails).</para>
            <para>This property was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.NameFilters">
            <summary>
            <para>Returns the file type filters that are in operation on this file
            dialog.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setNameFilters().</para>
            <para></para>
            <para>Sets the filters used in the file dialog.</para>
            <para>Note that the filter *.* is not portable, because the historical
            assumption that the file extension determines the file type is not
            consistent on every operating system. It is possible to have a file with no
            dot in its name (for example, Makefile). In a native Windows file dialog,
            *.* will match such files, while in other types of file dialogs it may not.
            So it is better to use * if you mean to select any file.</para>
            <para>QStringList filters;</para>
            <para>filters &lt;&lt; &quot;Image files (*.png *.xpm
            *.jpg)&quot;</para>
            <para>        &lt;&lt; &quot;Text files (*.txt)&quot;</para>
            <para>        &lt;&lt; &quot;Any files (*)&quot;;</para>
            <para></para>
            <para>QFileDialog dialog(this);</para>
            <para>dialog.setNameFilters(filters);</para>
            <para>dialog.exec();</para>
            <para>setMimeTypeFilters() has the advantage of providing all possible
            name filters for each file type. For example, JPEG images have three
            possible extensions; if your application can open such files, selecting the
            image/jpeg mime type as a filter will allow you to open all of them.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also nameFilters().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.MimeTypeFilters">
            <summary>
            <para>Returns the MIME type filters that are in operation on this file
            dialog.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also setMimeTypeFilters().</para>
            <para></para>
            <para>Sets the filters used in the file dialog, from a list of MIME
            types.</para>
            <para>Convenience method for setNameFilters(). Uses QMimeType to create
            a name filter from the glob patterns and description defined in each MIME
            type.</para>
            <para>Use application/octet-stream for the &quot;All files (*)&quot;
            filter, since that is the base MIME type for all files.</para>
            <para>Calling setMimeTypeFilters overrides any previously set name
            filters, and changes the return value of nameFilters().</para>
            <para>QStringList mimeTypeFilters;</para>
            <para>mimeTypeFilters &lt;&lt; &quot;image/jpeg&quot; // will show
            &quot;JPEG image (*.jpeg *.jpg *.jpe)</para>
            <para>            &lt;&lt; &quot;image/png&quot;  // will show
            &quot;PNG image (*.png)&quot;</para>
            <para>            &lt;&lt; &quot;application/octet-stream&quot;; //
            will show &quot;All files (*)&quot;</para>
            <para></para>
            <para>QFileDialog dialog(this);</para>
            <para>dialog.setMimeTypeFilters(mimeTypeFilters);</para>
            <para>dialog.exec();</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also mimeTypeFilters().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.Filter">
            <summary>
            <para>Returns the filter that is used when displaying files.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setFilter().</para>
            <para></para>
            <para>Sets the filter used by the model to filters. The filter is used
            to specify the kind of files that should be shown.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also filter().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.viewMode">
            <summary>
            <para>This property holds the way files and directories are displayed
            in the dialog.</para>
            <para>By default, the Detail mode is used to display information about
            files and directories.</para>
            <para>See also ViewMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.fileMode">
            <summary>
            <para>This property holds the file mode of the dialog.</para>
            <para>The file mode defines the number and type of items that the user
            is expected to select in the dialog.</para>
            <para>By default, this property is set to AnyFile.</para>
            <para>This function will set the labels for the FileName and Accept
            DialogLabels. It is possible to set custom text after the call to
            setFileMode().</para>
            <para>See also FileMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.acceptMode">
            <summary>
            <para>This property holds the accept mode of the dialog.</para>
            <para>The action mode defines whether the dialog is for opening or
            saving files.</para>
            <para>By default, this property is set to AcceptOpen.</para>
            <para>See also AcceptMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.ReadOnly">
            <summary>
            <para>This property holds whether the filedialog is read-only.</para>
            <para>If this property is set to false, the file dialog will allow
            renaming, and deleting of files and directories and creating
            directories.</para>
            <para>Use setOption(ReadOnly, enabled) or testOption(ReadOnly)
            instead.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.ResolveSymlinks">
            <summary>
            <para>This property holds whether the filedialog should resolve
            shortcuts.</para>
            <para>If this property is set to true, the file dialog will resolve
            shortcuts or symbolic links.</para>
            <para>Use setOption(DontResolveSymlinks, !enabled) or
            !testOption(DontResolveSymlinks).</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.ConfirmOverwrite">
            <summary>
            <para>This property holds whether the filedialog should ask before
            accepting a selected file, when the accept mode is AcceptSave.</para>
            <para>Use setOption(DontConfirmOverwrite, !enabled) or
            !testOption(DontConfirmOverwrite) instead.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.DefaultSuffix">
            <summary>
            <para>This property holds suffix added to the filename if no other
            suffix was specified.</para>
            <para>This property specifies a string that will be added to the
            filename if it has no suffix already. The suffix is typically used to
            indicate the file type (e.g. &quot;txt&quot; indicates a text file).</para>
            <para>If the first character is a dot ('.'), it is removed.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.History">
            <summary>
            <para>Returns the browsing history of the filedialog as a list of
            paths.</para>
            <para>See also setHistory().</para>
            <para></para>
            <para>Sets the browsing history of the filedialog to contain the given
            paths.</para>
            <para>See also history().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.ItemDelegate">
            <summary>
            <para>Returns the item delegate used to render the items in the views
            in the filedialog.</para>
            <para>See also setItemDelegate().</para>
            <para></para>
            <para>Sets the item delegate used to render items in the views in the
            file dialog to the given delegate.</para>
            <para>Warning: You should not share the same instance of a delegate
            between views. Doing so can cause incorrect or unintuitive editing behavior
            since each view connected to a given delegate may receive the closeEditor()
            signal, and attempt to access, modify or close an editor that has already
            been closed.</para>
            <para>Note that the model used is QFileSystemModel. It has custom item
            data roles, which is described by the Roles enum. You can use a
            QFileIconProvider if you only want custom icons.</para>
            <para>See also itemDelegate(), setIconProvider(), and
            QFileSystemModel.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.IconProvider">
            <summary>
            <para>Returns the icon provider used by the filedialog.</para>
            <para>See also setIconProvider().</para>
            <para></para>
            <para>Sets the icon provider used by the filedialog to the specified
            provider.</para>
            <para>See also iconProvider().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.ProxyModel">
            <summary>
            <para>Returns the proxy model used by the file dialog. By default no
            proxy is set.</para>
            <para>See also setProxyModel().</para>
            <para></para>
            <para>Sets the model for the views to the given proxyModel. This is
            useful if you want to modify the underlying model; for example, to add
            columns, filter data or add drives.</para>
            <para>Any existing proxy model will be removed, but not deleted. The
            file dialog will take ownership of the proxyModel.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also proxyModel().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.Options">
            <summary>
            <para>This property holds the various options that affect the look and
            feel of the dialog.</para>
            <para>By default, all options are disabled.</para>
            <para>Options should be set before showing the dialog. Setting them
            while the dialog is visible is not guaranteed to have an immediate effect
            on the dialog (depending on the option and on the platform).</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also setOption() and testOption().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.Visible">
            <summary>
            <para>This property holds whether the widget is visible.</para>
            <para>Calling setVisible(true) or show() sets the widget to visible
            status if all its parent widgets up to the window are visible. If an
            ancestor is not visible, the widget won't become visible until all its
            ancestors are shown. If its size or position has changed, Qt guarantees
            that a widget gets move and resize events just before it is shown. If the
            widget has not been resized yet, Qt will adjust the widget's size to a
            useful default using adjustSize().</para>
            <para>Calling setVisible(false) or hide() hides a widget explicitly. An
            explicitly hidden widget will never become visible, even if all its
            ancestors become visible, unless you show it.</para>
            <para>A widget receives show and hide events when its visibility status
            changes. Between a hide and a show event, there is no need to waste CPU
            cycles preparing or displaying information to the user. A video
            application, for example, might simply stop generating new frames.</para>
            <para>A widget that happens to be obscured by other windows on the
            screen is considered to be visible. The same applies to iconified windows
            and windows that exist on another virtual desktop (on platforms that
            support this concept). A widget receives spontaneous show and hide events
            when its mapping status is changed by the window system, e.g. a spontaneous
            hide event when the user minimizes the window, and a spontaneous show event
            when the window is restored again.</para>
            <para>You almost never have to reimplement the setVisible() function.
            If you need to change some settings before a widget is shown, use
            showEvent() instead. If you need to do some delayed initialization use the
            Polish event delivered to the event() function.</para>
            <para>See also show(), hide(), isHidden(), isVisibleTo(),
            isMinimized(), showEvent(), and hideEvent().</para>
            <para></para>
            <para>Reimplemented from QWidget::setVisible().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.SelectedFiles">
            <summary>
            <para>Returns a list of strings containing the absolute paths of the
            selected files in the dialog. If no files are selected, or the mode is not
            ExistingFiles or ExistingFile, selectedFiles() contains the current path in
            the viewport.</para>
            <para>See also selectedNameFilter() and selectFile().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileDialog.SelectedNameFilter">
            <summary>
            <para>Returns the filter that the user selected in the file
            dialog.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also selectedFiles().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QFileDialog.ViewMode">
            <summary>
            <para>This enum describes the view mode of the file dialog; i.e. what
            information about each file will be displayed.</para>
            <para>See also setViewMode().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QFileDialog.ViewMode.Detail">
            <summary>Displays an icon, a name, and details for each item in the directory.</summary>
        </member>
        <member name="F:QtWidgets.QFileDialog.ViewMode.List">
            <summary>Displays only an icon and a name for each item in the directory.</summary>
        </member>
        <member name="T:QtWidgets.QFileDialog.FileMode">
            <summary>
            <para>This enum is used to indicate what the user may select in the
            file dialog; i.e. what the dialog will return if the user clicks OK.</para>
            <para>This value is obsolete since Qt 4.5:</para>
            <para>See also setFileMode().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QFileDialog.FileMode.AnyFile">
            <summary>The name of a file, whether it exists or not.</summary>
        </member>
        <member name="F:QtWidgets.QFileDialog.FileMode.ExistingFile">
            <summary>The name of a single existing file.</summary>
        </member>
        <member name="F:QtWidgets.QFileDialog.FileMode.Directory">
            <summary>The name of a directory. Both files and directories are displayed.</summary>
        </member>
        <member name="F:QtWidgets.QFileDialog.FileMode.ExistingFiles">
            <summary>The names of zero or more existing files.</summary>
        </member>
        <member name="F:QtWidgets.QFileDialog.FileMode.DirectoryOnly">
            <summary>Use Directory and setOption(ShowDirsOnly, true) instead.</summary>
        </member>
        <member name="T:QtWidgets.QFileDialog.Option">
            <summary>
            <para>The Options type is a typedef for QFlags&lt;Option&gt;. It stores
            an OR combination of Option values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QFileDialog.Option.ShowDirsOnly">
            <summary>Only show directories in the file dialog. By default both files and directories are shown. (Valid only in the Directory file mode.)</summary>
        </member>
        <member name="F:QtWidgets.QFileDialog.Option.DontResolveSymlinks">
            <summary>Don't resolve symlinks in the file dialog. By default symlinks are resolved.</summary>
        </member>
        <member name="F:QtWidgets.QFileDialog.Option.DontConfirmOverwrite">
            <summary>Don't ask for confirmation if an existing file is selected. By default confirmation is requested.</summary>
        </member>
        <member name="F:QtWidgets.QFileDialog.Option.DontUseSheet">
            <summary>In previous versions of Qt, the static functions would create a sheet by default if the static function was given a parent. This is no longer supported and does nothing in Qt 4.5, The static functions will always be an application modal dialog. If you want to use sheets, use QFileDialog::open() instead.</summary>
        </member>
        <member name="F:QtWidgets.QFileDialog.Option.DontUseNativeDialog">
            <summary>Don't use the native file dialog. By default, the native file dialog is used unless you use a subclass of QFileDialog that contains the Q_OBJECT macro, or the platform does not have a native dialog of the type that you require.</summary>
        </member>
        <member name="F:QtWidgets.QFileDialog.Option.ReadOnly">
            <summary>Indicates that the model is readonly.</summary>
        </member>
        <member name="F:QtWidgets.QFileDialog.Option.HideNameFilterDetails">
            <summary>Indicates if the file name filter details are hidden or not.</summary>
        </member>
        <member name="F:QtWidgets.QFileDialog.Option.DontUseCustomDirectoryIcons">
            <summary>Always use the default directory icon. Some platforms allow the user to set a different icon. Custom icon lookup cause a big performance impact over network or removable drives. Setting this will enable the QFileIconProvider::DontUseCustomDirectoryIcons option in the icon provider. This enum value was added in Qt 5.2.</summary>
        </member>
        <member name="T:QtWidgets.QFileSystemModel">
            <summary>
            <para>The QFileSystemModel class provides a data model for the local
            filesystem.</para>
            </summary>
            <remarks>
            <para>This class provides access to the local filesystem, providing
            functions for renaming and removing files and directories, and for creating
            new directories. In the simplest case, it can be used with a suitable
            display widget as part of a browser or filter.</para>
            <para>QFileSystemModel can be accessed using the standard interface
            provided by QAbstractItemModel, but it also provides some convenience
            functions that are specific to a directory model. The fileInfo(), isDir(),
            fileName() and filePath() functions provide information about the
            underlying files and directories related to items in the model. Directories
            can be created and removed using mkdir(), rmdir().</para>
            <para>Note: QFileSystemModel requires an instance of a GUI
            application.</para>
            <para></para>
            <para>Example Usage</para>
            <para>A directory model that displays the contents of a default
            directory is usually constructed with a parent object:</para>
            <para>    QFileSystemModel *model = new QFileSystemModel;</para>
            <para>    model-&gt;setRootPath(QDir::currentPath());</para>
            <para>A tree view can be used to display the contents of the
            model</para>
            <para>    QTreeView *tree = new QTreeView(splitter);</para>
            <para>    tree-&gt;setModel(model);</para>
            <para>and the contents of a particular directory can be displayed by
            setting the tree view's root index:</para>
            <para>
            tree-&gt;setRootIndex(model-&gt;index(QDir::currentPath()));</para>
            <para>The view's root index can be used to control how much of a
            hierarchical model is displayed. QFileSystemModel provides a convenience
            function that returns a suitable model index for a path to a directory
            within the model.</para>
            <para></para>
            <para>Caching and Performance</para>
            <para>QFileSystemModel will not fetch any files or directories until
            setRootPath() is called. This will prevent any unnecessary querying on the
            file system until that point such as listing the drives on Windows.</para>
            <para>Unlike QDirModel, QFileSystemModel uses a separate thread to
            populate itself so it will not cause the main thread to hang as the file
            system is being queried. Calls to rowCount() will return 0 until the model
            populates a directory.</para>
            <para>QFileSystemModel keeps a cache with file information. The cache
            is automatically kept up to date using the QFileSystemWatcher.</para>
            <para></para>
            <para>See also Model Classes.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a file system model with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.Index(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::index().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.Index(System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the model item index for the given path and
            column.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.parent(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::parent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.HasChildren(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::hasChildren().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.CanFetchMore(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::canFetchMore().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.FetchMore(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::fetchMore().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.RowCount(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::rowCount().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.ColumnCount(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::columnCount().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.MyComputer(System.Int32)">
            <summary>
            <para>Returns the data stored under the given role for the item
            &quot;My Computer&quot;.</para>
            <para>See also Qt::ItemDataRole.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.Data(QtCore.QModelIndex,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::data().</para>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.SetData(QtCore.QModelIndex,QtCore.QVariant,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::setData().</para>
            <para>See also data().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.HeaderData(System.Int32,QtCore.Qt.Orientation,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::headerData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.Flags(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::flags().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.Sort(System.Int32,QtCore.Qt.SortOrder)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::sort().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.DropMimeData(QtCore.QMimeData,QtCore.Qt.DropAction,System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::dropMimeData().</para>
            <para>Handles the data supplied by a drag and drop operation that ended
            with the given action over the row in the model specified by the row and
            column and by the parent index.</para>
            <para>See also supportedDropActions().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.SetRootPath(System.String)">
            <summary>
            <para>Sets the directory that is being watched by the model to newPath
            by installing a file system watcher on it. Any changes to files and
            directories within this directory will be reflected in the model.</para>
            <para>If the path is changed, the rootPathChanged() signal will be
            emitted.</para>
            <para>Note: This function does not change the structure of the model or
            modify the data available to views. In other words, the &quot;root&quot; of
            the model is not changed to include only files and directories within the
            directory specified by newPath in the file system.</para>
            <para>See also rootPath().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.FilePath(QtCore.QModelIndex)">
            <summary>
            <para>Returns the path of the item stored in the model under the index
            given.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.IsDir(QtCore.QModelIndex)">
            <summary>
            <para>Returns true if the model item index represents a directory;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.Size(QtCore.QModelIndex)">
            <summary>
            <para>Returns the size in bytes of index. If the file does not exist, 0
            is returned.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.Type(QtCore.QModelIndex)">
            <summary>
            <para>Returns the type of file index such as &quot;Directory&quot; or
            &quot;JPEG file&quot;.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.LastModified(QtCore.QModelIndex)">
            <summary>
            <para>Returns the date and time when index was last modified.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.Mkdir(QtCore.QModelIndex,System.String)">
            <summary>
            <para>Create a directory with the name in the parent model
            index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.Rmdir(QtCore.QModelIndex)">
            <summary>
            <para>Removes the directory corresponding to the model item index in
            the file system model and deletes the corresponding directory from the file
            system, returning true if successful. If the directory cannot be removed,
            false is returned.</para>
            <para>Warning: This function deletes directories from the file system;
            it does not move them to a location where they can be recovered.</para>
            <para>See also remove().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.FileName(QtCore.QModelIndex)">
            <summary>
            <para>Returns the file name for the item stored in the model under the
            given index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.FileIcon(QtCore.QModelIndex)">
            <summary>
            <para>Returns the icon for the item stored in the model under the given
            index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.Permissions(QtCore.QModelIndex)">
            <summary>
            <para>Returns the complete OR-ed together combination of
            QFile::Permission for the index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.FileInfo(QtCore.QModelIndex)">
            <summary>
            <para>Returns the QFileInfo for the item stored in the model under the
            given index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.Remove(QtCore.QModelIndex)">
            <summary>
            <para>Removes the model item index from the file system model and
            deletes the corresponding file from the file system, returning true if
            successful. If the item cannot be removed, false is returned.</para>
            <para>Warning: This function deletes files from the file system; it
            does not move them to a location where they can be recovered.</para>
            <para>See also rmdir().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileSystemModel.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QFileSystemModel.RootPathChanged">
            <summary>
            <para>This signal is emitted whenever the root path has been changed to a newPath.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QFileSystemModel.FileRenamed">
            <summary>
            <para>This signal is emitted whenever a file with the oldName is successfully renamed to newName. The file is located in in the directory path.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QFileSystemModel.DirectoryLoaded">
            <summary>
            <para>This signal is emitted when the gatherer thread has finished to load the path.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileSystemModel.IconProvider">
            <summary>
            <para>Returns the file icon provider for this directory model.</para>
            <para>See also setIconProvider().</para>
            <para></para>
            <para>Sets the provider of file icons for the directory model.</para>
            <para>See also iconProvider().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileSystemModel.Filter">
            <summary>
            <para>Returns the filter specified for the directory model.</para>
            <para>If a filter has not been set, the default filter is
            QDir::AllEntries | QDir::NoDotAndDotDot | QDir::AllDirs.</para>
            <para>See also setFilter() and QDir::Filters.</para>
            <para></para>
            <para>Sets the directory model's filter to that specified by
            filters.</para>
            <para>Note that the filter you set should always include the
            QDir::AllDirs enum value, otherwise QFileSystemModel won't be able to read
            the directory structure.</para>
            <para>See also filter() and QDir::Filters.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileSystemModel.ResolveSymlinks">
            <summary>
            <para>This property holds whether the directory model should resolve
            symbolic links.</para>
            <para>This is only relevant on Windows.</para>
            <para>By default, this property is true.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileSystemModel.ReadOnly">
            <summary>
            <para>This property holds whether the directory model allows writing to
            the file system.</para>
            <para>If this property is set to false, the directory model will allow
            renaming, copying and deleting of files and directories.</para>
            <para>This property is true by default</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileSystemModel.NameFilterDisables">
            <summary>
            <para>This property holds whether files that don't pass the name filter
            are hidden or disabled.</para>
            <para>This property is true by default</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileSystemModel.NameFilters">
            <summary>
            <para>Returns a list of filters applied to the names in the
            model.</para>
            <para>See also setNameFilters().</para>
            <para></para>
            <para>Sets the name filters to apply against the existing files.</para>
            <para>See also nameFilters().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileSystemModel.MimeTypes">
            <summary>
            <para>Reimplemented from QAbstractItemModel::mimeTypes().</para>
            <para>Returns a list of MIME types that can be used to describe a list
            of items in the model.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileSystemModel.SupportedDropActions">
            <summary>
            <para>Reimplemented from
            QAbstractItemModel::supportedDropActions().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileSystemModel.RootPath">
            <summary>
            <para>The currently set root path</para>
            <para>See also setRootPath() and rootDirectory().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileSystemModel.RootDirectory">
            <summary>
            <para>The currently set directory</para>
            <para>See also rootPath().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QFontDialog">
            <summary>
            <para>The QFontDialog class provides a dialog widget for selecting a
            font.</para>
            </summary>
            <remarks>
            <para>A font dialog is created through one of the static getFont()
            functions.</para>
            <para>Examples:</para>
            <para>bool ok;</para>
            <para>QFont font = QFontDialog::getFont(</para>
            <para>                &amp;ok, QFont(&quot;Helvetica [Cronyx]&quot;,
            10), this);</para>
            <para>if (ok) {</para>
            <para>    // the user clicked OK and font is set to the font the user
            selected</para>
            <para>} else {</para>
            <para>    // the user canceled the dialog; font is set to the
            initial</para>
            <para>    // value, in this case Helvetica [Cronyx], 10</para>
            <para>}</para>
            <para>The dialog can also be used to set a widget's font
            directly:</para>
            <para>myWidget.setFont(QFontDialog::getFont(0,
            myWidget.font()));</para>
            <para>If the user clicks OK the font they chose will be used for
            myWidget, and if they click Cancel the original font is used.</para>
            <para></para>
            <para></para>
            <para>See also QFont, QFontInfo, QFontMetrics, QColorDialog,
            QFileDialog, and Standard Dialogs Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QFontDialog.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a standard font dialog.</para>
            <para>Use setCurrentFont() to set the initial font attributes.</para>
            <para>The parent parameter is passed to the QDialog constructor.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also getFont().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFontDialog.#ctor(QtGui.QFont,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a standard font dialog with the given parent and
            specified initial color.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFontDialog.SetOption(QtWidgets.QFontDialog.FontDialogOption,System.Boolean)">
            <summary>
            <para>Sets the given option to be enabled if on is true; otherwise,
            clears the given option.</para>
            <para>See also options and testOption().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFontDialog.TestOption(QtWidgets.QFontDialog.FontDialogOption)">
            <summary>
            <para>Returns true if the given option is enabled; otherwise, returns
            false.</para>
            <para>See also options and setOption().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFontDialog.Open(QtCore.QObject,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Opens the dialog and connects its fontSelected() signal to the
            slot specified by receiver and member.</para>
            <para>The signal will be disconnected from the slot when the dialog is
            closed.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFontDialog.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFontDialog.Done(System.Int32)">
            <summary>
            <para>Reimplemented from QDialog::done().</para>
            <para>Closes the dialog and sets its result code to result. If this
            dialog is shown with exec(), done() causes the local event loop to finish,
            and exec() to return result.</para>
            <para>See also QDialog::done().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFontDialog.GetFont(System.Boolean@,QtWidgets.QWidget)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Executes a modal font dialog and returns a font.</para>
            <para>If the user clicks OK, the selected font is returned. If the user
            clicks Cancel, the Qt default font is returned.</para>
            <para>The dialog is constructed with the given parent. If the ok
            parameter is not-null, the value it refers to is set to true if the user
            clicks OK, and false if the user clicks Cancel.</para>
            <para>Example:</para>
            <para>bool ok;</para>
            <para>QFont font = QFontDialog::getFont(&amp;ok, this);</para>
            <para>if (ok) {</para>
            <para>    // font is set to the font the user selected</para>
            <para>} else {</para>
            <para>    // the user canceled the dialog; font is set to the
            default</para>
            <para>    // application font, QApplication::font()</para>
            <para>}</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QFontDialog constructors.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFontDialog.GetFont(System.Boolean@,QtGui.QFont,QtWidgets.QWidget,System.String,QtWidgets.QFontDialog.FontDialogOption)">
            <summary>
            <para>Executes a modal font dialog and returns a font.</para>
            <para>If the user clicks OK, the selected font is returned. If the user
            clicks Cancel, the initial font is returned.</para>
            <para>The dialog is constructed with the given parent and the options
            specified in options. title is shown as the window title of the dialog and
            initial is the initially selected font. If the ok parameter is not-null,
            the value it refers to is set to true if the user clicks OK, and set to
            false if the user clicks Cancel.</para>
            <para>Examples:</para>
            <para>bool ok;</para>
            <para>QFont font = QFontDialog::getFont(&amp;ok,
            QFont(&quot;Times&quot;, 12), this);</para>
            <para>if (ok) {</para>
            <para>    // font is set to the font the user selected</para>
            <para>} else {</para>
            <para>    // the user canceled the dialog; font is set to the
            initial</para>
            <para>    // value, in this case Times, 12.</para>
            <para>}</para>
            <para>The dialog can also be used to set a widget's font
            directly:</para>
            <para>myWidget.setFont(QFontDialog::getFont(0,
            myWidget.font()));</para>
            <para>In this example, if the user clicks OK the font they chose will
            be used, and if they click Cancel the original font is used.</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QFontDialog constructors.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QFontDialog.CurrentFontChanged">
            <summary>
            <para>This property holds the current font of the dialog.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QFont 	currentFont() const</para>
            <para> void 	setCurrentFont(const QFont &amp; font)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	currentFontChanged(const QFont &amp; font)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QFontDialog.FontSelected">
            <summary>
            <para>This signal is emitted when a font has been selected. The selected font is specified in font.</para>
            <para>The signal is only emitted when a user has chosen the final font to be used. It is not emitted while the user is changing the current font in the font dialog.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also selectedFont(), currentFontChanged(), and currentFont.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFontDialog.CurrentFont">
            <summary>
            <para>This property holds the current font of the dialog.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFontDialog.Options">
            <summary>
            <para>This property holds the various options that affect the look and
            feel of the dialog.</para>
            <para>By default, all options are disabled.</para>
            <para>Options should be set before showing the dialog. Setting them
            while the dialog is visible is not guaranteed to have an immediate effect
            on the dialog (depending on the option and on the platform).</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also setOption() and testOption().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFontDialog.Visible">
            <summary>
            <para>This property holds whether the widget is visible.</para>
            <para>Calling setVisible(true) or show() sets the widget to visible
            status if all its parent widgets up to the window are visible. If an
            ancestor is not visible, the widget won't become visible until all its
            ancestors are shown. If its size or position has changed, Qt guarantees
            that a widget gets move and resize events just before it is shown. If the
            widget has not been resized yet, Qt will adjust the widget's size to a
            useful default using adjustSize().</para>
            <para>Calling setVisible(false) or hide() hides a widget explicitly. An
            explicitly hidden widget will never become visible, even if all its
            ancestors become visible, unless you show it.</para>
            <para>A widget receives show and hide events when its visibility status
            changes. Between a hide and a show event, there is no need to waste CPU
            cycles preparing or displaying information to the user. A video
            application, for example, might simply stop generating new frames.</para>
            <para>A widget that happens to be obscured by other windows on the
            screen is considered to be visible. The same applies to iconified windows
            and windows that exist on another virtual desktop (on platforms that
            support this concept). A widget receives spontaneous show and hide events
            when its mapping status is changed by the window system, e.g. a spontaneous
            hide event when the user minimizes the window, and a spontaneous show event
            when the window is restored again.</para>
            <para>You almost never have to reimplement the setVisible() function.
            If you need to change some settings before a widget is shown, use
            showEvent() instead. If you need to do some delayed initialization use the
            Polish event delivered to the event() function.</para>
            <para>See also show(), hide(), isHidden(), isVisibleTo(),
            isMinimized(), showEvent(), and hideEvent().</para>
            <para></para>
            <para>Reimplemented from QWidget::setVisible().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFontDialog.SelectedFont">
            <summary>
            <para>Returns the font that the user selected by clicking the OK or
            equivalent button.</para>
            <para>Note: This font is not always the same as the font held by the
            currentFont property since the user can choose different fonts before
            finally selecting the one to use.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QFontDialog.FontDialogOption">
            <summary>
            <para>This enum specifies various options that affect the look and feel
            of a font dialog.</para>
            <para>For instance, it allows to specify which type of font should be
            displayed. If none are specified all fonts available will be listed.</para>
            <para>Note that the font filtering options might not be supported on
            some platforms (e.g. Mac). They are always supported by the non native
            dialog (used on Windows or Linux).</para>
            <para>This enum was introduced or modified in  Qt 4.5.</para>
            <para>The FontDialogOptions type is a typedef for
            QFlags&lt;FontDialogOption&gt;. It stores an OR combination of
            FontDialogOption values.</para>
            <para>See also options, setOption(), and testOption().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QFontDialog.FontDialogOption.NoButtons">
            <summary>Don't display OK and Cancel buttons. (Useful for "live dialogs".)</summary>
        </member>
        <member name="F:QtWidgets.QFontDialog.FontDialogOption.DontUseNativeDialog">
            <summary>Use Qt's standard font dialog on the Mac instead of Apple's native font panel. (Currently, the native dialog is never used, but this is likely to change in future Qt releases.)</summary>
        </member>
        <member name="F:QtWidgets.QFontDialog.FontDialogOption.ScalableFonts">
            <summary>Show scalable fonts</summary>
        </member>
        <member name="F:QtWidgets.QFontDialog.FontDialogOption.NonScalableFonts">
            <summary>Show non scalable fonts</summary>
        </member>
        <member name="F:QtWidgets.QFontDialog.FontDialogOption.MonospacedFonts">
            <summary>Show monospaced fonts</summary>
        </member>
        <member name="F:QtWidgets.QFontDialog.FontDialogOption.ProportionalFonts">
            <summary>Show proportional fonts</summary>
        </member>
        <member name="T:QtWidgets.QLineEdit">
            <summary>
            <para>The QLineEdit widget is a one-line text editor.</para>
            </summary>
            <remarks>
            <para>A line edit allows the user to enter and edit a single line of
            plain text with a useful collection of editing functions, including undo
            and redo, cut and paste, and drag and drop (see setDragEnabled()).</para>
            <para>By changing the echoMode() of a line edit, it can also be used as
            a &quot;write-only&quot; field, for inputs such as passwords.</para>
            <para>The length of the text can be constrained to maxLength(). The
            text can be arbitrarily constrained using a validator() or an inputMask(),
            or both. When switching between a validator and an input mask on the same
            line edit, it is best to clear the validator or input mask to prevent
            undefined behavior.</para>
            <para>A related class is QTextEdit which allows multi-line, rich text
            editing.</para>
            <para>You can change the text with setText() or insert(). The text is
            retrieved with text(); the displayed text (which may be different, see
            EchoMode) is retrieved with displayText(). Text can be selected with
            setSelection() or selectAll(), and the selection can be cut(), copy()ied
            and paste()d. The text can be aligned with setAlignment().</para>
            <para>When the text changes the textChanged() signal is emitted; when
            the text changes other than by calling setText() the textEdited() signal is
            emitted; when the cursor is moved the cursorPositionChanged() signal is
            emitted; and when the Return or Enter key is pressed the returnPressed()
            signal is emitted.</para>
            <para>When editing is finished, either because the line edit lost focus
            or Return/Enter is pressed the editingFinished() signal is emitted.</para>
            <para>Note that if there is a validator set on the line edit, the
            returnPressed()/editingFinished() signals will only be emitted if the
            validator returns QValidator::Acceptable.</para>
            <para>By default, QLineEdits have a frame as specified by platform
            style guides; you can turn it off by calling setFrame(false).</para>
            <para>The default key bindings are described below. The line edit also
            provides a context menu (usually invoked by a right mouse click) that
            presents some of these editing options. </para>
            <para></para>
            <para> KeypressAction</para>
            <para>Left Arrow	Moves the cursor one character to the left.</para>
            <para>Shift+Left Arrow	Moves and selects text one character to the
            left.</para>
            <para>Right Arrow	Moves the cursor one character to the right.</para>
            <para>Shift+Right Arrow	Moves and selects text one character to the
            right.</para>
            <para>Home	Moves the cursor to the beginning of the line.</para>
            <para>End	Moves the cursor to the end of the line.</para>
            <para>Backspace	Deletes the character to the left of the cursor.</para>
            <para>Ctrl+Backspace	Deletes the word to the left of the cursor.</para>
            <para>Delete	Deletes the character to the right of the cursor.</para>
            <para>Ctrl+Delete	Deletes the word to the right of the cursor.</para>
            <para>Ctrl+A	Select all.</para>
            <para>Ctrl+C	Copies the selected text to the clipboard.</para>
            <para>Ctrl+Insert	Copies the selected text to the clipboard.</para>
            <para>Ctrl+K	Deletes to the end of the line.</para>
            <para>Ctrl+V	Pastes the clipboard text into line edit.</para>
            <para>Shift+Insert	Pastes the clipboard text into line edit.</para>
            <para>Ctrl+X	Deletes the selected text and copies it to the
            clipboard.</para>
            <para>Shift+Delete	Deletes the selected text and copies it to the
            clipboard.</para>
            <para>Ctrl+Z	Undoes the last operation.</para>
            <para>Ctrl+Y	Redoes the last undone operation.</para>
            <para></para>
            <para>Any other key sequence that represents a valid character, will
            cause the character to be inserted into the line edit.</para>
            <para></para>
            <para> 	A line edit shown in the Macintosh widget style.</para>
            <para>	A line edit shown in the Windows Vista widget style.</para>
            <para>	A line edit shown in the Fusion widget style.</para>
            <para></para>
            <para></para>
            <para>See also QTextEdit, QLabel, QComboBox, GUI Design Handbook:
            Field, Entry, and Line Edits Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QLineEdit.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a line edit with no text.</para>
            <para>The maximum text length is set to 32767 characters.</para>
            <para>The parent argument is sent to the QWidget constructor.</para>
            <para>See also setText() and setMaxLength().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.#ctor(System.String,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a line edit containing the text contents.</para>
            <para>The cursor position is set to the end of the line and the maximum
            text length to 32767 characters.</para>
            <para>The parent and argument is sent to the QWidget
            constructor.</para>
            <para>See also text() and setMaxLength().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.SetFrame(System.Boolean)">
            <summary>
            <para>This property holds whether the line edit draws itself with a
            frame.</para>
            <para>If enabled (the default) the line edit draws itself inside a
            frame, otherwise the line edit draws itself without any frame.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasFrame() const</para>
            <para> void 	setFrame(bool)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.CursorPositionAt(QtCore.QPoint)">
            <summary>
            <para>Returns the cursor position under the point pos.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.CursorForward(System.Boolean,System.Int32)">
            <summary>
            <para>Moves the cursor forward steps characters. If mark is true each
            character moved over is added to the selection; if mark is false the
            selection is cleared.</para>
            <para>See also cursorBackward().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.CursorBackward(System.Boolean,System.Int32)">
            <summary>
            <para>Moves the cursor back steps characters. If mark is true each
            character moved over is added to the selection; if mark is false the
            selection is cleared.</para>
            <para>See also cursorForward().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.CursorWordForward(System.Boolean)">
            <summary>
            <para>Moves the cursor one word forward. If mark is true, the word is
            also selected.</para>
            <para>See also cursorWordBackward().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.CursorWordBackward(System.Boolean)">
            <summary>
            <para>Moves the cursor one word backward. If mark is true, the word is
            also selected.</para>
            <para>See also cursorWordForward().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.Backspace">
            <summary>
            <para>If no text is selected, deletes the character to the left of the
            text cursor and moves the cursor one position to the left. If any text is
            selected, the cursor is moved to the beginning of the selected text and the
            selected text is deleted.</para>
            <para>See also del().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.Del">
            <summary>
            <para>If no text is selected, deletes the character to the right of the
            text cursor. If any text is selected, the cursor is moved to the beginning
            of the selected text and the selected text is deleted.</para>
            <para>See also backspace().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.Home(System.Boolean)">
            <summary>
            <para>Moves the text cursor to the beginning of the line unless it is
            already there. If mark is true, text is selected towards the first
            position; otherwise, any selected text is unselected if the cursor is
            moved.</para>
            <para>See also end().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.End(System.Boolean)">
            <summary>
            <para>Moves the text cursor to the end of the line unless it is already
            there. If mark is true, text is selected towards the last position;
            otherwise, any selected text is unselected if the cursor is moved.</para>
            <para>See also home().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.SetSelection(System.Int32,System.Int32)">
            <summary>
            <para>Selects text from position start and for length characters.
            Negative lengths are allowed.</para>
            <para>See also deselect(), selectAll(), and selectedText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.SetTextMargins(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the margins around the text inside the frame to have the
            sizes left, top, right, and bottom.</para>
            <para>See also getTextMargins().</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also textMargins().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.GetTextMargins(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>Returns the widget's text margins for left, top, right, and
            bottom.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setTextMargins().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.AddAction(QtWidgets.QAction,QtWidgets.QLineEdit.ActionPosition)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Adds the action to the list of actions at the position.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.AddAction(QtGui.QIcon,QtWidgets.QLineEdit.ActionPosition)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates a new action with the given icon at the position.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.Clear">
            <summary>
            <para>Clears the contents of the line edit.</para>
            <para>See also setText() and insert().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.SelectAll">
            <summary>
            <para>Selects all the text (i.e. highlights it) and moves the cursor to
            the end. This is useful when a default value has been inserted because if
            the user types before clicking on the widget, the selected text will be
            deleted.</para>
            <para>See also setSelection() and deselect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.Undo">
            <summary>
            <para>Undoes the last operation if undo is available. Deselects any
            current selection, and updates the selection start to the current cursor
            position.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.Redo">
            <summary>
            <para>Redoes the last operation if redo is available.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.Cut">
            <summary>
            <para>Copies the selected text to the clipboard and deletes it, if
            there is any, and if echoMode() is Normal.</para>
            <para>If the current validator disallows deleting the selected text,
            cut() will copy without deleting.</para>
            <para>See also copy(), paste(), and setValidator().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.Copy">
            <summary>
            <para>Copies the selected text to the clipboard, if there is any, and
            if echoMode() is Normal.</para>
            <para>See also cut() and paste().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.Paste">
            <summary>
            <para>Inserts the clipboard's text at the cursor position, deleting any
            selected text, providing the line edit is not read-only.</para>
            <para>If the end result would not be acceptable to the current
            validator, nothing happens.</para>
            <para>See also copy() and cut().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.Deselect">
            <summary>
            <para>Deselects any selected text.</para>
            <para>See also setSelection() and selectAll().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.Insert(System.String)">
            <summary>
            <para>Deletes any selected text, inserts newText, and validates the
            result. If it is valid, it sets it as the new contents of the line
            edit.</para>
            <para>See also setText() and clear().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.CreateStandardContextMenu">
            <summary>
            <para>This function creates the standard context menu which is shown
            when the user clicks on the line edit with the right mouse button. It is
            called from the default contextMenuEvent() handler. The popup menu's
            ownership is transferred to the caller.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.OnMouseDoubleClickEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseDoubleClickEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            <para>Converts the given key press event into a line edit
            action.</para>
            <para>If Return or Enter is pressed and the current text is valid (or
            can be made valid by the validator), the signal returnPressed() is
            emitted.</para>
            <para>The default key bindings are listed in the class's detailed
            description.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.OnDragEnterEvent(QtGui.QDragEnterEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragEnterEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.OnDragMoveEvent(QtGui.QDragMoveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.OnDragLeaveEvent(QtGui.QDragLeaveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.OnDropEvent(QtGui.QDropEvent)">
            <summary>
            <para>Reimplemented from QWidget::dropEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.OnContextMenuEvent(QtGui.QContextMenuEvent)">
            <summary>
            <para>Reimplemented from QWidget::contextMenuEvent().</para>
            <para>Shows the standard context menu created with
            createStandardContextMenu().</para>
            <para>If you do not want the line edit to have a context menu, you can
            set its contextMenuPolicy to Qt::NoContextMenu. If you want to customize
            the context menu, reimplement this function. If you want to extend the
            standard context menu, reimplement this function, call
            createStandardContextMenu() and extend the menu returned.</para>
            <para>void LineEdit::contextMenuEvent(QContextMenuEvent *event)</para>
            <para>{</para>
            <para>    QMenu *menu = createStandardContextMenu();</para>
            <para>    menu-&gt;addAction(tr(&quot;My Menu Item&quot;));</para>
            <para>    //...</para>
            <para>    menu-&gt;exec(event-&gt;globalPos());</para>
            <para>    delete menu;</para>
            <para>}</para>
            <para>The event parameter is used to obtain the position where the
            mouse cursor was when the event was generated.</para>
            <para>See also setContextMenuPolicy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.OnInputMethodEvent(QtGui.QInputMethodEvent)">
            <summary>
            <para>Reimplemented from QWidget::inputMethodEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.InitStyleOption(QtWidgets.QStyleOptionFrame)">
            <summary>
            <para>Initialize option with the values from this QLineEdit. This
            method is useful for subclasses when they need a QStyleOptionFrame, but
            don't want to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.InputMethodQuery(QtCore.Qt.InputMethodQuery)">
            <summary>
            <para>Reimplemented from QWidget::inputMethodQuery().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLineEdit.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QLineEdit.TextChanged">
            <summary>
            <para>This property holds the line edit's text.</para>
            <para>Setting this property clears the selection, clears the undo/redo history, moves the cursor to the end of the line and resets the modified property to false. The text is not validated when inserted with setText().</para>
            <para>The text is truncated to maxLength() length.</para>
            <para>By default, this property contains an empty string.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	text() const</para>
            <para> void 	setText(const QString &amp;)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textChanged(const QString &amp; text)</para>
            <para></para>
            <para>See also insert() and clear().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QLineEdit.TextEdited">
            <summary>
            <para>This signal is emitted whenever the text is edited. The text argument is the new text.</para>
            <para>Unlike textChanged(), this signal is not emitted when the text is changed programmatically, for example, by calling setText().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QLineEdit.CursorPositionChanged">
            <summary>
            <para>This signal is emitted whenever the cursor moves. The previous position is given by old, and the new position by new.</para>
            <para>See also setCursorPosition() and cursorPosition().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QLineEdit.ReturnPressed">
            <summary>
            <para>This signal is emitted when the Return or Enter key is pressed. Note that if there is a validator() or inputMask() set on the line edit, the returnPressed() signal will only be emitted if the input follows the inputMask() and the validator() returns QValidator::Acceptable.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QLineEdit.EditingFinished">
            <summary>
            <para>This signal is emitted when the Return or Enter key is pressed or the line edit loses focus. Note that if there is a validator() or inputMask() set on the line edit and enter/return is pressed, the editingFinished() signal will only be emitted if the input follows the inputMask() and the validator() returns QValidator::Acceptable.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QLineEdit.SelectionChanged">
            <summary>
            <para>This signal is emitted whenever the selection changes.</para>
            <para>See also hasSelectedText() and selectedText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.PlaceholderText">
            <summary>
            <para>This property holds the line edit's placeholder text.</para>
            <para>Setting this property makes the line edit display a grayed-out
            placeholder text as long as the line edit is empty.</para>
            <para>Normally, an empty line edit shows the placeholder text even when
            it has focus. However, if the content is horizontally centered, the
            placeholder text is not displayed under the cursor when the line edit has
            focus.</para>
            <para>By default, this property contains an empty string.</para>
            <para>This property was introduced in  Qt 4.7.</para>
            <para>See also text().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.MaxLength">
            <summary>
            <para>This property holds the maximum permitted length of the
            text.</para>
            <para>If the text is too long, it is truncated at the limit.</para>
            <para>If truncation occurs any selected text will be unselected, the
            cursor position is set to 0 and the first part of the string is
            shown.</para>
            <para>If the line edit has an input mask, the mask defines the maximum
            string length.</para>
            <para>By default, this property contains a value of 32767.</para>
            <para>See also inputMask.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.ClearButtonEnabled">
            <summary>
            <para>This property holds whether the line edit displays a clear button
            when it is not empty.</para>
            <para>If enabled, the line edit displays a trailing clear button when
            it contains some text, otherwise the line edit does not show a clear button
            (the default).</para>
            <para>This property was introduced in  Qt 5.2.</para>
            <para>See also addAction() and removeAction().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.echoMode">
            <summary>
            <para>This property holds the line edit's echo mode.</para>
            <para>The echo mode determines how the text entered in the line edit is
            displayed (or echoed) to the user.</para>
            <para>The most common setting is Normal, in which the text entered by
            the user is displayed verbatim, but QLineEdit also supports modes that
            allow the entered text to be suppressed or obscured: these include NoEcho,
            Password and PasswordEchoOnEdit.</para>
            <para>The widget's display and the ability to copy or drag the text is
            affected by this setting.</para>
            <para>By default, this property is set to Normal.</para>
            <para>See also EchoMode and displayText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.ReadOnly">
            <summary>
            <para>This property holds whether the line edit is read only.</para>
            <para>In read-only mode, the user can still copy the text to the
            clipboard, or drag and drop the text (if echoMode() is Normal), but cannot
            edit it.</para>
            <para>QLineEdit does not show a cursor in read-only mode.</para>
            <para>By default, this property is false.</para>
            <para>See also setEnabled().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.Validator">
            <summary>
            <para>Returns a pointer to the current input validator, or 0 if no
            validator has been set.</para>
            <para>See also setValidator().</para>
            <para></para>
            <para>Sets this line edit to only accept input that the validator, v,
            will accept. This allows you to place any arbitrary constraints on the text
            which may be entered.</para>
            <para>If v == 0, setValidator() removes the current input validator.
            The initial setting is to have no input validator (i.e. any input is
            accepted up to maxLength()).</para>
            <para>See also validator(), QIntValidator, QDoubleValidator, and
            QRegExpValidator.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.Completer">
            <summary>
            <para>Returns the current QCompleter that provides completions.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setCompleter().</para>
            <para></para>
            <para>Sets this line edit to provide auto completions from the
            completer, c. The completion mode is set using
            QCompleter::setCompletionMode().</para>
            <para>To use a QCompleter with a QValidator or QLineEdit::inputMask,
            you need to ensure that the model provided to QCompleter contains valid
            entries. You can use the QSortFilterProxyModel to ensure that the
            QCompleter's model contains only valid entries.</para>
            <para>If c == 0, setCompleter() removes the current completer,
            effectively disabling auto completion.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also completer() and QCompleter.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.CursorPosition">
            <summary>
            <para>This property holds the current cursor position for this line
            edit.</para>
            <para>Setting the cursor position causes a repaint when
            appropriate.</para>
            <para>By default, this property contains a value of 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.Alignment">
            <summary>
            <para>This property holds the alignment of the line edit.</para>
            <para>Both horizontal and vertical alignment is allowed here,
            Qt::AlignJustify will map to Qt::AlignLeft.</para>
            <para>By default, this property contains a combination of Qt::AlignLeft
            and Qt::AlignVCenter.</para>
            <para>See also Qt::Alignment.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.Modified">
            <summary>
            <para>This property holds whether the line edit's contents has been
            modified by the user.</para>
            <para>The modified flag is never read by QLineEdit; it has a default
            value of false and is changed to true whenever the user changes the line
            edit's contents.</para>
            <para>This is useful for things that need to provide a default value
            but do not start out knowing what the default should be (perhaps it depends
            on other fields on the form). Start the line edit without the best default,
            and when the default is known, if modified() returns false (the user hasn't
            entered any text), insert the default value.</para>
            <para>Calling setText() resets the modified flag to false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.DragEnabled">
            <summary>
            <para>This property holds whether the lineedit starts a drag if the
            user presses and moves the mouse on some selected text.</para>
            <para>Dragging is disabled by default.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.CursorMoveStyle">
            <summary>
            <para>This property holds the movement style of cursor in this line
            edit.</para>
            <para>When this property is set to Qt::VisualMoveStyle, the line edit
            will use visual movement style. Pressing the left arrow key will always
            cause the cursor to move left, regardless of the text's writing direction.
            The same behavior applies to right arrow key.</para>
            <para>When the property is Qt::LogicalMoveStyle (the default), within a
            LTR text block, increase cursor position when pressing left arrow key,
            decrease cursor position when pressing the right arrow key. If the text
            block is right to left, the opposite behavior applies.</para>
            <para>This property was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.InputMask">
            <summary>
            <para>This property holds the validation input mask.</para>
            <para>If no mask is set, inputMask() returns an empty string.</para>
            <para>Sets the QLineEdit's validation mask. Validators can be used
            instead of, or in conjunction with masks; see setValidator().</para>
            <para>Unset the mask and return to normal QLineEdit operation by
            passing an empty string (&quot;&quot;).</para>
            <para>The table below shows the characters that can be used in an input
            mask. A space character, the default character for a blank, is needed for
            cases where a character is permitted but not required.</para>
            <para></para>
            <para> CharacterMeaning</para>
            <para>A	ASCII alphabetic character required. A-Z, a-z.</para>
            <para>a	ASCII alphabetic character permitted but not required.</para>
            <para>N	ASCII alphanumeric character required. A-Z, a-z, 0-9.</para>
            <para>n	ASCII alphanumeric character permitted but not required.</para>
            <para>X	Any character required.</para>
            <para>x	Any character permitted but not required.</para>
            <para>9	ASCII digit required. 0-9.</para>
            <para>0	ASCII digit permitted but not required.</para>
            <para>D	ASCII digit required. 1-9.</para>
            <para>d	ASCII digit permitted but not required (1-9).</para>
            <para>#	ASCII digit or plus/minus sign permitted but not
            required.</para>
            <para>H	Hexadecimal character required. A-F, a-f, 0-9.</para>
            <para>h	Hexadecimal character permitted but not required.</para>
            <para>B	Binary character required. 0-1.</para>
            <para>b	Binary character permitted but not required.</para>
            <para>&gt;	All following alphabetic characters are uppercased.</para>
            <para>&lt;	All following alphabetic characters are lowercased.</para>
            <para>!	Switch off case conversion.</para>
            <para>\	Use \ to escape the special characters listed above to use them
            as separators.</para>
            <para></para>
            <para>The mask consists of a string of mask characters and separators,
            optionally followed by a semicolon and the character used for blanks. The
            blank characters are always removed from the text after editing.</para>
            <para>Examples:</para>
            <para></para>
            <para> MaskNotes</para>
            <para>000.000.000.000;_	IP address; blanks are _.</para>
            <para>HH:HH:HH:HH:HH:HH;_	MAC address</para>
            <para>0000-00-00	ISO Date; blanks are space</para>
            <para>&gt;AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#	License number; blanks are -
            and all (alphabetic) characters are converted to uppercase.</para>
            <para></para>
            <para>To get range control (e.g., for an IP address) use masks together
            with validators.</para>
            <para>See also maxLength.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.TextMargins">
            <summary>
            <para>Returns the widget's text margins.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setTextMargins().</para>
            <para></para>
            <para>Sets the margins around the text inside the frame.</para>
            <para>See also textMargins().</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.Text">
            <summary>
            <para>This property holds the line edit's text.</para>
            <para>Setting this property clears the selection, clears the undo/redo
            history, moves the cursor to the end of the line and resets the modified
            property to false. The text is not validated when inserted with
            setText().</para>
            <para>The text is truncated to maxLength() length.</para>
            <para>By default, this property contains an empty string.</para>
            <para>See also insert() and clear().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            <para>Returns a recommended size for the widget.</para>
            <para>The width returned, in pixels, is usually enough for about 15 to
            20 characters.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            <para>Returns a minimum size for the line edit.</para>
            <para>The width returned is enough for at least one character.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.DisplayText">
            <summary>
            <para>This property holds the displayed text.</para>
            <para>If echoMode is Normal this returns the same as text(); if
            EchoMode is Password or PasswordEchoOnEdit it returns a string of
            platform-dependent password mask characters text().length() in size, e.g.
            &quot;******&quot;; if EchoMode is NoEcho returns an empty string,
            &quot;&quot;.</para>
            <para>By default, this property contains an empty string.</para>
            <para>See also setEchoMode(), text(), and EchoMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.HasFrame">
            <summary>
            <para>This property holds whether the line edit draws itself with a
            frame.</para>
            <para>If enabled (the default) the line edit draws itself inside a
            frame, otherwise the line edit draws itself without any frame.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasFrame() const</para>
            <para> void 	setFrame(bool)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.HasSelectedText">
            <summary>
            <para>This property holds whether there is any text selected.</para>
            <para>hasSelectedText() returns true if some or all of the text has
            been selected by the user; otherwise returns false.</para>
            <para>By default, this property is false.</para>
            <para>See also selectedText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.SelectedText">
            <summary>
            <para>This property holds the selected text.</para>
            <para>If there is no selected text this property's value is an empty
            string.</para>
            <para>By default, this property contains an empty string.</para>
            <para>See also hasSelectedText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.SelectionStart">
            <summary>
            <para>selectionStart() returns the index of the first selected
            character in the line edit or -1 if no text is selected.</para>
            <para>See also selectedText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.IsUndoAvailable">
            <summary>
            <para>This property holds whether undo is available.</para>
            <para>Undo becomes available once the user has modified the text in the
            line edit.</para>
            <para>By default, this property is false.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isUndoAvailable() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.IsRedoAvailable">
            <summary>
            <para>This property holds whether redo is available.</para>
            <para>Redo becomes available once the user has performed one or more
            undo operations on text in the line edit.</para>
            <para>By default, this property is false.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isRedoAvailable() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.HasAcceptableInput">
            <summary>
            <para>This property holds whether the input satisfies the inputMask and
            the validator.</para>
            <para>By default, this property is true.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasAcceptableInput() const</para>
            <para></para>
            <para>See also setInputMask() and setValidator().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLineEdit.CursorRect">
            <summary>
            <para>Returns a rectangle that includes the lineedit cursor.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QLineEdit.ActionPosition">
            <summary>
            <para>This enum type describes how a line edit should display the
            action widgets to be added.</para>
            <para>This enum was introduced or modified in  Qt 5.2.</para>
            <para>See also addAction(), removeAction(), and
            QWidget::layoutDirection.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QLineEdit.ActionPosition.LeadingPosition">
            <summary>The widget is displayed to the left of the text when using layout direction Qt::LeftToRight or to the right when using Qt::RightToLeft, respectively.</summary>
        </member>
        <member name="F:QtWidgets.QLineEdit.ActionPosition.TrailingPosition">
            <summary>The widget is displayed to the right of the text when using layout direction Qt::LeftToRight or to the left when using Qt::RightToLeft, respectively.</summary>
        </member>
        <member name="T:QtWidgets.QLineEdit.EchoMode">
            <summary>
            <para>This enum type describes how a line edit should display its
            contents.</para>
            <para>See also setEchoMode() and echoMode().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QLineEdit.EchoMode.Normal">
            <summary>Display characters as they are entered. This is the default.</summary>
        </member>
        <member name="F:QtWidgets.QLineEdit.EchoMode.NoEcho">
            <summary>Do not display anything. This may be appropriate for passwords where even the length of the password should be kept secret.</summary>
        </member>
        <member name="F:QtWidgets.QLineEdit.EchoMode.Password">
            <summary>Display platform-dependent password mask characters instead of the characters actually entered.</summary>
        </member>
        <member name="F:QtWidgets.QLineEdit.EchoMode.PasswordEchoOnEdit">
            <summary>Display characters as they are entered while editing otherwise display characters as with Password.</summary>
        </member>
        <member name="T:QtWidgets.QInputDialog">
            <summary>
            <para>The QInputDialog class provides a simple convenience dialog to
            get a single value from the user.</para>
            </summary>
            <remarks>
            <para>The input value can be a string, a number or an item from a list.
            A label must be set to tell the user what they should enter.</para>
            <para>Five static convenience functions are provided: getText(),
            getMultiLineText(), getInt(), getDouble(), and getItem(). All the functions
            can be used in a similar way, for example:</para>
            <para>    bool ok;</para>
            <para>    QString text = QInputDialog::getText(this,
            tr(&quot;QInputDialog::getText()&quot;),</para>
            <para>                                         tr(&quot;User
            name:&quot;), QLineEdit::Normal,</para>
            <para>                                         QDir::home().dirName(),
            &amp;ok);</para>
            <para>    if (ok &amp;&amp; !text.isEmpty())</para>
            <para>        textLabel-&gt;setText(text);</para>
            <para>The ok variable is set to true if the user clicks OK; otherwise,
            it is set to false.</para>
            <para></para>
            <para>The Standard Dialogs example shows how to use QInputDialog as
            well as other built-in Qt dialogs.</para>
            <para></para>
            <para>See also QMessageBox and Standard Dialogs Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QInputDialog.#ctor(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a new input dialog with the given parent and window
            flags.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QInputDialog.SetOption(QtWidgets.QInputDialog.InputDialogOption,System.Boolean)">
            <summary>
            <para>Sets the given option to be enabled if on is true; otherwise,
            clears the given option.</para>
            <para>See also options and testOption().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QInputDialog.TestOption(QtWidgets.QInputDialog.InputDialogOption)">
            <summary>
            <para>Returns true if the given option is enabled; otherwise, returns
            false.</para>
            <para>See also options and setOption().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QInputDialog.SetIntRange(System.Int32,System.Int32)">
            <summary>
            <para>Sets the range of integer values accepted by the dialog when used
            in IntInput mode, with minimum and maximum values specified by min and max
            respectively.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QInputDialog.SetDoubleRange(System.Double,System.Double)">
            <summary>
            <para>Sets the range of double precision floating point values accepted
            by the dialog when used in DoubleInput mode, with minimum and maximum
            values specified by min and max respectively.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QInputDialog.Open(QtCore.QObject,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function connects one of its signals to the slot specified
            by receiver and member. The specific signal depends on the arguments that
            are specified in member. These are:</para>
            <para></para>
            <para>textValueSelected() if member has a QString for its first
            argument.</para>
            <para>intValueSelected() if member has an int for its first
            argument.</para>
            <para>doubleValueSelected() if member has a double for its first
            argument.</para>
            <para>accepted() if member has NO arguments.</para>
            <para></para>
            <para>The signal will be disconnected from the slot when the dialog is
            closed.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QInputDialog.Done(System.Int32)">
            <summary>
            <para>Reimplemented from QDialog::done().</para>
            <para>Closes the dialog and sets its result code to result. If this
            dialog is shown with exec(), done() causes the local event loop to finish,
            and exec() to return result.</para>
            <para>See also QDialog::done().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QInputDialog.GetText(QtWidgets.QWidget,System.String,System.String,QtWidgets.QLineEdit.EchoMode,System.String,System.Boolean@,QtCore.Qt.WindowType,QtCore.Qt.InputMethodHint)">
            <summary>
            <para>Static convenience function to get a string from the user.</para>
            <para>title is the text which is displayed in the title bar of the
            dialog. label is the text which is shown to the user (it should say what
            should be entered). text is the default text which is placed in the line
            edit. mode is the echo mode the line edit will use. inputMethodHints is the
            input method hints that will be used in the edit widget if an input method
            is active.</para>
            <para>If ok is nonnull *a ok will be set to true if the user pressed OK
            and to false if the user pressed Cancel. The dialog's parent is parent. The
            dialog will be modal and uses the specified widget flags.</para>
            <para>If the dialog is accepted, this function returns the text in the
            dialog's line edit. If the dialog is rejected, a null QString is
            returned.</para>
            <para>Use this static function like this:</para>
            <para>    bool ok;</para>
            <para>    QString text = QInputDialog::getText(this,
            tr(&quot;QInputDialog::getText()&quot;),</para>
            <para>                                         tr(&quot;User
            name:&quot;), QLineEdit::Normal,</para>
            <para>                                         QDir::home().dirName(),
            &amp;ok);</para>
            <para>    if (ok &amp;&amp; !text.isEmpty())</para>
            <para>        textLabel-&gt;setText(text);</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QInputDialog constructors.</para>
            <para>See also getInt(), getDouble(), getItem(), and
            getMultiLineText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QInputDialog.GetMultiLineText(QtWidgets.QWidget,System.String,System.String,System.String,System.Boolean@,QtCore.Qt.WindowType,QtCore.Qt.InputMethodHint)">
            <summary>
            <para>Static convenience function to get a multiline string from the
            user.</para>
            <para>title is the text which is displayed in the title bar of the
            dialog. label is the text which is shown to the user (it should say what
            should be entered). text is the default text which is placed in the plain
            text edit. inputMethodHints is the input method hints that will be used in
            the edit widget if an input method is active.</para>
            <para>If ok is nonnull *a ok will be set to true if the user pressed OK
            and to false if the user pressed Cancel. The dialog's parent is parent. The
            dialog will be modal and uses the specified widget flags.</para>
            <para>If the dialog is accepted, this function returns the text in the
            dialog's plain text edit. If the dialog is rejected, a null QString is
            returned.</para>
            <para>Use this static function like this:</para>
            <para>    bool ok;</para>
            <para>    QString text = QInputDialog::getMultiLineText(this,
            tr(&quot;QInputDialog::getMultiLineText()&quot;),</para>
            <para>
            tr(&quot;Address:&quot;), &quot;John Doe\nFreedom Street&quot;,
            &amp;ok);</para>
            <para>    if (ok &amp;&amp; !text.isEmpty())</para>
            <para>        multiLineTextLabel-&gt;setText(text);</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QInputDialog constructors.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also getInt(), getDouble(), getItem(), and getText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QInputDialog.GetItem(QtWidgets.QWidget,System.String,System.String,QtCore.QStringList,System.Int32,System.Boolean,System.Boolean@,QtCore.Qt.WindowType,QtCore.Qt.InputMethodHint)">
            <summary>
            <para>Static convenience function to let the user select an item from a
            string list.</para>
            <para>title is the text which is displayed in the title bar of the
            dialog. label is the text which is shown to the user (it should say what
            should be entered). items is the string list which is inserted into the
            combo box. current is the number of the item which should be the current
            item. inputMethodHints is the input method hints that will be used if the
            combo box is editable and an input method is active.</para>
            <para>If editable is true the user can enter their own text; otherwise,
            the user may only select one of the existing items.</para>
            <para>If ok is nonnull *a ok will be set to true if the user pressed OK
            and to false if the user pressed Cancel. The dialog's parent is parent. The
            dialog will be modal and uses the widget flags.</para>
            <para>This function returns the text of the current item, or if
            editable is true, the current text of the combo box.</para>
            <para>Use this static function like this:</para>
            <para>    QStringList items;</para>
            <para>    items &lt;&lt; tr(&quot;Spring&quot;) &lt;&lt;
            tr(&quot;Summer&quot;) &lt;&lt; tr(&quot;Fall&quot;) &lt;&lt;
            tr(&quot;Winter&quot;);</para>
            <para></para>
            <para>    bool ok;</para>
            <para>    QString item = QInputDialog::getItem(this,
            tr(&quot;QInputDialog::getItem()&quot;),</para>
            <para>                                         tr(&quot;Season:&quot;),
            items, 0, false, &amp;ok);</para>
            <para>    if (ok &amp;&amp; !item.isEmpty())</para>
            <para>        itemLabel-&gt;setText(item);</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QInputDialog constructors.</para>
            <para>See also getText(), getInt(), getDouble(), and
            getMultiLineText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QInputDialog.GetInt(QtWidgets.QWidget,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@,QtCore.Qt.WindowType)">
            <summary>
            <para>Static convenience function to get an integer input from the
            user.</para>
            <para>title is the text which is displayed in the title bar of the
            dialog. label is the text which is shown to the user (it should say what
            should be entered). value is the default integer which the spinbox will be
            set to. min and max are the minimum and maximum values the user may choose.
            step is the amount by which the values change as the user presses the arrow
            buttons to increment or decrement the value.</para>
            <para>If ok is nonnull *ok will be set to true if the user pressed OK
            and to false if the user pressed Cancel. The dialog's parent is parent. The
            dialog will be modal and uses the widget flags.</para>
            <para>On success, this function returns the integer which has been
            entered by the user; on failure, it returns the initial value.</para>
            <para>Use this static function like this:</para>
            <para>    bool ok;</para>
            <para>    int i = QInputDialog::getInt(this,
            tr(&quot;QInputDialog::getInteger()&quot;),</para>
            <para>                                 tr(&quot;Percentage:&quot;), 25,
            0, 100, 1, &amp;ok);</para>
            <para>    if (ok)</para>
            <para>
            integerLabel-&gt;setText(tr(&quot;%1%&quot;).arg(i));</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QInputDialog constructors.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also getText(), getDouble(), getItem(), and
            getMultiLineText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QInputDialog.GetDouble(QtWidgets.QWidget,System.String,System.String,System.Double,System.Double,System.Double,System.Int32,System.Boolean@,QtCore.Qt.WindowType)">
            <summary>
            <para>Static convenience function to get a floating point number from
            the user.</para>
            <para>title is the text which is displayed in the title bar of the
            dialog. label is the text which is shown to the user (it should say what
            should be entered). value is the default floating point number that the
            line edit will be set to. min and max are the minimum and maximum values
            the user may choose. decimals is the maximum number of decimal places the
            number may have.</para>
            <para>If ok is nonnull, *ok will be set to true if the user pressed OK
            and to false if the user pressed Cancel. The dialog's parent is parent. The
            dialog will be modal and uses the widget flags.</para>
            <para>This function returns the floating point number which has been
            entered by the user.</para>
            <para>Use this static function like this:</para>
            <para>    bool ok;</para>
            <para>    double d = QInputDialog::getDouble(this,
            tr(&quot;QInputDialog::getDouble()&quot;),</para>
            <para>                                       tr(&quot;Amount:&quot;),
            37.56, -10000, 10000, 2, &amp;ok);</para>
            <para>    if (ok)</para>
            <para>
            doubleLabel-&gt;setText(QString(&quot;$%1&quot;).arg(d));</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QInputDialog constructors.</para>
            <para>See also getText(), getInt(), getItem(), and
            getMultiLineText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QInputDialog.GetText(QtWidgets.QWidget,System.String,System.String,QtWidgets.QLineEdit.EchoMode,System.String)">
            <summary>
            <para>Static convenience function to get a string from the user.</para>
            <para>title is the text which is displayed in the title bar of the
            dialog. label is the text which is shown to the user (it should say what
            should be entered). text is the default text which is placed in the line
            edit. mode is the echo mode the line edit will use. inputMethodHints is the
            input method hints that will be used in the edit widget if an input method
            is active.</para>
            <para>If ok is nonnull *a ok will be set to true if the user pressed OK
            and to false if the user pressed Cancel. The dialog's parent is parent. The
            dialog will be modal and uses the specified widget flags.</para>
            <para>If the dialog is accepted, this function returns the text in the
            dialog's line edit. If the dialog is rejected, a null QString is
            returned.</para>
            <para>Use this static function like this:</para>
            <para>    bool ok;</para>
            <para>    QString text = QInputDialog::getText(this,
            tr(&quot;QInputDialog::getText()&quot;),</para>
            <para>                                         tr(&quot;User
            name:&quot;), QLineEdit::Normal,</para>
            <para>                                         QDir::home().dirName(),
            &amp;ok);</para>
            <para>    if (ok &amp;&amp; !text.isEmpty())</para>
            <para>        textLabel-&gt;setText(text);</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QInputDialog constructors.</para>
            <para>See also getInt(), getDouble(), getItem(), and
            getMultiLineText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QInputDialog.GetMultiLineText(QtWidgets.QWidget,System.String,System.String,System.String)">
            <summary>
            <para>Static convenience function to get a multiline string from the
            user.</para>
            <para>title is the text which is displayed in the title bar of the
            dialog. label is the text which is shown to the user (it should say what
            should be entered). text is the default text which is placed in the plain
            text edit. inputMethodHints is the input method hints that will be used in
            the edit widget if an input method is active.</para>
            <para>If ok is nonnull *a ok will be set to true if the user pressed OK
            and to false if the user pressed Cancel. The dialog's parent is parent. The
            dialog will be modal and uses the specified widget flags.</para>
            <para>If the dialog is accepted, this function returns the text in the
            dialog's plain text edit. If the dialog is rejected, a null QString is
            returned.</para>
            <para>Use this static function like this:</para>
            <para>    bool ok;</para>
            <para>    QString text = QInputDialog::getMultiLineText(this,
            tr(&quot;QInputDialog::getMultiLineText()&quot;),</para>
            <para>
            tr(&quot;Address:&quot;), &quot;John Doe\nFreedom Street&quot;,
            &amp;ok);</para>
            <para>    if (ok &amp;&amp; !text.isEmpty())</para>
            <para>        multiLineTextLabel-&gt;setText(text);</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QInputDialog constructors.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also getInt(), getDouble(), getItem(), and getText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QInputDialog.GetItem(QtWidgets.QWidget,System.String,System.String,QtCore.QStringList,System.Int32,System.Boolean)">
            <summary>
            <para>Static convenience function to let the user select an item from a
            string list.</para>
            <para>title is the text which is displayed in the title bar of the
            dialog. label is the text which is shown to the user (it should say what
            should be entered). items is the string list which is inserted into the
            combo box. current is the number of the item which should be the current
            item. inputMethodHints is the input method hints that will be used if the
            combo box is editable and an input method is active.</para>
            <para>If editable is true the user can enter their own text; otherwise,
            the user may only select one of the existing items.</para>
            <para>If ok is nonnull *a ok will be set to true if the user pressed OK
            and to false if the user pressed Cancel. The dialog's parent is parent. The
            dialog will be modal and uses the widget flags.</para>
            <para>This function returns the text of the current item, or if
            editable is true, the current text of the combo box.</para>
            <para>Use this static function like this:</para>
            <para>    QStringList items;</para>
            <para>    items &lt;&lt; tr(&quot;Spring&quot;) &lt;&lt;
            tr(&quot;Summer&quot;) &lt;&lt; tr(&quot;Fall&quot;) &lt;&lt;
            tr(&quot;Winter&quot;);</para>
            <para></para>
            <para>    bool ok;</para>
            <para>    QString item = QInputDialog::getItem(this,
            tr(&quot;QInputDialog::getItem()&quot;),</para>
            <para>                                         tr(&quot;Season:&quot;),
            items, 0, false, &amp;ok);</para>
            <para>    if (ok &amp;&amp; !item.isEmpty())</para>
            <para>        itemLabel-&gt;setText(item);</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QInputDialog constructors.</para>
            <para>See also getText(), getInt(), getDouble(), and
            getMultiLineText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QInputDialog.GetInt(QtWidgets.QWidget,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Static convenience function to get an integer input from the
            user.</para>
            <para>title is the text which is displayed in the title bar of the
            dialog. label is the text which is shown to the user (it should say what
            should be entered). value is the default integer which the spinbox will be
            set to. min and max are the minimum and maximum values the user may choose.
            step is the amount by which the values change as the user presses the arrow
            buttons to increment or decrement the value.</para>
            <para>If ok is nonnull *ok will be set to true if the user pressed OK
            and to false if the user pressed Cancel. The dialog's parent is parent. The
            dialog will be modal and uses the widget flags.</para>
            <para>On success, this function returns the integer which has been
            entered by the user; on failure, it returns the initial value.</para>
            <para>Use this static function like this:</para>
            <para>    bool ok;</para>
            <para>    int i = QInputDialog::getInt(this,
            tr(&quot;QInputDialog::getInteger()&quot;),</para>
            <para>                                 tr(&quot;Percentage:&quot;), 25,
            0, 100, 1, &amp;ok);</para>
            <para>    if (ok)</para>
            <para>
            integerLabel-&gt;setText(tr(&quot;%1%&quot;).arg(i));</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QInputDialog constructors.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also getText(), getDouble(), getItem(), and
            getMultiLineText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QInputDialog.GetDouble(QtWidgets.QWidget,System.String,System.String,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            <para>Static convenience function to get a floating point number from
            the user.</para>
            <para>title is the text which is displayed in the title bar of the
            dialog. label is the text which is shown to the user (it should say what
            should be entered). value is the default floating point number that the
            line edit will be set to. min and max are the minimum and maximum values
            the user may choose. decimals is the maximum number of decimal places the
            number may have.</para>
            <para>If ok is nonnull, *ok will be set to true if the user pressed OK
            and to false if the user pressed Cancel. The dialog's parent is parent. The
            dialog will be modal and uses the widget flags.</para>
            <para>This function returns the floating point number which has been
            entered by the user.</para>
            <para>Use this static function like this:</para>
            <para>    bool ok;</para>
            <para>    double d = QInputDialog::getDouble(this,
            tr(&quot;QInputDialog::getDouble()&quot;),</para>
            <para>                                       tr(&quot;Amount:&quot;),
            37.56, -10000, 10000, 2, &amp;ok);</para>
            <para>    if (ok)</para>
            <para>
            doubleLabel-&gt;setText(QString(&quot;$%1&quot;).arg(d));</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QInputDialog constructors.</para>
            <para>See also getText(), getInt(), getItem(), and
            getMultiLineText().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QInputDialog.TextValueChanged">
            <summary>
            <para>This property holds the text value for the input dialog.</para>
            <para>This property is only relevant when the input dialog is used in TextInput mode.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	textValue() const</para>
            <para> void 	setTextValue(const QString &amp; text)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textValueChanged(const QString &amp; text)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QInputDialog.TextValueSelected">
            <summary>
            <para>This signal is emitted whenever the user selects a text string by accepting the dialog; for example, by clicking the OK button. The selected string is specified by text.</para>
            <para>This signal is only relevant when the input dialog is used in TextInput mode.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QInputDialog.IntValueChanged">
            <summary>
            <para>This property holds the current integer value accepted as input.</para>
            <para>This property is only relevant when the input dialog is used in IntInput mode.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	intValue() const</para>
            <para> void 	setIntValue(int value)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	intValueChanged(int value)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QInputDialog.IntValueSelected">
            <summary>
            <para>This signal is emitted whenever the user selects a integer value by accepting the dialog; for example, by clicking the OK button. The selected value is specified by value.</para>
            <para>This signal is only relevant when the input dialog is used in IntInput mode.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QInputDialog.DoubleValueChanged">
            <summary>
            <para>This property holds the current double precision floating point value accepted as input.</para>
            <para>This property is only relevant when the input dialog is used in DoubleInput mode.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>Access functions:</para>
            <para></para>
            <para> double 	doubleValue() const</para>
            <para> void 	setDoubleValue(double value)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	doubleValueChanged(double value)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QInputDialog.DoubleValueSelected">
            <summary>
            <para>This signal is emitted whenever the user selects a double value by accepting the dialog; for example, by clicking the OK button. The selected value is specified by value.</para>
            <para>This signal is only relevant when the input dialog is used in DoubleInput mode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.inputMode">
            <summary>
            <para>This property holds the mode used for input.</para>
            <para>This property helps determine which widget is used for entering
            input into the dialog.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.LabelText">
            <summary>
            <para>This property holds the label's text which describes what needs
            to be input.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.Options">
            <summary>
            <para>This property holds the various options that affect the look and
            feel of the dialog.</para>
            <para>By default, all options are disabled.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also setOption() and testOption().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.TextValue">
            <summary>
            <para>This property holds the text value for the input dialog.</para>
            <para>This property is only relevant when the input dialog is used in
            TextInput mode.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.TextEchoMode">
            <summary>
            <para>This property holds the echo mode for the text value.</para>
            <para>This property is only relevant when the input dialog is used in
            TextInput mode.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.ComboBoxEditable">
            <summary>
            <para>This property holds whether or not the combo box used in the
            input dialog is editable.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.ComboBoxItems">
            <summary>
            <para>This property holds the items used in the combo box for the input
            dialog.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.IntValue">
            <summary>
            <para>This property holds the current integer value accepted as
            input.</para>
            <para>This property is only relevant when the input dialog is used in
            IntInput mode.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.IntMinimum">
            <summary>
            <para>This property holds the minimum integer value accepted as
            input.</para>
            <para>This property is only relevant when the input dialog is used in
            IntInput mode.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.IntMaximum">
            <summary>
            <para>This property holds the maximum integer value accepted as
            input.</para>
            <para>This property is only relevant when the input dialog is used in
            IntInput mode.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.IntStep">
            <summary>
            <para>This property holds the step by which the integer value is
            increased and decreased.</para>
            <para>This property is only relevant when the input dialog is used in
            IntInput mode.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.DoubleValue">
            <summary>
            <para>This property holds the current double precision floating point
            value accepted as input.</para>
            <para>This property is only relevant when the input dialog is used in
            DoubleInput mode.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.DoubleMinimum">
            <summary>
            <para>This property holds the minimum double precision floating point
            value accepted as input.</para>
            <para>This property is only relevant when the input dialog is used in
            DoubleInput mode.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.DoubleMaximum">
            <summary>
            <para>This property holds the maximum double precision floating point
            value accepted as input.</para>
            <para>This property is only relevant when the input dialog is used in
            DoubleInput mode.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.DoubleDecimals">
            <summary>
            <para>This property holds sets the precision of the double spinbox in
            decimals.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also QDoubleSpinBox::setDecimals().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.OkButtonText">
            <summary>
            <para>This property holds the text for the button used to accept the
            entry in the dialog.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.CancelButtonText">
            <summary>
            <para>This property holds the text for the button used to cancel the
            dialog.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.Visible">
            <summary>
            <para>This property holds whether the widget is visible.</para>
            <para>Calling setVisible(true) or show() sets the widget to visible
            status if all its parent widgets up to the window are visible. If an
            ancestor is not visible, the widget won't become visible until all its
            ancestors are shown. If its size or position has changed, Qt guarantees
            that a widget gets move and resize events just before it is shown. If the
            widget has not been resized yet, Qt will adjust the widget's size to a
            useful default using adjustSize().</para>
            <para>Calling setVisible(false) or hide() hides a widget explicitly. An
            explicitly hidden widget will never become visible, even if all its
            ancestors become visible, unless you show it.</para>
            <para>A widget receives show and hide events when its visibility status
            changes. Between a hide and a show event, there is no need to waste CPU
            cycles preparing or displaying information to the user. A video
            application, for example, might simply stop generating new frames.</para>
            <para>A widget that happens to be obscured by other windows on the
            screen is considered to be visible. The same applies to iconified windows
            and windows that exist on another virtual desktop (on platforms that
            support this concept). A widget receives spontaneous show and hide events
            when its mapping status is changed by the window system, e.g. a spontaneous
            hide event when the user minimizes the window, and a spontaneous show event
            when the window is restored again.</para>
            <para>You almost never have to reimplement the setVisible() function.
            If you need to change some settings before a widget is shown, use
            showEvent() instead. If you need to do some delayed initialization use the
            Polish event delivered to the event() function.</para>
            <para>See also show(), hide(), isHidden(), isVisibleTo(),
            isMinimized(), showEvent(), and hideEvent().</para>
            <para></para>
            <para>Reimplemented from QWidget::setVisible().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QInputDialog.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QInputDialog.InputDialogOption">
            <summary>
            <para>This enum specifies various options that affect the look and feel
            of an input dialog.</para>
            <para>This enum was introduced or modified in  Qt 4.5.</para>
            <para>The InputDialogOptions type is a typedef for
            QFlags&lt;InputDialogOption&gt;. It stores an OR combination of
            InputDialogOption values.</para>
            <para>See also options, setOption(), and testOption().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QInputDialog.InputDialogOption.NoButtons">
            <summary>Don't display OK and Cancel buttons (useful for "live dialogs").</summary>
        </member>
        <member name="F:QtWidgets.QInputDialog.InputDialogOption.UseListViewForComboBoxItems">
            <summary>Use a QListView rather than a non-editable QComboBox for displaying the items set with setComboBoxItems().</summary>
        </member>
        <member name="F:QtWidgets.QInputDialog.InputDialogOption.UsePlainTextEditForTextInput">
            <summary>Use a QPlainTextEdit for multiline text input. This value was introduced in 5.2.</summary>
        </member>
        <member name="T:QtWidgets.QInputDialog.InputMode">
            <summary>
            <para>This enum describes the different modes of input that can be
            selected for the dialog.</para>
            <para>This enum was introduced or modified in  Qt 4.5.</para>
            <para>See also inputMode.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QInputDialog.InputMode.TextInput">
            <summary>Used to input text strings.</summary>
        </member>
        <member name="F:QtWidgets.QInputDialog.InputMode.IntInput">
            <summary>Used to input integers.</summary>
        </member>
        <member name="F:QtWidgets.QInputDialog.InputMode.DoubleInput">
            <summary>Used to input floating point numbers with double precision accuracy.</summary>
        </member>
        <member name="T:QtWidgets.QMessageBox">
            <summary>
            <para>The QMessageBox class provides a modal dialog for informing the
            user or for asking the user a question and receiving an answer.</para>
            </summary>
            <remarks>
            <para>A message box displays a primary text to alert the user to a
            situation, an informative text to further explain the alert or to ask the
            user a question, and an optional detailed text to provide even more data if
            the user requests it. A message box can also display an icon and standard
            buttons for accepting a user response.</para>
            <para>Two APIs for using QMessageBox are provided, the property-based
            API, and the static functions. Calling one of the static functions is the
            simpler approach, but it is less flexible than using the property-based
            API, and the result is less informative. Using the property-based API is
            recommended.</para>
            <para></para>
            <para>The Property-based API</para>
            <para>To use the property-based API, construct an instance of
            QMessageBox, set the desired properties, and call exec() to show the
            message. The simplest configuration is to set only the message text
            property.</para>
            <para>QMessageBox msgBox;</para>
            <para>msgBox.setText(&quot;The document has been
            modified.&quot;);</para>
            <para>msgBox.exec();</para>
            <para>The user must click the OK button to dismiss the message box. The
            rest of the GUI is blocked until the message box is dismissed.</para>
            <para></para>
            <para>A better approach than just alerting the user to an event is to
            also ask the user what to do about it. Store the question in the
            informative text property, and set the standard buttons property to the set
            of buttons you want as the set of user responses. The buttons are specified
            by combining values from StandardButtons using the bitwise OR operator. The
            display order for the buttons is platform-dependent. For example, on
            Windows, Save is displayed to the left of Cancel, whereas on Mac OS, the
            order is reversed.</para>
            <para>Mark one of your standard buttons to be your default
            button.</para>
            <para>QMessageBox msgBox;</para>
            <para>msgBox.setText(&quot;The document has been
            modified.&quot;);</para>
            <para>msgBox.setInformativeText(&quot;Do you want to save your
            changes?&quot;);</para>
            <para>msgBox.setStandardButtons(QMessageBox::Save |
            QMessageBox::Discard | QMessageBox::Cancel);</para>
            <para>msgBox.setDefaultButton(QMessageBox::Save);</para>
            <para>int ret = msgBox.exec();</para>
            <para>This is the approach recommended in the Mac OS X Guidelines.
            Similar guidelines apply for the other platforms, but note the different
            ways the informative text is handled for different platforms.</para>
            <para></para>
            <para>The exec() slot returns the StandardButtons value of the button
            that was clicked.</para>
            <para>switch (ret) {</para>
            <para>  case QMessageBox::Save:</para>
            <para>      // Save was clicked</para>
            <para>      break;</para>
            <para>  case QMessageBox::Discard:</para>
            <para>      // Don't Save was clicked</para>
            <para>      break;</para>
            <para>  case QMessageBox::Cancel:</para>
            <para>      // Cancel was clicked</para>
            <para>      break;</para>
            <para>  default:</para>
            <para>      // should never be reached</para>
            <para>      break;</para>
            <para>}</para>
            <para>To give the user more information to help him answer the
            question, set the detailed text property. If the detailed text property is
            set, the Show Details... button will be shown.</para>
            <para></para>
            <para>Clicking the Show Details... button displays the detailed
            text.</para>
            <para></para>
            <para></para>
            <para>Rich Text and the Text Format Property</para>
            <para>The detailed text property is always interpreted as plain text.
            The main text and informative text properties can be either plain text or
            rich text. These strings are interpreted according to the setting of the
            text format property. The default setting is auto-text.</para>
            <para>Note that for some plain text strings containing XML
            meta-characters, the auto-text rich text detection test may fail causing
            your plain text string to be interpreted incorrectly as rich text. In these
            rare cases, use Qt::convertFromPlainText() to convert your plain text
            string to a visually equivalent rich text string, or set the text format
            property explicitly with setTextFormat().</para>
            <para></para>
            <para>Severity Levels and the Icon and Pixmap Properties</para>
            <para>QMessageBox supports four predefined message severity levels, or
            message types, which really only differ in the predefined icon they each
            show. Specify one of the four predefined message types by setting the icon
            property to one of the predefined icons. The following rules are
            guidelines:</para>
            <para></para>
            <para> 	Question	For asking a question during normal operations.</para>
            <para>	Information	For reporting information about normal
            operations.</para>
            <para>	Warning	For reporting non-critical errors.</para>
            <para>	Critical	For reporting critical errors.</para>
            <para></para>
            <para>Predefined icons are not defined by QMessageBox, but provided by
            the style. The default value is No Icon. The message boxes are otherwise
            the same for all cases. When using a standard icon, use the one recommended
            in the table, or use the one recommended by the style guidelines for your
            platform. If none of the standard icons is right for your message box, you
            can use a custom icon by setting the icon pixmap property instead of
            setting the icon property.</para>
            <para>In summary, to set an icon, use either setIcon() for one of the
            standard icons, or setIconPixmap() for a custom icon.</para>
            <para></para>
            <para>The Static Functions API</para>
            <para>Building message boxes with the static functions API, although
            convenient, is less flexible than using the property-based API, because the
            static function signatures lack parameters for setting the informative text
            and detailed text properties. One work-around for this has been to use the
            title parameter as the message box main text and the text parameter as the
            message box informative text. Because this has the obvious drawback of
            making a less readable message box, platform guidelines do not recommend
            it. The Microsoft Windows User Interface Guidelines recommend using the
            application name as the window's title, which means that if you have an
            informative text in addition to your main text, you must concatenate it to
            the text parameter.</para>
            <para>Note that the static function signatures have changed with
            respect to their button parameters, which are now used to set the standard
            buttons and the default button.</para>
            <para>Static functions are available for creating information(),
            question(), warning(), and critical() message boxes.</para>
            <para>int ret = QMessageBox::warning(this, tr(&quot;My
            Application&quot;),</para>
            <para>                               tr(&quot;The document has been
            modified.\n&quot;</para>
            <para>                                  &quot;Do you want to save your
            changes?&quot;),</para>
            <para>                               QMessageBox::Save |
            QMessageBox::Discard</para>
            <para>                               | QMessageBox::Cancel,</para>
            <para>                               QMessageBox::Save);</para>
            <para>The Standard Dialogs example shows how to use QMessageBox and the
            other built-in Qt dialogs.</para>
            <para></para>
            <para>Advanced Usage</para>
            <para>If the standard buttons are not flexible enough for your message
            box, you can use the addButton() overload that takes a text and a
            ButtonRoleto to add custom buttons. The ButtonRole is used by QMessageBox
            to determine the ordering of the buttons on screen (which varies according
            to the platform). You can test the value of clickedButton() after calling
            exec(). For example,</para>
            <para>QMessageBox msgBox;</para>
            <para>QPushButton *connectButton =
            msgBox.addButton(tr(&quot;Connect&quot;), QMessageBox::ActionRole);</para>
            <para>QPushButton *abortButton =
            msgBox.addButton(QMessageBox::Abort);</para>
            <para></para>
            <para>msgBox.exec();</para>
            <para></para>
            <para>if (msgBox.clickedButton() == connectButton) {</para>
            <para>    // connect</para>
            <para>} else if (msgBox.clickedButton() == abortButton) {</para>
            <para>    // abort</para>
            <para>}</para>
            <para></para>
            <para>Default and Escape Keys</para>
            <para>The default button (i.e., the button activated when Enter is
            pressed) can be specified using setDefaultButton(). If a default button is
            not specified, QMessageBox tries to find one based on the button roles of
            the buttons used in the message box.</para>
            <para>The escape button (the button activated when Esc is pressed) can
            be specified using setEscapeButton(). If an escape button is not specified,
            QMessageBox tries to find one using these rules:</para>
            <para></para>
            <para>If there is only one button, it is the button activated when Esc
            is pressed.</para>
            <para>If there is a Cancel button, it is the button activated when Esc
            is pressed.</para>
            <para>If there is exactly one button having either the Reject role or
            the the No role, it is the button activated when Esc is pressed.</para>
            <para></para>
            <para>When an escape button can't be determined using these rules,
            pressing Esc has no effect.</para>
            <para></para>
            <para>See also QDialogButtonBox, GUI Design Handbook: Message Box,
            Standard Dialogs Example, and Application Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QMessageBox.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a message box with no text and no buttons. parent is
            passed to the QDialog constructor.</para>
            <para>On Mac OS X, if you want your message box to appear as a
            Qt::Sheet of its parent, set the message box's window modality to
            Qt::WindowModal or use open(). Otherwise, the message box will be a
            standard dialog.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.#ctor(QtWidgets.QMessageBox.Icon,System.String,System.String,QtWidgets.QMessageBox.StandardButton,QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a message box with the given icon, title, text, and
            standard buttons. Standard or custom buttons can be added at any time using
            addButton(). The parent and f arguments are passed to the QDialog
            constructor.</para>
            <para>The message box is an application modal dialog box.</para>
            <para>On Mac OS X, if parent is not 0 and you want your message box to
            appear as a Qt::Sheet of that parent, set the message box's window modality
            to Qt::WindowModal (default). Otherwise, the message box will be a standard
            dialog.</para>
            <para>See also setWindowTitle(), setText(), setIcon(), and
            setStandardButtons().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.#ctor(System.String,System.String,QtWidgets.QMessageBox.Icon,System.Int32,System.Int32,System.Int32,QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a message box with a title, a text, an icon, and up to
            three buttons.</para>
            <para>The icon must be one of the following:</para>
            <para></para>
            <para>QMessageBox::NoIcon</para>
            <para>QMessageBox::Question</para>
            <para>QMessageBox::Information</para>
            <para>QMessageBox::Warning</para>
            <para>QMessageBox::Critical</para>
            <para></para>
            <para>Each button, button0, button1 and button2, can have one of the
            following values:</para>
            <para></para>
            <para>QMessageBox::NoButton</para>
            <para>QMessageBox::Ok</para>
            <para>QMessageBox::Cancel</para>
            <para>QMessageBox::Yes</para>
            <para>QMessageBox::No</para>
            <para>QMessageBox::Abort</para>
            <para>QMessageBox::Retry</para>
            <para>QMessageBox::Ignore</para>
            <para>QMessageBox::YesAll</para>
            <para>QMessageBox::NoAll</para>
            <para></para>
            <para>Use QMessageBox::NoButton for the later parameters to have fewer
            than three buttons in your message box. If you don't specify any buttons at
            all, QMessageBox will provide an Ok button.</para>
            <para>One of the buttons can be OR-ed with the QMessageBox::Default
            flag to make it the default button (clicked when Enter is pressed).</para>
            <para>One of the buttons can be OR-ed with the QMessageBox::Escape flag
            to make it the cancel or close button (clicked when Esc is pressed).</para>
            <para>        QMessageBox mb(&quot;Application Name&quot;,</para>
            <para>                       &quot;Hardware failure.\n\nDisk error
            detected\nDo you want to stop?&quot;,</para>
            <para>                       QMessageBox::Question,</para>
            <para>                       QMessageBox::Yes |
            QMessageBox::Default,</para>
            <para>                       QMessageBox::No |
            QMessageBox::Escape,</para>
            <para>                       QMessageBox::NoButton);</para>
            <para>        if (mb.exec() == QMessageBox::No) {</para>
            <para>            // try again</para>
            <para>The message box is an application modal dialog box.</para>
            <para>The parent and f arguments are passed to the QDialog
            constructor.</para>
            <para>See also setWindowTitle(), setText(), and setIcon().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.AddButton(QtWidgets.QAbstractButton,QtWidgets.QMessageBox.ButtonRole)">
            <summary>
            <para>Adds the given button to the message box with the specified
            role.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also removeButton(), button(), and
            setStandardButtons().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.AddButton(System.String,QtWidgets.QMessageBox.ButtonRole)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates a button with the given text, adds it to the message box
            for the specified role, and returns it.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.AddButton(QtWidgets.QMessageBox.StandardButton)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Adds a standard button to the message box if it is valid to do
            so, and returns the push button.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setStandardButtons().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.RemoveButton(QtWidgets.QAbstractButton)">
            <summary>
            <para>Removes button from the button box without deleting it.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also addButton() and setStandardButtons().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.Open(QtCore.QObject,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Opens the dialog and connects its finished() or buttonClicked()
            signal to the slot specified by receiver and member. If the slot in member
            has a pointer for its first parameter the connection is to buttonClicked(),
            otherwise the connection is to finished().</para>
            <para>The signal will be disconnected from the slot when the dialog is
            closed.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.buttonRole(QtWidgets.QAbstractButton)">
            <summary>
            <para>Returns the button role for the specified button. This function
            returns InvalidRole if button is 0 or has not been added to the message
            box.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also buttons() and addButton().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.standardButton(QtWidgets.QAbstractButton)">
            <summary>
            <para>Returns the standard button enum value corresponding to the given
            button, or NoButton if the given button isn't a standard button.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also button() and standardButtons().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.Button(QtWidgets.QMessageBox.StandardButton)">
            <summary>
            <para>Returns a pointer corresponding to the standard button which, or
            0 if the standard button doesn't exist in this message box.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also standardButtons and standardButton().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.SetDefaultButton(QtWidgets.QMessageBox.StandardButton)">
            <summary>
            <para>Sets the message box's default button to button.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also addButton() and QPushButton::setDefault().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.SetEscapeButton(QtWidgets.QMessageBox.StandardButton)">
            <summary>
            <para>Sets the buttons that gets activated when the Escape key is
            pressed to button.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also addButton() and clickedButton().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.ButtonText(System.Int32)">
            <summary>
            <para>Returns the text of the message box button button, or an empty
            string if the message box does not contain the button.</para>
            <para>Use button() and QPushButton::text() instead.</para>
            <para>See also setButtonText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.SetButtonText(System.Int32,System.String)">
            <summary>
            <para>Sets the text of the message box button button to text. Setting
            the text of a button that is not in the message box is silently
            ignored.</para>
            <para>Use addButton() instead.</para>
            <para>See also buttonText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.SetWindowTitle(System.String)">
            <summary>
            <para>This function shadows QWidget::setWindowTitle().</para>
            <para>Sets the title of the message box to title. On Mac OS X, the
            window title is ignored (as required by the Mac OS X Guidelines).</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.SetWindowModality(QtCore.Qt.WindowModality)">
            <summary>
            <para>This function shadows QWidget::setWindowModality().</para>
            <para>Sets the modality of the message box to windowModality.</para>
            <para>On Mac OS X, if the modality is set to Qt::WindowModal and the
            message box has a parent, then the message box will be a Qt::Sheet,
            otherwise the message box will be a standard dialog.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.OnCloseEvent(QtGui.QCloseEvent)">
            <summary>
            <para>Reimplemented from QWidget::closeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.Information(QtWidgets.QWidget,System.String,System.String,QtWidgets.QMessageBox.StandardButton,QtWidgets.QMessageBox.StandardButton)">
            <summary>
            <para>Opens an information message box with the given title and text in
            front of the specified parent widget.</para>
            <para>The standard buttons are added to the message box. defaultButton
            specifies the button used when Enter is pressed. defaultButton must refer
            to a button that was given in buttons. If defaultButton is
            QMessageBox::NoButton, QMessageBox chooses a suitable default
            automatically.</para>
            <para>Returns the identity of the standard button that was clicked. If
            Esc was pressed instead, the escape button is returned.</para>
            <para>The message box is an application modal dialog box.</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QMessageBox constructors.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also question(), warning(), and critical().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.Question(QtWidgets.QWidget,System.String,System.String,QtWidgets.QMessageBox.StandardButton,QtWidgets.QMessageBox.StandardButton)">
            <summary>
            <para>Opens a question message box with the given title and text in
            front of the specified parent widget.</para>
            <para>The standard buttons are added to the message box. defaultButton
            specifies the button used when Enter is pressed. defaultButton must refer
            to a button that was given in buttons. If defaultButton is
            QMessageBox::NoButton, QMessageBox chooses a suitable default
            automatically.</para>
            <para>Returns the identity of the standard button that was clicked. If
            Esc was pressed instead, the escape button is returned.</para>
            <para>The message box is an application modal dialog box.</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QMessageBox constructors.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also information(), warning(), and critical().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.Warning(QtWidgets.QWidget,System.String,System.String,QtWidgets.QMessageBox.StandardButton,QtWidgets.QMessageBox.StandardButton)">
            <summary>
            <para>Opens a warning message box with the given title and text in
            front of the specified parent widget.</para>
            <para>The standard buttons are added to the message box. defaultButton
            specifies the button used when Enter is pressed. defaultButton must refer
            to a button that was given in buttons. If defaultButton is
            QMessageBox::NoButton, QMessageBox chooses a suitable default
            automatically.</para>
            <para>Returns the identity of the standard button that was clicked. If
            Esc was pressed instead, the escape button is returned.</para>
            <para>The message box is an application modal dialog box.</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QMessageBox constructors.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also question(), information(), and critical().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.Critical(QtWidgets.QWidget,System.String,System.String,QtWidgets.QMessageBox.StandardButton,QtWidgets.QMessageBox.StandardButton)">
            <summary>
            <para>Opens a critical message box with the given title and text in
            front of the specified parent widget.</para>
            <para>The standard buttons are added to the message box. defaultButton
            specifies the button used when Enter is pressed. defaultButton must refer
            to a button that was given in buttons. If defaultButton is
            QMessageBox::NoButton, QMessageBox chooses a suitable default
            automatically.</para>
            <para>Returns the identity of the standard button that was clicked. If
            Esc was pressed instead, the escape button is returned.</para>
            <para>The message box is an application modal dialog box.</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QMessageBox constructors.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also question(), warning(), and information().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.About(QtWidgets.QWidget,System.String,System.String)">
            <summary>
            <para>Displays a simple about box with title title and text text. The
            about box's parent is parent.</para>
            <para>about() looks for a suitable icon in four locations:</para>
            <para></para>
            <para>It prefers parent-&gt;icon() if that exists.</para>
            <para>If not, it tries the top-level widget containing parent.</para>
            <para>If that fails, it tries the active window.</para>
            <para>As a last resort it uses the Information icon.</para>
            <para></para>
            <para>The about box has a single button labelled &quot;OK&quot;. On Mac
            OS X, the about box is popped up as a modeless window; on other platforms,
            it is currently application modal.</para>
            <para>See also QWidget::windowIcon() and
            QApplication::activeWindow().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.AboutQt(QtWidgets.QWidget,System.String)">
            <summary>
            <para>Displays a simple message box about Qt, with the given title and
            centered over parent (if parent is not 0). The message includes the version
            number of Qt being used by the application.</para>
            <para>This is useful for inclusion in the Help menu of an application,
            as shown in the Menus example.</para>
            <para>QApplication provides this functionality as a slot.</para>
            <para>On Mac OS X, the about box is popped up as a modeless window; on
            other platforms, it is currently application modal.</para>
            <para>See also QApplication::aboutQt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.Information(QtWidgets.QWidget,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Opens an information message box with the given title and the
            text. The dialog may have up to three buttons. Each of the buttons,
            button0, button1 and button2 may be set to one of the following
            values:</para>
            <para></para>
            <para>QMessageBox::NoButton</para>
            <para>QMessageBox::Ok</para>
            <para>QMessageBox::Cancel</para>
            <para>QMessageBox::Yes</para>
            <para>QMessageBox::No</para>
            <para>QMessageBox::Abort</para>
            <para>QMessageBox::Retry</para>
            <para>QMessageBox::Ignore</para>
            <para>QMessageBox::YesAll</para>
            <para>QMessageBox::NoAll</para>
            <para></para>
            <para>If you don't want all three buttons, set the last button, or last
            two buttons to QMessageBox::NoButton.</para>
            <para>One button can be OR-ed with QMessageBox::Default, and one button
            can be OR-ed with QMessageBox::Escape.</para>
            <para>Returns the identity (QMessageBox::Ok, or QMessageBox::No, etc.)
            of the button that was clicked.</para>
            <para>The message box is an application modal dialog box.</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QMessageBox constructors.</para>
            <para>See also question(), warning(), and critical().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.Information(QtWidgets.QWidget,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Displays an information message box with the given title and
            text, as well as one, two or three buttons. Returns the index of the button
            that was clicked (0, 1 or 2).</para>
            <para>button0Text is the text of the first button, and is optional. If
            button0Text is not supplied, &quot;OK&quot; (translated) will be used.
            button1Text is the text of the second button, and is optional. button2Text
            is the text of the third button, and is optional. defaultButtonNumber (0, 1
            or 2) is the index of the default button; pressing Return or Enter is the
            same as clicking the default button. It defaults to 0 (the first button).
            escapeButtonNumber is the index of the escape button; pressing Esc is the
            same as clicking this button. It defaults to -1; supply 0, 1 or 2 to make
            pressing Esc equivalent to clicking the relevant button.</para>
            <para>The message box is an application modal dialog box.</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QMessageBox constructors.</para>
            <para>See also question(), warning(), and critical().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.Question(QtWidgets.QWidget,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Opens a question message box with the given title and text. The
            dialog may have up to three buttons. Each of the buttons, button0, button1
            and button2 may be set to one of the following values:</para>
            <para></para>
            <para>QMessageBox::NoButton</para>
            <para>QMessageBox::Ok</para>
            <para>QMessageBox::Cancel</para>
            <para>QMessageBox::Yes</para>
            <para>QMessageBox::No</para>
            <para>QMessageBox::Abort</para>
            <para>QMessageBox::Retry</para>
            <para>QMessageBox::Ignore</para>
            <para>QMessageBox::YesAll</para>
            <para>QMessageBox::NoAll</para>
            <para></para>
            <para>If you don't want all three buttons, set the last button, or last
            two buttons to QMessageBox::NoButton.</para>
            <para>One button can be OR-ed with QMessageBox::Default, and one button
            can be OR-ed with QMessageBox::Escape.</para>
            <para>Returns the identity (QMessageBox::Yes, or QMessageBox::No, etc.)
            of the button that was clicked.</para>
            <para>The message box is an application modal dialog box.</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QMessageBox constructors.</para>
            <para>See also information(), warning(), and critical().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.Question(QtWidgets.QWidget,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Displays a question message box with the given title and text, as
            well as one, two or three buttons. Returns the index of the button that was
            clicked (0, 1 or 2).</para>
            <para>button0Text is the text of the first button, and is optional. If
            button0Text is not supplied, &quot;OK&quot; (translated) will be used.
            button1Text is the text of the second button, and is optional. button2Text
            is the text of the third button, and is optional. defaultButtonNumber (0, 1
            or 2) is the index of the default button; pressing Return or Enter is the
            same as clicking the default button. It defaults to 0 (the first button).
            escapeButtonNumber is the index of the Escape button; pressing Escape is
            the same as clicking this button. It defaults to -1; supply 0, 1 or 2 to
            make pressing Escape equivalent to clicking the relevant button.</para>
            <para>The message box is an application modal dialog box.</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QMessageBox constructors.</para>
            <para>See also information(), warning(), and critical().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.Warning(QtWidgets.QWidget,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Opens a warning message box with the given title and text. The
            dialog may have up to three buttons. Each of the button parameters,
            button0, button1 and button2 may be set to one of the following
            values:</para>
            <para></para>
            <para>QMessageBox::NoButton</para>
            <para>QMessageBox::Ok</para>
            <para>QMessageBox::Cancel</para>
            <para>QMessageBox::Yes</para>
            <para>QMessageBox::No</para>
            <para>QMessageBox::Abort</para>
            <para>QMessageBox::Retry</para>
            <para>QMessageBox::Ignore</para>
            <para>QMessageBox::YesAll</para>
            <para>QMessageBox::NoAll</para>
            <para></para>
            <para>If you don't want all three buttons, set the last button, or last
            two buttons to QMessageBox::NoButton.</para>
            <para>One button can be OR-ed with QMessageBox::Default, and one button
            can be OR-ed with QMessageBox::Escape.</para>
            <para>Returns the identity (QMessageBox::Ok or QMessageBox::No or ...)
            of the button that was clicked.</para>
            <para>The message box is an application modal dialog box.</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QMessageBox constructors.</para>
            <para>See also information(), question(), and critical().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.Warning(QtWidgets.QWidget,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Displays a warning message box with the given title and text, as
            well as one, two, or three buttons. Returns the number of the button that
            was clicked (0, 1, or 2).</para>
            <para>button0Text is the text of the first button, and is optional. If
            button0Text is not supplied, &quot;OK&quot; (translated) will be used.
            button1Text is the text of the second button, and is optional, and
            button2Text is the text of the third button, and is optional.
            defaultButtonNumber (0, 1 or 2) is the index of the default button;
            pressing Return or Enter is the same as clicking the default button. It
            defaults to 0 (the first button). escapeButtonNumber is the index of the
            Escape button; pressing Escape is the same as clicking this button. It
            defaults to -1; supply 0, 1, or 2 to make pressing Escape equivalent to
            clicking the relevant button.</para>
            <para>The message box is an application modal dialog box.</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QMessageBox constructors.</para>
            <para>See also information(), question(), and critical().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.Critical(QtWidgets.QWidget,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Opens a critical message box with the given title and text. The
            dialog may have up to three buttons. Each of the button parameters,
            button0, button1 and button2 may be set to one of the following
            values:</para>
            <para></para>
            <para>QMessageBox::NoButton</para>
            <para>QMessageBox::Ok</para>
            <para>QMessageBox::Cancel</para>
            <para>QMessageBox::Yes</para>
            <para>QMessageBox::No</para>
            <para>QMessageBox::Abort</para>
            <para>QMessageBox::Retry</para>
            <para>QMessageBox::Ignore</para>
            <para>QMessageBox::YesAll</para>
            <para>QMessageBox::NoAll</para>
            <para></para>
            <para>If you don't want all three buttons, set the last button, or last
            two buttons to QMessageBox::NoButton.</para>
            <para>One button can be OR-ed with QMessageBox::Default, and one button
            can be OR-ed with QMessageBox::Escape.</para>
            <para>Returns the identity (QMessageBox::Ok, or QMessageBox::No, etc.)
            of the button that was clicked.</para>
            <para>The message box is an application modal dialog box.</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QMessageBox constructors.</para>
            <para>See also information(), question(), and warning().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.Critical(QtWidgets.QWidget,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Displays a critical error message box with the given title and
            text, as well as one, two, or three buttons. Returns the number of the
            button that was clicked (0, 1 or 2).</para>
            <para>button0Text is the text of the first button, and is optional. If
            button0Text is not supplied, &quot;OK&quot; (translated) will be used.
            button1Text is the text of the second button, and is optional, and
            button2Text is the text of the third button, and is optional.
            defaultButtonNumber (0, 1 or 2) is the index of the default button;
            pressing Return or Enter is the same as clicking the default button. It
            defaults to 0 (the first button). escapeButtonNumber is the index of the
            Escape button; pressing Escape is the same as clicking this button. It
            defaults to -1; supply 0, 1, or 2 to make pressing Escape equivalent to
            clicking the relevant button.</para>
            <para>The message box is an application modal dialog box.</para>
            <para>Warning: Do not delete parent during the execution of the dialog.
            If you want to do this, you should create the dialog yourself using one of
            the QMessageBox constructors.</para>
            <para>See also information(), question(), and warning().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMessageBox.StandardIcon(QtWidgets.QMessageBox.Icon)">
            <summary>
            <para>Returns the pixmap used for a standard icon. This allows the
            pixmaps to be used in more complex message boxes. icon specifies the
            required icon, e.g. QMessageBox::Question, QMessageBox::Information,
            QMessageBox::Warning or QMessageBox::Critical.</para>
            <para>Call QStyle::standardIcon() with QStyle::SP_MessageBoxInformation
            etc. instead.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QMessageBox.ButtonClicked">
            <summary>
            <para>This signal is emitted whenever a button is clicked inside the QMessageBox. The button that was clicked in returned in button.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMessageBox.StandardButtons">
            <summary>
            <para>This property holds collection of standard buttons in the message
            box.</para>
            <para>This property controls which standard buttons are used by the
            message box.</para>
            <para>By default, this property contains no standard buttons.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also addButton().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMessageBox.DefaultButton">
            <summary>
            <para>Returns the button that should be the message box's default
            button. Returns 0 if no default button was set.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setDefaultButton(), addButton(), and
            QPushButton::setDefault().</para>
            <para></para>
            <para>Sets the message box's default button to button.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also defaultButton(), addButton(), and
            QPushButton::setDefault().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMessageBox.EscapeButton">
            <summary>
            <para>Returns the button that is activated when escape is
            pressed.</para>
            <para>By default, QMessageBox attempts to automatically detect an
            escape button as follows:</para>
            <para></para>
            <para>If there is only one button, it is made the escape button.</para>
            <para>If there is a Cancel button, it is made the escape button.</para>
            <para>On Mac OS X only, if there is exactly one button with the role
            QMessageBox::RejectRole, it is made the escape button.</para>
            <para></para>
            <para>When an escape button could not be automatically detected,
            pressing Esc has no effect.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setEscapeButton() and addButton().</para>
            <para></para>
            <para>Sets the button that gets activated when the Escape key is
            pressed to button.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also escapeButton(), addButton(), and clickedButton().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMessageBox.Text">
            <summary>
            <para>This property holds the message box text to be displayed.</para>
            <para>The text will be interpreted either as a plain text or as rich
            text, depending on the text format setting (QMessageBox::textFormat). The
            default setting is Qt::AutoText, i.e., the message box will try to
            auto-detect the format of the text.</para>
            <para>The default value of this property is an empty string.</para>
            <para>See also textFormat, QMessageBox::informativeText, and
            QMessageBox::detailedText.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMessageBox.icon">
            <summary>
            <para>This property holds the message box's icon.</para>
            <para>The icon of the message box can be specified with one of the
            values:</para>
            <para></para>
            <para>QMessageBox::NoIcon</para>
            <para>QMessageBox::Question</para>
            <para>QMessageBox::Information</para>
            <para>QMessageBox::Warning</para>
            <para>QMessageBox::Critical</para>
            <para></para>
            <para>The default is QMessageBox::NoIcon.</para>
            <para>The pixmap used to display the actual icon depends on the current
            GUI style. You can also set a custom pixmap for the icon by setting the
            icon pixmap property.</para>
            <para>See also iconPixmap.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMessageBox.IconPixmap">
            <summary>
            <para>This property holds the current icon.</para>
            <para>The icon currently used by the message box. Note that it's often
            hard to draw one pixmap that looks appropriate in all GUI styles; you may
            want to supply a different pixmap for each platform.</para>
            <para>By default, this property is undefined.</para>
            <para>See also icon.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMessageBox.TextFormat">
            <summary>
            <para>This property holds the format of the text displayed by the
            message box.</para>
            <para>The current text format used by the message box. See the
            Qt::TextFormat enum for an explanation of the possible options.</para>
            <para>The default format is Qt::AutoText.</para>
            <para>See also setText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMessageBox.TextInteractionFlags">
            <summary>
            <para>Specifies how the label of the message box should interact with
            user input.</para>
            <para>The default value depends on the style.</para>
            <para>This property was introduced in  Qt 5.1.</para>
            <para>See also QStyle::SH_MessageBox_TextInteractionFlags.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMessageBox.CheckBox">
            <summary>
            <para>Returns the checkbox shown on the dialog. This is 0 if no
            checkbox is set.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also setCheckBox().</para>
            <para></para>
            <para>Sets the checkbox cb on the message dialog. The message box takes
            ownership of the checkbox. The argument cb can be 0 to remove an existing
            checkbox from the message box.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also checkBox().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMessageBox.InformativeText">
            <summary>
            <para>This property holds the informative text that provides a fuller
            description for the message.</para>
            <para>Infromative text can be used to expand upon the text() to give
            more information to the user. On the Mac, this text appears in small system
            font below the text(). On other platforms, it is simply appended to the
            existing text.</para>
            <para>By default, this property contains an empty string.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also QMessageBox::text and QMessageBox::detailedText.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMessageBox.DetailedText">
            <summary>
            <para>This property holds the text to be displayed in the details
            area.</para>
            <para>The text will be interpreted as a plain text.</para>
            <para>By default, this property contains an empty string.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also QMessageBox::text and
            QMessageBox::informativeText.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMessageBox.ClickedButton">
            <summary>
            <para>Returns the button that was clicked by the user, or 0 if the user
            hit the Esc key and no escape button was set.</para>
            <para>If exec() hasn't been called yet, returns 0.</para>
            <para>Example:</para>
            <para>QMessageBox messageBox(this);</para>
            <para>QAbstractButton *disconnectButton =</para>
            <para>      messageBox.addButton(tr(&quot;Disconnect&quot;),
            QMessageBox::ActionRole);</para>
            <para>...</para>
            <para>messageBox.exec();</para>
            <para>if (messageBox.clickedButton() == disconnectButton) {</para>
            <para>    ...</para>
            <para>}</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also standardButton() and button().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QMessageBox.Icon">
            <summary>
            <para>This enum has the following values:</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.Icon.NoIcon">
            <summary>the message box does not have any icon.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.Icon.Information">
            <summary>an icon indicating that the message is nothing out of the ordinary.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.Icon.Warning">
            <summary>an icon indicating that the message is a warning, but can be dealt with.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.Icon.Critical">
            <summary>an icon indicating that the message represents a critical problem.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.Icon.Question">
            <summary>an icon indicating that the message is asking a question.</summary>
        </member>
        <member name="T:QtWidgets.QMessageBox.ButtonRole">
            <summary>
            <para>This enum describes the roles that can be used to describe
            buttons in the button box. Combinations of these roles are as flags used to
            describe different aspects of their behavior.</para>
            <para>See also StandardButton.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.ButtonRole.InvalidRole">
            <summary>The button is invalid.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.ButtonRole.AcceptRole">
            <summary>Clicking the button causes the dialog to be accepted (e.g. OK).</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.ButtonRole.RejectRole">
            <summary>Clicking the button causes the dialog to be rejected (e.g. Cancel).</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.ButtonRole.DestructiveRole">
            <summary>Clicking the button causes a destructive change (e.g. for Discarding Changes) and closes the dialog.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.ButtonRole.ActionRole">
            <summary>Clicking the button causes changes to the elements within the dialog.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.ButtonRole.HelpRole">
            <summary>The button can be clicked to request help.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.ButtonRole.YesRole">
            <summary>The button is a "Yes"-like button.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.ButtonRole.NoRole">
            <summary>The button is a "No"-like button.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.ButtonRole.ResetRole">
            <summary>The button resets the dialog's fields to default values.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.ButtonRole.ApplyRole">
            <summary>The button applies current changes.</summary>
        </member>
        <member name="T:QtWidgets.QMessageBox.StandardButton">
            <summary>
            <para>These enums describe flags for standard buttons. Each button has
            a defined ButtonRole.</para>
            <para>The following values are obsolete:</para>
            <para>This enum was introduced or modified in  Qt 4.2.</para>
            <para>The StandardButtons type is a typedef for
            QFlags&lt;StandardButton&gt;. It stores an OR combination of StandardButton
            values.</para>
            <para>See also ButtonRole and standardButtons.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.NoButton">
            <summary>An invalid button.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.Ok">
            <summary>An "OK" button defined with the AcceptRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.Save">
            <summary>A "Save" button defined with the AcceptRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.SaveAll">
            <summary>A "Save All" button defined with the AcceptRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.Open">
            <summary>An "Open" button defined with the AcceptRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.Yes">
            <summary>A "Yes" button defined with the YesRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.YesToAll">
            <summary>A "Yes to All" button defined with the YesRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.No">
            <summary>A "No" button defined with the NoRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.NoToAll">
            <summary>A "No to All" button defined with the NoRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.Abort">
            <summary>An "Abort" button defined with the RejectRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.Retry">
            <summary>A "Retry" button defined with the AcceptRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.Ignore">
            <summary>An "Ignore" button defined with the AcceptRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.Close">
            <summary>A "Close" button defined with the RejectRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.Cancel">
            <summary>A "Cancel" button defined with the RejectRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.Discard">
            <summary>A "Discard" or "Don't Save" button, depending on the platform, defined with the DestructiveRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.Help">
            <summary>A "Help" button defined with the HelpRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.Apply">
            <summary>An "Apply" button defined with the ApplyRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.Reset">
            <summary>A "Reset" button defined with the ResetRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.RestoreDefaults">
            <summary>A "Restore Defaults" button defined with the ResetRole.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.YesAll">
            <summary>Use YesToAll instead.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.NoAll">
            <summary>Use NoToAll instead.</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.Default">
            <summary>Use the defaultButton argument of information(), warning(), etc. instead, or call setDefaultButton().</summary>
        </member>
        <member name="F:QtWidgets.QMessageBox.StandardButton.Escape">
            <summary>Call setEscapeButton() instead.</summary>
        </member>
        <member name="T:QtWidgets.QProgressDialog">
            <summary>
            <para>The QProgressDialog class provides feedback on the progress of a
            slow operation.</para>
            </summary>
            <remarks>
            <para>A progress dialog is used to give the user an indication of how
            long an operation is going to take, and to demonstrate that the application
            has not frozen. It can also give the user an opportunity to abort the
            operation.</para>
            <para>A common problem with progress dialogs is that it is difficult to
            know when to use them; operations take different amounts of time on
            different hardware. QProgressDialog offers a solution to this problem: it
            estimates the time the operation will take (based on time for steps), and
            only shows itself if that estimate is beyond minimumDuration() (4 seconds
            by default).</para>
            <para>Use setMinimum() and setMaximum() or the constructor to set the
            number of &quot;steps&quot; in the operation and call setValue() as the
            operation progresses. The number of steps can be chosen arbitrarily. It can
            be the number of files copied, the number of bytes received, the number of
            iterations through the main loop of your algorithm, or some other suitable
            unit. Progress starts at the value set by setMinimum(), and the progress
            dialog shows that the operation has finished when you call setValue() with
            the value set by setMaximum() as its argument.</para>
            <para>The dialog automatically resets and hides itself at the end of
            the operation. Use setAutoReset() and setAutoClose() to change this
            behavior. Note that if you set a new maximum (using setMaximum() or
            setRange()) that equals your current value(), the dialog will not close
            regardless.</para>
            <para>There are two ways of using QProgressDialog: modal and
            modeless.</para>
            <para>Compared to a modeless QProgressDialog, a modal QProgressDialog
            is simpler to use for the programmer. Do the operation in a loop, call
            setValue() at intervals, and check for cancellation with wasCanceled(). For
            example:</para>
            <para>    QProgressDialog progress(&quot;Copying files...&quot;,
            &quot;Abort Copy&quot;, 0, numFiles, this);</para>
            <para>    progress.setWindowModality(Qt::WindowModal);</para>
            <para></para>
            <para>    for (int i = 0; i &lt; numFiles; i++) {</para>
            <para>        progress.setValue(i);</para>
            <para></para>
            <para>        if (progress.wasCanceled())</para>
            <para>            break;</para>
            <para>        //... copy one file</para>
            <para>    }</para>
            <para>    progress.setValue(numFiles);</para>
            <para>A modeless progress dialog is suitable for operations that take
            place in the background, where the user is able to interact with the
            application. Such operations are typically based on QTimer (or
            QObject::timerEvent()), QSocketNotifier, or QUrlOperator; or performed in a
            separate thread. A QProgressBar in the status bar of your main window is
            often an alternative to a modeless progress dialog.</para>
            <para>You need to have an event loop to be running, connect the
            canceled() signal to a slot that stops the operation, and call setValue()
            at intervals. For example:</para>
            <para>// Operation constructor</para>
            <para>Operation::Operation(QObject *parent)</para>
            <para>    : QObject(parent), steps(0)</para>
            <para>{</para>
            <para>    pd = new QProgressDialog(&quot;Operation in progress.&quot;,
            &quot;Cancel&quot;, 0, 100);</para>
            <para>    connect(pd, SIGNAL(canceled()), this, SLOT(cancel()));</para>
            <para>    t = new QTimer(this);</para>
            <para>    connect(t, SIGNAL(timeout()), this, SLOT(perform()));</para>
            <para>    t-&gt;start(0);</para>
            <para>}</para>
            <para></para>
            <para>void Operation::perform()</para>
            <para>{</para>
            <para>    pd-&gt;setValue(steps);</para>
            <para>    //... perform one percent of the operation</para>
            <para>    steps++;</para>
            <para>    if (steps &gt; pd-&gt;maximum())</para>
            <para>        t-&gt;stop();</para>
            <para>}</para>
            <para></para>
            <para>void Operation::cancel()</para>
            <para>{</para>
            <para>    t-&gt;stop();</para>
            <para>    //... cleanup</para>
            <para>}</para>
            <para>In both modes the progress dialog may be customized by replacing
            the child widgets with custom widgets by using setLabel(), setBar(), and
            setCancelButton(). The functions setLabelText() and setCancelButtonText()
            set the texts shown.</para>
            <para></para>
            <para></para>
            <para>See also QDialog, QProgressBar, GUI Design Handbook: Progress
            Indicator, Find Files Example, and Pixelator Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QProgressDialog.#ctor(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a progress dialog.</para>
            <para>Default settings:</para>
            <para></para>
            <para>The label text is empty.</para>
            <para>The cancel button text is (translated) &quot;Cancel&quot;.</para>
            <para>minimum is 0;</para>
            <para>maximum is 100</para>
            <para></para>
            <para>The parent argument is dialog's parent widget. The widget flags,
            f, are passed to the QDialog::QDialog() constructor.</para>
            <para>See also setLabelText(), setCancelButtonText(),
            setCancelButton(), setMinimum(), and setMaximum().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressDialog.#ctor(System.String,System.String,System.Int32,System.Int32,QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a progress dialog.</para>
            <para>The labelText is the text used to remind the user what is
            progressing.</para>
            <para>The cancelButtonText is the text to display on the cancel button.
            If QString() is passed then no cancel button is shown.</para>
            <para>The minimum and maximum is the number of steps in the operation
            for which this progress dialog shows progress. For example, if the
            operation is to examine 50 files, this value minimum value would be 0, and
            the maximum would be 50. Before examining the first file, call setValue(0).
            As each file is processed call setValue(1), setValue(2), etc., finally
            calling setValue(50) after examining the last file.</para>
            <para>The parent argument is the dialog's parent widget. The parent,
            parent, and widget flags, f, are passed to the QDialog::QDialog()
            constructor.</para>
            <para>See also setLabelText(), setLabel(), setCancelButtonText(),
            setCancelButton(), setMinimum(), and setMaximum().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressDialog.SetLabel(QtWidgets.QLabel)">
            <summary>
            <para>Sets the label to label. The progress dialog resizes to fit. The
            label becomes owned by the progress dialog and will be deleted when
            necessary, so do not pass the address of an object on the stack.</para>
            <para>See also setLabelText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressDialog.SetCancelButton(QtWidgets.QPushButton)">
            <summary>
            <para>Sets the cancel button to the push button, cancelButton. The
            progress dialog takes ownership of this button which will be deleted when
            necessary, so do not pass the address of an object that is on the stack,
            i.e. use new() to create the button. If 0 is passed then no cancel button
            will be shown.</para>
            <para>See also setCancelButtonText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressDialog.SetBar(QtWidgets.QProgressBar)">
            <summary>
            <para>Sets the progress bar widget to bar. The progress dialog resizes
            to fit. The progress dialog takes ownership of the progress bar which will
            be deleted when necessary, so do not use a progress bar allocated on the
            stack.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressDialog.WasCanceled">
            <summary>
            <para>This property holds whether the dialog was canceled.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	wasCanceled() const</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressDialog.Open(QtCore.QObject,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Opens the dialog and connects its canceled() signal to the slot
            specified by receiver and member.</para>
            <para>The signal will be disconnected from the slot when the dialog is
            closed.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressDialog.Cancel">
            <summary>
            <para>Resets the progress dialog. wasCanceled() becomes true until the
            progress dialog is reset. The progress dialog becomes hidden.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressDialog.Reset">
            <summary>
            <para>Resets the progress dialog. The progress dialog becomes hidden if
            autoClose() is true.</para>
            <para>See also setAutoClose() and setAutoReset().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressDialog.SetRange(System.Int32,System.Int32)">
            <summary>
            <para>Sets the progress dialog's minimum and maximum values to minimum
            and maximum, respectively.</para>
            <para>If maximum is smaller than minimum, minimum becomes the only
            legal value.</para>
            <para>If the current value falls outside the new range, the progress
            dialog is reset with reset().</para>
            <para>See also minimum and maximum.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressDialog.SetCancelButtonText(System.String)">
            <summary>
            <para>Sets the cancel button's text to cancelButtonText. If the text is
            set to QString() then it will cause the cancel button to be hidden and
            deleted.</para>
            <para>See also setCancelButton().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressDialog.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressDialog.OnCloseEvent(QtGui.QCloseEvent)">
            <summary>
            <para>Reimplemented from QWidget::closeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressDialog.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressDialog.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressDialog.ForceShow">
            <summary>
            <para>Shows the dialog if it is still hidden after the algorithm has
            been started and minimumDuration milliseconds have passed.</para>
            <para>See also setMinimumDuration().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QProgressDialog.Canceled">
            <summary>
            <para>This signal is emitted when the cancel button is clicked. It is connected to the cancel() slot by default.</para>
            <para>See also wasCanceled().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressDialog.AutoReset">
            <summary>
            <para>This property holds whether the progress dialog calls reset() as
            soon as value() equals maximum().</para>
            <para>The default is true.</para>
            <para>See also setAutoClose().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressDialog.AutoClose">
            <summary>
            <para>This property holds whether the dialog gets hidden by
            reset().</para>
            <para>The default is true.</para>
            <para>See also setAutoReset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressDialog.Maximum">
            <summary>
            <para>This property holds the highest value represented by the progress
            bar.</para>
            <para>The default is 100.</para>
            <para>See also minimum and setRange().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressDialog.Minimum">
            <summary>
            <para>This property holds the lowest value represented by the progress
            bar.</para>
            <para>The default is 0.</para>
            <para>See also maximum and setRange().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressDialog.Value">
            <summary>
            <para>This property holds the current amount of progress made.</para>
            <para>For the progress dialog to work as expected, you should initially
            set this property to QProgressDialog::minimum() and finally set it to
            QProgressDialog::maximum(); you can call setValue() any number of times
            in-between.</para>
            <para>Warning: If the progress dialog is modal (see
            QProgressDialog::QProgressDialog()), setValue() calls
            QApplication::processEvents(), so take care that this does not cause
            undesirable re-entrancy in your code. For example, don't use a
            QProgressDialog inside a paintEvent()!</para>
            <para>See also minimum and maximum.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressDialog.LabelText">
            <summary>
            <para>This property holds the label's text.</para>
            <para>The default text is an empty string.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressDialog.MinimumDuration">
            <summary>
            <para>This property holds the time that must pass before the dialog
            appears.</para>
            <para>If the expected duration of the task is less than the
            minimumDuration, the dialog will not appear at all. This prevents the
            dialog popping up for tasks that are quickly over. For tasks that are
            expected to exceed the minimumDuration, the dialog will pop up after the
            minimumDuration time or as soon as any progress is set.</para>
            <para>If set to 0, the dialog is always shown as soon as any progress
            is set. The default is 4000 milliseconds.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressDialog.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            <para>Returns a size that fits the contents of the progress dialog. The
            progress dialog resizes itself as required, so you should not need to call
            this yourself.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:QtWidgets.QWizard" -->
        <member name="M:QtWidgets.QWizard.#ctor(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a wizard with the given parent and window
            flags.</para>
            <para>See also parent() and windowFlags().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.AddPage(QtWidgets.QWizardPage)">
            <summary>
            <para>Adds the given page to the wizard, and returns the page's
            ID.</para>
            <para>The ID is guaranteed to be larger than any other ID in the
            QWizard so far.</para>
            <para>See also setPage(), page(), and pageAdded().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.SetPage(System.Int32,QtWidgets.QWizardPage)">
            <summary>
            <para>Adds the given page to the wizard with the given id.</para>
            <para>Note: Adding a page may influence the value of the startId
            property in case it was not set explicitly.</para>
            <para>See also addPage(), page(), and pageAdded().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.RemovePage(System.Int32)">
            <summary>
            <para>Removes the page with the given id. cleanupPage() will be called
            if necessary.</para>
            <para>Note: Removing a page may influence the value of the startId
            property.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also addPage(), setPage(), pageRemoved(), and
            startId().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.Page(System.Int32)">
            <summary>
            <para>Returns the page with the given id, or 0 if there is no such
            page.</para>
            <para>See also addPage() and setPage().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.HasVisitedPage(System.Int32)">
            <summary>
            <para>Returns true if the page history contains page id; otherwise,
            returns false.</para>
            <para>Pressing Back marks the current page as &quot;unvisited&quot;
            again.</para>
            <para>See also visitedPages().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.ValidateCurrentPage">
            <summary>
            <para>This virtual function is called by QWizard when the user clicks
            Next or Finish to perform some last-minute validation. If it returns true,
            the next page is shown (or the wizard finishes); otherwise, the current
            page stays up.</para>
            <para>The default implementation calls QWizardPage::validatePage() on
            the currentPage().</para>
            <para>When possible, it is usually better style to disable the Next or
            Finish button (by specifying mandatory fields or by reimplementing
            QWizardPage::isComplete()) than to reimplement
            validateCurrentPage().</para>
            <para>See also QWizardPage::validatePage() and currentPage().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.SetField(System.String,QtCore.QVariant)">
            <summary>
            <para>Sets the value of the field called name to value.</para>
            <para>This function can be used to set fields on any page of the
            wizard.</para>
            <para>See also QWizardPage::registerField(), QWizardPage::setField(),
            and field().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.Field(System.String)">
            <summary>
            <para>Returns the value of the field called name.</para>
            <para>This function can be used to access fields on any page of the
            wizard.</para>
            <para>See also QWizardPage::registerField(), QWizardPage::field(), and
            setField().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.SetOption(QtWidgets.QWizard.WizardOption,System.Boolean)">
            <summary>
            <para>Sets the given option to be enabled if on is true; otherwise,
            clears the given option.</para>
            <para>See also options, testOption(), and setWizardStyle().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.TestOption(QtWidgets.QWizard.WizardOption)">
            <summary>
            <para>Returns true if the given option is enabled; otherwise, returns
            false.</para>
            <para>See also options, setOption(), and setWizardStyle().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.SetButtonText(QtWidgets.QWizard.WizardButton,System.String)">
            <summary>
            <para>Sets the text on button which to be text.</para>
            <para>By default, the text on buttons depends on the wizardStyle. For
            example, on Mac OS X, the Next button is called Continue.</para>
            <para>To add extra buttons to the wizard (e.g., a Print button), one
            way is to call setButtonText() with CustomButton1, CustomButton2, or
            CustomButton3 to set their text, and make the buttons visible using the
            HaveCustomButton1, HaveCustomButton2, and/or HaveCustomButton3
            options.</para>
            <para>Button texts may also be set on a per-page basis using
            QWizardPage::setButtonText().</para>
            <para>See also buttonText(), setButton(), button(), setButtonLayout(),
            setOptions(), and QWizardPage::setButtonText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.ButtonText(QtWidgets.QWizard.WizardButton)">
            <summary>
            <para>Returns the text on button which.</para>
            <para>If a text has ben set using setButtonText(), this text is
            returned.</para>
            <para>By default, the text on buttons depends on the wizardStyle. For
            example, on Mac OS X, the Next button is called Continue.</para>
            <para>See also button(), setButton(), setButtonText(),
            QWizardPage::buttonText(), and QWizardPage::setButtonText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.SetButton(QtWidgets.QWizard.WizardButton,QtWidgets.QAbstractButton)">
            <summary>
            <para>Sets the button corresponding to role which to button.</para>
            <para>To add extra buttons to the wizard (e.g., a Print button), one
            way is to call setButton() with CustomButton1 to CustomButton3, and make
            the buttons visible using the HaveCustomButton1 to HaveCustomButton3
            options.</para>
            <para>See also button(), setButtonText(), setButtonLayout(), and
            options.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.Button(QtWidgets.QWizard.WizardButton)">
            <summary>
            <para>Returns the button corresponding to role which.</para>
            <para>See also setButton() and setButtonText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.SetPixmap(QtWidgets.QWizard.WizardPixmap,QtGui.QPixmap)">
            <summary>
            <para>Sets the pixmap for role which to pixmap.</para>
            <para>The pixmaps are used by QWizard when displaying a page. Which
            pixmaps are actually used depend on the wizard style.</para>
            <para>Pixmaps can also be set for a specific page using
            QWizardPage::setPixmap().</para>
            <para>See also pixmap(), QWizardPage::setPixmap(), and Elements of a
            Wizard Page.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.Pixmap(QtWidgets.QWizard.WizardPixmap)">
            <summary>
            <para>Returns the pixmap set for role which.</para>
            <para>By default, the only pixmap that is set is the BackgroundPixmap
            on Mac OS X.</para>
            <para>See also setPixmap(), QWizardPage::pixmap(), and Elements of a
            Wizard Page.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.SetDefaultProperty(System.String,System.String,System.String)">
            <summary>
            <para>Sets the default property for className to be property, and the
            associated change signal to be changedSignal.</para>
            <para>The default property is used when an instance of className (or of
            one of its subclasses) is passed to QWizardPage::registerField() and no
            property is specified.</para>
            <para>QWizard knows the most common Qt widgets. For these (or their
            subclasses), you don't need to specify a property or a changedSignal. The
            table below lists these widgets:</para>
            <para></para>
            <para> WidgetPropertyChange Notification Signal</para>
            <para>QAbstractButton	bool checked	toggled()</para>
            <para>QAbstractSlider	int value	valueChanged()</para>
            <para>QComboBox	int currentIndex	currentIndexChanged()</para>
            <para>QDateTimeEdit	QDateTime dateTime	dateTimeChanged()</para>
            <para>QLineEdit	QString text	textChanged()</para>
            <para>QListWidget	int currentRow	currentRowChanged()</para>
            <para>QSpinBox	int value	valueChanged()</para>
            <para></para>
            <para>See also QWizardPage::registerField().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.Back">
            <summary>
            <para>Goes back to the previous page.</para>
            <para>This is equivalent to pressing the Back button.</para>
            <para>See also next(), accept(), reject(), and restart().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.Next">
            <summary>
            <para>Advances to the next page.</para>
            <para>This is equivalent to pressing the Next or Commit button.</para>
            <para>See also nextId(), back(), accept(), reject(), and
            restart().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.Restart">
            <summary>
            <para>Restarts the wizard at the start page. This function is called
            automatically when the wizard is shown.</para>
            <para>See also startId().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.NativeEvent(QtCore.QByteArray,System.IntPtr,System.Int32@)">
            <summary>
            <para>Reimplemented from QWidget::nativeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.Done(System.Int32)">
            <summary>
            <para>Reimplemented from QDialog::done().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.InitializePage(System.Int32)">
            <summary>
            <para>This virtual function is called by QWizard to prepare page id
            just before it is shown either as a result of QWizard::restart() being
            called, or as a result of the user clicking Next. (However, if the
            QWizard::IndependentPages option is set, this function is only called the
            first time the page is shown.)</para>
            <para>By reimplementing this function, you can ensure that the page's
            fields are properly initialized based on fields from previous pages.</para>
            <para>The default implementation calls QWizardPage::initializePage() on
            page(id).</para>
            <para>See also QWizardPage::initializePage() and cleanupPage().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizard.CleanupPage(System.Int32)">
            <summary>
            <para>This virtual function is called by QWizard to clean up page id
            just before the user leaves it by clicking Back (unless the
            QWizard::IndependentPages option is set).</para>
            <para>The default implementation calls QWizardPage::cleanupPage() on
            page(id).</para>
            <para>See also QWizardPage::cleanupPage() and initializePage().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWizard.CurrentIdChanged">
            <summary>
            <para>This property holds the ID of the current page.</para>
            <para>This property cannot be set directly. To change the current page, call next(), back(), or restart().</para>
            <para>By default, this property has a value of -1, indicating that no page is currently shown.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	currentId() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	currentIdChanged(int id)</para>
            <para></para>
            <para>See also currentPage().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWizard.HelpRequested">
            <summary>
            <para>This signal is emitted when the user clicks the Help button.</para>
            <para>By default, no Help button is shown. Call setOption(HaveHelpButton, true) to have one.</para>
            <para>Example:</para>
            <para>LicenseWizard::LicenseWizard(QWidget *parent)</para>
            <para>    : QWizard(parent)</para>
            <para>{</para>
            <para>    ...</para>
            <para>    setOption(HaveHelpButton, true);</para>
            <para>    connect(this, SIGNAL(helpRequested()), this, SLOT(showHelp()));</para>
            <para>    ...</para>
            <para>}</para>
            <para></para>
            <para>void LicenseWizard::showHelp()</para>
            <para>{</para>
            <para>    static QString lastHelpMessage;</para>
            <para></para>
            <para>    QString message;</para>
            <para></para>
            <para>    switch (currentId()) {</para>
            <para>    case Page_Intro:</para>
            <para>        message = tr(&quot;The decision you make here will affect which page you &quot;</para>
            <para>                     &quot;get to see next.&quot;);</para>
            <para>        break;</para>
            <para>    ...</para>
            <para>    default:</para>
            <para>        message = tr(&quot;This help is likely not to be of any help.&quot;);</para>
            <para>    }</para>
            <para></para>
            <para>    QMessageBox::information(this, tr(&quot;License Wizard Help&quot;), message);</para>
            <para></para>
            <para>}</para>
            <para>See also customButtonClicked().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWizard.CustomButtonClicked">
            <summary>
            <para>This signal is emitted when the user clicks a custom button. which can be CustomButton1, CustomButton2, or CustomButton3.</para>
            <para>By default, no custom button is shown. Call setOption() with HaveCustomButton1, HaveCustomButton2, or HaveCustomButton3 to have one, and use setButtonText() or setButton() to configure it.</para>
            <para>See also helpRequested().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWizard.PageAdded">
            <summary>
            <para>This signal is emitted whenever a page is added to the wizard. The page's id is passed as parameter.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also addPage(), setPage(), and startId().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWizard.PageRemoved">
            <summary>
            <para>This signal is emitted whenever a page is removed from the wizard. The page's id is passed as parameter.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also removePage() and startId().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizard.StartId">
            <summary>
            <para>This property holds the ID of the first page.</para>
            <para>If this property isn't explicitly set, this property defaults to
            the lowest page ID in this wizard, or -1 if no page has been inserted
            yet.</para>
            <para>See also restart() and nextId().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizard.wizardStyle">
            <summary>
            <para>This property holds the look and feel of the wizard.</para>
            <para>By default, QWizard uses the AeroStyle on a Windows Vista system
            with alpha compositing enabled, regardless of the current widget style. If
            this is not the case, the default wizard style depends on the current
            widget style as follows: MacStyle is the default if the current widget
            style is QMacStyle, ModernStyle is the default if the current widget style
            is QWindowsStyle, and ClassicStyle is the default in all other
            cases.</para>
            <para>See also Wizard Look and Feel and options.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizard.Options">
            <summary>
            <para>This property holds the various options that affect the look and
            feel of the wizard.</para>
            <para>By default, the following options are set (depending on the
            platform):</para>
            <para></para>
            <para>Windows: HelpButtonOnRight.</para>
            <para>Mac OS X: NoDefaultButton and NoCancelButton.</para>
            <para>X11 and QWS (Qt for Embedded Linux): none.</para>
            <para></para>
            <para>See also wizardStyle.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizard.TitleFormat">
            <summary>
            <para>This property holds the text format used by page titles.</para>
            <para>The default format is Qt::AutoText.</para>
            <para>See also QWizardPage::title and subTitleFormat.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizard.SubTitleFormat">
            <summary>
            <para>This property holds the text format used by page
            subtitles.</para>
            <para>The default format is Qt::AutoText.</para>
            <para>See also QWizardPage::title and titleFormat.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizard.SideWidget">
            <summary>
            <para>Returns the widget on the left side of the wizard or 0.</para>
            <para>By default, no side widget is present.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also setSideWidget().</para>
            <para></para>
            <para>Sets the given widget to be shown on the left side of the wizard.
            For styles which use the WatermarkPixmap (ClassicStyle and ModernStyle) the
            side widget is displayed on top of the watermark, for other styles or when
            the watermark is not provided the side widget is displayed on the left side
            of the wizard.</para>
            <para>Passing 0 shows no side widget.</para>
            <para>When the widget is not 0 the wizard reparents it.</para>
            <para>Any previous side widget is hidden.</para>
            <para>You may call setSideWidget() with the same widget at different
            times.</para>
            <para>All widgets set here will be deleted by the wizard when it is
            destroyed unless you separately reparent the widget after setting some
            other side widget (or 0).</para>
            <para>By default, no side widget is present.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also sideWidget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizard.Visible">
            <summary>
            <para>This property holds whether the widget is visible.</para>
            <para>Calling setVisible(true) or show() sets the widget to visible
            status if all its parent widgets up to the window are visible. If an
            ancestor is not visible, the widget won't become visible until all its
            ancestors are shown. If its size or position has changed, Qt guarantees
            that a widget gets move and resize events just before it is shown. If the
            widget has not been resized yet, Qt will adjust the widget's size to a
            useful default using adjustSize().</para>
            <para>Calling setVisible(false) or hide() hides a widget explicitly. An
            explicitly hidden widget will never become visible, even if all its
            ancestors become visible, unless you show it.</para>
            <para>A widget receives show and hide events when its visibility status
            changes. Between a hide and a show event, there is no need to waste CPU
            cycles preparing or displaying information to the user. A video
            application, for example, might simply stop generating new frames.</para>
            <para>A widget that happens to be obscured by other windows on the
            screen is considered to be visible. The same applies to iconified windows
            and windows that exist on another virtual desktop (on platforms that
            support this concept). A widget receives spontaneous show and hide events
            when its mapping status is changed by the window system, e.g. a spontaneous
            hide event when the user minimizes the window, and a spontaneous show event
            when the window is restored again.</para>
            <para>You almost never have to reimplement the setVisible() function.
            If you need to change some settings before a widget is shown, use
            showEvent() instead. If you need to do some delayed initialization use the
            Polish event delivered to the event() function.</para>
            <para>See also show(), hide(), isHidden(), isVisibleTo(),
            isMinimized(), showEvent(), and hideEvent().</para>
            <para></para>
            <para>Reimplemented from QWidget::setVisible().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizard.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizard.CurrentPage">
            <summary>
            <para>Returns a pointer to the current page, or 0 if there is no
            current page (e.g., before the wizard is shown).</para>
            <para>This is equivalent to calling page(currentId()).</para>
            <para>See also page(), currentId(), and restart().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizard.CurrentId">
            <summary>
            <para>This property holds the ID of the current page.</para>
            <para>This property cannot be set directly. To change the current page,
            call next(), back(), or restart().</para>
            <para>By default, this property has a value of -1, indicating that no
            page is currently shown.</para>
            <para>See also currentPage().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizard.NextId">
            <summary>
            <para>This virtual function is called by QWizard to find out which page
            to show when the user clicks the Next button.</para>
            <para>The return value is the ID of the next page, or -1 if no page
            follows.</para>
            <para>The default implementation calls QWizardPage::nextId() on the
            currentPage().</para>
            <para>By reimplementing this function, you can specify a dynamic page
            order.</para>
            <para>See also QWizardPage::nextId() and currentPage().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QWizard.WizardButton">
            <summary>
            <para>This enum specifies the buttons in a wizard.</para>
            <para>The following value is only useful when calling
            setButtonLayout():</para>
            <para>See also setButton(), setButtonText(), setButtonLayout(), and
            customButtonClicked().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardButton.BackButton">
            <summary>The Back button (Go Back on Mac OS X)</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardButton.NextButton">
            <summary>The Next button (Continue on Mac OS X)</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardButton.CommitButton">
            <summary>The Commit button</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardButton.FinishButton">
            <summary>The Finish button (Done on Mac OS X)</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardButton.CancelButton">
            <summary>The Cancel button (see also NoCancelButton)</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardButton.HelpButton">
            <summary>The Help button (see also HaveHelpButton)</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardButton.CustomButton1">
            <summary>The first user-defined button (see also HaveCustomButton1)</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardButton.CustomButton2">
            <summary>The second user-defined button (see also HaveCustomButton2)</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardButton.CustomButton3">
            <summary>The third user-defined button (see also HaveCustomButton3)</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardButton.Stretch">
            <summary>A horizontal stretch in the button layout</summary>
        </member>
        <member name="T:QtWidgets.QWizard.WizardPixmap">
            <summary>
            <para>This enum specifies the pixmaps that can be associated with a
            page.</para>
            <para>See also setPixmap(), QWizardPage::setPixmap(), and Elements of a
            Wizard Page.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardPixmap.WatermarkPixmap">
            <summary>The tall pixmap on the left side of a ClassicStyle or ModernStyle page</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardPixmap.LogoPixmap">
            <summary>The small pixmap on the right side of a ClassicStyle or ModernStyle page header</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardPixmap.BannerPixmap">
            <summary>The pixmap that occupies the background of a ModernStyle page header</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardPixmap.BackgroundPixmap">
            <summary>The pixmap that occupies the background of a MacStyle wizard</summary>
        </member>
        <member name="T:QtWidgets.QWizard.WizardStyle">
            <summary>
            <para>This enum specifies the different looks supported by
            QWizard.</para>
            <para>See also setWizardStyle(), WizardOption, and Wizard Look and
            Feel.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardStyle.ClassicStyle">
            <summary>Classic Windows look</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardStyle.ModernStyle">
            <summary>Modern Windows look</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardStyle.MacStyle">
            <summary>Mac OS X look</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardStyle.AeroStyle">
            <summary>Windows Aero look</summary>
        </member>
        <member name="T:QtWidgets.QWizard.WizardOption">
            <summary>
            <para>This enum specifies various options that affect the look and feel
            of a wizard.</para>
            <para>The WizardOptions type is a typedef for
            QFlags&lt;WizardOption&gt;. It stores an OR combination of WizardOption
            values.</para>
            <para>See also setOptions(), setOption(), and testOption().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.IndependentPages">
            <summary>The pages are independent of each other (i.e., they don't derive values from each other).</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.IgnoreSubTitles">
            <summary>Don't show any subtitles, even if they are set.</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.ExtendedWatermarkPixmap">
            <summary>Extend any WatermarkPixmap all the way down to the window's edge.</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.NoDefaultButton">
            <summary>Don't make the Next or Finish button the dialog's default button.</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.NoBackButtonOnStartPage">
            <summary>Don't show the Back button on the start page.</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.NoBackButtonOnLastPage">
            <summary>Don't show the Back button on the last page.</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.DisabledBackButtonOnLastPage">
            <summary>Disable the Back button on the last page.</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.HaveNextButtonOnLastPage">
            <summary>Show the (disabled) Next button on the last page.</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.HaveFinishButtonOnEarlyPages">
            <summary>Show the (disabled) Finish button on non-final pages.</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.NoCancelButton">
            <summary>Don't show the Cancel button.</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.CancelButtonOnLeft">
            <summary>Put the Cancel button on the left of Back (rather than on the right of Finish or Next).</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.HaveHelpButton">
            <summary>Show the Help button.</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.HelpButtonOnRight">
            <summary>Put the Help button on the far right of the button layout (rather than on the far left).</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.HaveCustomButton1">
            <summary>Show the first user-defined button (CustomButton1).</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.HaveCustomButton2">
            <summary>Show the second user-defined button (CustomButton2).</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.HaveCustomButton3">
            <summary>Show the third user-defined button (CustomButton3).</summary>
        </member>
        <member name="F:QtWidgets.QWizard.WizardOption.NoCancelButtonOnLastPage">
            <summary>Don't show the Cancel button on the last page.</summary>
        </member>
        <member name="T:QtWidgets.QWizardPage">
            <summary>
            <para>The QWizardPage class is the base class for wizard pages.</para>
            </summary>
            <remarks>
            <para>QWizard represents a wizard. Each page is a QWizardPage. When you
            create your own wizards, you can use QWizardPage directly, or you can
            subclass it for more control.</para>
            <para>A page has the following attributes, which are rendered by
            QWizard: a title, a subTitle, and a set of pixmaps. See Elements of a
            Wizard Page for details. Once a page is added to the wizard (using
            QWizard::addPage() or QWizard::setPage()), wizard() returns a pointer to
            the associated QWizard object.</para>
            <para>Page provides five virtual functions that can be reimplemented to
            provide custom behavior:</para>
            <para></para>
            <para>initializePage() is called to initialize the page's contents when
            the user clicks the wizard's Next button. If you want to derive the page's
            default from what the user entered on previous pages, this is the function
            to reimplement.</para>
            <para>cleanupPage() is called to reset the page's contents when the
            user clicks the wizard's Back button.</para>
            <para>validatePage() validates the page when the user clicks Next or
            Finish. It is often used to show an error message if the user has entered
            incomplete or invalid information.</para>
            <para>nextId() returns the ID of the next page. It is useful when
            creating non-linear wizards, which allow different traversal paths based on
            the information provided by the user.</para>
            <para>isComplete() is called to determine whether the Next and/or
            Finish button should be enabled or disabled. If you reimplement
            isComplete(), also make sure that completeChanged() is emitted whenever the
            complete state changes.</para>
            <para></para>
            <para>Normally, the Next button and the Finish button of a wizard are
            mutually exclusive. If isFinalPage() returns true, Finish is available;
            otherwise, Next is available. By default, isFinalPage() is true only when
            nextId() returns -1. If you want to show Next and Final simultaneously for
            a page (letting the user perform an &quot;early finish&quot;), call
            setFinalPage(true) on that page. For wizards that support early finishes,
            you might also want to set the HaveNextButtonOnLastPage and
            HaveFinishButtonOnEarlyPages options on the wizard.</para>
            <para>In many wizards, the contents of a page may affect the default
            values of the fields of a later page. To make it easy to communicate
            between pages, QWizard supports a &quot;field&quot; mechanism that allows
            you to register a field (e.g., a QLineEdit) on a page and to access its
            value from any page. Fields are global to the entire wizard and make it
            easy for any single page to access information stored by another page,
            without having to put all the logic in QWizard or having the pages know
            explicitly about each other. Fields are registered using registerField()
            and can be accessed at any time using field() and setField().</para>
            <para></para>
            <para>See also QWizard, Class Wizard Example, and License Wizard
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QWizardPage.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a wizard page with the given parent.</para>
            <para>When the page is inserted into a wizard using QWizard::addPage()
            or QWizard::setPage(), the parent is automatically set to be the
            wizard.</para>
            <para>See also wizard().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizardPage.SetPixmap(QtWidgets.QWizard.WizardPixmap,QtGui.QPixmap)">
            <summary>
            <para>Sets the pixmap for role which to pixmap.</para>
            <para>The pixmaps are used by QWizard when displaying a page. Which
            pixmaps are actually used depend on the wizard style.</para>
            <para>Pixmaps can also be set for the entire wizard using
            QWizard::setPixmap(), in which case they apply for all pages that don't
            specify a pixmap.</para>
            <para>See also pixmap(), QWizard::setPixmap(), and Elements of a Wizard
            Page.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizardPage.Pixmap(QtWidgets.QWizard.WizardPixmap)">
            <summary>
            <para>Returns the pixmap set for role which.</para>
            <para>Pixmaps can also be set for the entire wizard using
            QWizard::setPixmap(), in which case they apply for all pages that don't
            specify a pixmap.</para>
            <para>See also setPixmap(), QWizard::pixmap(), and Elements of a Wizard
            Page.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizardPage.SetButtonText(QtWidgets.QWizard.WizardButton,System.String)">
            <summary>
            <para>Sets the text on button which to be text on this page.</para>
            <para>By default, the text on buttons depends on the
            QWizard::wizardStyle, but may be redefined for the wizard as a whole using
            QWizard::setButtonText().</para>
            <para>See also buttonText(), QWizard::setButtonText(), and
            QWizard::buttonText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizardPage.ButtonText(QtWidgets.QWizard.WizardButton)">
            <summary>
            <para>Returns the text on button which on this page.</para>
            <para>If a text has ben set using setButtonText(), this text is
            returned. Otherwise, if a text has been set using QWizard::setButtonText(),
            this text is returned.</para>
            <para>By default, the text on buttons depends on the
            QWizard::wizardStyle. For example, on Mac OS X, the Next button is called
            Continue.</para>
            <para>See also setButtonText(), QWizard::buttonText(), and
            QWizard::setButtonText().</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QtWidgets.QWizardPage.InitializePage" -->
        <member name="M:QtWidgets.QWizardPage.CleanupPage">
            <summary>
            <para>This virtual function is called by QWizard::cleanupPage() when
            the user leaves the page by clicking Back (unless the
            QWizard::IndependentPages option is set).</para>
            <para>The default implementation resets the page's fields to their
            original values (the values they had before initializePage() was
            called).</para>
            <para>See also QWizard::cleanupPage(), initializePage(), and
            QWizard::IndependentPages.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizardPage.ValidatePage">
            <summary>
            <para>This virtual function is called by QWizard::validateCurrentPage()
            when the user clicks Next or Finish to perform some last-minute validation.
            If it returns true, the next page is shown (or the wizard finishes);
            otherwise, the current page stays up.</para>
            <para>The default implementation returns true.</para>
            <para>When possible, it is usually better style to disable the Next or
            Finish button (by specifying mandatory fields or reimplementing
            isComplete()) than to reimplement validatePage().</para>
            <para>See also QWizard::validateCurrentPage() and isComplete().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWizardPage.SetField(System.String,QtCore.QVariant)">
            <summary>
            <para>Sets the value of the field called name to value.</para>
            <para>This function can be used to set fields on any page of the
            wizard. It is equivalent to calling wizard()-&gt;setField(name,
            value).</para>
            <para>See also QWizard::setField(), field(), and
            registerField().</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QtWidgets.QWizardPage.Field(System.String)" -->
        <member name="M:QtWidgets.QWizardPage.RegisterField(System.String,QtWidgets.QWidget,System.String,System.String)">
            <summary>
            <para>Creates a field called name associated with the given property of
            the given widget. From then on, that property becomes accessible using
            field() and setField().</para>
            <para>Fields are global to the entire wizard and make it easy for any
            single page to access information stored by another page, without having to
            put all the logic in QWizard or having the pages know explicitly about each
            other.</para>
            <para>If name ends with an asterisk (*), the field is a mandatory
            field. When a page has mandatory fields, the Next and/or Finish buttons are
            enabled only when all mandatory fields are filled. This requires a
            changedSignal to be specified, to tell QWizard to recheck the value stored
            by the mandatory field.</para>
            <para>QWizard knows the most common Qt widgets. For these (or their
            subclasses), you don't need to specify a property or a changedSignal. The
            table below lists these widgets:</para>
            <para></para>
            <para> WidgetPropertyChange Notification Signal</para>
            <para>QAbstractButton	bool checked	toggled()</para>
            <para>QAbstractSlider	int value	valueChanged()</para>
            <para>QComboBox	int currentIndex	currentIndexChanged()</para>
            <para>QDateTimeEdit	QDateTime dateTime	dateTimeChanged()</para>
            <para>QLineEdit	QString text	textChanged()</para>
            <para>QListWidget	int currentRow	currentRowChanged()</para>
            <para>QSpinBox	int value	valueChanged()</para>
            <para></para>
            <para>You can use QWizard::setDefaultProperty() to add entries to this
            table or to override existing entries.</para>
            <para>To consider a field &quot;filled&quot;, QWizard simply checks
            that their current value doesn't equal their original value (the value they
            had before initializePage() was called). For QLineEdit, it also checks that
            hasAcceptableInput() returns true, to honor any validator or mask.</para>
            <para>QWizard's mandatory field mechanism is provided for convenience.
            It can be bypassed by reimplementing QWizardPage::isComplete().</para>
            <para>See also field(), setField(), and
            QWizard::setDefaultProperty().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QWizardPage.CompleteChanged">
            <summary>
            <para>This signal is emitted whenever the complete state of the page (i.e., the value of isComplete()) changes.</para>
            <para>If you reimplement isComplete(), make sure to emit completeChanged() whenever the value of isComplete() changes, to ensure that QWizard updates the enabled or disabled state of its buttons.</para>
            <para>See also isComplete().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizardPage.Title">
            <summary>
            <para>This property holds the title of the page.</para>
            <para>The title is shown by the QWizard, above the actual page. All
            pages should have a title.</para>
            <para>The title may be plain text or HTML, depending on the value of
            the QWizard::titleFormat property.</para>
            <para>By default, this property contains an empty string.</para>
            <para>See also subTitle and Elements of a Wizard Page.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizardPage.SubTitle">
            <summary>
            <para>This property holds the subtitle of the page.</para>
            <para>The subtitle is shown by the QWizard, between the title and the
            actual page. Subtitles are optional. In ClassicStyle and ModernStyle, using
            subtitles is necessary to make the header appear. In MacStyle, the subtitle
            is shown as a text label just above the actual page.</para>
            <para>The subtitle may be plain text or HTML, depending on the value of
            the QWizard::subTitleFormat property.</para>
            <para>By default, this property contains an empty string.</para>
            <para>See also title, QWizard::IgnoreSubTitles, and Elements of a
            Wizard Page.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizardPage.FinalPage">
            <summary>
            <para>This function is called by QWizard to determine whether the
            Finish button should be shown for this page or not.</para>
            <para>By default, it returns true if there is no next page (i.e.,
            nextId() returns -1); otherwise, it returns false.</para>
            <para>By explicitly calling setFinalPage(true), you can let the user
            perform an &quot;early finish&quot;.</para>
            <para>See also isComplete() and
            QWizard::HaveFinishButtonOnEarlyPages.</para>
            <para></para>
            <para>Explicitly sets this page to be final if finalPage is
            true.</para>
            <para>After calling setFinalPage(true), isFinalPage() returns true and
            the Finish button is visible (and enabled if isComplete() returns
            true).</para>
            <para>After calling setFinalPage(false), isFinalPage() returns true if
            nextId() returns -1; otherwise, it returns false.</para>
            <para>See also isFinalPage(), isComplete(), and
            QWizard::HaveFinishButtonOnEarlyPages.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizardPage.CommitPage">
            <summary>
            <para>Returns true if this page is a commit page; otherwise returns
            false.</para>
            <para>See also setCommitPage().</para>
            <para></para>
            <para>Sets this page to be a commit page if commitPage is true;
            otherwise, sets it to be a normal page.</para>
            <para>A commit page is a page that represents an action which cannot be
            undone by clicking Back or Cancel.</para>
            <para>A Commit button replaces the Next button on a commit page.
            Clicking this button simply calls QWizard::next() just like clicking Next
            does.</para>
            <para>A page entered directly from a commit page has its Back button
            disabled.</para>
            <para>See also isCommitPage().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizardPage.IsComplete">
            <summary>
            <para>This virtual function is called by QWizard to determine whether
            the Next or Finish button should be enabled or disabled.</para>
            <para>The default implementation returns true if all mandatory fields
            are filled; otherwise, it returns false.</para>
            <para>If you reimplement this function, make sure to emit
            completeChanged(), from the rest of your implementation, whenever the value
            of isComplete() changes. This ensures that QWizard updates the enabled or
            disabled state of its buttons. An example of the reimplementation is
            available here.</para>
            <para>See also completeChanged() and isFinalPage().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizardPage.NextId">
            <summary>
            <para>This virtual function is called by QWizard::nextId() to find out
            which page to show when the user clicks the Next button.</para>
            <para>The return value is the ID of the next page, or -1 if no page
            follows.</para>
            <para>By default, this function returns the lowest ID greater than the
            ID of the current page, or -1 if there is no such ID.</para>
            <para>By reimplementing this function, you can specify a dynamic page
            order. For example:</para>
            <para>int IntroPage::nextId() const</para>
            <para>{</para>
            <para>    if (evaluateRadioButton-&gt;isChecked()) {</para>
            <para>        return LicenseWizard::Page_Evaluate;</para>
            <para>    } else {</para>
            <para>        return LicenseWizard::Page_Register;</para>
            <para>    }</para>
            <para>}</para>
            <para>See also QWizard::nextId().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWizardPage.Wizard">
            <summary>
            <para>Returns the wizard associated with this page, or 0 if this page
            hasn't been inserted into a QWizard yet.</para>
            <para>See also QWizard::addPage() and QWizard::setPage().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsEffect">
            <summary>
            <para>The QGraphicsEffect class is the base class for all graphics
            effects.</para>
            </summary>
            <remarks>
            <para>Effects alter the appearance of elements by hooking into the
            rendering pipeline and operating between the source (e.g., a
            QGraphicsPixmapItem) and the destination device (e.g., QGraphicsView's
            viewport). Effects can be disabled by calling setEnabled(false). If effects
            are disabled, the source is rendered directly.</para>
            <para>To add a visual effect to a QGraphicsItem, for example, you can
            use one of the standard effects, or alternately, create your own effect by
            creating a subclass of QGraphicsEffect. The effect can then be installed on
            the item using QGraphicsItem::setGraphicsEffect().</para>
            <para>Qt provides the following standard effects:</para>
            <para></para>
            <para>QGraphicsBlurEffect - blurs the item by a given radius</para>
            <para>QGraphicsDropShadowEffect - renders a dropshadow behind the
            item</para>
            <para>QGraphicsColorizeEffect - renders the item in shades of any given
            color</para>
            <para>QGraphicsOpacityEffect - renders the item with an opacity</para>
            <para></para>
            <para></para>
            <para> </para>
            <para>	</para>
            <para>	</para>
            <para></para>
            <para></para>
            <para>For more information on how to use each effect, refer to the
            specific effect's documentation.</para>
            <para>To create your own custom effect, create a subclass of
            QGraphicsEffect (or any other existing effects) and reimplement the virtual
            function draw(). This function is called whenever the effect needs to
            redraw. The draw() function takes the painter with which to draw as an
            argument. For more information, refer to the documenation for draw(). In
            the draw() function you can call sourcePixmap() to get a pixmap of the
            graphics effect source which you can then process.</para>
            <para>If your effect changes, use update() to request for a redraw. If
            your custom effect changes the bounding rectangle of the source, e.g., a
            radial glow effect may need to apply an extra margin, you can reimplement
            the virtual boundingRectFor() function, and call updateBoundingRect() to
            notify the framework whenever this rectangle changes. The virtual
            sourceChanged() function is called to notify the effects that the source
            has changed in some way - e.g., if the source is a QGraphicsRectItem and
            its rectangle parameters have changed.</para>
            <para></para>
            <para>See also QGraphicsItem::setGraphicsEffect() and
            QWidget::setGraphicsEffect().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsEffect.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QGraphicsEffect instance having the specified
            parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsEffect.BoundingRectFor(QtCore.QRectF)">
            <summary>
            <para>Returns the effective bounding rectangle for this effect, given
            the provided rect in the device coordinates. When writing you own custom
            effect, you must call updateBoundingRect() whenever any parameters are
            changed that may cause this this function to return a different
            value.</para>
            <para>See also sourceBoundingRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsEffect.Update">
            <summary>
            <para>Schedules a redraw of the effect. Call this function whenever the
            effect needs to be redrawn. This function does not trigger a redraw of the
            source.</para>
            <para>See also updateBoundingRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsEffect.Draw(QtGui.QPainter)">
            <summary>
            <para>This pure virtual function draws the effect and is called
            whenever the source needs to be drawn.</para>
            <para>Reimplement this function in a QGraphicsEffect subclass to
            provide the effect's drawing implementation, using painter.</para>
            <para>For example:</para>
            <para>MyGraphicsEffect::draw(QPainter *painter)</para>
            <para>{</para>
            <para>    ...</para>
            <para>    QPoint offset;</para>
            <para>    if (sourceIsPixmap()) {</para>
            <para>        // No point in drawing in device coordinates (pixmap will
            be scaled anyways).</para>
            <para>        const QPixmap pixmap =
            sourcePixmap(Qt::LogicalCoordinates, &amp;offset);</para>
            <para>        ...</para>
            <para>        painter-&gt;drawPixmap(offset, pixmap);</para>
            <para>    } else {</para>
            <para>        // Draw pixmap in device coordinates to avoid pixmap
            scaling;</para>
            <para>        const QPixmap pixmap =
            sourcePixmap(Qt::DeviceCoordinates, &amp;offset);</para>
            <para>        painter-&gt;setWorldTransform(QTransform());</para>
            <para>        ...</para>
            <para>        painter-&gt;drawPixmap(offset, pixmap);</para>
            <para>    }</para>
            <para>    ...</para>
            <para>}</para>
            <para>This function should not be called explicitly by the user, since
            it is meant for reimplementation purposes only.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsEffect.SourceChanged(QtWidgets.QGraphicsEffect.ChangeFlag)">
            <summary>
            <para>This virtual function is called by QGraphicsEffect to notify the
            effect that the source has changed. If the effect applies any cache, then
            this cache must be purged in order to reflect the new appearance of the
            source.</para>
            <para>The flags describes what has changed.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsEffect.UpdateBoundingRect">
            <summary>
            <para>This function notifies the effect framework when the effect's
            bounding rectangle has changed. As a custom effect author, you must call
            this function whenever you change any parameters that will cause the
            virtual boundingRectFor() function to return a different value.</para>
            <para>This function will call update() if this is necessary.</para>
            <para>See also boundingRectFor(), boundingRect(), and
            sourceBoundingRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsEffect.SourceBoundingRect(QtCore.Qt.CoordinateSystem)">
            <summary>
            <para>Returns the bounding rectangle of the source mapped to the given
            system.</para>
            <para>Calling this function with Qt::DeviceCoordinates outside of
            QGraphicsEffect::draw() will give undefined results, as there is no device
            context available.</para>
            <para>See also draw().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsEffect.DrawSource(QtGui.QPainter)">
            <summary>
            <para>Draws the source directly using the given painter.</para>
            <para>This function should only be called from
            QGraphicsEffect::draw().</para>
            <para>For example:</para>
            <para>MyGraphicsOpacityEffect::draw(QPainter *painter)</para>
            <para>{</para>
            <para>    // Fully opaque; draw directly without going through a
            pixmap.</para>
            <para>    if (qFuzzyCompare(m_opacity, 1)) {</para>
            <para>        drawSource(painter);</para>
            <para>        return;</para>
            <para>    }</para>
            <para>    ...</para>
            <para>}</para>
            <para>See also QGraphicsEffect::draw().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsEffect.SourcePixmap(QtCore.Qt.CoordinateSystem,QtCore.QPoint,QtWidgets.QGraphicsEffect.PixmapPadMode)">
            <summary>
            <para>Returns a pixmap with the source painted into it.</para>
            <para>The system specifies which coordinate system to be used for the
            source. The optional offset parameter returns the offset where the pixmap
            should be painted at using the current painter. For control on how the
            pixmap is padded use the mode parameter.</para>
            <para>The returned pixmap is clipped to the current painter's device
            rectangle when system is Qt::DeviceCoordinates.</para>
            <para>Calling this function with Qt::DeviceCoordinates outside of
            QGraphicsEffect::draw() will give undefined results, as there is no device
            context available.</para>
            <para>See also draw() and boundingRect().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsEffect.EnabledChanged">
            <summary>
            <para>This property holds whether the effect is enabled or not.</para>
            <para>If an effect is disabled, the source will be rendered with as normal, with no interference from the effect. If the effect is enabled, the source will be rendered with the effect applied.</para>
            <para>This property is enabled by default.</para>
            <para>Using this property, you can disable certain effects on slow platforms, in order to ensure that the user interface is responsive.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isEnabled() const</para>
            <para> void 	setEnabled(bool enable)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	enabledChanged(bool enabled)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsEffect.Enabled">
            <summary>
            <para>This property holds whether the effect is enabled or not.</para>
            <para>If an effect is disabled, the source will be rendered with as
            normal, with no interference from the effect. If the effect is enabled, the
            source will be rendered with the effect applied.</para>
            <para>This property is enabled by default.</para>
            <para>Using this property, you can disable certain effects on slow
            platforms, in order to ensure that the user interface is responsive.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsEffect.BoundingRect">
            <summary>
            <para>Returns the effective bounding rectangle for this effect, i.e.,
            the bounding rectangle of the source in device coordinates, adjusted by any
            margins applied by the effect itself.</para>
            <para>See also boundingRectFor() and updateBoundingRect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsEffect.SourceIsPixmap">
            <summary>
            <para>Returns true if the source effectively is a pixmap, e.g., a
            QGraphicsPixmapItem.</para>
            <para>This function is useful for optimization purposes. For instance,
            there's no point in drawing the source in device coordinates to avoid
            pixmap scaling if this function returns true - the source pixmap will be
            scaled anyways.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsEffect.ChangeFlag">
            <summary>
            <para>This enum describes what has changed in
            QGraphicsEffectSource.</para>
            <para>The ChangeFlags type is a typedef for QFlags&lt;ChangeFlag&gt;.
            It stores an OR combination of ChangeFlag values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGraphicsEffect.ChangeFlag.SourceAttached">
            <summary>The effect is installed on a source.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsEffect.ChangeFlag.SourceDetached">
            <summary>The effect is uninstalled on a source.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsEffect.ChangeFlag.SourceBoundingRectChanged">
            <summary>The bounding rect of the source has changed.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsEffect.ChangeFlag.SourceInvalidated">
            <summary>The visual appearance of the source has changed.</summary>
        </member>
        <member name="T:QtWidgets.QGraphicsEffect.PixmapPadMode">
            <summary>
            <para>This enum describes how the pixmap returned from sourcePixmap
            should be padded.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGraphicsEffect.PixmapPadMode.NoPad">
            <summary>The pixmap should not receive any additional padding.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsEffect.PixmapPadMode.PadToTransparentBorder">
            <summary>The pixmap should be padded to ensure it has a completely transparent border.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsEffect.PixmapPadMode.PadToEffectiveBoundingRect">
            <summary>The pixmap should be padded to match the effective bounding rectangle of the effect.</summary>
        </member>
        <member name="T:QtWidgets.QGraphicsColorizeEffect">
            <summary>
            <para>The QGraphicsColorizeEffect class provides a colorize
            effect.</para>
            </summary>
            <remarks>
            <para>A colorize effect renders the source with a tint of its color().
            The color can be modified using the setColor() function.</para>
            <para>By default, the color is light blue (QColor(0, 0, 192)).</para>
            <para></para>
            <para></para>
            <para>See also QGraphicsDropShadowEffect, QGraphicsBlurEffect, and
            QGraphicsOpacityEffect.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsColorizeEffect.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QGraphicsColorizeEffect instance. The parent
            parameter is passed to QGraphicsEffect's constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsColorizeEffect.Draw(QtGui.QPainter)">
            <summary>
            <para>Reimplemented from QGraphicsEffect::draw().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsColorizeEffect.ColorChanged">
            <summary>
            <para>This property holds the color of the effect.</para>
            <para>By default, the color is light blue (QColor(0, 0, 192)).</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	color() const</para>
            <para> void 	setColor(const QColor &amp; c)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	colorChanged(const QColor &amp; color)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsColorizeEffect.StrengthChanged">
            <summary>
            <para>This property holds the strength of the effect.</para>
            <para>By default, the strength is 1.0. A strength 0.0 equals to no effect, while 1.0 means full colorization.</para>
            <para>Access functions:</para>
            <para></para>
            <para> qreal 	strength() const</para>
            <para> void 	setStrength(qreal strength)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	strengthChanged(qreal strength)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsColorizeEffect.Color">
            <summary>
            <para>This property holds the color of the effect.</para>
            <para>By default, the color is light blue (QColor(0, 0, 192)).</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsColorizeEffect.Strength">
            <summary>
            <para>This property holds the strength of the effect.</para>
            <para>By default, the strength is 1.0. A strength 0.0 equals to no
            effect, while 1.0 means full colorization.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsBlurEffect">
            <summary>
            <para>The QGraphicsBlurEffect class provides a blur effect.</para>
            </summary>
            <remarks>
            <para>A blur effect blurs the source. This effect is useful for
            reducing details, such as when the source loses focus and you want to draw
            attention to other elements. The level of detail can be modified using the
            setBlurRadius() function. Use setBlurHints() to choose the blur
            hints.</para>
            <para>By default, the blur radius is 5 pixels. The blur radius is
            specified in device coordinates.</para>
            <para></para>
            <para></para>
            <para>See also QGraphicsDropShadowEffect, QGraphicsColorizeEffect, and
            QGraphicsOpacityEffect.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsBlurEffect.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QGraphicsBlurEffect instance. The parent
            parameter is passed to QGraphicsEffect's constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsBlurEffect.BoundingRectFor(QtCore.QRectF)">
            <summary>
            <para>Reimplemented from QGraphicsEffect::boundingRectFor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsBlurEffect.Draw(QtGui.QPainter)">
            <summary>
            <para>Reimplemented from QGraphicsEffect::draw().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsBlurEffect.BlurRadiusChanged">
            <summary>
            <para>This property holds the blur radius of the effect.</para>
            <para>Using a smaller radius results in a sharper appearance, whereas a bigger radius results in a more blurred appearance.</para>
            <para>By default, the blur radius is 5 pixels.</para>
            <para>The radius is given in device coordinates, meaning it is unaffected by scale.</para>
            <para>Access functions:</para>
            <para></para>
            <para> qreal 	blurRadius() const</para>
            <para> void 	setBlurRadius(qreal blurRadius)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	blurRadiusChanged(qreal radius)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsBlurEffect.BlurHintsChanged">
            <summary>
            <para>This property holds the blur hint of the effect.</para>
            <para>Use the PerformanceHint hint to say that you want a faster blur, the QualityHint hint to say that you prefer a higher quality blur, or the AnimationHint when you want to animate the blur radius.</para>
            <para>By default, the blur hint is PerformanceHint.</para>
            <para>Access functions:</para>
            <para></para>
            <para> BlurHints 	blurHints() const</para>
            <para> void 	setBlurHints(BlurHints hints)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	blurHintsChanged(BlurHints hints)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsBlurEffect.BlurRadius">
            <summary>
            <para>This property holds the blur radius of the effect.</para>
            <para>Using a smaller radius results in a sharper appearance, whereas a
            bigger radius results in a more blurred appearance.</para>
            <para>By default, the blur radius is 5 pixels.</para>
            <para>The radius is given in device coordinates, meaning it is
            unaffected by scale.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsBlurEffect.BlurHints">
            <summary>
            <para>This property holds the blur hint of the effect.</para>
            <para>Use the PerformanceHint hint to say that you want a faster blur,
            the QualityHint hint to say that you prefer a higher quality blur, or the
            AnimationHint when you want to animate the blur radius.</para>
            <para>By default, the blur hint is PerformanceHint.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsBlurEffect.BlurHint">
            <summary>
            <para>This enum describes the possible hints that can be used to
            control how blur effects are applied. The hints might not have an effect in
            all the paint engines.</para>
            <para>This enum was introduced or modified in  Qt 4.6.</para>
            <para>The BlurHints type is a typedef for QFlags&lt;BlurHint&gt;. It
            stores an OR combination of BlurHint values.</para>
            <para>See also blurHints() and setBlurHints().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGraphicsBlurEffect.BlurHint.PerformanceHint">
            <summary>Indicates that rendering performance is the most important factor, at the potential cost of lower quality.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsBlurEffect.BlurHint.QualityHint">
            <summary>Indicates that rendering quality is the most important factor, at the potential cost of lower performance.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsBlurEffect.BlurHint.AnimationHint">
            <summary>Indicates that the blur radius is going to be animated, hinting that the implementation can keep a cache of blurred verisons of the source. Do not use this hint if the source is going to be dynamically changing.</summary>
        </member>
        <member name="T:QtWidgets.QGraphicsDropShadowEffect">
            <summary>
            <para>The QGraphicsDropShadowEffect class provides a drop shadow
            effect.</para>
            </summary>
            <remarks>
            <para>A drop shadow effect renders the source with a drop shadow. The
            color of the drop shadow can be modified using the setColor() function. The
            drop shadow offset can be modified using the setOffset() function and the
            blur radius of the drop shadow can be changed with the setBlurRadius()
            function.</para>
            <para>By default, the drop shadow is a semi-transparent dark gray
            (QColor(63, 63, 63, 180)) shadow, blurred with a radius of 1 at an offset
            of 8 pixels towards the lower right. The drop shadow offset is specified in
            device coordinates.</para>
            <para></para>
            <para></para>
            <para>See also QGraphicsBlurEffect, QGraphicsColorizeEffect, and
            QGraphicsOpacityEffect.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsDropShadowEffect.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QGraphicsDropShadowEffect instance. The parent
            parameter is passed to QGraphicsEffect's constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsDropShadowEffect.BoundingRectFor(QtCore.QRectF)">
            <summary>
            <para>Reimplemented from QGraphicsEffect::boundingRectFor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsDropShadowEffect.SetOffset(System.Double,System.Double)">
            <summary>
            <para>This property holds the shadow offset in pixels.</para>
            <para>By default, the offset is 8 pixels towards the lower
            right.</para>
            <para>The offset is given in device coordinates, which means it is
            unaffected by scale.</para>
            <para>See also xOffset(), yOffset(), blurRadius(), and color().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsDropShadowEffect.SetOffset(System.Double)">
            <summary>
            <para>This property holds the shadow offset in pixels.</para>
            <para>By default, the offset is 8 pixels towards the lower
            right.</para>
            <para>The offset is given in device coordinates, which means it is
            unaffected by scale.</para>
            <para>See also xOffset(), yOffset(), blurRadius(), and color().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsDropShadowEffect.Draw(QtGui.QPainter)">
            <summary>
            <para>Reimplemented from QGraphicsEffect::draw().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsDropShadowEffect.OffsetChanged">
            <summary>
            <para>This property holds the shadow offset in pixels.</para>
            <para>By default, the offset is 8 pixels towards the lower right.</para>
            <para>The offset is given in device coordinates, which means it is unaffected by scale.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QPointF 	offset() const</para>
            <para> void 	setOffset(const QPointF &amp; ofs)</para>
            <para> void 	setOffset(qreal dx, qreal dy)</para>
            <para> void 	setOffset(qreal d)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	offsetChanged(const QPointF &amp; offset)</para>
            <para></para>
            <para>See also xOffset(), yOffset(), blurRadius(), and color().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsDropShadowEffect.BlurRadiusChanged">
            <summary>
            <para>This property holds the blur radius in pixels of the drop shadow.</para>
            <para>Using a smaller radius results in a sharper shadow, whereas using a bigger radius results in a more blurred shadow.</para>
            <para>By default, the blur radius is 1 pixel.</para>
            <para>Access functions:</para>
            <para></para>
            <para> qreal 	blurRadius() const</para>
            <para> void 	setBlurRadius(qreal blurRadius)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	blurRadiusChanged(qreal blurRadius)</para>
            <para></para>
            <para>See also color() and offset().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsDropShadowEffect.ColorChanged">
            <summary>
            <para>This property holds the color of the drop shadow.</para>
            <para>By default, the drop color is a semi-transparent dark gray (QColor(63, 63, 63, 180)).</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	color() const</para>
            <para> void 	setColor(const QColor &amp; color)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	colorChanged(const QColor &amp; color)</para>
            <para></para>
            <para>See also offset() and blurRadius().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsDropShadowEffect.Offset">
            <summary>
            <para>This property holds the shadow offset in pixels.</para>
            <para>By default, the offset is 8 pixels towards the lower
            right.</para>
            <para>The offset is given in device coordinates, which means it is
            unaffected by scale.</para>
            <para>See also xOffset(), yOffset(), blurRadius(), and color().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsDropShadowEffect.XOffset">
            <summary>
            <para>This property holds the horizontal shadow offset in
            pixels.</para>
            <para>By default, the horizontal shadow offset is 8 pixels.</para>
            <para>See also yOffset() and offset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsDropShadowEffect.YOffset">
            <summary>
            <para>This property holds the vertical shadow offset in pixels.</para>
            <para>By default, the vertical shadow offset is 8 pixels.</para>
            <para>See also xOffset() and offset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsDropShadowEffect.BlurRadius">
            <summary>
            <para>This property holds the blur radius in pixels of the drop
            shadow.</para>
            <para>Using a smaller radius results in a sharper shadow, whereas using
            a bigger radius results in a more blurred shadow.</para>
            <para>By default, the blur radius is 1 pixel.</para>
            <para>See also color() and offset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsDropShadowEffect.Color">
            <summary>
            <para>This property holds the color of the drop shadow.</para>
            <para>By default, the drop color is a semi-transparent dark gray
            (QColor(63, 63, 63, 180)).</para>
            <para>See also offset() and blurRadius().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsOpacityEffect">
            <summary>
            <para>The QGraphicsOpacityEffect class provides an opacity
            effect.</para>
            </summary>
            <remarks>
            <para>An opacity effect renders the source with an opacity. This effect
            is useful for making the source semi-transparent, similar to a
            fade-in/fade-out sequence. The opacity can be modified using the
            setOpacity() function.</para>
            <para>By default, the opacity is 0.7.</para>
            <para></para>
            <para></para>
            <para>See also QGraphicsDropShadowEffect, QGraphicsBlurEffect, and
            QGraphicsColorizeEffect.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsOpacityEffect.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QGraphicsOpacityEffect instance. The parent
            parameter is passed to QGraphicsEffect's constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsOpacityEffect.Draw(QtGui.QPainter)">
            <summary>
            <para>Reimplemented from QGraphicsEffect::draw().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsOpacityEffect.OpacityChanged">
            <summary>
            <para>This property holds the opacity of the effect.</para>
            <para>The value should be in the range of 0.0 to 1.0, where 0.0 is fully transparent and 1.0 is fully opaque.</para>
            <para>By default, the opacity is 0.7.</para>
            <para>Access functions:</para>
            <para></para>
            <para> qreal 	opacity() const</para>
            <para> void 	setOpacity(qreal opacity)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	opacityChanged(qreal opacity)</para>
            <para></para>
            <para>See also setOpacityMask().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsOpacityEffect.OpacityMaskChanged">
            <summary>
            <para>This property holds the opacity mask of the effect.</para>
            <para>An opacity mask allows you apply opacity to portions of an element.</para>
            <para>For example:</para>
            <para>...</para>
            <para>QLinearGradient alphaGradient(rect.topLeft(), rect.bottomLeft());</para>
            <para>alphaGradient.setColorAt(0.0, Qt::transparent);</para>
            <para>alphaGradient.setColorAt(0.5, Qt::black);</para>
            <para>alphaGradient.setColorAt(1.0, Qt::transparent);</para>
            <para>QGraphicsOpacityEffect *effect = new QGraphicsOpacityEffect;</para>
            <para>effect-&gt;setOpacityMask(alphaGradient);</para>
            <para>...</para>
            <para>There is no opacity mask by default.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QBrush 	opacityMask() const</para>
            <para> void 	setOpacityMask(const QBrush &amp; mask)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	opacityMaskChanged(const QBrush &amp; mask)</para>
            <para></para>
            <para>See also setOpacity().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsOpacityEffect.Opacity">
            <summary>
            <para>This property holds the opacity of the effect.</para>
            <para>The value should be in the range of 0.0 to 1.0, where 0.0 is
            fully transparent and 1.0 is fully opaque.</para>
            <para>By default, the opacity is 0.7.</para>
            <para>See also setOpacityMask().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsOpacityEffect.OpacityMask">
            <summary>
            <para>This property holds the opacity mask of the effect.</para>
            <para>An opacity mask allows you apply opacity to portions of an
            element.</para>
            <para>For example:</para>
            <para>...</para>
            <para>QLinearGradient alphaGradient(rect.topLeft(),
            rect.bottomLeft());</para>
            <para>alphaGradient.setColorAt(0.0, Qt::transparent);</para>
            <para>alphaGradient.setColorAt(0.5, Qt::black);</para>
            <para>alphaGradient.setColorAt(1.0, Qt::transparent);</para>
            <para>QGraphicsOpacityEffect *effect = new
            QGraphicsOpacityEffect;</para>
            <para>effect-&gt;setOpacityMask(alphaGradient);</para>
            <para>...</para>
            <para>There is no opacity mask by default.</para>
            <para>See also setOpacity().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsItem">
            <summary>
            <para>The QGraphicsItem class is the base class for all graphical items
            in a QGraphicsScene.</para>
            </summary>
            <remarks>
            <para>It provides a light-weight foundation for writing your own custom
            items. This includes defining the item's geometry, collision detection, its
            painting implementation and item interaction through its event handlers.
            QGraphicsItem is part of the Graphics View Framework</para>
            <para></para>
            <para>For convenience, Qt provides a set of standard graphics items for
            the most common shapes. These are:</para>
            <para></para>
            <para>QGraphicsEllipseItem provides an ellipse item</para>
            <para>QGraphicsLineItem provides a line item</para>
            <para>QGraphicsPathItem provides an arbitrary path item</para>
            <para>QGraphicsPixmapItem provides a pixmap item</para>
            <para>QGraphicsPolygonItem provides a polygon item</para>
            <para>QGraphicsRectItem provides a rectangular item</para>
            <para>QGraphicsSimpleTextItem provides a simple text label item</para>
            <para>QGraphicsTextItem provides an advanced text browser item</para>
            <para></para>
            <para>All of an item's geometric information is based on its local
            coordinate system. The item's position, pos(), is the only function that
            does not operate in local coordinates, as it returns a position in parent
            coordinates. The Graphics View Coordinate System describes the coordinate
            system in detail.</para>
            <para>You can set whether an item should be visible (i.e., drawn, and
            accepting events), by calling setVisible(). Hiding an item will also hide
            its children. Similarly, you can enable or disable an item by calling
            setEnabled(). If you disable an item, all its children will also be
            disabled. By default, items are both visible and enabled. To toggle whether
            an item is selected or not, first enable selection by setting the
            ItemIsSelectable flag, and then call setSelected(). Normally, selection is
            toggled by the scene, as a result of user interaction.</para>
            <para>To write your own graphics item, you first create a subclass of
            QGraphicsItem, and then start by implementing its two pure virtual public
            functions: boundingRect(), which returns an estimate of the area painted by
            the item, and paint(), which implements the actual painting. For
            example:</para>
            <para>class SimpleItem : public QGraphicsItem</para>
            <para>{</para>
            <para>public:</para>
            <para>    QRectF boundingRect() const</para>
            <para>    {</para>
            <para>        qreal penWidth = 1;</para>
            <para>        return QRectF(-10 - penWidth / 2, -10 - penWidth /
            2,</para>
            <para>                      20 + penWidth, 20 + penWidth);</para>
            <para>    }</para>
            <para></para>
            <para>    void paint(QPainter *painter, const QStyleOptionGraphicsItem
            *option,</para>
            <para>               QWidget *widget)</para>
            <para>    {</para>
            <para>        painter-&gt;drawRoundedRect(-10, -10, 20, 20, 5,
            5);</para>
            <para>    }</para>
            <para>};</para>
            <para>The boundingRect() function has many different purposes.
            QGraphicsScene bases its item index on boundingRect(), and QGraphicsView
            uses it both for culling invisible items, and for determining the area that
            needs to be recomposed when drawing overlapping items. In addition,
            QGraphicsItem's collision detection mechanisms use boundingRect() to
            provide an efficient cut-off. The fine grained collision algorithm in
            collidesWithItem() is based on calling shape(), which returns an accurate
            outline of the item's shape as a QPainterPath.</para>
            <para>QGraphicsScene expects all items boundingRect() and shape() to
            remain unchanged unless it is notified. If you want to change an item's
            geometry in any way, you must first call prepareGeometryChange() to allow
            QGraphicsScene to update its bookkeeping.</para>
            <para>Collision detection can be done in two ways:</para>
            <para></para>
            <para>Reimplement shape() to return an accurate shape for your item,
            and rely on the default implementation of collidesWithItem() to do
            shape-shape intersection. This can be rather expensive if the shapes are
            complex.</para>
            <para>Reimplement collidesWithItem() to provide your own custom item
            and shape collision algorithm.</para>
            <para></para>
            <para>The contains() function can be called to determine whether the
            item contains a point or not. This function can also be reimplemented by
            the item. The default behavior of contains() is based on calling
            shape().</para>
            <para>Items can contain other items, and also be contained by other
            items. All items can have a parent item and a list of children. Unless the
            item has no parent, its position is in parent coordinates (i.e., the
            parent's local coordinates). Parent items propagate both their position and
            their transformation to all children.</para>
            <para></para>
            <para></para>
            <para></para>
            <para>Transformations</para>
            <para>QGraphicsItem supports projective transformations in addition to
            its base position, pos(). There are several ways to change an item's
            transformation. For simple transformations, you can call either of the
            convenience functions setRotation() or setScale(), or you can pass any
            transformation matrix to setTransform(). For advanced transformation
            control you also have the option of setting several combined
            transformations by calling setTransformations().</para>
            <para>Item transformations accumulate from parent to child, so if both
            a parent and child item are rotated 90 degrees, the child's total
            transformation will be 180 degrees. Similarly, if the item's parent is
            scaled to 2x its original size, its children will also be twice as large.
            An item's transformation does not affect its own local geometry; all
            geometry functions (e.g., contains(), update(), and all the mapping
            functions) still operate in local coordinates. For convenience,
            QGraphicsItem provides the functions sceneTransform(), which returns the
            item's total transformation matrix (including its position and all parents'
            positions and transformations), and scenePos(), which returns its position
            in scene coordinates. To reset an item's matrix, call
            resetTransform().</para>
            <para>Certain transformation operations produce a different outcome
            depending on the order in which they are applied. For example, if you scale
            an transform, and then rotate it, you may get a different result than if
            the transform was rotated first. However, the order you set the
            transformation properties on QGraphicsItem does not affect the resulting
            transformation; QGraphicsItem always applies the properties in a fixed,
            defined order:</para>
            <para></para>
            <para>The item's base transform is applied (transform())</para>
            <para>The item's transformations list is applied in order
            (transformations())</para>
            <para>The item is rotated relative to its transform origin point
            (rotation(), transformOriginPoint())</para>
            <para>The item is scaled relative to its transform origin point
            (scale(), transformOriginPoint())</para>
            <para></para>
            <para></para>
            <para>Painting</para>
            <para>The paint() function is called by QGraphicsView to paint the
            item's contents. The item has no background or default fill of its own;
            whatever is behind the item will shine through all areas that are not
            explicitly painted in this function. You can call update() to schedule a
            repaint, optionally passing the rectangle that needs a repaint. Depending
            on whether or not the item is visible in a view, the item may or may not be
            repainted; there is no equivalent to QWidget::repaint() in
            QGraphicsItem.</para>
            <para>Items are painted by the view, starting with the parent items and
            then drawing children, in ascending stacking order. You can set an item's
            stacking order by calling setZValue(), and test it by calling zValue(),
            where items with low z-values are painted before items with high z-values.
            Stacking order applies to sibling items; parents are always drawn before
            their children.</para>
            <para></para>
            <para>Sorting</para>
            <para>All items are drawn in a defined, stable order, and this same
            order decides which items will receive mouse input first when you click on
            the scene. Normally you don't have to worry about sorting, as the items
            follow a &quot;natural order&quot;, following the logical structure of the
            scene.</para>
            <para>An item's children are stacked on top of the parent, and sibling
            items are stacked by insertion order (i.e., in the same order that they
            were either added to the scene, or added to the same parent). If you add
            item A, and then B, then B will be on top of A. If you then add C, the
            items' stacking order will be A, then B, then C.</para>
            <para></para>
            <para>This example shows the stacking order of all limbs of the robot
            from the Drag and Drop Robot example. The torso is the root item (all other
            items are children or descendants of the torso), so it is drawn first.
            Next, the head is drawn, as it is the first item in the torso's list of
            children. Then the upper left arm is drawn. As the lower arm is a child of
            the upper arm, the lower arm is then drawn, followed by the upper arm's
            next sibling, which is the upper right arm, and so on.</para>
            <para>For advanced users, there are ways to alter how your items are
            sorted:</para>
            <para></para>
            <para>You can call setZValue() on an item to explicitly stack it on top
            of, or under, other sibling items. The default Z value for an item is 0.
            Items with the same Z value are stacked by insertion order.</para>
            <para>You can call stackBefore() to reorder the list of children. This
            will directly modify the insertion order.</para>
            <para>You can set the ItemStacksBehindParent flag to stack a child item
            behind its parent.</para>
            <para></para>
            <para>The stacking order of two sibling items also counts for each
            item's children and descendant items. So if one item is on top of another,
            then all its children will also be on top of all the other item's children
            as well.</para>
            <para></para>
            <para>Events</para>
            <para>QGraphicsItem receives events from QGraphicsScene through the
            virtual function sceneEvent(). This function distributes the most common
            events to a set of convenience event handlers:</para>
            <para></para>
            <para>contextMenuEvent() handles context menu events</para>
            <para>focusInEvent() and focusOutEvent() handle focus in and out
            events</para>
            <para>hoverEnterEvent(), hoverMoveEvent(), and hoverLeaveEvent()
            handles hover enter, move and leave events</para>
            <para>inputMethodEvent() handles input events, for accessibility
            support</para>
            <para>keyPressEvent() and keyReleaseEvent() handle key press and
            release events</para>
            <para>mousePressEvent(), mouseMoveEvent(), mouseReleaseEvent(), and
            mouseDoubleClickEvent() handles mouse press, move, release, click and
            doubleclick events</para>
            <para></para>
            <para>You can filter events for any other item by installing event
            filters. This functionality is separate from Qt's regular event filters
            (see QObject::installEventFilter()), which only work on subclasses of
            QObject. After installing your item as an event filter for another item by
            calling installSceneEventFilter(), the filtered events will be received by
            the virtual function sceneEventFilter(). You can remove item event filters
            by calling removeSceneEventFilter().</para>
            <para></para>
            <para>Custom Data</para>
            <para>Sometimes it's useful to register custom data with an item, be it
            a custom item, or a standard item. You can call setData() on any item to
            store data in it using a key-value pair (the key being an integer, and the
            value is a QVariant). To get custom data from an item, call data(). This
            functionality is completely untouched by Qt itself; it is provided for the
            user's convenience.</para>
            <para></para>
            <para>See also QGraphicsScene, QGraphicsView, and Graphics View
            Framework.</para>
            </remarks>
        </member>
        <member name="T:QtWidgets.IQGraphicsItem">
            <summary>
            <para>The QGraphicsItem class is the base class for all graphical items
            in a QGraphicsScene.</para>
            </summary>
            <remarks>
            <para>It provides a light-weight foundation for writing your own custom
            items. This includes defining the item's geometry, collision detection, its
            painting implementation and item interaction through its event handlers.
            QGraphicsItem is part of the Graphics View Framework</para>
            <para></para>
            <para>For convenience, Qt provides a set of standard graphics items for
            the most common shapes. These are:</para>
            <para></para>
            <para>QGraphicsEllipseItem provides an ellipse item</para>
            <para>QGraphicsLineItem provides a line item</para>
            <para>QGraphicsPathItem provides an arbitrary path item</para>
            <para>QGraphicsPixmapItem provides a pixmap item</para>
            <para>QGraphicsPolygonItem provides a polygon item</para>
            <para>QGraphicsRectItem provides a rectangular item</para>
            <para>QGraphicsSimpleTextItem provides a simple text label item</para>
            <para>QGraphicsTextItem provides an advanced text browser item</para>
            <para></para>
            <para>All of an item's geometric information is based on its local
            coordinate system. The item's position, pos(), is the only function that
            does not operate in local coordinates, as it returns a position in parent
            coordinates. The Graphics View Coordinate System describes the coordinate
            system in detail.</para>
            <para>You can set whether an item should be visible (i.e., drawn, and
            accepting events), by calling setVisible(). Hiding an item will also hide
            its children. Similarly, you can enable or disable an item by calling
            setEnabled(). If you disable an item, all its children will also be
            disabled. By default, items are both visible and enabled. To toggle whether
            an item is selected or not, first enable selection by setting the
            ItemIsSelectable flag, and then call setSelected(). Normally, selection is
            toggled by the scene, as a result of user interaction.</para>
            <para>To write your own graphics item, you first create a subclass of
            QGraphicsItem, and then start by implementing its two pure virtual public
            functions: boundingRect(), which returns an estimate of the area painted by
            the item, and paint(), which implements the actual painting. For
            example:</para>
            <para>class SimpleItem : public QGraphicsItem</para>
            <para>{</para>
            <para>public:</para>
            <para>    QRectF boundingRect() const</para>
            <para>    {</para>
            <para>        qreal penWidth = 1;</para>
            <para>        return QRectF(-10 - penWidth / 2, -10 - penWidth /
            2,</para>
            <para>                      20 + penWidth, 20 + penWidth);</para>
            <para>    }</para>
            <para></para>
            <para>    void paint(QPainter *painter, const QStyleOptionGraphicsItem
            *option,</para>
            <para>               QWidget *widget)</para>
            <para>    {</para>
            <para>        painter-&gt;drawRoundedRect(-10, -10, 20, 20, 5,
            5);</para>
            <para>    }</para>
            <para>};</para>
            <para>The boundingRect() function has many different purposes.
            QGraphicsScene bases its item index on boundingRect(), and QGraphicsView
            uses it both for culling invisible items, and for determining the area that
            needs to be recomposed when drawing overlapping items. In addition,
            QGraphicsItem's collision detection mechanisms use boundingRect() to
            provide an efficient cut-off. The fine grained collision algorithm in
            collidesWithItem() is based on calling shape(), which returns an accurate
            outline of the item's shape as a QPainterPath.</para>
            <para>QGraphicsScene expects all items boundingRect() and shape() to
            remain unchanged unless it is notified. If you want to change an item's
            geometry in any way, you must first call prepareGeometryChange() to allow
            QGraphicsScene to update its bookkeeping.</para>
            <para>Collision detection can be done in two ways:</para>
            <para></para>
            <para>Reimplement shape() to return an accurate shape for your item,
            and rely on the default implementation of collidesWithItem() to do
            shape-shape intersection. This can be rather expensive if the shapes are
            complex.</para>
            <para>Reimplement collidesWithItem() to provide your own custom item
            and shape collision algorithm.</para>
            <para></para>
            <para>The contains() function can be called to determine whether the
            item contains a point or not. This function can also be reimplemented by
            the item. The default behavior of contains() is based on calling
            shape().</para>
            <para>Items can contain other items, and also be contained by other
            items. All items can have a parent item and a list of children. Unless the
            item has no parent, its position is in parent coordinates (i.e., the
            parent's local coordinates). Parent items propagate both their position and
            their transformation to all children.</para>
            <para></para>
            <para></para>
            <para></para>
            <para>Transformations</para>
            <para>QGraphicsItem supports projective transformations in addition to
            its base position, pos(). There are several ways to change an item's
            transformation. For simple transformations, you can call either of the
            convenience functions setRotation() or setScale(), or you can pass any
            transformation matrix to setTransform(). For advanced transformation
            control you also have the option of setting several combined
            transformations by calling setTransformations().</para>
            <para>Item transformations accumulate from parent to child, so if both
            a parent and child item are rotated 90 degrees, the child's total
            transformation will be 180 degrees. Similarly, if the item's parent is
            scaled to 2x its original size, its children will also be twice as large.
            An item's transformation does not affect its own local geometry; all
            geometry functions (e.g., contains(), update(), and all the mapping
            functions) still operate in local coordinates. For convenience,
            QGraphicsItem provides the functions sceneTransform(), which returns the
            item's total transformation matrix (including its position and all parents'
            positions and transformations), and scenePos(), which returns its position
            in scene coordinates. To reset an item's matrix, call
            resetTransform().</para>
            <para>Certain transformation operations produce a different outcome
            depending on the order in which they are applied. For example, if you scale
            an transform, and then rotate it, you may get a different result than if
            the transform was rotated first. However, the order you set the
            transformation properties on QGraphicsItem does not affect the resulting
            transformation; QGraphicsItem always applies the properties in a fixed,
            defined order:</para>
            <para></para>
            <para>The item's base transform is applied (transform())</para>
            <para>The item's transformations list is applied in order
            (transformations())</para>
            <para>The item is rotated relative to its transform origin point
            (rotation(), transformOriginPoint())</para>
            <para>The item is scaled relative to its transform origin point
            (scale(), transformOriginPoint())</para>
            <para></para>
            <para></para>
            <para>Painting</para>
            <para>The paint() function is called by QGraphicsView to paint the
            item's contents. The item has no background or default fill of its own;
            whatever is behind the item will shine through all areas that are not
            explicitly painted in this function. You can call update() to schedule a
            repaint, optionally passing the rectangle that needs a repaint. Depending
            on whether or not the item is visible in a view, the item may or may not be
            repainted; there is no equivalent to QWidget::repaint() in
            QGraphicsItem.</para>
            <para>Items are painted by the view, starting with the parent items and
            then drawing children, in ascending stacking order. You can set an item's
            stacking order by calling setZValue(), and test it by calling zValue(),
            where items with low z-values are painted before items with high z-values.
            Stacking order applies to sibling items; parents are always drawn before
            their children.</para>
            <para></para>
            <para>Sorting</para>
            <para>All items are drawn in a defined, stable order, and this same
            order decides which items will receive mouse input first when you click on
            the scene. Normally you don't have to worry about sorting, as the items
            follow a &quot;natural order&quot;, following the logical structure of the
            scene.</para>
            <para>An item's children are stacked on top of the parent, and sibling
            items are stacked by insertion order (i.e., in the same order that they
            were either added to the scene, or added to the same parent). If you add
            item A, and then B, then B will be on top of A. If you then add C, the
            items' stacking order will be A, then B, then C.</para>
            <para></para>
            <para>This example shows the stacking order of all limbs of the robot
            from the Drag and Drop Robot example. The torso is the root item (all other
            items are children or descendants of the torso), so it is drawn first.
            Next, the head is drawn, as it is the first item in the torso's list of
            children. Then the upper left arm is drawn. As the lower arm is a child of
            the upper arm, the lower arm is then drawn, followed by the upper arm's
            next sibling, which is the upper right arm, and so on.</para>
            <para>For advanced users, there are ways to alter how your items are
            sorted:</para>
            <para></para>
            <para>You can call setZValue() on an item to explicitly stack it on top
            of, or under, other sibling items. The default Z value for an item is 0.
            Items with the same Z value are stacked by insertion order.</para>
            <para>You can call stackBefore() to reorder the list of children. This
            will directly modify the insertion order.</para>
            <para>You can set the ItemStacksBehindParent flag to stack a child item
            behind its parent.</para>
            <para></para>
            <para>The stacking order of two sibling items also counts for each
            item's children and descendant items. So if one item is on top of another,
            then all its children will also be on top of all the other item's children
            as well.</para>
            <para></para>
            <para>Events</para>
            <para>QGraphicsItem receives events from QGraphicsScene through the
            virtual function sceneEvent(). This function distributes the most common
            events to a set of convenience event handlers:</para>
            <para></para>
            <para>contextMenuEvent() handles context menu events</para>
            <para>focusInEvent() and focusOutEvent() handle focus in and out
            events</para>
            <para>hoverEnterEvent(), hoverMoveEvent(), and hoverLeaveEvent()
            handles hover enter, move and leave events</para>
            <para>inputMethodEvent() handles input events, for accessibility
            support</para>
            <para>keyPressEvent() and keyReleaseEvent() handle key press and
            release events</para>
            <para>mousePressEvent(), mouseMoveEvent(), mouseReleaseEvent(), and
            mouseDoubleClickEvent() handles mouse press, move, release, click and
            doubleclick events</para>
            <para></para>
            <para>You can filter events for any other item by installing event
            filters. This functionality is separate from Qt's regular event filters
            (see QObject::installEventFilter()), which only work on subclasses of
            QObject. After installing your item as an event filter for another item by
            calling installSceneEventFilter(), the filtered events will be received by
            the virtual function sceneEventFilter(). You can remove item event filters
            by calling removeSceneEventFilter().</para>
            <para></para>
            <para>Custom Data</para>
            <para>Sometimes it's useful to register custom data with an item, be it
            a custom item, or a standard item. You can call setData() on any item to
            store data in it using a key-value pair (the key being an integer, and the
            value is a QVariant). To get custom data from an item, call data(). This
            functionality is completely untouched by Qt itself; it is provided for the
            user's convenience.</para>
            <para></para>
            <para>See also QGraphicsScene, QGraphicsView, and Graphics View
            Framework.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.ToGraphicsObject">
            <summary>
            <para>Return the graphics item cast to a QGraphicsObject, if the class
            is actually a graphics object, 0 otherwise.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.SetFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag,System.Boolean)">
            <summary>
            <para>If enabled is true, the item flag flag is enabled; otherwise, it
            is disabled.</para>
            <para>See also flags() and setFlags().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.SetCacheMode(QtWidgets.QGraphicsItem.CacheMode,QtCore.QSize)">
            <summary>
            <para>Sets the item's cache mode to mode.</para>
            <para>The optional logicalCacheSize argument is used only by
            ItemCoordinateCache mode, and describes the resolution of the cache buffer;
            if logicalCacheSize is (100, 100), QGraphicsItem will fit the item into
            100x100 pixels in graphics memory, regardless of the logical size of the
            item itself. By default QGraphicsItem uses the size of boundingRect(). For
            all other cache modes than ItemCoordinateCache, logicalCacheSize is
            ignored.</para>
            <para>Caching can speed up rendering if your item spends a significant
            time redrawing itself. In some cases the cache can also slow down
            rendering, in particular when the item spends less time redrawing than
            QGraphicsItem spends redrawing from the cache.</para>
            <para>When caching is enabled, an item's paint() function will
            generally draw into an offscreen pixmap cache; for any subsequent repaint
            requests, the Graphics View framework will redraw from the cache. This
            approach works particularly well with QGLWidget, which stores all the cache
            as OpenGL textures.</para>
            <para>Be aware that QPixmapCache's cache limit may need to be changed
            to obtain optimal performance.</para>
            <para>You can read more about the different cache modes in the
            CacheMode documentation.</para>
            <para>Note: Enabling caching does not imply that the item's paint()
            function will be called only in response to an explicit update() call. For
            instance, under memory pressure, Qt may decide to drop some of the cache
            information; in such cases an item's paint() function will be called even
            if there was no update() call (that is, exactly as if there were no caching
            enabled).</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also cacheMode(), CacheMode, and
            QPixmapCache::setCacheLimit().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.IsBlockedByModalPanel(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns true if this item is blocked by a modal panel, false
            otherwise. If blockingPanel is non-zero, blockingPanel will be set to the
            modal panel that is blocking this item. If this item is not blocked,
            blockingPanel will not be set by this function.</para>
            <para>This function always returns false for items not in a
            scene.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also panelModality(), setPanelModality(), and
            PanelModality.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.UnsetCursor">
            <summary>
            <para>Clears the cursor from this item.</para>
            <para>See also hasCursor() and setCursor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.IsVisibleTo(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns true if the item is visible to parent; otherwise, false
            is returned. parent can be 0, in which case this function will return
            whether the item is visible to the scene or not.</para>
            <para>An item may not be visible to its ancestors even if isVisible()
            is true. It may also be visible to its ancestors even if isVisible() is
            false. If any ancestor is hidden, the item itself will be implicitly
            hidden, in which case this function will return false.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also isVisible() and setVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.Hide">
            <summary>
            <para>Hides the item (items are visible by default).</para>
            <para>This convenience function is equivalent to calling
            setVisible(false).</para>
            <para>See also show() and setVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.Show">
            <summary>
            <para>Shows the item (items are visible by default).</para>
            <para>This convenience function is equivalent to calling
            setVisible(true).</para>
            <para>See also hide() and setVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.SetFocus(QtCore.Qt.FocusReason)">
            <summary>
            <para>Gives keyboard input focus to this item. The focusReason argument
            will be passed into any focus event generated by this function; it is used
            to give an explanation of what caused the item to get focus.</para>
            <para>Only enabled items that set the ItemIsFocusable flag can accept
            keyboard focus.</para>
            <para>If this item is not visible, not active, or not associated with a
            scene, it will not gain immediate input focus. However, it will be
            registered as the preferred focus item for its subtree of items, should it
            later become visible.</para>
            <para>As a result of calling this function, this item will receive a
            focus in event with focusReason. If another item already has focus, that
            item will first receive a focus out event indicating that it has lost input
            focus.</para>
            <para>See also clearFocus(), hasFocus(), focusItem(), and
            focusProxy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.ClearFocus">
            <summary>
            <para>Takes keyboard input focus from the item.</para>
            <para>If it has focus, a focus out event is sent to this item to tell
            it that it is about to lose the focus.</para>
            <para>Only items that set the ItemIsFocusable flag, or widgets that set
            an appropriate focus policy, can accept keyboard focus.</para>
            <para>See also setFocus(), hasFocus(), and
            QGraphicsWidget::focusPolicy.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.FocusItem">
            <summary>
            <para>If this item, a child or descendant of this item currently has
            input focus, this function will return a pointer to that item. If no
            descendant has input focus, 0 is returned.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also hasFocus(), setFocus(), and
            QWidget::focusWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.GrabMouse">
            <summary>
            <para>Grabs the mouse input.</para>
            <para>This item will receive all mouse events for the scene until any
            of the following events occurs:</para>
            <para></para>
            <para>The item becomes invisible</para>
            <para>The item is removed from the scene</para>
            <para>The item is deleted</para>
            <para>The item call ungrabMouse()</para>
            <para>Another item calls grabMouse(); the item will regain the mouse
            grab when the other item calls ungrabMouse().</para>
            <para></para>
            <para>When an item gains the mouse grab, it receives a
            QEvent::GrabMouse event. When it loses the mouse grab, it receives a
            QEvent::UngrabMouse event. These events can be used to detect when your
            item gains or loses the mouse grab through other means than receiving mouse
            button events.</para>
            <para>It is almost never necessary to explicitly grab the mouse in Qt,
            as Qt grabs and releases it sensibly. In particular, Qt grabs the mouse
            when you press a mouse button, and keeps the mouse grabbed until you
            release the last mouse button. Also, Qt::Popup widgets implicitly call
            grabMouse() when shown, and ungrabMouse() when hidden.</para>
            <para>Note that only visible items can grab mouse input. Calling
            grabMouse() on an invisible item has no effect.</para>
            <para>Keyboard events are not affected.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QGraphicsScene::mouseGrabberItem(), ungrabMouse(), and
            grabKeyboard().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.UngrabMouse">
            <summary>
            <para>Releases the mouse grab.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also grabMouse() and ungrabKeyboard().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.GrabKeyboard">
            <summary>
            <para>Grabs the keyboard input.</para>
            <para>The item will receive all keyboard input to the scene until one
            of the following events occur:</para>
            <para></para>
            <para>The item becomes invisible</para>
            <para>The item is removed from the scene</para>
            <para>The item is deleted</para>
            <para>The item calls ungrabKeyboard()</para>
            <para>Another item calls grabKeyboard(); the item will regain the
            keyboard grab when the other item calls ungrabKeyboard().</para>
            <para></para>
            <para>When an item gains the keyboard grab, it receives a
            QEvent::GrabKeyboard event. When it loses the keyboard grab, it receives a
            QEvent::UngrabKeyboard event. These events can be used to detect when your
            item gains or loses the keyboard grab through other means than gaining
            input focus.</para>
            <para>It is almost never necessary to explicitly grab the keyboard in
            Qt, as Qt grabs and releases it sensibly. In particular, Qt grabs the
            keyboard when your item gains input focus, and releases it when your item
            loses input focus, or when the item is hidden.</para>
            <para>Note that only visible items can grab keyboard input. Calling
            grabKeyboard() on an invisible item has no effect.</para>
            <para>Keyboard events are not affected.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also ungrabKeyboard(), grabMouse(), and setFocus().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.UngrabKeyboard">
            <summary>
            <para>Releases the keyboard grab.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also grabKeyboard() and ungrabMouse().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.SetPos(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            setPos(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MoveBy(System.Double,System.Double)">
            <summary>
            <para>Moves the item by dx points horizontally, and dy point
            vertically. This function is equivalent to calling setPos(pos() +
            QPointF(dx, dy)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.EnsureVisible(QtCore.QRectF,System.Int32,System.Int32)">
            <summary>
            <para>If this item is part of a scene that is viewed by a
            QGraphicsView, this convenience function will attempt to scroll the view to
            ensure that rect is visible inside the view's viewport. If rect is a null
            rect (the default), QGraphicsItem will default to the item's bounding rect.
            xmargin and ymargin are the number of pixels the view should use for
            margins.</para>
            <para>If the specified rect cannot be reached, the contents are
            scrolled to the nearest valid position.</para>
            <para>If this item is not viewed by a QGraphicsView, this function does
            nothing.</para>
            <para>See also QGraphicsView::ensureVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.EnsureVisible(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            <para>This convenience function is equivalent to calling
            ensureVisible(QRectF(x, y, w, h), xmargin, ymargin).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.SetMatrix(QtGui.QMatrix,System.Boolean)">
            <summary>
            <para>Sets the item's affine transformation matrix. This is a subset or
            the item's full transformation matrix, and might not represent the item's
            full transformation.</para>
            <para>Use setTransform() instead.</para>
            <para>See also matrix(), transform(), and The Graphics View Coordinate
            System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.ResetMatrix">
            <summary>
            <para>Use resetTransform() instead.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.DeviceTransform(QtGui.QTransform)">
             <summary>
             <para>Returns this item's device transformation matrix, using
             viewportTransform to map from scene to device coordinates. This matrix can
             be used to map coordinates and geometrical shapes from this item's local
             coordinate system to the viewport's (or any device's) coordinate system. To
             map coordinates from the viewport, you must first invert the returned
             matrix.</para>
             <para>Example:</para>
             <para>QGraphicsRectItem rect;</para>
             <para>rect.setPos(100, 100);</para>
             <para></para>
             <para>rect.deviceTransform(view-&gt;viewportTransform()).map(QPointF(0,
             0));</para>
             <para>// returns the item's (0, 0) point in view's viewport
             coordinates</para>
             <para></para>
            
             <para>rect.deviceTransform(view-&gt;viewportTransform()).inverted().map(QPo
             intF(100, 100));</para>
             <para>// returns view's viewport's (100, 100) coordinate in item
             coordinates</para>
             <para>This function is the same as combining this item's scene
             transform with the view's viewport transform, but it also understands the
             ItemIgnoresTransformations flag. The device transform can be used to do
             accurate coordinate mapping (and collision detection) for untransformable
             items.</para>
             <para>This function was introduced in  Qt 4.3.</para>
             <para>See also transform(), setTransform(), scenePos(), The Graphics
             View Coordinate System, and itemTransform().</para>
             </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.ItemTransform(QtWidgets.IQGraphicsItem,System.Boolean@)">
            <summary>
            <para>Returns a QTransform that maps coordinates from this item to
            other. If ok is not null, and if there is no such transform, the boolean
            pointed to by ok will be set to false; otherwise it will be set to
            true.</para>
            <para>This transform provides an alternative to the mapToItem() or
            mapFromItem() functions, by returning the appropriate transform so that you
            can map shapes and coordinates yourself. It also helps you write more
            efficient code when repeatedly mapping between the same two items.</para>
            <para>Note: In rare circumstances, there is no transform that maps
            between two items.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also mapToItem(), mapFromItem(), and
            deviceTransform().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.SetTransform(QtGui.QTransform,System.Boolean)">
            <summary>
            <para>Sets the item's current transformation matrix to matrix.</para>
            <para>If combine is true, then matrix is combined with the current
            matrix; otherwise, matrix replaces the current matrix. combine is false by
            default.</para>
            <para>To simplify interation with items using a transformed view,
            QGraphicsItem provides mapTo... and mapFrom... functions that can translate
            between items' and the scene's coordinates. For example, you can call
            mapToScene() to map an item coordiate to a scene coordinate, or
            mapFromScene() to map from scene coordinates to item coordinates.</para>
            <para>The transformation matrix is combined with the item's rotation(),
            scale() and transformations() into a combined transformation that maps the
            item's coordinate system to its parent.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also transform(), setRotation(), setScale(),
            setTransformOriginPoint(), The Graphics View Coordinate System, and
            Transformations.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.ResetTransform">
            <summary>
            <para>Resets this item's transformation matrix to the identity matrix
            or all the transformation properties to their default values. This is
            equivalent to calling setTransform(QTransform()).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setTransform() and transform().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.SetTransformOriginPoint(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the origin point for the transformation in item coordinates.
            This is equivalent to calling setTransformOriginPoint(QPointF(x,
            y)).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setTransformOriginPoint() and Transformations.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.Advance(System.Int32)">
            <summary>
            <para>This virtual function is called twice for all items by the
            QGraphicsScene::advance() slot. In the first phase, all items are called
            with phase == 0, indicating that items on the scene are about to advance,
            and then all items are called with phase == 1. Reimplement this function to
            update your item if you need simple scene-controlled animation.</para>
            <para>The default implementation does nothing.</para>
            <para>This function is intended for animations. An alternative is to
            multiple-inherit from QObject and QGraphicsItem and use the Animation
            Framework.</para>
            <para>See also QGraphicsScene::advance() and QTimeLine.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.StackBefore(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Stacks this item before sibling, which must be a sibling item
            (i.e., the two items must share the same parent item, or must both be
            toplevel items). The sibling must have the same Z value as this item,
            otherwise calling this function will have no effect.</para>
            <para>By default, all sibling items are stacked by insertion order
            (i.e., the first item you add is drawn before the next item you add). If
            two items' Z values are different, then the item with the highest Z value
            is drawn on top. When the Z values are the same, the insertion order will
            decide the stacking order.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setZValue(), ItemStacksBehindParent, and Sorting.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.Contains(QtCore.QPointF)">
            <summary>
            <para>Returns true if this item contains point, which is in local
            coordinates; otherwise, false is returned. It is most often called from
            QGraphicsView to determine what item is under the cursor, and for that
            reason, the implementation of this function should be as light-weight as
            possible.</para>
            <para>By default, this function calls shape(), but you can reimplement
            it in a subclass to provide a (perhaps more efficient)
            implementation.</para>
            <para>See also shape(), boundingRect(), and collidesWithPath().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.CollidesWithItem(QtWidgets.IQGraphicsItem,QtCore.Qt.ItemSelectionMode)">
            <summary>
            <para>Returns true if this item collides with other; otherwise returns
            false.</para>
            <para>The mode is applied to other, and the resulting shape or bounding
            rectangle is then compared to this item's shape. The default value for mode
            is Qt::IntersectsItemShape; other collides with this item if it either
            intersects, contains, or is contained by this item's shape (see
            Qt::ItemSelectionMode for details).</para>
            <para>The default implementation is based on shape intersection, and it
            calls shape() on both items. Because the complexity of arbitrary
            shape-shape intersection grows with an order of magnitude when the shapes
            are complex, this operation can be noticably time consuming. You have the
            option of reimplementing this function in a subclass of QGraphicsItem to
            provide a custom algorithm. This allows you to make use of natural
            constraints in the shapes of your own items, in order to improve the
            performance of the collision detection. For instance, two untransformed
            perfectly circular items' collision can be determined very efficiently by
            comparing their positions and radii.</para>
            <para>Keep in mind that when reimplementing this function and calling
            shape() or boundingRect() on other, the returned coordinates must be mapped
            to this item's coordinate system before any intersection can take
            place.</para>
            <para>See also contains() and shape().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.CollidesWithPath(QtGui.QPainterPath,QtCore.Qt.ItemSelectionMode)">
            <summary>
            <para>Returns true if this item collides with path.</para>
            <para>The collision is determined by mode. The default value for mode
            is Qt::IntersectsItemShape; path collides with this item if it either
            intersects, contains, or is contained by this item's shape.</para>
            <para>Note that this function checks whether the item's shape or
            bounding rectangle (depending on mode) is contained within path, and not
            whether path is contained within the items shape or bounding
            rectangle.</para>
            <para>See also collidesWithItem(), contains(), and shape().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.IsObscured(QtCore.QRectF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if rect is completely obscured by the opaque shape
            of any of colliding items above it (i.e., with a higher Z value than this
            item).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also opaqueArea().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.IsObscured(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            isObscured(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.IsObscuredBy(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns true if this item's bounding rect is completely obscured
            by the opaque shape of item.</para>
            <para>The base implementation maps item's opaqueArea() to this item's
            coordinate system, and then checks if this item's boundingRect() is fully
            contained within the mapped shape.</para>
            <para>You can reimplement this function to provide a custom algorithm
            for determining whether this item is obscured by item.</para>
            <para>See also opaqueArea() and isObscured().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.BoundingRegion(QtGui.QTransform)">
            <summary>
            <para>Returns the bounding region for this item. The coordinate space
            of the returned region depends on itemToDeviceTransform. If you pass an
            identity QTransform as a parameter, this function will return a local
            coordinate region.</para>
            <para>The bounding region describes a coarse outline of the item's
            visual contents. Although it's expensive to calculate, it's also more
            precise than boundingRect(), and it can help to avoid unnecessary
            repainting when an item is updated. This is particularly efficient for thin
            items (e.g., lines or simple polygons). You can tune the granularity for
            the bounding region by calling setBoundingRegionGranularity(). The default
            granularity is 0; in which the item's bounding region is the same as its
            bounding rect.</para>
            <para>itemToDeviceTransform is the transformation from item coordinates
            to device coordinates. If you want this function to return a QRegion in
            scene coordinates, you can pass sceneTransform() as an argument.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also boundingRegionGranularity().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.Paint(QtGui.QPainter,QtWidgets.QStyleOptionGraphicsItem,QtWidgets.QWidget)">
            <summary>
            <para>This function, which is usually called by QGraphicsView, paints
            the contents of an item in local coordinates.</para>
            <para>Reimplement this function in a QGraphicsItem subclass to provide
            the item's painting implementation, using painter. The option parameter
            provides style options for the item, such as its state, exposed area and
            its level-of-detail hints. The widget argument is optional. If provided, it
            points to the widget that is being painted on; otherwise, it is 0. For
            cached painting, widget is always 0.</para>
            <para>void RoundRectItem::paint(QPainter *painter,</para>
            <para>                          const QStyleOptionGraphicsItem
            *option,</para>
            <para>                          QWidget *widget)</para>
            <para>{</para>
            <para>    painter-&gt;drawRoundedRect(-10, -10, 20, 20, 5, 5);</para>
            <para>}</para>
            <para>The painter's pen is 0-width by default, and its pen is
            initialized to the QPalette::Text brush from the paint device's palette.
            The brush is initialized to QPalette::Window.</para>
            <para>Make sure to constrain all painting inside the boundaries of
            boundingRect() to avoid rendering artifacts (as QGraphicsView does not clip
            the painter for you). In particular, when QPainter renders the outline of a
            shape using an assigned QPen, half of the outline will be drawn outside,
            and half inside, the shape you're rendering (e.g., with a pen width of 2
            units, you must draw outlines 1 unit inside boundingRect()). QGraphicsItem
            does not support use of cosmetic pens with a non-zero width.</para>
            <para>All painting is done in local coordinates.</para>
            <para>Note: It is mandatory that an item will always redraw itself in
            the exact same way, unless update() was called; otherwise visual artifacts
            may occur. In other words, two subsequent calls to paint() must always
            produce the same output, unless update() was called between them.</para>
            <para>Note: Enabling caching for an item does not guarantee that
            paint() will be invoked only once by the Graphics View framework, even
            without any explicit call to update(). See the documentation of
            setCacheMode() for more details.</para>
            <para>See also setCacheMode(), QPen::width(), Item Coordinates, and
            ItemUsesExtendedStyleOption.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.Update(QtCore.QRectF)">
            <summary>
            <para>Schedules a redraw of the area covered by rect in this item. You
            can call this function whenever your item needs to be redrawn, such as if
            it changes appearance or size.</para>
            <para>This function does not cause an immediate paint; instead it
            schedules a paint request that is processed by QGraphicsView after control
            reaches the event loop. The item will only be redrawn if it is visible in
            any associated view.</para>
            <para>As a side effect of the item being repainted, other items that
            overlap the area rect may also be repainted.</para>
            <para>If the item is invisible (i.e., isVisible() returns false), this
            function does nothing.</para>
            <para>See also paint() and boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.Update(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            update(QRectF(x, y, width, height)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.Scroll(System.Double,System.Double,QtCore.QRectF)">
            <summary>
            <para>Scrolls the contents of rect by dx, dy. If rect is a null rect
            (the default), the item's bounding rect is scrolled.</para>
            <para>Scrolling provides a fast alternative to simply redrawing when
            the contents of the item (or parts of the item) are shifted vertically or
            horizontally. Depending on the current transformation and the capabilities
            of the paint device (i.e., the viewport), this operation may consist of
            simply moving pixels from one location to another using memmove(). In most
            cases this is faster than rerendering the entire area.</para>
            <para>After scrolling, the item will issue an update for the newly
            exposed areas. If scrolling is not supported (e.g., you are rendering to an
            OpenGL viewport, which does not benefit from scroll optimizations), this
            function is equivalent to calling update(rect).</para>
            <para>Note: Scrolling is only supported when
            QGraphicsItem::ItemCoordinateCache is enabled; in all other cases calling
            this function is equivalent to calling update(rect). If you for sure know
            that the item is opaque and not overlapped by other items, you can map the
            rect to viewport coordinates and scroll the viewport.</para>
            <para>QTransform xform =
            item-&gt;deviceTransform(view-&gt;viewportTransform());</para>
            <para>QRect deviceRect = xform.mapRect(rect).toAlignedRect();</para>
            <para>view-&gt;viewport()-&gt;scroll(dx, dy, deviceRect);</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToItem(QtWidgets.IQGraphicsItem,QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in this item's coordinate system,
            to item's coordinate system, and returns the mapped coordinate.</para>
            <para>If item is 0, this function returns the same as
            mapToScene().</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            transform(), mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToParent(QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in this item's coordinate system,
            to its parent's coordinate system, and returns the mapped coordinate. If
            the item has no parent, point will be mapped to the scene's coordinate
            system.</para>
            <para>See also mapToItem(), mapToScene(), transform(), mapFromParent(),
            and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToScene(QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in this item's coordinate system,
            to the scene's coordinate system, and returns the mapped coordinate.</para>
            <para>See also mapToItem(), mapToParent(), transform(), mapFromScene(),
            and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToItem(QtWidgets.IQGraphicsItem,QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to item's coordinate system, and returns the mapped rectangle as a
            polygon.</para>
            <para>If item is 0, this function returns the same as
            mapToScene().</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToParent(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to its parent's coordinate system, and returns the mapped rectangle
            as a polygon. If the item has no parent, rect will be mapped to the scene's
            coordinate system.</para>
            <para>See also mapToScene(), mapToItem(), mapFromParent(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToScene(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to the scene's coordinate system, and returns the mapped rectangle
            as a polygon.</para>
            <para>See also mapToParent(), mapToItem(), mapFromScene(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapRectToItem(QtWidgets.IQGraphicsItem,QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to item's coordinate system, and returns the mapped rectangle as a
            new rectangle (i.e., the bounding rectangle of the resulting
            polygon).</para>
            <para>If item is 0, this function returns the same as
            mapRectToScene().</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapRectToParent(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to its parent's coordinate system, and returns the mapped rectangle
            as a new rectangle (i.e., the bounding rectangle of the resulting
            polygon).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapRectToScene(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to the scene coordinate system, and returns the mapped rectangle as
            a new rectangle (i.e., the bounding rectangle of the resulting
            polygon).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToItem(QtWidgets.IQGraphicsItem,QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in this item's coordinate
            system, to item's coordinate system, and returns the mapped polygon.</para>
            <para>If item is 0, this function returns the same as
            mapToScene().</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToParent(QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in this item's coordinate
            system, to its parent's coordinate system, and returns the mapped polygon.
            If the item has no parent, polygon will be mapped to the scene's coordinate
            system.</para>
            <para>See also mapToScene(), mapToItem(), mapFromParent(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToScene(QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in this item's coordinate
            system, to the scene's coordinate system, and returns the mapped
            polygon.</para>
            <para>See also mapToParent(), mapToItem(), mapFromScene(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToItem(QtWidgets.IQGraphicsItem,QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in this item's coordinate system, to
            item's coordinate system, and returns the mapped path.</para>
            <para>If item is 0, this function returns the same as
            mapToScene().</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToParent(QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in this item's coordinate system, to
            its parent's coordinate system, and returns the mapped path. If the item
            has no parent, path will be mapped to the scene's coordinate system.</para>
            <para>See also mapToScene(), mapToItem(), mapFromParent(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToScene(QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in this item's coordinate system, to
            the scene's coordinate system, and returns the mapped path.</para>
            <para>See also mapToParent(), mapToItem(), mapFromScene(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromItem(QtWidgets.IQGraphicsItem,QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in item's coordinate system, to
            this item's coordinate system, and returns the mapped coordinate.</para>
            <para>If item is 0, this function returns the same as
            mapFromScene().</para>
            <para>See also itemTransform(), mapFromParent(), mapFromScene(),
            transform(), mapToItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromParent(QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in this item's parent's coordinate
            system, to this item's coordinate system, and returns the mapped
            coordinate.</para>
            <para>See also mapFromItem(), mapFromScene(), transform(),
            mapToParent(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromScene(QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in this item's scene's coordinate
            system, to this item's coordinate system, and returns the mapped
            coordinate.</para>
            <para>See also mapFromItem(), mapFromParent(), transform(),
            mapToScene(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromItem(QtWidgets.IQGraphicsItem,QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in item's coordinate system, to
            this item's coordinate system, and returns the mapped rectangle as a
            polygon.</para>
            <para>If item is 0, this function returns the same as
            mapFromScene()</para>
            <para>See also itemTransform(), mapToItem(), mapFromParent(),
            transform(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromParent(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's parent's
            coordinate system, to this item's coordinate system, and returns the mapped
            rectangle as a polygon.</para>
            <para>See also mapToParent(), mapFromItem(), transform(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromScene(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's scene's
            coordinate system, to this item's coordinate system, and returns the mapped
            rectangle as a polygon.</para>
            <para>See also mapToScene(), mapFromItem(), transform(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapRectFromItem(QtWidgets.IQGraphicsItem,QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in item's coordinate system, to
            this item's coordinate system, and returns the mapped rectangle as a new
            rectangle (i.e., the bounding rectangle of the resulting polygon).</para>
            <para>If item is 0, this function returns the same as
            mapRectFromScene().</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapRectFromParent(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's parent's
            coordinate system, to this item's coordinate system, and returns the mapped
            rectangle as a new rectangle (i.e., the bounding rectangle of the resulting
            polygon).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapRectFromScene(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in scene coordinates, to this
            item's coordinate system, and returns the mapped rectangle as a new
            rectangle (i.e., the bounding rectangle of the resulting polygon).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromItem(QtWidgets.IQGraphicsItem,QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in item's coordinate system,
            to this item's coordinate system, and returns the mapped polygon.</para>
            <para>If item is 0, this function returns the same as
            mapFromScene().</para>
            <para>See also itemTransform(), mapToItem(), mapFromParent(),
            transform(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromParent(QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in this item's parent's
            coordinate system, to this item's coordinate system, and returns the mapped
            polygon.</para>
            <para>See also mapToParent(), mapToItem(), transform(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromScene(QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in this item's scene's
            coordinate system, to this item's coordinate system, and returns the mapped
            polygon.</para>
            <para>See also mapToScene(), mapFromParent(), transform(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromItem(QtWidgets.IQGraphicsItem,QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in item's coordinate system, to this
            item's coordinate system, and returns the mapped path.</para>
            <para>If item is 0, this function returns the same as
            mapFromScene().</para>
            <para>See also itemTransform(), mapFromParent(), mapFromScene(),
            mapToItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromParent(QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in this item's parent's coordinate
            system, to this item's coordinate system, and returns the mapped
            path.</para>
            <para>See also mapFromScene(), mapFromItem(), mapToParent(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromScene(QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in this item's scene's coordinate
            system, to this item's coordinate system, and returns the mapped
            path.</para>
            <para>See also mapFromParent(), mapFromItem(), mapToScene(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToItem(QtWidgets.IQGraphicsItem,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapToItem(item, QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToParent(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapToParent(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToScene(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapToScene(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToItem(QtWidgets.IQGraphicsItem,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapToItem(item, QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToParent(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapToParent(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapToScene(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapToScene(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapRectToItem(QtWidgets.IQGraphicsItem,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectToItem(item, QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapRectToParent(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectToParent(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapRectToScene(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectToScene(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromItem(QtWidgets.IQGraphicsItem,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapFromItem(item, QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromParent(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapFromParent(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromScene(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapFromScene(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromItem(QtWidgets.IQGraphicsItem,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapFromItem(item, QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromParent(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapFromItem(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapFromScene(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapFromScene(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapRectFromItem(QtWidgets.IQGraphicsItem,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectFromItem(item, QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapRectFromParent(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectFromParent(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.MapRectFromScene(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectFromScene(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.IsAncestorOf(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns true if this item is an ancestor of child (i.e., if this
            item is child's parent, or one of child's parent's ancestors).</para>
            <para>See also parentItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.CommonAncestorItem(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns the closest common ancestor item of this item and other,
            or 0 if either other is 0, or there is no common ancestor.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also isAncestorOf().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.Data(System.Int32)">
            <summary>
            <para>Returns this item's custom data for the key key as a
            QVariant.</para>
            <para>Custom item data is useful for storing arbitrary properties in
            any item. Example:</para>
            <para>static const int ObjectName = 0;</para>
            <para></para>
            <para>QGraphicsItem *item = scene.itemAt(100, 50);</para>
            <para>if (item-&gt;data(ObjectName).toString().isEmpty()) {</para>
            <para>    if (qgraphicsitem_cast&lt;ButtonItem *&gt;(item))</para>
            <para>        item-&gt;setData(ObjectName, &quot;Button&quot;);</para>
            <para>}</para>
            <para>Qt does not use this feature for storing data; it is provided
            solely for the convenience of the user.</para>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.SetData(System.Int32,QtCore.QVariant)">
            <summary>
            <para>Sets this item's custom data for the key key to value.</para>
            <para>Custom item data is useful for storing arbitrary properties for
            any item. Qt does not use this feature for storing data; it is provided
            solely for the convenience of the user.</para>
            <para>See also data().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.InstallSceneEventFilter(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Installs an event filter for this item on filterItem, causing all
            events for this item to first pass through filterItem's sceneEventFilter()
            function.</para>
            <para>To filter another item's events, install this item as an event
            filter for the other item. Example:</para>
            <para>QGraphicsScene scene;</para>
            <para>QGraphicsEllipseItem *ellipse = scene.addEllipse(QRectF(-10, -10,
            20, 20));</para>
            <para>QGraphicsLineItem *line = scene.addLine(QLineF(-10, -10, 20,
            20));</para>
            <para></para>
            <para>line-&gt;installSceneEventFilter(ellipse);</para>
            <para>// line's events are filtered by ellipse's sceneEventFilter()
            function.</para>
            <para></para>
            <para>ellipse-&gt;installSceneEventFilter(line);</para>
            <para>// ellipse's events are filtered by line's sceneEventFilter()
            function.</para>
            <para>An item can only filter events for other items in the same scene.
            Also, an item cannot filter its own events; instead, you can reimplement
            sceneEvent() directly.</para>
            <para>Items must belong to a scene for scene event filters to be
            installed and used.</para>
            <para>See also removeSceneEventFilter(), sceneEventFilter(), and
            sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.RemoveSceneEventFilter(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Removes an event filter on this item from filterItem.</para>
            <para>See also installSceneEventFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsItem.ItemTransform(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns a QTransform that maps coordinates from this item to
            other. If ok is not null, and if there is no such transform, the boolean
            pointed to by ok will be set to false; otherwise it will be set to
            true.</para>
            <para>This transform provides an alternative to the mapToItem() or
            mapFromItem() functions, by returning the appropriate transform so that you
            can map shapes and coordinates yourself. It also helps you write more
            efficient code when repeatedly mapping between the same two items.</para>
            <para>Note: In rare circumstances, there is no transform that maps
            between two items.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also mapToItem(), mapFromItem(), and
            deviceTransform().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.ParentItem">
            <summary>
            <para>Returns a pointer to this item's parent item. If this item does
            not have a parent, 0 is returned.</para>
            <para>See also setParentItem() and childItems().</para>
            <para></para>
            <para>Sets this item's parent item to newParent. If this item already
            has a parent, it is first removed from the previous parent. If newParent is
            0, this item will become a top-level item.</para>
            <para>Note that this implicitly adds this graphics item to the scene of
            the parent. You should not add the item to the scene yourself.</para>
            <para>The behavior when calling this function on an item that is an
            ancestor of newParent is undefined.</para>
            <para>See also parentItem() and childItems().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Group">
            <summary>
            <para>Returns a pointer to this item's item group, or 0 if this item is
            not member of a group.</para>
            <para>See also setGroup(), QGraphicsItemGroup, and
            QGraphicsScene::createItemGroup().</para>
            <para></para>
            <para>Adds this item to the item group group. If group is 0, this item
            is removed from any current group and added as a child of the previous
            group's parent.</para>
            <para>See also group() and QGraphicsScene::createItemGroup().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Flags">
            <summary>
            <para>Returns this item's flags. The flags describe what configurable
            features of the item are enabled and not. For example, if the flags include
            ItemIsFocusable, the item can accept input focus.</para>
            <para>By default, no flags are enabled.</para>
            <para>See also setFlags() and setFlag().</para>
            <para></para>
            <para>Sets the item flags to flags. All flags in flags are enabled; all
            flags not in flags are disabled.</para>
            <para>If the item had focus and flags does not enable ItemIsFocusable,
            the item loses focus as a result of calling this function. Similarly, if
            the item was selected, and flags does not enabled ItemIsSelectable, the
            item is automatically unselected.</para>
            <para>By default, no flags are enabled. (QGraphicsWidget enables the
            ItemSendsGeometryChanges flag by default in order to track position
            changes.)</para>
            <para>See also flags() and setFlag().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.panelModality">
            <summary>
            <para>Returns the modality for this item.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setPanelModality().</para>
            <para></para>
            <para>Sets the modality for this item to panelModality.</para>
            <para>Changing the modality of a visible item takes effect
            immediately.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also panelModality().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.ToolTip">
            <summary>
            <para>Returns the item's tool tip, or an empty QString if no tool tip
            has been set.</para>
            <para>See also setToolTip() and QToolTip.</para>
            <para></para>
            <para>Sets the item's tool tip to toolTip. If toolTip is empty, the
            item's tool tip is cleared.</para>
            <para>See also toolTip() and QToolTip.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Cursor">
            <summary>
            <para>Returns the current cursor shape for the item. The mouse cursor
            will assume this shape when it's over this item. See the list of predefined
            cursor objects for a range of useful shapes.</para>
            <para>An editor item might want to use an I-beam cursor:</para>
            <para>item-&gt;setCursor(Qt::IBeamCursor);</para>
            <para>If no cursor has been set, the cursor of the item beneath is
            used.</para>
            <para>See also setCursor(), hasCursor(), unsetCursor(),
            QWidget::cursor, and QApplication::overrideCursor().</para>
            <para></para>
            <para>Sets the current cursor shape for the item to cursor. The mouse
            cursor will assume this shape when it's over this item. See the list of
            predefined cursor objects for a range of useful shapes.</para>
            <para>An editor item might want to use an I-beam cursor:</para>
            <para>item-&gt;setCursor(Qt::IBeamCursor);</para>
            <para>If no cursor has been set, the cursor of the item beneath is
            used.</para>
            <para>See also cursor(), hasCursor(), unsetCursor(), QWidget::cursor,
            and QApplication::overrideCursor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Visible">
            <summary>
            <para>Returns true if the item is visible; otherwise, false is
            returned.</para>
            <para>Note that the item's general visibility is unrelated to whether
            or not it is actually being visualized by a QGraphicsView.</para>
            <para>See also setVisible().</para>
            <para></para>
            <para>If visible is true, the item is made visible. Otherwise, the item
            is made invisible. Invisible items are not painted, nor do they receive any
            events. In particular, mouse events pass right through invisible items, and
            are delivered to any item that may be behind. Invisible items are also
            unselectable, they cannot take input focus, and are not detected by
            QGraphicsScene's item location functions.</para>
            <para>If an item becomes invisible while grabbing the mouse, (i.e.,
            while it is receiving mouse events,) it will automatically lose the mouse
            grab, and the grab is not regained by making the item visible again; it
            must receive a new mouse press to regain the mouse grab.</para>
            <para>Similarly, an invisible item cannot have focus, so if the item
            has focus when it becomes invisible, it will lose focus, and the focus is
            not regained by simply making the item visible again.</para>
            <para>If you hide a parent item, all its children will also be hidden.
            If you show a parent item, all children will be shown, unless they have
            been explicitly hidden (i.e., if you call setVisible(false) on a child, it
            will not be reshown even if its parent is hidden, and then shown
            again).</para>
            <para>Items are visible by default; it is unnecessary to call
            setVisible() on a new item.</para>
            <para>Note: An item with opacity set to 0 will still be considered
            visible, although it will be treated like an invisible item: mouse events
            will pass through it, it will not be included in the items returned by
            QGraphicsView::items(), and so on. However, the item will retain the
            focus.</para>
            <para>See also isVisible(), show(), hide(), and setOpacity().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Enabled">
            <summary>
            <para>Returns true if the item is enabled; otherwise, false is
            returned.</para>
            <para>See also setEnabled().</para>
            <para></para>
            <para>If enabled is true, the item is enabled; otherwise, it is
            disabled.</para>
            <para>Disabled items are visible, but they do not receive any events,
            and cannot take focus nor be selected. Mouse events are discarded; they are
            not propagated unless the item is also invisible, or if it does not accept
            mouse events (see acceptedMouseButtons()). A disabled item cannot become
            the mouse grabber, and as a result of this, an item loses the grab if it
            becomes disabled when grabbing the mouse, just like it loses focus if it
            had focus when it was disabled.</para>
            <para>Disabled items are traditionally drawn using grayed-out colors
            (see QPalette::Disabled).</para>
            <para>If you disable a parent item, all its children will also be
            disabled. If you enable a parent item, all children will be enabled, unless
            they have been explicitly disabled (i.e., if you call setEnabled(false) on
            a child, it will not be reenabled if its parent is disabled, and then
            enabled again).</para>
            <para>Items are enabled by default.</para>
            <para>Note: If you install an event filter, you can still intercept
            events before they are delivered to items; this mechanism disregards the
            item's enabled state.</para>
            <para>See also isEnabled().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Selected">
            <summary>
            <para>Returns true if this item is selected; otherwise, false is
            returned.</para>
            <para>Items that are in a group inherit the group's selected
            state.</para>
            <para>Items are not selected by default.</para>
            <para>See also setSelected() and
            QGraphicsScene::setSelectionArea().</para>
            <para></para>
            <para>If selected is true and this item is selectable, this item is
            selected; otherwise, it is unselected.</para>
            <para>If the item is in a group, the whole group's selected state is
            toggled by this function. If the group is selected, all items in the group
            are also selected, and if the group is not selected, no item in the group
            is selected.</para>
            <para>Only visible, enabled, selectable items can be selected. If
            selected is true and this item is either invisible or disabled or
            unselectable, this function does nothing.</para>
            <para>By default, items cannot be selected. To enable selection, set
            the ItemIsSelectable flag.</para>
            <para>This function is provided for convenience, allowing individual
            toggling of the selected state of an item. However, a more common way of
            selecting items is to call QGraphicsScene::setSelectionArea(), which will
            call this function for all visible, enabled, and selectable items within a
            specified area on the scene.</para>
            <para>See also isSelected() and QGraphicsScene::selectedItems().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.AcceptDrops">
            <summary>
            <para>Returns true if this item can accept drag and drop events;
            otherwise, returns false. By default, items do not accept drag and drop
            events; items are transparent to drag and drop.</para>
            <para>See also setAcceptDrops().</para>
            <para></para>
            <para>If on is true, this item will accept drag and drop events;
            otherwise, it is transparent for drag and drop events. By default, items do
            not accept drag and drop events.</para>
            <para>See also acceptDrops().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Opacity">
            <summary>
            <para>Returns this item's local opacity, which is between 0.0
            (transparent) and 1.0 (opaque). This value is combined with parent and
            ancestor values into the effectiveOpacity(). The effective opacity decides
            how the item is rendered and also affects its visibility when queried by
            functions such as QGraphicsView::items().</para>
            <para>The opacity property decides the state of the painter passed to
            the paint() function. If the item is cached, i.e., ItemCoordinateCache or
            DeviceCoordinateCache, the effective property will be applied to the item's
            cache as it is rendered.</para>
            <para>The default opacity is 1.0; fully opaque.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setOpacity(), paint(), ItemIgnoresParentOpacity, and
            ItemDoesntPropagateOpacityToChildren.</para>
            <para></para>
            <para>Sets this item's local opacity, between 0.0 (transparent) and 1.0
            (opaque). The item's local opacity is combined with parent and ancestor
            opacities into the effectiveOpacity().</para>
            <para>By default, opacity propagates from parent to child, so if a
            parent's opacity is 0.5 and the child is also 0.5, the child's effective
            opacity will be 0.25.</para>
            <para>The opacity property decides the state of the painter passed to
            the paint() function. If the item is cached, i.e., ItemCoordinateCache or
            DeviceCoordinateCache, the effective property will be applied to the item's
            cache as it is rendered.</para>
            <para>There are two item flags that affect how the item's opacity is
            combined with the parent: ItemIgnoresParentOpacity and
            ItemDoesntPropagateOpacityToChildren.</para>
            <para>Note: Setting the opacity of an item to 0 will not make the item
            invisible (according to isVisible()), but the item will be treated like an
            invisible one. See the documentation of setVisible() for more
            information.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also opacity(), effectiveOpacity(), and setVisible().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.GraphicsEffect">
            <summary>
            <para>Returns a pointer to this item's effect if it has one; otherwise
            0.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setGraphicsEffect().</para>
            <para></para>
            <para>Sets effect as the item's effect. If there already is an effect
            installed on this item, QGraphicsItem will delete the existing effect
            before installing the new effect. You can delete an existing effect by
            calling setGraphicsEffect(0).</para>
            <para>If effect is the installed effect on a different item,
            setGraphicsEffect() will remove the effect from the item and install it on
            this item.</para>
            <para>QGraphicsItem takes ownership of effect.</para>
            <para>Note: This function will apply the effect on itself and all its
            children.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also graphicsEffect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.AcceptedMouseButtons">
            <summary>
            <para>Returns the mouse buttons that this item accepts mouse events
            for. By default, all mouse buttons are accepted.</para>
            <para>If an item accepts a mouse button, it will become the mouse
            grabber item when a mouse press event is delivered for that mouse button.
            However, if the item does not accept the button, QGraphicsScene will
            forward the mouse events to the first item beneath it that does.</para>
            <para>See also setAcceptedMouseButtons() and mousePressEvent().</para>
            <para></para>
            <para>Sets the mouse buttons that this item accepts mouse events
            for.</para>
            <para>By default, all mouse buttons are accepted. If an item accepts a
            mouse button, it will become the mouse grabber item when a mouse press
            event is delivered for that button. However, if the item does not accept
            the mouse button, QGraphicsScene will forward the mouse events to the first
            item beneath it that does.</para>
            <para>To disable mouse events for an item (i.e., make it transparent
            for mouse events), call setAcceptedMouseButtons(0).</para>
            <para>See also acceptedMouseButtons() and mousePressEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.AcceptHoverEvents">
            <summary>
            <para>Returns true if an item accepts hover events
            (QGraphicsSceneHoverEvent); otherwise, returns false. By default, items do
            not accept hover events.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setAcceptHoverEvents() and
            setAcceptedMouseButtons().</para>
            <para></para>
            <para>If enabled is true, this item will accept hover events;
            otherwise, it will ignore them. By default, items do not accept hover
            events.</para>
            <para>Hover events are delivered when there is no current mouse grabber
            item. They are sent when the mouse cursor enters an item, when it moves
            around inside the item, and when the cursor leaves an item. Hover events
            are commonly used to highlight an item when it's entered, and for tracking
            the mouse cursor as it hovers over the item (equivalent to
            QWidget::mouseTracking).</para>
            <para>Parent items receive hover enter events before their children,
            and leave events after their children. The parent does not receive a hover
            leave event if the cursor enters a child, though; the parent stays
            &quot;hovered&quot; until the cursor leaves its area, including its
            children's areas.</para>
            <para>If a parent item handles child events, it will receive hover
            move, drag move, and drop events as the cursor passes through its children,
            but it does not receive hover enter and hover leave, nor drag enter and
            drag leave events on behalf of its children.</para>
            <para>A QGraphicsWidget with window decorations will accept hover
            events regardless of the value of acceptHoverEvents().</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also acceptHoverEvents(), hoverEnterEvent(),
            hoverMoveEvent(), and hoverLeaveEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.AcceptTouchEvents">
            <summary>
            <para>Returns true if an item accepts touch events; otherwise, returns
            false. By default, items do not accept touch events.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setAcceptTouchEvents().</para>
            <para></para>
            <para>If enabled is true, this item will accept touch events;
            otherwise, it will ignore them. By default, items do not accept touch
            events.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also acceptTouchEvents().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.FiltersChildEvents">
            <summary>
            <para>Returns true if this item filters child events (i.e., all events
            intended for any of its children are instead sent to this item); otherwise,
            false is returned.</para>
            <para>The default value is false; child events are not filtered.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setFiltersChildEvents().</para>
            <para></para>
            <para>If enabled is true, this item is set to filter all events for all
            its children (i.e., all events intented for any of its children are instead
            sent to this item); otherwise, if enabled is false, this item will only
            handle its own events. The default value is false.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also filtersChildEvents().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.HandlesChildEvents">
            <summary>
            <para>Returns true if this item handles child events (i.e., all events
            intended for any of its children are instead sent to this item); otherwise,
            false is returned.</para>
            <para>This property is useful for item groups; it allows one item to
            handle events on behalf of its children, as opposed to its children
            handling their events individually.</para>
            <para>The default is to return false; children handle their own events.
            The exception for this is if the item is a QGraphicsItemGroup, then it
            defaults to return true.</para>
            <para>See also setHandlesChildEvents().</para>
            <para></para>
            <para>If enabled is true, this item is set to handle all events for all
            its children (i.e., all events intented for any of its children are instead
            sent to this item); otherwise, if enabled is false, this item will only
            handle its own events. The default value is false.</para>
            <para>This property is useful for item groups; it allows one item to
            handle events on behalf of its children, as opposed to its children
            handling their events individually.</para>
            <para>If a child item accepts hover events, its parent will receive
            hover move events as the cursor passes through the child, but it does not
            receive hover enter and hover leave events on behalf of its child.</para>
            <para>See also handlesChildEvents().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Active">
            <summary>
            <para>Returns true if this item is active; otherwise returns
            false.</para>
            <para>An item can only be active if the scene is active. An item is
            active if it is, or is a descendent of, an active panel. Items in
            non-active panels are not active.</para>
            <para>Items that are not part of a panel follow scene activation when
            the scene has no active panel.</para>
            <para>Only active items can gain input focus.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also QGraphicsScene::isActive(),
            QGraphicsScene::activePanel(), panel(), and isPanel().</para>
            <para></para>
            <para>If active is true, and the scene is active, this item's panel
            will be activated. Otherwise, the panel is deactivated.</para>
            <para>If the item is not part of an active scene, active will decide
            what happens to the panel when the scene becomes active or the item is
            added to the scene. If true, the item's panel will be activated when the
            item is either added to the scene or the scene is activated. Otherwise, the
            item will stay inactive independent of the scene's activated state.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also isPanel(), QGraphicsScene::setActivePanel(), and
            QGraphicsScene::isActive().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.FocusProxy">
            <summary>
            <para>Returns this item's focus proxy, or 0 if this item has no focus
            proxy.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setFocusProxy(), setFocus(), and hasFocus().</para>
            <para></para>
            <para>Sets the item's focus proxy to item.</para>
            <para>If an item has a focus proxy, the focus proxy will receive input
            focus when the item gains input focus. The item itself will still have
            focus (i.e., hasFocus() will return true), but only the focus proxy will
            receive the keyboard input.</para>
            <para>A focus proxy can itself have a focus proxy, and so on. In such
            case, keyboard input will be handled by the outermost focus proxy.</para>
            <para>The focus proxy item must belong to the same scene as this
            item.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also focusProxy(), setFocus(), and hasFocus().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.X">
            <summary>
            <para>This convenience function is equivalent to calling
            pos().x().</para>
            <para>See also setX() and y().</para>
            <para></para>
            <para>Set's the x coordinate of the item's position. Equivalent to
            calling setPos(x, y()).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also x() and setPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Y">
            <summary>
            <para>This convenience function is equivalent to calling
            pos().y().</para>
            <para>See also setY() and x().</para>
            <para></para>
            <para>Set's the y coordinate of the item's position. Equivalent to
            calling setPos(x(), y).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also y(), x(), and setPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Pos">
            <summary>
            <para>Returns the position of the item in parent coordinates. If the
            item has no parent, its position is given in scene coordinates.</para>
            <para>The position of the item describes its origin (local coordinate
            (0, 0)) in parent coordinates; this function returns the same as
            mapToParent(0, 0).</para>
            <para>For convenience, you can also call scenePos() to determine the
            item's position in scene coordinates, regardless of its parent.</para>
            <para>See also x(), y(), setPos(), transform(), and The Graphics View
            Coordinate System.</para>
            <para></para>
            <para>Sets the position of the item to pos, which is in parent
            coordinates. For items with no parent, pos is in scene coordinates.</para>
            <para>The position of the item describes its origin (local coordinate
            (0, 0)) in parent coordinates.</para>
            <para>See also pos(), scenePos(), and The Graphics View Coordinate
            System.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Rotation">
            <summary>
            <para>Returns the clockwise rotation, in degrees, around the Z axis.
            The default value is 0 (i.e., the item is not rotated).</para>
            <para>The rotation is combined with the item's scale(), transform() and
            transformations() to map the item's coordinate system to the parent
            item.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setRotation(), transformOriginPoint(), and
            Transformations.</para>
            <para></para>
            <para>Sets the clockwise rotation angle, in degrees, around the Z axis.
            The default value is 0 (i.e., the item is not rotated). Assigning a
            negative value will rotate the item counter-clockwise. Normally the
            rotation angle is in the range (-360, 360), but it's also possible to
            assign values outside of this range (e.g., a rotation of 370 degrees is the
            same as a rotation of 10 degrees).</para>
            <para>The item is rotated around its transform origin point, which by
            default is (0, 0). You can select a different transformation origin by
            calling setTransformOriginPoint().</para>
            <para>The rotation is combined with the item's scale(), transform() and
            transformations() to map the item's coordinate system to the parent
            item.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also rotation(), setTransformOriginPoint(), and
            Transformations.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Scale">
            <summary>
            <para>Returns the scale factor of the item. The default scale factor is
            1.0 (i.e., the item is not scaled).</para>
            <para>The scale is combined with the item's rotation(), transform() and
            transformations() to map the item's coordinate system to the parent
            item.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setScale(), rotation(), and Transformations.</para>
            <para></para>
            <para>Sets the scale factor of the item. The default scale factor is
            1.0 (i.e., the item is not scaled). A scale factor of 0.0 will collapse the
            item to a single point. If you provide a negative scale factor, the item
            will be flipped and mirrored (i.e., rotated 180 degrees).</para>
            <para>The item is scaled around its transform origin point, which by
            default is (0, 0). You can select a different transformation origin by
            calling setTransformOriginPoint().</para>
            <para>The scale is combined with the item's rotation(), transform() and
            transformations() to map the item's coordinate system to the parent
            item.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also scale(), setTransformOriginPoint(), and Transformations
            Example.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.TransformOriginPoint">
            <summary>
            <para>Returns the origin point for the transformation in item
            coordinates.</para>
            <para>The default is QPointF(0,0).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setTransformOriginPoint() and Transformations.</para>
            <para></para>
            <para>Sets the origin point for the transformation in item
            coordinates.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also transformOriginPoint() and Transformations.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.ZValue">
            <summary>
            <para>Returns the Z-value of the item. The Z-value affects the stacking
            order of sibling (neighboring) items.</para>
            <para>The default Z-value is 0.</para>
            <para>See also setZValue(), Sorting, stackBefore(), and
            ItemStacksBehindParent.</para>
            <para></para>
            <para>Sets the Z-value of the item to z. The Z value decides the
            stacking order of sibling (neighboring) items. A sibling item of high Z
            value will always be drawn on top of another sibling item with a lower Z
            value.</para>
            <para>If you restore the Z value, the item's insertion order will
            decide its stacking order.</para>
            <para>The Z-value does not affect the item's size in any way.</para>
            <para>The default Z-value is 0.</para>
            <para>See also zValue(), Sorting, stackBefore(), and
            ItemStacksBehindParent.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.BoundingRegionGranularity">
            <summary>
            <para>Returns the item's bounding region granularity; a value between
            and including 0 and 1. The default value is 0 (i.e., the lowest
            granularity, where the bounding region corresponds to the item's bounding
            rectangle).</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setBoundingRegionGranularity().</para>
            <para></para>
            <para>Sets the bounding region granularity to granularity; a value
            between and including 0 and 1. The default value is 0 (i.e., the lowest
            granularity, where the bounding region corresponds to the item's bounding
            rectangle).</para>
            <para>The granularity is used by boundingRegion() to calculate how fine
            the bounding region of the item should be. The highest achievable
            granularity is 1, where boundingRegion() will return the finest outline
            possible for the respective device (e.g., for a QGraphicsView viewport,
            this gives you a pixel-perfect bounding region). The lowest possible
            granularity is 0. The value of granularity describes the ratio between
            device resolution and the resolution of the bounding region (e.g., a value
            of 0.25 will provide a region where each chunk corresponds to 4x4 device
            units / pixels).</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also boundingRegionGranularity().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.InputMethodHints">
            <summary>
            <para>Returns the current input method hints of this item.</para>
            <para>Input method hints are only relevant for input items. The hints
            are used by the input method to indicate how it should operate. For
            example, if the Qt::ImhNumbersOnly flag is set, the input method may change
            its visual components to reflect that only numbers can be entered.</para>
            <para>The effect may vary between input method implementations.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setInputMethodHints() and inputMethodQuery().</para>
            <para></para>
            <para>Sets the current input method hints of this item to hints.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also inputMethodHints() and inputMethodQuery().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.cacheMode">
            <summary>
            <para>Returns the cache mode for this item. The default mode is NoCache
            (i.e., cache is disabled and all painting is immediate).</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setCacheMode().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Matrix">
            <summary>
            <para>Returns the item's affine transformation matrix. This is a subset
            or the item's full transformation matrix, and might not represent the
            item's full transformation.</para>
            <para>Use transform() instead.</para>
            <para>See also setMatrix(), setTransform(), and
            sceneTransform().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Transform">
            <summary>
            <para>Returns this item's transformation matrix.</para>
            <para>The transformation matrix is combined with the item's rotation(),
            scale() and transformations() into a combined transformations for the
            item.</para>
            <para>The default transformation matrix is an identity matrix.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setTransform() and sceneTransform().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Scene">
            <summary>
            <para>Returns the current scene for the item, or 0 if the item is not
            stored in a scene.</para>
            <para>To add or move an item to a scene, call
            QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.TopLevelItem">
            <summary>
            <para>Returns this item's top-level item. The top-level item is the
            item's topmost ancestor item whose parent is 0. If an item has no parent,
            its own pointer is returned (i.e., a top-level item is its own top-level
            item).</para>
            <para>See also parentItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.ParentObject">
            <summary>
            <para>Returns a pointer to the item's parent, cast to a
            QGraphicsObject. returns 0 if the parent item is not a
            QGraphicsObject.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also parentItem() and childItems().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.ParentWidget">
            <summary>
            <para>Returns a pointer to the item's parent widget. The item's parent
            widget is the closest parent item that is a widget.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also parentItem() and childItems().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.TopLevelWidget">
            <summary>
            <para>Returns a pointer to the item's top level widget (i.e., the
            item's ancestor whose parent is 0, or whose parent is not a widget), or 0
            if this item does not have a top level widget. If the item is its own top
            level widget, this function returns a pointer to the item itself.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Window">
            <summary>
            <para>Returns the item's window, or 0 if this item does not have a
            window. If the item is a window, it will return itself. Otherwise it will
            return the closest ancestor that is a window.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QGraphicsWidget::isWindow().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Panel">
            <summary>
            <para>Returns the item's panel, or 0 if this item does not have a
            panel. If the item is a panel, it will return itself. Otherwise it will
            return the closest ancestor that is a panel.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also isPanel() and ItemIsPanel.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.IsWidget">
            <summary>
            <para>Returns true if this item is a widget (i.e., QGraphicsWidget);
            otherwise, returns false.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.IsWindow">
            <summary>
            <para>Returns true if the item is a QGraphicsWidget window, otherwise
            returns false.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QGraphicsWidget::windowFlags().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.IsPanel">
            <summary>
            <para>Returns true if the item is a panel; otherwise returns
            false.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also QGraphicsItem::panel() and ItemIsPanel.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.HasCursor">
            <summary>
            <para>Returns true if this item has a cursor set; otherwise, false is
            returned.</para>
            <para>By default, items don't have any cursor set. cursor() will return
            a standard pointing arrow cursor.</para>
            <para>See also unsetCursor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.EffectiveOpacity">
            <summary>
            <para>Returns this item's effective opacity, which is between 0.0
            (transparent) and 1.0 (opaque). This value is a combination of this item's
            local opacity, and its parent and ancestors' opacities. The effective
            opacity decides how the item is rendered.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also opacity(), setOpacity(), paint(),
            ItemIgnoresParentOpacity, and ItemDoesntPropagateOpacityToChildren.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.HasFocus">
            <summary>
            <para>Returns true if this item is active, and it or its focus proxy
            has keyboard input focus; otherwise, returns false.</para>
            <para>See also focusItem(), setFocus(), QGraphicsScene::setFocusItem(),
            and isActive().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.ScenePos">
            <summary>
            <para>Returns the item's position in scene coordinates. This is
            equivalent to calling mapToScene(0, 0).</para>
            <para>See also pos(), sceneTransform(), and The Graphics View
            Coordinate System.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.SceneMatrix">
            <summary>
            <para>Use sceneTransform() instead.</para>
            <para>See also transform(), setTransform(), scenePos(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.SceneTransform">
            <summary>
            <para>Returns this item's scene transformation matrix. This matrix can
            be used to map coordinates and geometrical shapes from this item's local
            coordinate system to the scene's coordinate system. To map coordinates from
            the scene, you must first invert the returned matrix.</para>
            <para>Example:</para>
            <para>QGraphicsRectItem rect;</para>
            <para>rect.setPos(100, 100);</para>
            <para></para>
            <para>rect.sceneTransform().map(QPointF(0, 0));</para>
            <para>// returns QPointF(100, 100);</para>
            <para></para>
            <para>rect.sceneTransform().inverted().map(QPointF(100, 100));</para>
            <para>// returns QPointF(0, 0);</para>
            <para>Unlike transform(), which returns only an item's local
            transformation, this function includes the item's (and any parents')
            position, and all the transfomation properties.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also transform(), setTransform(), scenePos(), The Graphics
            View Coordinate System, and Transformations.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.BoundingRect">
            <summary>
            <para>This pure virtual function defines the outer bounds of the item
            as a rectangle; all painting must be restricted to inside an item's
            bounding rect. QGraphicsView uses this to determine whether the item
            requires redrawing.</para>
            <para>Although the item's shape can be arbitrary, the bounding rect is
            always rectangular, and it is unaffected by the items'
            transformation.</para>
            <para>If you want to change the item's bounding rectangle, you must
            first call prepareGeometryChange(). This notifies the scene of the imminent
            change, so that it can update its item geometry index; otherwise, the scene
            will be unaware of the item's new geometry, and the results are undefined
            (typically, rendering artifacts are left within the view).</para>
            <para>Reimplement this function to let QGraphicsView determine what
            parts of the widget, if any, need to be redrawn.</para>
            <para>Note: For shapes that paint an outline / stroke, it is important
            to include half the pen width in the bounding rect. It is not necessary to
            compensate for antialiasing, though.</para>
            <para>Example:</para>
            <para>QRectF CircleItem::boundingRect() const</para>
            <para>{</para>
            <para>    qreal penWidth = 1;</para>
            <para>    return QRectF(-radius - penWidth / 2, -radius - penWidth /
            2,</para>
            <para>                  diameter + penWidth, diameter +
            penWidth);</para>
            <para>}</para>
            <para>See also boundingRegion(), shape(), contains(), The Graphics View
            Coordinate System, and prepareGeometryChange().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.ChildrenBoundingRect">
            <summary>
            <para>Returns the bounding rect of this item's descendants (i.e., its
            children, their children, etc.) in local coordinates. The rectangle will
            contain all descendants after they have been mapped to local coordinates.
            If the item has no children, this function returns an empty QRectF.</para>
            <para>This does not include this item's own bounding rect; it only
            returns its descendants' accumulated bounding rect. If you need to include
            this item's bounding rect, you can add boundingRect() to
            childrenBoundingRect() using QRectF::operator|().</para>
            <para>This function is linear in complexity; it determines the size of
            the returned bounding rect by iterating through all descendants.</para>
            <para>See also boundingRect() and sceneBoundingRect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.SceneBoundingRect">
            <summary>
            <para>Returns the bounding rect of this item in scene coordinates, by
            combining sceneTransform() with boundingRect().</para>
            <para>See also boundingRect() and The Graphics View Coordinate
            System.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Shape">
            <summary>
            <para>Returns the shape of this item as a QPainterPath in local
            coordinates. The shape is used for many things, including collision
            detection, hit tests, and for the QGraphicsScene::items() functions.</para>
            <para>The default implementation calls boundingRect() to return a
            simple rectangular shape, but subclasses can reimplement this function to
            return a more accurate shape for non-rectangular items. For example, a
            round item may choose to return an elliptic shape for better collision
            detection. For example:</para>
            <para>QPainterPath RoundItem::shape() const</para>
            <para>{</para>
            <para>    QPainterPath path;</para>
            <para>    path.addEllipse(boundingRect());</para>
            <para>    return path;</para>
            <para>}</para>
            <para>The outline of a shape can vary depending on the width and style
            of the pen used when drawing. If you want to include this outline in the
            item's shape, you can create a shape from the stroke using
            QPainterPathStroker.</para>
            <para>This function is called by the default implementations of
            contains() and collidesWithPath().</para>
            <para>See also boundingRect(), contains(), prepareGeometryChange(), and
            QPainterPathStroker.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.IsClipped">
            <summary>
            <para>Returns true if this item is clipped. An item is clipped if it
            has either set the ItemClipsToShape flag, or if it or any of its ancestors
            has set the ItemClipsChildrenToShape flag.</para>
            <para>Clipping affects the item's appearance (i.e., painting), as well
            as mouse and hover event delivery.</para>
            <para>See also clipPath(), shape(), and setFlags().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.ClipPath">
            <summary>
            <para>Returns this item's clip path, or an empty QPainterPath if this
            item is not clipped. The clip path constrains the item's appearance and
            interaction (i.e., restricts the area the item can draw within and receive
            events for).</para>
            <para>You can enable clipping by setting the ItemClipsToShape or
            ItemClipsChildrenToShape flags. The item's clip path is calculated by
            intersecting all clipping ancestors' shapes. If the item sets
            ItemClipsToShape, the final clip is intersected with the item's own
            shape.</para>
            <para>Note: Clipping introduces a performance penalty for all items
            involved; you should generally avoid using clipping if you can (e.g., if
            your items always draw inside boundingRect() or shape() boundaries,
            clipping is not necessary).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also isClipped(), shape(), and setFlags().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.OpaqueArea">
            <summary>
            <para>This virtual function returns a shape representing the area where
            this item is opaque. An area is opaque if it is filled using an opaque
            brush or color (i.e., not transparent).</para>
            <para>This function is used by isObscuredBy(), which is called by
            underlying items to determine if they are obscured by this item.</para>
            <para>The default implementation returns an empty QPainterPath,
            indicating that this item is completely transparent and does not obscure
            any other items.</para>
            <para>See also isObscuredBy(), isObscured(), and shape().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.IsUnderMouse">
            <summary>
            <para>Returns true if this item is currently under the mouse cursor in
            one of the views; otherwise, false is returned.</para>
            <para>This function was introduced in  Qt 4,4.</para>
            <para>See also QGraphicsScene::views() and QCursor::pos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsItem.Type">
            <summary>
            <para>Returns the type of an item as an int. All standard graphicsitem
            classes are associated with a unique value; see QGraphicsItem::Type. This
            type information is used by qgraphicsitem_cast() to distinguish between
            types.</para>
            <para>The default implementation (in QGraphicsItem) returns
            UserType.</para>
            <para>To enable use of qgraphicsitem_cast() with a custom item,
            reimplement this function and declare a Type enum value equal to your
            custom item's type. Custom items must return a value larger than or equal
            to UserType (65536).</para>
            <para>For example:</para>
            <para>class CustomItem : public QGraphicsItem</para>
            <para>{</para>
            <para>public:</para>
            <para>   enum { Type = UserType + 1 };</para>
            <para></para>
            <para>   int type() const</para>
            <para>   {</para>
            <para>       // Enable the use of qgraphicsitem_cast with this
            item.</para>
            <para>       return Type;</para>
            <para>   }</para>
            <para>   ...</para>
            <para>};</para>
            <para>See also UserType.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.#ctor(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsItem with the given parent item. It does
            not modify the parent object returned by QObject::parent().</para>
            <para>If parent is 0, you can add the item to a scene by calling
            QGraphicsScene::addItem(). The item will then become a top-level
            item.</para>
            <para>See also QGraphicsScene::addItem() and setParentItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.ToGraphicsObject">
            <summary>
            <para>Return the graphics item cast to a QGraphicsObject, if the class
            is actually a graphics object, 0 otherwise.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.SetFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag,System.Boolean)">
            <summary>
            <para>If enabled is true, the item flag flag is enabled; otherwise, it
            is disabled.</para>
            <para>See also flags() and setFlags().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.SetCacheMode(QtWidgets.QGraphicsItem.CacheMode,QtCore.QSize)">
            <summary>
            <para>Sets the item's cache mode to mode.</para>
            <para>The optional logicalCacheSize argument is used only by
            ItemCoordinateCache mode, and describes the resolution of the cache buffer;
            if logicalCacheSize is (100, 100), QGraphicsItem will fit the item into
            100x100 pixels in graphics memory, regardless of the logical size of the
            item itself. By default QGraphicsItem uses the size of boundingRect(). For
            all other cache modes than ItemCoordinateCache, logicalCacheSize is
            ignored.</para>
            <para>Caching can speed up rendering if your item spends a significant
            time redrawing itself. In some cases the cache can also slow down
            rendering, in particular when the item spends less time redrawing than
            QGraphicsItem spends redrawing from the cache.</para>
            <para>When caching is enabled, an item's paint() function will
            generally draw into an offscreen pixmap cache; for any subsequent repaint
            requests, the Graphics View framework will redraw from the cache. This
            approach works particularly well with QGLWidget, which stores all the cache
            as OpenGL textures.</para>
            <para>Be aware that QPixmapCache's cache limit may need to be changed
            to obtain optimal performance.</para>
            <para>You can read more about the different cache modes in the
            CacheMode documentation.</para>
            <para>Note: Enabling caching does not imply that the item's paint()
            function will be called only in response to an explicit update() call. For
            instance, under memory pressure, Qt may decide to drop some of the cache
            information; in such cases an item's paint() function will be called even
            if there was no update() call (that is, exactly as if there were no caching
            enabled).</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also cacheMode(), CacheMode, and
            QPixmapCache::setCacheLimit().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.IsBlockedByModalPanel(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns true if this item is blocked by a modal panel, false
            otherwise. If blockingPanel is non-zero, blockingPanel will be set to the
            modal panel that is blocking this item. If this item is not blocked,
            blockingPanel will not be set by this function.</para>
            <para>This function always returns false for items not in a
            scene.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also panelModality(), setPanelModality(), and
            PanelModality.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.UnsetCursor">
            <summary>
            <para>Clears the cursor from this item.</para>
            <para>See also hasCursor() and setCursor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.IsVisibleTo(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns true if the item is visible to parent; otherwise, false
            is returned. parent can be 0, in which case this function will return
            whether the item is visible to the scene or not.</para>
            <para>An item may not be visible to its ancestors even if isVisible()
            is true. It may also be visible to its ancestors even if isVisible() is
            false. If any ancestor is hidden, the item itself will be implicitly
            hidden, in which case this function will return false.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also isVisible() and setVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.Hide">
            <summary>
            <para>Hides the item (items are visible by default).</para>
            <para>This convenience function is equivalent to calling
            setVisible(false).</para>
            <para>See also show() and setVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.Show">
            <summary>
            <para>Shows the item (items are visible by default).</para>
            <para>This convenience function is equivalent to calling
            setVisible(true).</para>
            <para>See also hide() and setVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.SetFocus(QtCore.Qt.FocusReason)">
            <summary>
            <para>Gives keyboard input focus to this item. The focusReason argument
            will be passed into any focus event generated by this function; it is used
            to give an explanation of what caused the item to get focus.</para>
            <para>Only enabled items that set the ItemIsFocusable flag can accept
            keyboard focus.</para>
            <para>If this item is not visible, not active, or not associated with a
            scene, it will not gain immediate input focus. However, it will be
            registered as the preferred focus item for its subtree of items, should it
            later become visible.</para>
            <para>As a result of calling this function, this item will receive a
            focus in event with focusReason. If another item already has focus, that
            item will first receive a focus out event indicating that it has lost input
            focus.</para>
            <para>See also clearFocus(), hasFocus(), focusItem(), and
            focusProxy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.ClearFocus">
            <summary>
            <para>Takes keyboard input focus from the item.</para>
            <para>If it has focus, a focus out event is sent to this item to tell
            it that it is about to lose the focus.</para>
            <para>Only items that set the ItemIsFocusable flag, or widgets that set
            an appropriate focus policy, can accept keyboard focus.</para>
            <para>See also setFocus(), hasFocus(), and
            QGraphicsWidget::focusPolicy.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.FocusItem">
            <summary>
            <para>If this item, a child or descendant of this item currently has
            input focus, this function will return a pointer to that item. If no
            descendant has input focus, 0 is returned.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also hasFocus(), setFocus(), and
            QWidget::focusWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.GrabMouse">
            <summary>
            <para>Grabs the mouse input.</para>
            <para>This item will receive all mouse events for the scene until any
            of the following events occurs:</para>
            <para></para>
            <para>The item becomes invisible</para>
            <para>The item is removed from the scene</para>
            <para>The item is deleted</para>
            <para>The item call ungrabMouse()</para>
            <para>Another item calls grabMouse(); the item will regain the mouse
            grab when the other item calls ungrabMouse().</para>
            <para></para>
            <para>When an item gains the mouse grab, it receives a
            QEvent::GrabMouse event. When it loses the mouse grab, it receives a
            QEvent::UngrabMouse event. These events can be used to detect when your
            item gains or loses the mouse grab through other means than receiving mouse
            button events.</para>
            <para>It is almost never necessary to explicitly grab the mouse in Qt,
            as Qt grabs and releases it sensibly. In particular, Qt grabs the mouse
            when you press a mouse button, and keeps the mouse grabbed until you
            release the last mouse button. Also, Qt::Popup widgets implicitly call
            grabMouse() when shown, and ungrabMouse() when hidden.</para>
            <para>Note that only visible items can grab mouse input. Calling
            grabMouse() on an invisible item has no effect.</para>
            <para>Keyboard events are not affected.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QGraphicsScene::mouseGrabberItem(), ungrabMouse(), and
            grabKeyboard().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.UngrabMouse">
            <summary>
            <para>Releases the mouse grab.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also grabMouse() and ungrabKeyboard().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.GrabKeyboard">
            <summary>
            <para>Grabs the keyboard input.</para>
            <para>The item will receive all keyboard input to the scene until one
            of the following events occur:</para>
            <para></para>
            <para>The item becomes invisible</para>
            <para>The item is removed from the scene</para>
            <para>The item is deleted</para>
            <para>The item calls ungrabKeyboard()</para>
            <para>Another item calls grabKeyboard(); the item will regain the
            keyboard grab when the other item calls ungrabKeyboard().</para>
            <para></para>
            <para>When an item gains the keyboard grab, it receives a
            QEvent::GrabKeyboard event. When it loses the keyboard grab, it receives a
            QEvent::UngrabKeyboard event. These events can be used to detect when your
            item gains or loses the keyboard grab through other means than gaining
            input focus.</para>
            <para>It is almost never necessary to explicitly grab the keyboard in
            Qt, as Qt grabs and releases it sensibly. In particular, Qt grabs the
            keyboard when your item gains input focus, and releases it when your item
            loses input focus, or when the item is hidden.</para>
            <para>Note that only visible items can grab keyboard input. Calling
            grabKeyboard() on an invisible item has no effect.</para>
            <para>Keyboard events are not affected.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also ungrabKeyboard(), grabMouse(), and setFocus().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.UngrabKeyboard">
            <summary>
            <para>Releases the keyboard grab.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also grabKeyboard() and ungrabMouse().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.SetPos(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            setPos(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MoveBy(System.Double,System.Double)">
            <summary>
            <para>Moves the item by dx points horizontally, and dy point
            vertically. This function is equivalent to calling setPos(pos() +
            QPointF(dx, dy)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.EnsureVisible(QtCore.QRectF,System.Int32,System.Int32)">
            <summary>
            <para>If this item is part of a scene that is viewed by a
            QGraphicsView, this convenience function will attempt to scroll the view to
            ensure that rect is visible inside the view's viewport. If rect is a null
            rect (the default), QGraphicsItem will default to the item's bounding rect.
            xmargin and ymargin are the number of pixels the view should use for
            margins.</para>
            <para>If the specified rect cannot be reached, the contents are
            scrolled to the nearest valid position.</para>
            <para>If this item is not viewed by a QGraphicsView, this function does
            nothing.</para>
            <para>See also QGraphicsView::ensureVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.EnsureVisible(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            <para>This convenience function is equivalent to calling
            ensureVisible(QRectF(x, y, w, h), xmargin, ymargin).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.SetMatrix(QtGui.QMatrix,System.Boolean)">
            <summary>
            <para>Sets the item's affine transformation matrix. This is a subset or
            the item's full transformation matrix, and might not represent the item's
            full transformation.</para>
            <para>Use setTransform() instead.</para>
            <para>See also matrix(), transform(), and The Graphics View Coordinate
            System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.ResetMatrix">
            <summary>
            <para>Use resetTransform() instead.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.DeviceTransform(QtGui.QTransform)">
             <summary>
             <para>Returns this item's device transformation matrix, using
             viewportTransform to map from scene to device coordinates. This matrix can
             be used to map coordinates and geometrical shapes from this item's local
             coordinate system to the viewport's (or any device's) coordinate system. To
             map coordinates from the viewport, you must first invert the returned
             matrix.</para>
             <para>Example:</para>
             <para>QGraphicsRectItem rect;</para>
             <para>rect.setPos(100, 100);</para>
             <para></para>
             <para>rect.deviceTransform(view-&gt;viewportTransform()).map(QPointF(0,
             0));</para>
             <para>// returns the item's (0, 0) point in view's viewport
             coordinates</para>
             <para></para>
            
             <para>rect.deviceTransform(view-&gt;viewportTransform()).inverted().map(QPo
             intF(100, 100));</para>
             <para>// returns view's viewport's (100, 100) coordinate in item
             coordinates</para>
             <para>This function is the same as combining this item's scene
             transform with the view's viewport transform, but it also understands the
             ItemIgnoresTransformations flag. The device transform can be used to do
             accurate coordinate mapping (and collision detection) for untransformable
             items.</para>
             <para>This function was introduced in  Qt 4.3.</para>
             <para>See also transform(), setTransform(), scenePos(), The Graphics
             View Coordinate System, and itemTransform().</para>
             </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.ItemTransform(QtWidgets.IQGraphicsItem,System.Boolean@)">
            <summary>
            <para>Returns a QTransform that maps coordinates from this item to
            other. If ok is not null, and if there is no such transform, the boolean
            pointed to by ok will be set to false; otherwise it will be set to
            true.</para>
            <para>This transform provides an alternative to the mapToItem() or
            mapFromItem() functions, by returning the appropriate transform so that you
            can map shapes and coordinates yourself. It also helps you write more
            efficient code when repeatedly mapping between the same two items.</para>
            <para>Note: In rare circumstances, there is no transform that maps
            between two items.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also mapToItem(), mapFromItem(), and
            deviceTransform().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.SetTransform(QtGui.QTransform,System.Boolean)">
            <summary>
            <para>Sets the item's current transformation matrix to matrix.</para>
            <para>If combine is true, then matrix is combined with the current
            matrix; otherwise, matrix replaces the current matrix. combine is false by
            default.</para>
            <para>To simplify interation with items using a transformed view,
            QGraphicsItem provides mapTo... and mapFrom... functions that can translate
            between items' and the scene's coordinates. For example, you can call
            mapToScene() to map an item coordiate to a scene coordinate, or
            mapFromScene() to map from scene coordinates to item coordinates.</para>
            <para>The transformation matrix is combined with the item's rotation(),
            scale() and transformations() into a combined transformation that maps the
            item's coordinate system to its parent.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also transform(), setRotation(), setScale(),
            setTransformOriginPoint(), The Graphics View Coordinate System, and
            Transformations.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.ResetTransform">
            <summary>
            <para>Resets this item's transformation matrix to the identity matrix
            or all the transformation properties to their default values. This is
            equivalent to calling setTransform(QTransform()).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setTransform() and transform().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.SetTransformOriginPoint(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the origin point for the transformation in item coordinates.
            This is equivalent to calling setTransformOriginPoint(QPointF(x,
            y)).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setTransformOriginPoint() and Transformations.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.Advance(System.Int32)">
            <summary>
            <para>This virtual function is called twice for all items by the
            QGraphicsScene::advance() slot. In the first phase, all items are called
            with phase == 0, indicating that items on the scene are about to advance,
            and then all items are called with phase == 1. Reimplement this function to
            update your item if you need simple scene-controlled animation.</para>
            <para>The default implementation does nothing.</para>
            <para>This function is intended for animations. An alternative is to
            multiple-inherit from QObject and QGraphicsItem and use the Animation
            Framework.</para>
            <para>See also QGraphicsScene::advance() and QTimeLine.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.StackBefore(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Stacks this item before sibling, which must be a sibling item
            (i.e., the two items must share the same parent item, or must both be
            toplevel items). The sibling must have the same Z value as this item,
            otherwise calling this function will have no effect.</para>
            <para>By default, all sibling items are stacked by insertion order
            (i.e., the first item you add is drawn before the next item you add). If
            two items' Z values are different, then the item with the highest Z value
            is drawn on top. When the Z values are the same, the insertion order will
            decide the stacking order.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setZValue(), ItemStacksBehindParent, and Sorting.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.Contains(QtCore.QPointF)">
            <summary>
            <para>Returns true if this item contains point, which is in local
            coordinates; otherwise, false is returned. It is most often called from
            QGraphicsView to determine what item is under the cursor, and for that
            reason, the implementation of this function should be as light-weight as
            possible.</para>
            <para>By default, this function calls shape(), but you can reimplement
            it in a subclass to provide a (perhaps more efficient)
            implementation.</para>
            <para>See also shape(), boundingRect(), and collidesWithPath().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.CollidesWithItem(QtWidgets.IQGraphicsItem,QtCore.Qt.ItemSelectionMode)">
            <summary>
            <para>Returns true if this item collides with other; otherwise returns
            false.</para>
            <para>The mode is applied to other, and the resulting shape or bounding
            rectangle is then compared to this item's shape. The default value for mode
            is Qt::IntersectsItemShape; other collides with this item if it either
            intersects, contains, or is contained by this item's shape (see
            Qt::ItemSelectionMode for details).</para>
            <para>The default implementation is based on shape intersection, and it
            calls shape() on both items. Because the complexity of arbitrary
            shape-shape intersection grows with an order of magnitude when the shapes
            are complex, this operation can be noticably time consuming. You have the
            option of reimplementing this function in a subclass of QGraphicsItem to
            provide a custom algorithm. This allows you to make use of natural
            constraints in the shapes of your own items, in order to improve the
            performance of the collision detection. For instance, two untransformed
            perfectly circular items' collision can be determined very efficiently by
            comparing their positions and radii.</para>
            <para>Keep in mind that when reimplementing this function and calling
            shape() or boundingRect() on other, the returned coordinates must be mapped
            to this item's coordinate system before any intersection can take
            place.</para>
            <para>See also contains() and shape().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.CollidesWithPath(QtGui.QPainterPath,QtCore.Qt.ItemSelectionMode)">
            <summary>
            <para>Returns true if this item collides with path.</para>
            <para>The collision is determined by mode. The default value for mode
            is Qt::IntersectsItemShape; path collides with this item if it either
            intersects, contains, or is contained by this item's shape.</para>
            <para>Note that this function checks whether the item's shape or
            bounding rectangle (depending on mode) is contained within path, and not
            whether path is contained within the items shape or bounding
            rectangle.</para>
            <para>See also collidesWithItem(), contains(), and shape().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.IsObscured(QtCore.QRectF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if rect is completely obscured by the opaque shape
            of any of colliding items above it (i.e., with a higher Z value than this
            item).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also opaqueArea().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.IsObscured(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            isObscured(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.IsObscuredBy(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns true if this item's bounding rect is completely obscured
            by the opaque shape of item.</para>
            <para>The base implementation maps item's opaqueArea() to this item's
            coordinate system, and then checks if this item's boundingRect() is fully
            contained within the mapped shape.</para>
            <para>You can reimplement this function to provide a custom algorithm
            for determining whether this item is obscured by item.</para>
            <para>See also opaqueArea() and isObscured().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.BoundingRegion(QtGui.QTransform)">
            <summary>
            <para>Returns the bounding region for this item. The coordinate space
            of the returned region depends on itemToDeviceTransform. If you pass an
            identity QTransform as a parameter, this function will return a local
            coordinate region.</para>
            <para>The bounding region describes a coarse outline of the item's
            visual contents. Although it's expensive to calculate, it's also more
            precise than boundingRect(), and it can help to avoid unnecessary
            repainting when an item is updated. This is particularly efficient for thin
            items (e.g., lines or simple polygons). You can tune the granularity for
            the bounding region by calling setBoundingRegionGranularity(). The default
            granularity is 0; in which the item's bounding region is the same as its
            bounding rect.</para>
            <para>itemToDeviceTransform is the transformation from item coordinates
            to device coordinates. If you want this function to return a QRegion in
            scene coordinates, you can pass sceneTransform() as an argument.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also boundingRegionGranularity().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.Paint(QtGui.QPainter,QtWidgets.QStyleOptionGraphicsItem,QtWidgets.QWidget)">
            <summary>
            <para>This function, which is usually called by QGraphicsView, paints
            the contents of an item in local coordinates.</para>
            <para>Reimplement this function in a QGraphicsItem subclass to provide
            the item's painting implementation, using painter. The option parameter
            provides style options for the item, such as its state, exposed area and
            its level-of-detail hints. The widget argument is optional. If provided, it
            points to the widget that is being painted on; otherwise, it is 0. For
            cached painting, widget is always 0.</para>
            <para>void RoundRectItem::paint(QPainter *painter,</para>
            <para>                          const QStyleOptionGraphicsItem
            *option,</para>
            <para>                          QWidget *widget)</para>
            <para>{</para>
            <para>    painter-&gt;drawRoundedRect(-10, -10, 20, 20, 5, 5);</para>
            <para>}</para>
            <para>The painter's pen is 0-width by default, and its pen is
            initialized to the QPalette::Text brush from the paint device's palette.
            The brush is initialized to QPalette::Window.</para>
            <para>Make sure to constrain all painting inside the boundaries of
            boundingRect() to avoid rendering artifacts (as QGraphicsView does not clip
            the painter for you). In particular, when QPainter renders the outline of a
            shape using an assigned QPen, half of the outline will be drawn outside,
            and half inside, the shape you're rendering (e.g., with a pen width of 2
            units, you must draw outlines 1 unit inside boundingRect()). QGraphicsItem
            does not support use of cosmetic pens with a non-zero width.</para>
            <para>All painting is done in local coordinates.</para>
            <para>Note: It is mandatory that an item will always redraw itself in
            the exact same way, unless update() was called; otherwise visual artifacts
            may occur. In other words, two subsequent calls to paint() must always
            produce the same output, unless update() was called between them.</para>
            <para>Note: Enabling caching for an item does not guarantee that
            paint() will be invoked only once by the Graphics View framework, even
            without any explicit call to update(). See the documentation of
            setCacheMode() for more details.</para>
            <para>See also setCacheMode(), QPen::width(), Item Coordinates, and
            ItemUsesExtendedStyleOption.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.Update(QtCore.QRectF)">
            <summary>
            <para>Schedules a redraw of the area covered by rect in this item. You
            can call this function whenever your item needs to be redrawn, such as if
            it changes appearance or size.</para>
            <para>This function does not cause an immediate paint; instead it
            schedules a paint request that is processed by QGraphicsView after control
            reaches the event loop. The item will only be redrawn if it is visible in
            any associated view.</para>
            <para>As a side effect of the item being repainted, other items that
            overlap the area rect may also be repainted.</para>
            <para>If the item is invisible (i.e., isVisible() returns false), this
            function does nothing.</para>
            <para>See also paint() and boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.Update(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            update(QRectF(x, y, width, height)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.Scroll(System.Double,System.Double,QtCore.QRectF)">
            <summary>
            <para>Scrolls the contents of rect by dx, dy. If rect is a null rect
            (the default), the item's bounding rect is scrolled.</para>
            <para>Scrolling provides a fast alternative to simply redrawing when
            the contents of the item (or parts of the item) are shifted vertically or
            horizontally. Depending on the current transformation and the capabilities
            of the paint device (i.e., the viewport), this operation may consist of
            simply moving pixels from one location to another using memmove(). In most
            cases this is faster than rerendering the entire area.</para>
            <para>After scrolling, the item will issue an update for the newly
            exposed areas. If scrolling is not supported (e.g., you are rendering to an
            OpenGL viewport, which does not benefit from scroll optimizations), this
            function is equivalent to calling update(rect).</para>
            <para>Note: Scrolling is only supported when
            QGraphicsItem::ItemCoordinateCache is enabled; in all other cases calling
            this function is equivalent to calling update(rect). If you for sure know
            that the item is opaque and not overlapped by other items, you can map the
            rect to viewport coordinates and scroll the viewport.</para>
            <para>QTransform xform =
            item-&gt;deviceTransform(view-&gt;viewportTransform());</para>
            <para>QRect deviceRect = xform.mapRect(rect).toAlignedRect();</para>
            <para>view-&gt;viewport()-&gt;scroll(dx, dy, deviceRect);</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToItem(QtWidgets.IQGraphicsItem,QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in this item's coordinate system,
            to item's coordinate system, and returns the mapped coordinate.</para>
            <para>If item is 0, this function returns the same as
            mapToScene().</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            transform(), mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToParent(QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in this item's coordinate system,
            to its parent's coordinate system, and returns the mapped coordinate. If
            the item has no parent, point will be mapped to the scene's coordinate
            system.</para>
            <para>See also mapToItem(), mapToScene(), transform(), mapFromParent(),
            and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToScene(QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in this item's coordinate system,
            to the scene's coordinate system, and returns the mapped coordinate.</para>
            <para>See also mapToItem(), mapToParent(), transform(), mapFromScene(),
            and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToItem(QtWidgets.IQGraphicsItem,QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to item's coordinate system, and returns the mapped rectangle as a
            polygon.</para>
            <para>If item is 0, this function returns the same as
            mapToScene().</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToParent(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to its parent's coordinate system, and returns the mapped rectangle
            as a polygon. If the item has no parent, rect will be mapped to the scene's
            coordinate system.</para>
            <para>See also mapToScene(), mapToItem(), mapFromParent(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToScene(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to the scene's coordinate system, and returns the mapped rectangle
            as a polygon.</para>
            <para>See also mapToParent(), mapToItem(), mapFromScene(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapRectToItem(QtWidgets.IQGraphicsItem,QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to item's coordinate system, and returns the mapped rectangle as a
            new rectangle (i.e., the bounding rectangle of the resulting
            polygon).</para>
            <para>If item is 0, this function returns the same as
            mapRectToScene().</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapRectToParent(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to its parent's coordinate system, and returns the mapped rectangle
            as a new rectangle (i.e., the bounding rectangle of the resulting
            polygon).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapRectToScene(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to the scene coordinate system, and returns the mapped rectangle as
            a new rectangle (i.e., the bounding rectangle of the resulting
            polygon).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToItem(QtWidgets.IQGraphicsItem,QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in this item's coordinate
            system, to item's coordinate system, and returns the mapped polygon.</para>
            <para>If item is 0, this function returns the same as
            mapToScene().</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToParent(QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in this item's coordinate
            system, to its parent's coordinate system, and returns the mapped polygon.
            If the item has no parent, polygon will be mapped to the scene's coordinate
            system.</para>
            <para>See also mapToScene(), mapToItem(), mapFromParent(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToScene(QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in this item's coordinate
            system, to the scene's coordinate system, and returns the mapped
            polygon.</para>
            <para>See also mapToParent(), mapToItem(), mapFromScene(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToItem(QtWidgets.IQGraphicsItem,QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in this item's coordinate system, to
            item's coordinate system, and returns the mapped path.</para>
            <para>If item is 0, this function returns the same as
            mapToScene().</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToParent(QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in this item's coordinate system, to
            its parent's coordinate system, and returns the mapped path. If the item
            has no parent, path will be mapped to the scene's coordinate system.</para>
            <para>See also mapToScene(), mapToItem(), mapFromParent(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToScene(QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in this item's coordinate system, to
            the scene's coordinate system, and returns the mapped path.</para>
            <para>See also mapToParent(), mapToItem(), mapFromScene(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromItem(QtWidgets.IQGraphicsItem,QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in item's coordinate system, to
            this item's coordinate system, and returns the mapped coordinate.</para>
            <para>If item is 0, this function returns the same as
            mapFromScene().</para>
            <para>See also itemTransform(), mapFromParent(), mapFromScene(),
            transform(), mapToItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromParent(QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in this item's parent's coordinate
            system, to this item's coordinate system, and returns the mapped
            coordinate.</para>
            <para>See also mapFromItem(), mapFromScene(), transform(),
            mapToParent(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromScene(QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in this item's scene's coordinate
            system, to this item's coordinate system, and returns the mapped
            coordinate.</para>
            <para>See also mapFromItem(), mapFromParent(), transform(),
            mapToScene(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromItem(QtWidgets.IQGraphicsItem,QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in item's coordinate system, to
            this item's coordinate system, and returns the mapped rectangle as a
            polygon.</para>
            <para>If item is 0, this function returns the same as
            mapFromScene()</para>
            <para>See also itemTransform(), mapToItem(), mapFromParent(),
            transform(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromParent(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's parent's
            coordinate system, to this item's coordinate system, and returns the mapped
            rectangle as a polygon.</para>
            <para>See also mapToParent(), mapFromItem(), transform(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromScene(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's scene's
            coordinate system, to this item's coordinate system, and returns the mapped
            rectangle as a polygon.</para>
            <para>See also mapToScene(), mapFromItem(), transform(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapRectFromItem(QtWidgets.IQGraphicsItem,QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in item's coordinate system, to
            this item's coordinate system, and returns the mapped rectangle as a new
            rectangle (i.e., the bounding rectangle of the resulting polygon).</para>
            <para>If item is 0, this function returns the same as
            mapRectFromScene().</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapRectFromParent(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's parent's
            coordinate system, to this item's coordinate system, and returns the mapped
            rectangle as a new rectangle (i.e., the bounding rectangle of the resulting
            polygon).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapRectFromScene(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in scene coordinates, to this
            item's coordinate system, and returns the mapped rectangle as a new
            rectangle (i.e., the bounding rectangle of the resulting polygon).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromItem(QtWidgets.IQGraphicsItem,QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in item's coordinate system,
            to this item's coordinate system, and returns the mapped polygon.</para>
            <para>If item is 0, this function returns the same as
            mapFromScene().</para>
            <para>See also itemTransform(), mapToItem(), mapFromParent(),
            transform(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromParent(QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in this item's parent's
            coordinate system, to this item's coordinate system, and returns the mapped
            polygon.</para>
            <para>See also mapToParent(), mapToItem(), transform(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromScene(QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in this item's scene's
            coordinate system, to this item's coordinate system, and returns the mapped
            polygon.</para>
            <para>See also mapToScene(), mapFromParent(), transform(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromItem(QtWidgets.IQGraphicsItem,QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in item's coordinate system, to this
            item's coordinate system, and returns the mapped path.</para>
            <para>If item is 0, this function returns the same as
            mapFromScene().</para>
            <para>See also itemTransform(), mapFromParent(), mapFromScene(),
            mapToItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromParent(QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in this item's parent's coordinate
            system, to this item's coordinate system, and returns the mapped
            path.</para>
            <para>See also mapFromScene(), mapFromItem(), mapToParent(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromScene(QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in this item's scene's coordinate
            system, to this item's coordinate system, and returns the mapped
            path.</para>
            <para>See also mapFromParent(), mapFromItem(), mapToScene(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToItem(QtWidgets.IQGraphicsItem,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapToItem(item, QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToParent(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapToParent(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToScene(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapToScene(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToItem(QtWidgets.IQGraphicsItem,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapToItem(item, QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToParent(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapToParent(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapToScene(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapToScene(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapRectToItem(QtWidgets.IQGraphicsItem,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectToItem(item, QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapRectToParent(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectToParent(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapRectToScene(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectToScene(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromItem(QtWidgets.IQGraphicsItem,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapFromItem(item, QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromParent(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapFromParent(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromScene(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapFromScene(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromItem(QtWidgets.IQGraphicsItem,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapFromItem(item, QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromParent(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapFromItem(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapFromScene(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapFromScene(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapRectFromItem(QtWidgets.IQGraphicsItem,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectFromItem(item, QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapRectFromParent(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectFromParent(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.MapRectFromScene(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectFromScene(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.IsAncestorOf(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns true if this item is an ancestor of child (i.e., if this
            item is child's parent, or one of child's parent's ancestors).</para>
            <para>See also parentItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.CommonAncestorItem(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns the closest common ancestor item of this item and other,
            or 0 if either other is 0, or there is no common ancestor.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also isAncestorOf().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.Data(System.Int32)">
            <summary>
            <para>Returns this item's custom data for the key key as a
            QVariant.</para>
            <para>Custom item data is useful for storing arbitrary properties in
            any item. Example:</para>
            <para>static const int ObjectName = 0;</para>
            <para></para>
            <para>QGraphicsItem *item = scene.itemAt(100, 50);</para>
            <para>if (item-&gt;data(ObjectName).toString().isEmpty()) {</para>
            <para>    if (qgraphicsitem_cast&lt;ButtonItem *&gt;(item))</para>
            <para>        item-&gt;setData(ObjectName, &quot;Button&quot;);</para>
            <para>}</para>
            <para>Qt does not use this feature for storing data; it is provided
            solely for the convenience of the user.</para>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.SetData(System.Int32,QtCore.QVariant)">
            <summary>
            <para>Sets this item's custom data for the key key to value.</para>
            <para>Custom item data is useful for storing arbitrary properties for
            any item. Qt does not use this feature for storing data; it is provided
            solely for the convenience of the user.</para>
            <para>See also data().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.InstallSceneEventFilter(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Installs an event filter for this item on filterItem, causing all
            events for this item to first pass through filterItem's sceneEventFilter()
            function.</para>
            <para>To filter another item's events, install this item as an event
            filter for the other item. Example:</para>
            <para>QGraphicsScene scene;</para>
            <para>QGraphicsEllipseItem *ellipse = scene.addEllipse(QRectF(-10, -10,
            20, 20));</para>
            <para>QGraphicsLineItem *line = scene.addLine(QLineF(-10, -10, 20,
            20));</para>
            <para></para>
            <para>line-&gt;installSceneEventFilter(ellipse);</para>
            <para>// line's events are filtered by ellipse's sceneEventFilter()
            function.</para>
            <para></para>
            <para>ellipse-&gt;installSceneEventFilter(line);</para>
            <para>// ellipse's events are filtered by line's sceneEventFilter()
            function.</para>
            <para>An item can only filter events for other items in the same scene.
            Also, an item cannot filter its own events; instead, you can reimplement
            sceneEvent() directly.</para>
            <para>Items must belong to a scene for scene event filters to be
            installed and used.</para>
            <para>See also removeSceneEventFilter(), sceneEventFilter(), and
            sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.RemoveSceneEventFilter(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Removes an event filter on this item from filterItem.</para>
            <para>See also installSceneEventFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.UpdateMicroFocus">
            <summary>
            <para>Updates the item's micro focus.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also QInputMethod.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.SceneEventFilter(QtWidgets.IQGraphicsItem,QtCore.QEvent)">
            <summary>
            <para>Filters events for the item watched. event is the filtered
            event.</para>
            <para>Reimplementing this function in a subclass makes it possible for
            the item to be used as an event filter for other items, intercepting all
            the events sent to those items before they are able to respond.</para>
            <para>Reimplementations must return true to prevent further processing
            of a given event, ensuring that it will not be delivered to the watched
            item, or return false to indicate that the event should be propagated
            further by the event system.</para>
            <para>See also installSceneEventFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnSceneEvent(QtCore.QEvent)">
            <summary>
            <para>This virtual function receives events to this item. Reimplement
            this function to intercept events before they are dispatched to the
            specialized event handlers contextMenuEvent(), focusInEvent(),
            focusOutEvent(), hoverEnterEvent(), hoverMoveEvent(), hoverLeaveEvent(),
            keyPressEvent(), keyReleaseEvent(), mousePressEvent(), mouseReleaseEvent(),
            mouseMoveEvent(), and mouseDoubleClickEvent().</para>
            <para>Returns true if the event was recognized and handled; otherwise,
            (e.g., if the event type was not recognized,) false is returned.</para>
            <para>event is the intercepted event.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnContextMenuEvent(QtWidgets.QGraphicsSceneContextMenuEvent)">
            <summary>
            <para>This event handler can be reimplemented in a subclass to process
            context menu events. The event parameter contains details about the event
            to be handled.</para>
            <para>If you ignore the event (i.e., by calling QEvent::ignore()),
            event will propagate to any item beneath this item. If no items accept the
            event, it will be ignored by the scene and propagate to the view.</para>
            <para>It's common to open a QMenu in response to receiving a context
            menu event. Example:</para>
            <para>void CustomItem::contextMenuEvent(QGraphicsSceneContextMenuEvent
            *event)</para>
            <para>{</para>
            <para>    QMenu menu;</para>
            <para>    QAction *removeAction =
            menu.addAction(&quot;Remove&quot;);</para>
            <para>    QAction *markAction =
            menu.addAction(&quot;Mark&quot;);</para>
            <para>    QAction *selectedAction =
            menu.exec(event-&gt;screenPos());</para>
            <para>    // ...</para>
            <para>}</para>
            <para>The default implementation ignores the event.</para>
            <para>See also sceneEvent().</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QtWidgets.QGraphicsItem.OnDragEnterEvent(QtWidgets.QGraphicsSceneDragDropEvent)" -->
        <member name="M:QtWidgets.QGraphicsItem.OnDragLeaveEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive drag leave events for this item. Drag leave events are generated as
            the cursor leaves the item's area. Most often you will not need to
            reimplement this function, but it can be useful for resetting state in your
            item (e.g., highlighting).</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no
            effect.</para>
            <para>Items do not receive drag and drop events by default; to enable
            this feature, call setAcceptDrops(true).</para>
            <para>The default implementation does nothing.</para>
            <para>See also dragEnterEvent(), dropEvent(), and
            dragMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnDragMoveEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive drag move events for this item. Drag move events are generated as
            the cursor moves around inside the item's area. Most often you will not
            need to reimplement this function; it is used to indicate that only parts
            of the item can accept drops.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event toggles
            whether or not the item will accept drops at the position from the event.
            By default, event is accepted, indicating that the item allows drops at the
            specified position.</para>
            <para>Items do not receive drag and drop events by default; to enable
            this feature, call setAcceptDrops(true).</para>
            <para>The default implementation does nothing.</para>
            <para>See also dropEvent(), dragEnterEvent(), and
            dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnDropEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive drop events for this item. Items can only receive drop events if
            the last drag move event was accepted.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no
            effect.</para>
            <para>Items do not receive drag and drop events by default; to enable
            this feature, call setAcceptDrops(true).</para>
            <para>The default implementation does nothing.</para>
            <para>See also dragEnterEvent(), dragMoveEvent(), and
            dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive focus in events for this item. The default implementation calls
            ensureVisible().</para>
            <para>See also focusOutEvent(), sceneEvent(), and setFocus().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive focus out events for this item. The default implementation does
            nothing.</para>
            <para>See also focusInEvent(), sceneEvent(), and setFocus().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnHoverEnterEvent(QtWidgets.QGraphicsSceneHoverEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive hover enter events for this item. The default implementation calls
            update(); otherwise it does nothing.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no
            effect.</para>
            <para>See also hoverMoveEvent(), hoverLeaveEvent(), sceneEvent(), and
            setAcceptHoverEvents().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnHoverMoveEvent(QtWidgets.QGraphicsSceneHoverEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive hover move events for this item. The default implementation does
            nothing.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no
            effect.</para>
            <para>See also hoverEnterEvent(), hoverLeaveEvent(), sceneEvent(), and
            setAcceptHoverEvents().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnHoverLeaveEvent(QtWidgets.QGraphicsSceneHoverEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive hover leave events for this item. The default implementation calls
            update(); otherwise it does nothing.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no
            effect.</para>
            <para>See also hoverEnterEvent(), hoverMoveEvent(), sceneEvent(), and
            setAcceptHoverEvents().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive key press events for this item. The default implementation ignores
            the event. If you reimplement this handler, the event will by default be
            accepted.</para>
            <para>Note that key events are only received for items that set the
            ItemIsFocusable flag, and that have keyboard input focus.</para>
            <para>See also keyReleaseEvent(), setFocus(),
            QGraphicsScene::setFocusItem(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnKeyReleaseEvent(QtGui.QKeyEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive key release events for this item. The default implementation
            ignores the event. If you reimplement this handler, the event will by
            default be accepted.</para>
            <para>Note that key events are only received for items that set the
            ItemIsFocusable flag, and that have keyboard input focus.</para>
            <para>See also keyPressEvent(), setFocus(),
            QGraphicsScene::setFocusItem(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnMousePressEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive mouse press events for this item. Mouse press events are only
            delivered to items that accept the mouse button that is pressed. By
            default, an item accepts all mouse buttons, but you can change this by
            calling setAcceptedMouseButtons().</para>
            <para>The mouse press event decides which item should become the mouse
            grabber (see QGraphicsScene::mouseGrabberItem()). If you do not reimplement
            this function, the press event will propagate to any topmost item beneath
            this item, and no other mouse events will be delivered to this item.</para>
            <para>If you do reimplement this function, event will by default be
            accepted (see QEvent::accept()), and this item is then the mouse grabber.
            This allows the item to receive future move, release and doubleclick
            events. If you call QEvent::ignore() on event, this item will lose the
            mouse grab, and event will propagate to any topmost item beneath. No
            further mouse events will be delivered to this item unless a new mouse
            press event is received.</para>
            <para>The default implementation handles basic item interaction, such
            as selection and moving. If you want to keep the base implementation when
            reimplementing this function, call QGraphicsItem::mousePressEvent() in your
            reimplementation.</para>
            <para>The event is QEvent::ignore()d for items that are neither movable
            nor selectable.</para>
            <para>See also mouseMoveEvent(), mouseReleaseEvent(),
            mouseDoubleClickEvent(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnMouseMoveEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive mouse move events for this item. If you do receive this event, you
            can be certain that this item also received a mouse press event, and that
            this item is the current mouse grabber.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no
            effect.</para>
            <para>The default implementation handles basic item interaction, such
            as selection and moving. If you want to keep the base implementation when
            reimplementing this function, call QGraphicsItem::mouseMoveEvent() in your
            reimplementation.</para>
            <para>Please note that mousePressEvent() decides which graphics item it
            is that receives mouse events. See the mousePressEvent() description for
            details.</para>
            <para>See also mousePressEvent(), mouseReleaseEvent(),
            mouseDoubleClickEvent(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnMouseReleaseEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive mouse release events for this item.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no
            effect.</para>
            <para>The default implementation handles basic item interaction, such
            as selection and moving. If you want to keep the base implementation when
            reimplementing this function, call QGraphicsItem::mouseReleaseEvent() in
            your reimplementation.</para>
            <para>Please note that mousePressEvent() decides which graphics item it
            is that receives mouse events. See the mousePressEvent() description for
            details.</para>
            <para>See also mousePressEvent(), mouseMoveEvent(),
            mouseDoubleClickEvent(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnMouseDoubleClickEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive mouse doubleclick events for this item.</para>
            <para>When doubleclicking an item, the item will first receive a mouse
            press event, followed by a release event (i.e., a click), then a
            doubleclick event, and finally a release event.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no
            effect.</para>
            <para>The default implementation calls mousePressEvent(). If you want
            to keep the base implementation when reimplementing this function, call
            QGraphicsItem::mouseDoubleClickEvent() in your reimplementation.</para>
            <para>Note that an item will not receive double click events if it is
            neither selectable nor movable (single mouse clicks are ignored in this
            case, and that stops the generation of double clicks).</para>
            <para>See also mousePressEvent(), mouseMoveEvent(),
            mouseReleaseEvent(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnWheelEvent(QtWidgets.QGraphicsSceneWheelEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive wheel events for this item. If you reimplement this function, event
            will be accepted by default.</para>
            <para>If you ignore the event, (i.e., by calling QEvent::ignore(),) it
            will propagate to any item beneath this item. If no items accept the event,
            it will be ignored by the scene, and propagate to the view (e.g., the
            view's vertical scroll bar).</para>
            <para>The default implementation ignores the event.</para>
            <para>See also sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.OnInputMethodEvent(QtGui.QInputMethodEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive input method events for this item. The default implementation
            ignores the event.</para>
            <para>See also inputMethodQuery() and sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.InputMethodQuery(QtCore.Qt.InputMethodQuery)">
            <summary>
            <para>This method is only relevant for input items. It is used by the
            input method to query a set of properties of the item to be able to support
            complex input method operations, such as support for surrounding text and
            reconversions. query specifies which property is queried.</para>
            <para>See also inputMethodEvent() and QInputMethodEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.ItemChange(QtWidgets.QGraphicsItem.GraphicsItemChange,QtCore.QVariant)">
            <summary>
            <para>This virtual function is called by QGraphicsItem to notify custom
            items that some part of the item's state changes. By reimplementing this
            function, you can react to a change, and in some cases (depending on
            change), adjustments can be made.</para>
            <para>change is the parameter of the item that is changing. value is
            the new value; the type of the value depends on change.</para>
            <para>Example:</para>
            <para>QVariant Component::itemChange(GraphicsItemChange change, const
            QVariant &amp;value)</para>
            <para>{</para>
            <para>    if (change == ItemPositionChange &amp;&amp; scene()) {</para>
            <para>        // value is the new position.</para>
            <para>        QPointF newPos = value.toPointF();</para>
            <para>        QRectF rect = scene()-&gt;sceneRect();</para>
            <para>        if (!rect.contains(newPos)) {</para>
            <para>            // Keep the item inside the scene rect.</para>
            <para>            newPos.setX(qMin(rect.right(), qMax(newPos.x(),
            rect.left())));</para>
            <para>            newPos.setY(qMin(rect.bottom(), qMax(newPos.y(),
            rect.top())));</para>
            <para>            return newPos;</para>
            <para>        }</para>
            <para>    }</para>
            <para>    return QGraphicsItem::itemChange(change, value);</para>
            <para>}</para>
            <para>The default implementation does nothing, and returns
            value.</para>
            <para>Note: Certain QGraphicsItem functions cannot be called in a
            reimplementation of this function; see the GraphicsItemChange documentation
            for details.</para>
            <para>See also GraphicsItemChange.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.PrepareGeometryChange">
            <summary>
            <para>Prepares the item for a geometry change. Call this function
            before changing the bounding rect of an item to keep QGraphicsScene's index
            up to date.</para>
            <para>prepareGeometryChange() will call update() if this is
            necessary.</para>
            <para>Example:</para>
            <para>void CircleItem::setRadius(qreal newRadius)</para>
            <para>{</para>
            <para>    if (radius != newRadius) {</para>
            <para>        prepareGeometryChange();</para>
            <para>        radius = newRadius;</para>
            <para>    }</para>
            <para>}</para>
            <para>See also boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItem.ItemTransform(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns a QTransform that maps coordinates from this item to
            other. If ok is not null, and if there is no such transform, the boolean
            pointed to by ok will be set to false; otherwise it will be set to
            true.</para>
            <para>This transform provides an alternative to the mapToItem() or
            mapFromItem() functions, by returning the appropriate transform so that you
            can map shapes and coordinates yourself. It also helps you write more
            efficient code when repeatedly mapping between the same two items.</para>
            <para>Note: In rare circumstances, there is no transform that maps
            between two items.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also mapToItem(), mapFromItem(), and
            deviceTransform().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.SceneEvent">
            <summary>
            <para>This virtual function receives events to this item. Reimplement this function to intercept events before they are dispatched to the specialized event handlers contextMenuEvent(), focusInEvent(), focusOutEvent(), hoverEnterEvent(), hoverMoveEvent(), hoverLeaveEvent(), keyPressEvent(), keyReleaseEvent(), mousePressEvent(), mouseReleaseEvent(), mouseMoveEvent(), and mouseDoubleClickEvent().</para>
            <para>Returns true if the event was recognized and handled; otherwise, (e.g., if the event type was not recognized,) false is returned.</para>
            <para>event is the intercepted event.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.ContextMenuEvent">
            <summary>
            <para>This event handler can be reimplemented in a subclass to process context menu events. The event parameter contains details about the event to be handled.</para>
            <para>If you ignore the event (i.e., by calling QEvent::ignore()), event will propagate to any item beneath this item. If no items accept the event, it will be ignored by the scene and propagate to the view.</para>
            <para>It's common to open a QMenu in response to receiving a context menu event. Example:</para>
            <para>void CustomItem::contextMenuEvent(QGraphicsSceneContextMenuEvent *event)</para>
            <para>{</para>
            <para>    QMenu menu;</para>
            <para>    QAction *removeAction = menu.addAction(&quot;Remove&quot;);</para>
            <para>    QAction *markAction = menu.addAction(&quot;Mark&quot;);</para>
            <para>    QAction *selectedAction = menu.exec(event-&gt;screenPos());</para>
            <para>    // ...</para>
            <para>}</para>
            <para>The default implementation ignores the event.</para>
            <para>See also sceneEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.DragEnterEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive drag enter events for this item. Drag enter events are generated as the cursor enters the item's area.</para>
            <para>By accepting the event (i.e., by calling QEvent::accept()), the item will accept drop events, in addition to receiving drag move and drag leave. Otherwise, the event will be ignored and propagate to the item beneath. If the event is accepted, the item will receive a drag move event before control goes back to the event loop.</para>
            <para>A common implementation of dragEnterEvent accepts or ignores event depending on the associated mime data in event. Example:</para>
            <para>CustomItem::CustomItem()</para>
            <para>{</para>
            <para>    setAcceptDrops(true);</para>
            <para>    ...</para>
            <para>}</para>
            <para></para>
            <para>void CustomItem::dragEnterEvent(QGraphicsSceneDragDropEvent *event)</para>
            <para>{</para>
            <para>    event-&gt;setAccepted(event-&gt;mimeData()-&gt;hasFormat(&quot;text/plain&quot;));</para>
            <para>}</para>
            <para>Items do not receive drag and drop events by default; to enable this feature, call setAcceptDrops(true).</para>
            <para>The default implementation does nothing.</para>
            <para>See also dropEvent(), dragMoveEvent(), and dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.DragLeaveEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive drag leave events for this item. Drag leave events are generated as the cursor leaves the item's area. Most often you will not need to reimplement this function, but it can be useful for resetting state in your item (e.g., highlighting).</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no effect.</para>
            <para>Items do not receive drag and drop events by default; to enable this feature, call setAcceptDrops(true).</para>
            <para>The default implementation does nothing.</para>
            <para>See also dragEnterEvent(), dropEvent(), and dragMoveEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.DragMoveEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive drag move events for this item. Drag move events are generated as the cursor moves around inside the item's area. Most often you will not need to reimplement this function; it is used to indicate that only parts of the item can accept drops.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event toggles whether or not the item will accept drops at the position from the event. By default, event is accepted, indicating that the item allows drops at the specified position.</para>
            <para>Items do not receive drag and drop events by default; to enable this feature, call setAcceptDrops(true).</para>
            <para>The default implementation does nothing.</para>
            <para>See also dropEvent(), dragEnterEvent(), and dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.DropEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive drop events for this item. Items can only receive drop events if the last drag move event was accepted.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no effect.</para>
            <para>Items do not receive drag and drop events by default; to enable this feature, call setAcceptDrops(true).</para>
            <para>The default implementation does nothing.</para>
            <para>See also dragEnterEvent(), dragMoveEvent(), and dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.FocusInEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive focus in events for this item. The default implementation calls ensureVisible().</para>
            <para>See also focusOutEvent(), sceneEvent(), and setFocus().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.FocusOutEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive focus out events for this item. The default implementation does nothing.</para>
            <para>See also focusInEvent(), sceneEvent(), and setFocus().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.HoverEnterEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive hover enter events for this item. The default implementation calls update(); otherwise it does nothing.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no effect.</para>
            <para>See also hoverMoveEvent(), hoverLeaveEvent(), sceneEvent(), and setAcceptHoverEvents().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.HoverMoveEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive hover move events for this item. The default implementation does nothing.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no effect.</para>
            <para>See also hoverEnterEvent(), hoverLeaveEvent(), sceneEvent(), and setAcceptHoverEvents().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.HoverLeaveEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive hover leave events for this item. The default implementation calls update(); otherwise it does nothing.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no effect.</para>
            <para>See also hoverEnterEvent(), hoverMoveEvent(), sceneEvent(), and setAcceptHoverEvents().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.KeyPressEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive key press events for this item. The default implementation ignores the event. If you reimplement this handler, the event will by default be accepted.</para>
            <para>Note that key events are only received for items that set the ItemIsFocusable flag, and that have keyboard input focus.</para>
            <para>See also keyReleaseEvent(), setFocus(), QGraphicsScene::setFocusItem(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.KeyReleaseEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive key release events for this item. The default implementation ignores the event. If you reimplement this handler, the event will by default be accepted.</para>
            <para>Note that key events are only received for items that set the ItemIsFocusable flag, and that have keyboard input focus.</para>
            <para>See also keyPressEvent(), setFocus(), QGraphicsScene::setFocusItem(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.MousePressEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive mouse press events for this item. Mouse press events are only delivered to items that accept the mouse button that is pressed. By default, an item accepts all mouse buttons, but you can change this by calling setAcceptedMouseButtons().</para>
            <para>The mouse press event decides which item should become the mouse grabber (see QGraphicsScene::mouseGrabberItem()). If you do not reimplement this function, the press event will propagate to any topmost item beneath this item, and no other mouse events will be delivered to this item.</para>
            <para>If you do reimplement this function, event will by default be accepted (see QEvent::accept()), and this item is then the mouse grabber. This allows the item to receive future move, release and doubleclick events. If you call QEvent::ignore() on event, this item will lose the mouse grab, and event will propagate to any topmost item beneath. No further mouse events will be delivered to this item unless a new mouse press event is received.</para>
            <para>The default implementation handles basic item interaction, such as selection and moving. If you want to keep the base implementation when reimplementing this function, call QGraphicsItem::mousePressEvent() in your reimplementation.</para>
            <para>The event is QEvent::ignore()d for items that are neither movable nor selectable.</para>
            <para>See also mouseMoveEvent(), mouseReleaseEvent(), mouseDoubleClickEvent(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.MouseMoveEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive mouse move events for this item. If you do receive this event, you can be certain that this item also received a mouse press event, and that this item is the current mouse grabber.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no effect.</para>
            <para>The default implementation handles basic item interaction, such as selection and moving. If you want to keep the base implementation when reimplementing this function, call QGraphicsItem::mouseMoveEvent() in your reimplementation.</para>
            <para>Please note that mousePressEvent() decides which graphics item it is that receives mouse events. See the mousePressEvent() description for details.</para>
            <para>See also mousePressEvent(), mouseReleaseEvent(), mouseDoubleClickEvent(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.MouseReleaseEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive mouse release events for this item.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no effect.</para>
            <para>The default implementation handles basic item interaction, such as selection and moving. If you want to keep the base implementation when reimplementing this function, call QGraphicsItem::mouseReleaseEvent() in your reimplementation.</para>
            <para>Please note that mousePressEvent() decides which graphics item it is that receives mouse events. See the mousePressEvent() description for details.</para>
            <para>See also mousePressEvent(), mouseMoveEvent(), mouseDoubleClickEvent(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.MouseDoubleClickEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive mouse doubleclick events for this item.</para>
            <para>When doubleclicking an item, the item will first receive a mouse press event, followed by a release event (i.e., a click), then a doubleclick event, and finally a release event.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no effect.</para>
            <para>The default implementation calls mousePressEvent(). If you want to keep the base implementation when reimplementing this function, call QGraphicsItem::mouseDoubleClickEvent() in your reimplementation.</para>
            <para>Note that an item will not receive double click events if it is neither selectable nor movable (single mouse clicks are ignored in this case, and that stops the generation of double clicks).</para>
            <para>See also mousePressEvent(), mouseMoveEvent(), mouseReleaseEvent(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.WheelEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive wheel events for this item. If you reimplement this function, event will be accepted by default.</para>
            <para>If you ignore the event, (i.e., by calling QEvent::ignore(),) it will propagate to any item beneath this item. If no items accept the event, it will be ignored by the scene, and propagate to the view (e.g., the view's vertical scroll bar).</para>
            <para>The default implementation ignores the event.</para>
            <para>See also sceneEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsItem.InputMethodEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented to receive input method events for this item. The default implementation ignores the event.</para>
            <para>See also inputMethodQuery() and sceneEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.ParentItem">
            <summary>
            <para>Returns a pointer to this item's parent item. If this item does
            not have a parent, 0 is returned.</para>
            <para>See also setParentItem() and childItems().</para>
            <para></para>
            <para>Sets this item's parent item to newParent. If this item already
            has a parent, it is first removed from the previous parent. If newParent is
            0, this item will become a top-level item.</para>
            <para>Note that this implicitly adds this graphics item to the scene of
            the parent. You should not add the item to the scene yourself.</para>
            <para>The behavior when calling this function on an item that is an
            ancestor of newParent is undefined.</para>
            <para>See also parentItem() and childItems().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Group">
            <summary>
            <para>Returns a pointer to this item's item group, or 0 if this item is
            not member of a group.</para>
            <para>See also setGroup(), QGraphicsItemGroup, and
            QGraphicsScene::createItemGroup().</para>
            <para></para>
            <para>Adds this item to the item group group. If group is 0, this item
            is removed from any current group and added as a child of the previous
            group's parent.</para>
            <para>See also group() and QGraphicsScene::createItemGroup().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Flags">
            <summary>
            <para>Returns this item's flags. The flags describe what configurable
            features of the item are enabled and not. For example, if the flags include
            ItemIsFocusable, the item can accept input focus.</para>
            <para>By default, no flags are enabled.</para>
            <para>See also setFlags() and setFlag().</para>
            <para></para>
            <para>Sets the item flags to flags. All flags in flags are enabled; all
            flags not in flags are disabled.</para>
            <para>If the item had focus and flags does not enable ItemIsFocusable,
            the item loses focus as a result of calling this function. Similarly, if
            the item was selected, and flags does not enabled ItemIsSelectable, the
            item is automatically unselected.</para>
            <para>By default, no flags are enabled. (QGraphicsWidget enables the
            ItemSendsGeometryChanges flag by default in order to track position
            changes.)</para>
            <para>See also flags() and setFlag().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.panelModality">
            <summary>
            <para>Returns the modality for this item.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setPanelModality().</para>
            <para></para>
            <para>Sets the modality for this item to panelModality.</para>
            <para>Changing the modality of a visible item takes effect
            immediately.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also panelModality().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.ToolTip">
            <summary>
            <para>Returns the item's tool tip, or an empty QString if no tool tip
            has been set.</para>
            <para>See also setToolTip() and QToolTip.</para>
            <para></para>
            <para>Sets the item's tool tip to toolTip. If toolTip is empty, the
            item's tool tip is cleared.</para>
            <para>See also toolTip() and QToolTip.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Cursor">
            <summary>
            <para>Returns the current cursor shape for the item. The mouse cursor
            will assume this shape when it's over this item. See the list of predefined
            cursor objects for a range of useful shapes.</para>
            <para>An editor item might want to use an I-beam cursor:</para>
            <para>item-&gt;setCursor(Qt::IBeamCursor);</para>
            <para>If no cursor has been set, the cursor of the item beneath is
            used.</para>
            <para>See also setCursor(), hasCursor(), unsetCursor(),
            QWidget::cursor, and QApplication::overrideCursor().</para>
            <para></para>
            <para>Sets the current cursor shape for the item to cursor. The mouse
            cursor will assume this shape when it's over this item. See the list of
            predefined cursor objects for a range of useful shapes.</para>
            <para>An editor item might want to use an I-beam cursor:</para>
            <para>item-&gt;setCursor(Qt::IBeamCursor);</para>
            <para>If no cursor has been set, the cursor of the item beneath is
            used.</para>
            <para>See also cursor(), hasCursor(), unsetCursor(), QWidget::cursor,
            and QApplication::overrideCursor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Visible">
            <summary>
            <para>Returns true if the item is visible; otherwise, false is
            returned.</para>
            <para>Note that the item's general visibility is unrelated to whether
            or not it is actually being visualized by a QGraphicsView.</para>
            <para>See also setVisible().</para>
            <para></para>
            <para>If visible is true, the item is made visible. Otherwise, the item
            is made invisible. Invisible items are not painted, nor do they receive any
            events. In particular, mouse events pass right through invisible items, and
            are delivered to any item that may be behind. Invisible items are also
            unselectable, they cannot take input focus, and are not detected by
            QGraphicsScene's item location functions.</para>
            <para>If an item becomes invisible while grabbing the mouse, (i.e.,
            while it is receiving mouse events,) it will automatically lose the mouse
            grab, and the grab is not regained by making the item visible again; it
            must receive a new mouse press to regain the mouse grab.</para>
            <para>Similarly, an invisible item cannot have focus, so if the item
            has focus when it becomes invisible, it will lose focus, and the focus is
            not regained by simply making the item visible again.</para>
            <para>If you hide a parent item, all its children will also be hidden.
            If you show a parent item, all children will be shown, unless they have
            been explicitly hidden (i.e., if you call setVisible(false) on a child, it
            will not be reshown even if its parent is hidden, and then shown
            again).</para>
            <para>Items are visible by default; it is unnecessary to call
            setVisible() on a new item.</para>
            <para>Note: An item with opacity set to 0 will still be considered
            visible, although it will be treated like an invisible item: mouse events
            will pass through it, it will not be included in the items returned by
            QGraphicsView::items(), and so on. However, the item will retain the
            focus.</para>
            <para>See also isVisible(), show(), hide(), and setOpacity().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Enabled">
            <summary>
            <para>Returns true if the item is enabled; otherwise, false is
            returned.</para>
            <para>See also setEnabled().</para>
            <para></para>
            <para>If enabled is true, the item is enabled; otherwise, it is
            disabled.</para>
            <para>Disabled items are visible, but they do not receive any events,
            and cannot take focus nor be selected. Mouse events are discarded; they are
            not propagated unless the item is also invisible, or if it does not accept
            mouse events (see acceptedMouseButtons()). A disabled item cannot become
            the mouse grabber, and as a result of this, an item loses the grab if it
            becomes disabled when grabbing the mouse, just like it loses focus if it
            had focus when it was disabled.</para>
            <para>Disabled items are traditionally drawn using grayed-out colors
            (see QPalette::Disabled).</para>
            <para>If you disable a parent item, all its children will also be
            disabled. If you enable a parent item, all children will be enabled, unless
            they have been explicitly disabled (i.e., if you call setEnabled(false) on
            a child, it will not be reenabled if its parent is disabled, and then
            enabled again).</para>
            <para>Items are enabled by default.</para>
            <para>Note: If you install an event filter, you can still intercept
            events before they are delivered to items; this mechanism disregards the
            item's enabled state.</para>
            <para>See also isEnabled().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Selected">
            <summary>
            <para>Returns true if this item is selected; otherwise, false is
            returned.</para>
            <para>Items that are in a group inherit the group's selected
            state.</para>
            <para>Items are not selected by default.</para>
            <para>See also setSelected() and
            QGraphicsScene::setSelectionArea().</para>
            <para></para>
            <para>If selected is true and this item is selectable, this item is
            selected; otherwise, it is unselected.</para>
            <para>If the item is in a group, the whole group's selected state is
            toggled by this function. If the group is selected, all items in the group
            are also selected, and if the group is not selected, no item in the group
            is selected.</para>
            <para>Only visible, enabled, selectable items can be selected. If
            selected is true and this item is either invisible or disabled or
            unselectable, this function does nothing.</para>
            <para>By default, items cannot be selected. To enable selection, set
            the ItemIsSelectable flag.</para>
            <para>This function is provided for convenience, allowing individual
            toggling of the selected state of an item. However, a more common way of
            selecting items is to call QGraphicsScene::setSelectionArea(), which will
            call this function for all visible, enabled, and selectable items within a
            specified area on the scene.</para>
            <para>See also isSelected() and QGraphicsScene::selectedItems().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.AcceptDrops">
            <summary>
            <para>Returns true if this item can accept drag and drop events;
            otherwise, returns false. By default, items do not accept drag and drop
            events; items are transparent to drag and drop.</para>
            <para>See also setAcceptDrops().</para>
            <para></para>
            <para>If on is true, this item will accept drag and drop events;
            otherwise, it is transparent for drag and drop events. By default, items do
            not accept drag and drop events.</para>
            <para>See also acceptDrops().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Opacity">
            <summary>
            <para>Returns this item's local opacity, which is between 0.0
            (transparent) and 1.0 (opaque). This value is combined with parent and
            ancestor values into the effectiveOpacity(). The effective opacity decides
            how the item is rendered and also affects its visibility when queried by
            functions such as QGraphicsView::items().</para>
            <para>The opacity property decides the state of the painter passed to
            the paint() function. If the item is cached, i.e., ItemCoordinateCache or
            DeviceCoordinateCache, the effective property will be applied to the item's
            cache as it is rendered.</para>
            <para>The default opacity is 1.0; fully opaque.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setOpacity(), paint(), ItemIgnoresParentOpacity, and
            ItemDoesntPropagateOpacityToChildren.</para>
            <para></para>
            <para>Sets this item's local opacity, between 0.0 (transparent) and 1.0
            (opaque). The item's local opacity is combined with parent and ancestor
            opacities into the effectiveOpacity().</para>
            <para>By default, opacity propagates from parent to child, so if a
            parent's opacity is 0.5 and the child is also 0.5, the child's effective
            opacity will be 0.25.</para>
            <para>The opacity property decides the state of the painter passed to
            the paint() function. If the item is cached, i.e., ItemCoordinateCache or
            DeviceCoordinateCache, the effective property will be applied to the item's
            cache as it is rendered.</para>
            <para>There are two item flags that affect how the item's opacity is
            combined with the parent: ItemIgnoresParentOpacity and
            ItemDoesntPropagateOpacityToChildren.</para>
            <para>Note: Setting the opacity of an item to 0 will not make the item
            invisible (according to isVisible()), but the item will be treated like an
            invisible one. See the documentation of setVisible() for more
            information.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also opacity(), effectiveOpacity(), and setVisible().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.GraphicsEffect">
            <summary>
            <para>Returns a pointer to this item's effect if it has one; otherwise
            0.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setGraphicsEffect().</para>
            <para></para>
            <para>Sets effect as the item's effect. If there already is an effect
            installed on this item, QGraphicsItem will delete the existing effect
            before installing the new effect. You can delete an existing effect by
            calling setGraphicsEffect(0).</para>
            <para>If effect is the installed effect on a different item,
            setGraphicsEffect() will remove the effect from the item and install it on
            this item.</para>
            <para>QGraphicsItem takes ownership of effect.</para>
            <para>Note: This function will apply the effect on itself and all its
            children.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also graphicsEffect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.AcceptedMouseButtons">
            <summary>
            <para>Returns the mouse buttons that this item accepts mouse events
            for. By default, all mouse buttons are accepted.</para>
            <para>If an item accepts a mouse button, it will become the mouse
            grabber item when a mouse press event is delivered for that mouse button.
            However, if the item does not accept the button, QGraphicsScene will
            forward the mouse events to the first item beneath it that does.</para>
            <para>See also setAcceptedMouseButtons() and mousePressEvent().</para>
            <para></para>
            <para>Sets the mouse buttons that this item accepts mouse events
            for.</para>
            <para>By default, all mouse buttons are accepted. If an item accepts a
            mouse button, it will become the mouse grabber item when a mouse press
            event is delivered for that button. However, if the item does not accept
            the mouse button, QGraphicsScene will forward the mouse events to the first
            item beneath it that does.</para>
            <para>To disable mouse events for an item (i.e., make it transparent
            for mouse events), call setAcceptedMouseButtons(0).</para>
            <para>See also acceptedMouseButtons() and mousePressEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.AcceptHoverEvents">
            <summary>
            <para>Returns true if an item accepts hover events
            (QGraphicsSceneHoverEvent); otherwise, returns false. By default, items do
            not accept hover events.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setAcceptHoverEvents() and
            setAcceptedMouseButtons().</para>
            <para></para>
            <para>If enabled is true, this item will accept hover events;
            otherwise, it will ignore them. By default, items do not accept hover
            events.</para>
            <para>Hover events are delivered when there is no current mouse grabber
            item. They are sent when the mouse cursor enters an item, when it moves
            around inside the item, and when the cursor leaves an item. Hover events
            are commonly used to highlight an item when it's entered, and for tracking
            the mouse cursor as it hovers over the item (equivalent to
            QWidget::mouseTracking).</para>
            <para>Parent items receive hover enter events before their children,
            and leave events after their children. The parent does not receive a hover
            leave event if the cursor enters a child, though; the parent stays
            &quot;hovered&quot; until the cursor leaves its area, including its
            children's areas.</para>
            <para>If a parent item handles child events, it will receive hover
            move, drag move, and drop events as the cursor passes through its children,
            but it does not receive hover enter and hover leave, nor drag enter and
            drag leave events on behalf of its children.</para>
            <para>A QGraphicsWidget with window decorations will accept hover
            events regardless of the value of acceptHoverEvents().</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also acceptHoverEvents(), hoverEnterEvent(),
            hoverMoveEvent(), and hoverLeaveEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.AcceptTouchEvents">
            <summary>
            <para>Returns true if an item accepts touch events; otherwise, returns
            false. By default, items do not accept touch events.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setAcceptTouchEvents().</para>
            <para></para>
            <para>If enabled is true, this item will accept touch events;
            otherwise, it will ignore them. By default, items do not accept touch
            events.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also acceptTouchEvents().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.FiltersChildEvents">
            <summary>
            <para>Returns true if this item filters child events (i.e., all events
            intended for any of its children are instead sent to this item); otherwise,
            false is returned.</para>
            <para>The default value is false; child events are not filtered.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setFiltersChildEvents().</para>
            <para></para>
            <para>If enabled is true, this item is set to filter all events for all
            its children (i.e., all events intented for any of its children are instead
            sent to this item); otherwise, if enabled is false, this item will only
            handle its own events. The default value is false.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also filtersChildEvents().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.HandlesChildEvents">
            <summary>
            <para>Returns true if this item handles child events (i.e., all events
            intended for any of its children are instead sent to this item); otherwise,
            false is returned.</para>
            <para>This property is useful for item groups; it allows one item to
            handle events on behalf of its children, as opposed to its children
            handling their events individually.</para>
            <para>The default is to return false; children handle their own events.
            The exception for this is if the item is a QGraphicsItemGroup, then it
            defaults to return true.</para>
            <para>See also setHandlesChildEvents().</para>
            <para></para>
            <para>If enabled is true, this item is set to handle all events for all
            its children (i.e., all events intented for any of its children are instead
            sent to this item); otherwise, if enabled is false, this item will only
            handle its own events. The default value is false.</para>
            <para>This property is useful for item groups; it allows one item to
            handle events on behalf of its children, as opposed to its children
            handling their events individually.</para>
            <para>If a child item accepts hover events, its parent will receive
            hover move events as the cursor passes through the child, but it does not
            receive hover enter and hover leave events on behalf of its child.</para>
            <para>See also handlesChildEvents().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Active">
            <summary>
            <para>Returns true if this item is active; otherwise returns
            false.</para>
            <para>An item can only be active if the scene is active. An item is
            active if it is, or is a descendent of, an active panel. Items in
            non-active panels are not active.</para>
            <para>Items that are not part of a panel follow scene activation when
            the scene has no active panel.</para>
            <para>Only active items can gain input focus.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also QGraphicsScene::isActive(),
            QGraphicsScene::activePanel(), panel(), and isPanel().</para>
            <para></para>
            <para>If active is true, and the scene is active, this item's panel
            will be activated. Otherwise, the panel is deactivated.</para>
            <para>If the item is not part of an active scene, active will decide
            what happens to the panel when the scene becomes active or the item is
            added to the scene. If true, the item's panel will be activated when the
            item is either added to the scene or the scene is activated. Otherwise, the
            item will stay inactive independent of the scene's activated state.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also isPanel(), QGraphicsScene::setActivePanel(), and
            QGraphicsScene::isActive().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.FocusProxy">
            <summary>
            <para>Returns this item's focus proxy, or 0 if this item has no focus
            proxy.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setFocusProxy(), setFocus(), and hasFocus().</para>
            <para></para>
            <para>Sets the item's focus proxy to item.</para>
            <para>If an item has a focus proxy, the focus proxy will receive input
            focus when the item gains input focus. The item itself will still have
            focus (i.e., hasFocus() will return true), but only the focus proxy will
            receive the keyboard input.</para>
            <para>A focus proxy can itself have a focus proxy, and so on. In such
            case, keyboard input will be handled by the outermost focus proxy.</para>
            <para>The focus proxy item must belong to the same scene as this
            item.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also focusProxy(), setFocus(), and hasFocus().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.X">
            <summary>
            <para>This convenience function is equivalent to calling
            pos().x().</para>
            <para>See also setX() and y().</para>
            <para></para>
            <para>Set's the x coordinate of the item's position. Equivalent to
            calling setPos(x, y()).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also x() and setPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Y">
            <summary>
            <para>This convenience function is equivalent to calling
            pos().y().</para>
            <para>See also setY() and x().</para>
            <para></para>
            <para>Set's the y coordinate of the item's position. Equivalent to
            calling setPos(x(), y).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also y(), x(), and setPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Pos">
            <summary>
            <para>Returns the position of the item in parent coordinates. If the
            item has no parent, its position is given in scene coordinates.</para>
            <para>The position of the item describes its origin (local coordinate
            (0, 0)) in parent coordinates; this function returns the same as
            mapToParent(0, 0).</para>
            <para>For convenience, you can also call scenePos() to determine the
            item's position in scene coordinates, regardless of its parent.</para>
            <para>See also x(), y(), setPos(), transform(), and The Graphics View
            Coordinate System.</para>
            <para></para>
            <para>Sets the position of the item to pos, which is in parent
            coordinates. For items with no parent, pos is in scene coordinates.</para>
            <para>The position of the item describes its origin (local coordinate
            (0, 0)) in parent coordinates.</para>
            <para>See also pos(), scenePos(), and The Graphics View Coordinate
            System.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Rotation">
            <summary>
            <para>Returns the clockwise rotation, in degrees, around the Z axis.
            The default value is 0 (i.e., the item is not rotated).</para>
            <para>The rotation is combined with the item's scale(), transform() and
            transformations() to map the item's coordinate system to the parent
            item.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setRotation(), transformOriginPoint(), and
            Transformations.</para>
            <para></para>
            <para>Sets the clockwise rotation angle, in degrees, around the Z axis.
            The default value is 0 (i.e., the item is not rotated). Assigning a
            negative value will rotate the item counter-clockwise. Normally the
            rotation angle is in the range (-360, 360), but it's also possible to
            assign values outside of this range (e.g., a rotation of 370 degrees is the
            same as a rotation of 10 degrees).</para>
            <para>The item is rotated around its transform origin point, which by
            default is (0, 0). You can select a different transformation origin by
            calling setTransformOriginPoint().</para>
            <para>The rotation is combined with the item's scale(), transform() and
            transformations() to map the item's coordinate system to the parent
            item.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also rotation(), setTransformOriginPoint(), and
            Transformations.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Scale">
            <summary>
            <para>Returns the scale factor of the item. The default scale factor is
            1.0 (i.e., the item is not scaled).</para>
            <para>The scale is combined with the item's rotation(), transform() and
            transformations() to map the item's coordinate system to the parent
            item.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setScale(), rotation(), and Transformations.</para>
            <para></para>
            <para>Sets the scale factor of the item. The default scale factor is
            1.0 (i.e., the item is not scaled). A scale factor of 0.0 will collapse the
            item to a single point. If you provide a negative scale factor, the item
            will be flipped and mirrored (i.e., rotated 180 degrees).</para>
            <para>The item is scaled around its transform origin point, which by
            default is (0, 0). You can select a different transformation origin by
            calling setTransformOriginPoint().</para>
            <para>The scale is combined with the item's rotation(), transform() and
            transformations() to map the item's coordinate system to the parent
            item.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also scale(), setTransformOriginPoint(), and Transformations
            Example.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.TransformOriginPoint">
            <summary>
            <para>Returns the origin point for the transformation in item
            coordinates.</para>
            <para>The default is QPointF(0,0).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setTransformOriginPoint() and Transformations.</para>
            <para></para>
            <para>Sets the origin point for the transformation in item
            coordinates.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also transformOriginPoint() and Transformations.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.ZValue">
            <summary>
            <para>Returns the Z-value of the item. The Z-value affects the stacking
            order of sibling (neighboring) items.</para>
            <para>The default Z-value is 0.</para>
            <para>See also setZValue(), Sorting, stackBefore(), and
            ItemStacksBehindParent.</para>
            <para></para>
            <para>Sets the Z-value of the item to z. The Z value decides the
            stacking order of sibling (neighboring) items. A sibling item of high Z
            value will always be drawn on top of another sibling item with a lower Z
            value.</para>
            <para>If you restore the Z value, the item's insertion order will
            decide its stacking order.</para>
            <para>The Z-value does not affect the item's size in any way.</para>
            <para>The default Z-value is 0.</para>
            <para>See also zValue(), Sorting, stackBefore(), and
            ItemStacksBehindParent.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.BoundingRegionGranularity">
            <summary>
            <para>Returns the item's bounding region granularity; a value between
            and including 0 and 1. The default value is 0 (i.e., the lowest
            granularity, where the bounding region corresponds to the item's bounding
            rectangle).</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setBoundingRegionGranularity().</para>
            <para></para>
            <para>Sets the bounding region granularity to granularity; a value
            between and including 0 and 1. The default value is 0 (i.e., the lowest
            granularity, where the bounding region corresponds to the item's bounding
            rectangle).</para>
            <para>The granularity is used by boundingRegion() to calculate how fine
            the bounding region of the item should be. The highest achievable
            granularity is 1, where boundingRegion() will return the finest outline
            possible for the respective device (e.g., for a QGraphicsView viewport,
            this gives you a pixel-perfect bounding region). The lowest possible
            granularity is 0. The value of granularity describes the ratio between
            device resolution and the resolution of the bounding region (e.g., a value
            of 0.25 will provide a region where each chunk corresponds to 4x4 device
            units / pixels).</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also boundingRegionGranularity().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.InputMethodHints">
            <summary>
            <para>Returns the current input method hints of this item.</para>
            <para>Input method hints are only relevant for input items. The hints
            are used by the input method to indicate how it should operate. For
            example, if the Qt::ImhNumbersOnly flag is set, the input method may change
            its visual components to reflect that only numbers can be entered.</para>
            <para>The effect may vary between input method implementations.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setInputMethodHints() and inputMethodQuery().</para>
            <para></para>
            <para>Sets the current input method hints of this item to hints.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also inputMethodHints() and inputMethodQuery().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.cacheMode">
            <summary>
            <para>Returns the cache mode for this item. The default mode is NoCache
            (i.e., cache is disabled and all painting is immediate).</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setCacheMode().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Matrix">
            <summary>
            <para>Returns the item's affine transformation matrix. This is a subset
            or the item's full transformation matrix, and might not represent the
            item's full transformation.</para>
            <para>Use transform() instead.</para>
            <para>See also setMatrix(), setTransform(), and
            sceneTransform().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Transform">
            <summary>
            <para>Returns this item's transformation matrix.</para>
            <para>The transformation matrix is combined with the item's rotation(),
            scale() and transformations() into a combined transformations for the
            item.</para>
            <para>The default transformation matrix is an identity matrix.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setTransform() and sceneTransform().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Scene">
            <summary>
            <para>Returns the current scene for the item, or 0 if the item is not
            stored in a scene.</para>
            <para>To add or move an item to a scene, call
            QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.TopLevelItem">
            <summary>
            <para>Returns this item's top-level item. The top-level item is the
            item's topmost ancestor item whose parent is 0. If an item has no parent,
            its own pointer is returned (i.e., a top-level item is its own top-level
            item).</para>
            <para>See also parentItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.ParentObject">
            <summary>
            <para>Returns a pointer to the item's parent, cast to a
            QGraphicsObject. returns 0 if the parent item is not a
            QGraphicsObject.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also parentItem() and childItems().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.ParentWidget">
            <summary>
            <para>Returns a pointer to the item's parent widget. The item's parent
            widget is the closest parent item that is a widget.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also parentItem() and childItems().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.TopLevelWidget">
            <summary>
            <para>Returns a pointer to the item's top level widget (i.e., the
            item's ancestor whose parent is 0, or whose parent is not a widget), or 0
            if this item does not have a top level widget. If the item is its own top
            level widget, this function returns a pointer to the item itself.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Window">
            <summary>
            <para>Returns the item's window, or 0 if this item does not have a
            window. If the item is a window, it will return itself. Otherwise it will
            return the closest ancestor that is a window.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QGraphicsWidget::isWindow().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Panel">
            <summary>
            <para>Returns the item's panel, or 0 if this item does not have a
            panel. If the item is a panel, it will return itself. Otherwise it will
            return the closest ancestor that is a panel.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also isPanel() and ItemIsPanel.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.IsWidget">
            <summary>
            <para>Returns true if this item is a widget (i.e., QGraphicsWidget);
            otherwise, returns false.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.IsWindow">
            <summary>
            <para>Returns true if the item is a QGraphicsWidget window, otherwise
            returns false.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QGraphicsWidget::windowFlags().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.IsPanel">
            <summary>
            <para>Returns true if the item is a panel; otherwise returns
            false.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also QGraphicsItem::panel() and ItemIsPanel.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.HasCursor">
            <summary>
            <para>Returns true if this item has a cursor set; otherwise, false is
            returned.</para>
            <para>By default, items don't have any cursor set. cursor() will return
            a standard pointing arrow cursor.</para>
            <para>See also unsetCursor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.EffectiveOpacity">
            <summary>
            <para>Returns this item's effective opacity, which is between 0.0
            (transparent) and 1.0 (opaque). This value is a combination of this item's
            local opacity, and its parent and ancestors' opacities. The effective
            opacity decides how the item is rendered.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also opacity(), setOpacity(), paint(),
            ItemIgnoresParentOpacity, and ItemDoesntPropagateOpacityToChildren.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.HasFocus">
            <summary>
            <para>Returns true if this item is active, and it or its focus proxy
            has keyboard input focus; otherwise, returns false.</para>
            <para>See also focusItem(), setFocus(), QGraphicsScene::setFocusItem(),
            and isActive().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.ScenePos">
            <summary>
            <para>Returns the item's position in scene coordinates. This is
            equivalent to calling mapToScene(0, 0).</para>
            <para>See also pos(), sceneTransform(), and The Graphics View
            Coordinate System.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.SceneMatrix">
            <summary>
            <para>Use sceneTransform() instead.</para>
            <para>See also transform(), setTransform(), scenePos(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.SceneTransform">
            <summary>
            <para>Returns this item's scene transformation matrix. This matrix can
            be used to map coordinates and geometrical shapes from this item's local
            coordinate system to the scene's coordinate system. To map coordinates from
            the scene, you must first invert the returned matrix.</para>
            <para>Example:</para>
            <para>QGraphicsRectItem rect;</para>
            <para>rect.setPos(100, 100);</para>
            <para></para>
            <para>rect.sceneTransform().map(QPointF(0, 0));</para>
            <para>// returns QPointF(100, 100);</para>
            <para></para>
            <para>rect.sceneTransform().inverted().map(QPointF(100, 100));</para>
            <para>// returns QPointF(0, 0);</para>
            <para>Unlike transform(), which returns only an item's local
            transformation, this function includes the item's (and any parents')
            position, and all the transfomation properties.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also transform(), setTransform(), scenePos(), The Graphics
            View Coordinate System, and Transformations.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.BoundingRect">
            <summary>
            <para>This pure virtual function defines the outer bounds of the item
            as a rectangle; all painting must be restricted to inside an item's
            bounding rect. QGraphicsView uses this to determine whether the item
            requires redrawing.</para>
            <para>Although the item's shape can be arbitrary, the bounding rect is
            always rectangular, and it is unaffected by the items'
            transformation.</para>
            <para>If you want to change the item's bounding rectangle, you must
            first call prepareGeometryChange(). This notifies the scene of the imminent
            change, so that it can update its item geometry index; otherwise, the scene
            will be unaware of the item's new geometry, and the results are undefined
            (typically, rendering artifacts are left within the view).</para>
            <para>Reimplement this function to let QGraphicsView determine what
            parts of the widget, if any, need to be redrawn.</para>
            <para>Note: For shapes that paint an outline / stroke, it is important
            to include half the pen width in the bounding rect. It is not necessary to
            compensate for antialiasing, though.</para>
            <para>Example:</para>
            <para>QRectF CircleItem::boundingRect() const</para>
            <para>{</para>
            <para>    qreal penWidth = 1;</para>
            <para>    return QRectF(-radius - penWidth / 2, -radius - penWidth /
            2,</para>
            <para>                  diameter + penWidth, diameter +
            penWidth);</para>
            <para>}</para>
            <para>See also boundingRegion(), shape(), contains(), The Graphics View
            Coordinate System, and prepareGeometryChange().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.ChildrenBoundingRect">
            <summary>
            <para>Returns the bounding rect of this item's descendants (i.e., its
            children, their children, etc.) in local coordinates. The rectangle will
            contain all descendants after they have been mapped to local coordinates.
            If the item has no children, this function returns an empty QRectF.</para>
            <para>This does not include this item's own bounding rect; it only
            returns its descendants' accumulated bounding rect. If you need to include
            this item's bounding rect, you can add boundingRect() to
            childrenBoundingRect() using QRectF::operator|().</para>
            <para>This function is linear in complexity; it determines the size of
            the returned bounding rect by iterating through all descendants.</para>
            <para>See also boundingRect() and sceneBoundingRect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.SceneBoundingRect">
            <summary>
            <para>Returns the bounding rect of this item in scene coordinates, by
            combining sceneTransform() with boundingRect().</para>
            <para>See also boundingRect() and The Graphics View Coordinate
            System.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Shape">
            <summary>
            <para>Returns the shape of this item as a QPainterPath in local
            coordinates. The shape is used for many things, including collision
            detection, hit tests, and for the QGraphicsScene::items() functions.</para>
            <para>The default implementation calls boundingRect() to return a
            simple rectangular shape, but subclasses can reimplement this function to
            return a more accurate shape for non-rectangular items. For example, a
            round item may choose to return an elliptic shape for better collision
            detection. For example:</para>
            <para>QPainterPath RoundItem::shape() const</para>
            <para>{</para>
            <para>    QPainterPath path;</para>
            <para>    path.addEllipse(boundingRect());</para>
            <para>    return path;</para>
            <para>}</para>
            <para>The outline of a shape can vary depending on the width and style
            of the pen used when drawing. If you want to include this outline in the
            item's shape, you can create a shape from the stroke using
            QPainterPathStroker.</para>
            <para>This function is called by the default implementations of
            contains() and collidesWithPath().</para>
            <para>See also boundingRect(), contains(), prepareGeometryChange(), and
            QPainterPathStroker.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.IsClipped">
            <summary>
            <para>Returns true if this item is clipped. An item is clipped if it
            has either set the ItemClipsToShape flag, or if it or any of its ancestors
            has set the ItemClipsChildrenToShape flag.</para>
            <para>Clipping affects the item's appearance (i.e., painting), as well
            as mouse and hover event delivery.</para>
            <para>See also clipPath(), shape(), and setFlags().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.ClipPath">
            <summary>
            <para>Returns this item's clip path, or an empty QPainterPath if this
            item is not clipped. The clip path constrains the item's appearance and
            interaction (i.e., restricts the area the item can draw within and receive
            events for).</para>
            <para>You can enable clipping by setting the ItemClipsToShape or
            ItemClipsChildrenToShape flags. The item's clip path is calculated by
            intersecting all clipping ancestors' shapes. If the item sets
            ItemClipsToShape, the final clip is intersected with the item's own
            shape.</para>
            <para>Note: Clipping introduces a performance penalty for all items
            involved; you should generally avoid using clipping if you can (e.g., if
            your items always draw inside boundingRect() or shape() boundaries,
            clipping is not necessary).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also isClipped(), shape(), and setFlags().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.OpaqueArea">
            <summary>
            <para>This virtual function returns a shape representing the area where
            this item is opaque. An area is opaque if it is filled using an opaque
            brush or color (i.e., not transparent).</para>
            <para>This function is used by isObscuredBy(), which is called by
            underlying items to determine if they are obscured by this item.</para>
            <para>The default implementation returns an empty QPainterPath,
            indicating that this item is completely transparent and does not obscure
            any other items.</para>
            <para>See also isObscuredBy(), isObscured(), and shape().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.IsUnderMouse">
            <summary>
            <para>Returns true if this item is currently under the mouse cursor in
            one of the views; otherwise, false is returned.</para>
            <para>This function was introduced in  Qt 4,4.</para>
            <para>See also QGraphicsScene::views() and QCursor::pos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItem.Type">
            <summary>
            <para>Returns the type of an item as an int. All standard graphicsitem
            classes are associated with a unique value; see QGraphicsItem::Type. This
            type information is used by qgraphicsitem_cast() to distinguish between
            types.</para>
            <para>The default implementation (in QGraphicsItem) returns
            UserType.</para>
            <para>To enable use of qgraphicsitem_cast() with a custom item,
            reimplement this function and declare a Type enum value equal to your
            custom item's type. Custom items must return a value larger than or equal
            to UserType (65536).</para>
            <para>For example:</para>
            <para>class CustomItem : public QGraphicsItem</para>
            <para>{</para>
            <para>public:</para>
            <para>   enum { Type = UserType + 1 };</para>
            <para></para>
            <para>   int type() const</para>
            <para>   {</para>
            <para>       // Enable the use of qgraphicsitem_cast with this
            item.</para>
            <para>       return Type;</para>
            <para>   }</para>
            <para>   ...</para>
            <para>};</para>
            <para>See also UserType.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsItem.GraphicsItemFlag">
            <summary>
            <para>This enum describes different flags that you can set on an item
            to toggle different features in the item's behavior.</para>
            <para>All flags are disabled by default.</para>
            <para>Note: This flag is similar to ItemContainsChildrenInShape but in
            addition enforces the containment by clipping the children.</para>
            <para>Note: With this flag set you can still scale the item itself, and
            that scale transformation will influence the item's children.</para>
            <para>Note: If both this flag and ItemClipsChildrenToShape are set, the
            clip will be enforced. This is equivalent to just setting
            ItemClipsChildrenToShape. . This flag was introduced in Qt 5.4.</para>
            <para>The GraphicsItemFlags type is a typedef for
            QFlags&lt;GraphicsItemFlag&gt;. It stores an OR combination of
            GraphicsItemFlag values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIsMovable">
            <summary>The item supports interactive movement using the mouse. By clicking on the item and then dragging, the item will move together with the mouse cursor. If the item has children, all children are also moved. If the item is part of a selection, all selected items are also moved. This feature is provided as a convenience through the base implementation of QGraphicsItem's mouse event handlers.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIsSelectable">
            <summary>The item supports selection. Enabling this feature will enable setSelected() to toggle selection for the item. It will also let the item be selected automatically as a result of calling QGraphicsScene::setSelectionArea(), by clicking on an item, or by using rubber band selection in QGraphicsView.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIsFocusable">
            <summary>The item supports keyboard input focus (i.e., it is an input item). Enabling this flag will allow the item to accept focus, which again allows the delivery of key events to QGraphicsItem::keyPressEvent() and QGraphicsItem::keyReleaseEvent().</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemClipsToShape">
            <summary>The item clips to its own shape. The item cannot draw or receive mouse, tablet, drag and drop or hover events outside its shape. It is disabled by default. This behavior is enforced by QGraphicsView::drawItems() or QGraphicsScene::drawItems(). This flag was introduced in Qt 4.3.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemClipsChildrenToShape">
            <summary>The item clips the painting of all its descendants to its own shape. Items that are either direct or indirect children of this item cannot draw outside this item's shape. By default, this flag is disabled; children can draw anywhere. This behavior is enforced by QGraphicsView::drawItems() or QGraphicsScene::drawItems(). This flag was introduced in Qt 4.3.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIgnoresTransformations">
            <summary>The item ignores inherited transformations (i.e., its position is still anchored to its parent, but the parent or view rotation, zoom or shear transformations are ignored). This flag is useful for keeping text label items horizontal and unscaled, so they will still be readable if the view is transformed. When set, the item's view geometry and scene geometry will be maintained separately. You must call deviceTransform() to map coordinates and detect collisions in the view. By default, this flag is disabled. This flag was introduced in Qt 4.3.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIgnoresParentOpacity">
            <summary>The item ignores its parent's opacity. The item's effective opacity is the same as its own; it does not combine with the parent's opacity. This flags allows your item to keep its absolute opacity even if the parent is semitransparent. This flag was introduced in Qt 4.5.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemDoesntPropagateOpacityToChildren">
            <summary>The item doesn't propagate its opacity to its children. This flag allows you to create a semitransparent item that does not affect the opacity of its children. This flag was introduced in Qt 4.5.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemStacksBehindParent">
            <summary>The item is stacked behind its parent. By default, child items are stacked on top of the parent item. But setting this flag, the child will be stacked behind it. This flag is useful for drop shadow effects and for decoration objects that follow the parent item's geometry without drawing on top of it. This flag was introduced in Qt 4.5.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemUsesExtendedStyleOption">
            <summary>The item makes use of either exposedRect or matrix in QStyleOptionGraphicsItem. By default, the exposedRect is initialized to the item's boundingRect() and the matrix is untransformed. You can enable this flag for the style options to be set up with more fine-grained values. Note that QStyleOptionGraphicsItem::levelOfDetail is unaffected by this flag and always initialized to 1. Use QStyleOptionGraphicsItem::levelOfDetailFromTransform() if you need a higher value. This flag was introduced in Qt 4.6.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemHasNoContents">
            <summary>The item does not paint anything (i.e., calling paint() on the item has no effect). You should set this flag on items that do not need to be painted to ensure that Graphics View avoids unnecessary painting preparations. This flag was introduced in Qt 4.6.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemSendsGeometryChanges">
            <summary>The item enables itemChange() notifications for ItemPositionChange, ItemPositionHasChanged, ItemMatrixChange, ItemTransformChange, ItemTransformHasChanged, ItemRotationChange, ItemRotationHasChanged, ItemScaleChange, ItemScaleHasChanged, ItemTransformOriginPointChange, and ItemTransformOriginPointHasChanged. For performance reasons, these notifications are disabled by default. You must enable this flag to receive notifications for position and transform changes. This flag was introduced in Qt 4.6.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemAcceptsInputMethod">
            <summary>The item supports input methods typically used for Asian languages. This flag was introduced in Qt 4.6.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemNegativeZStacksBehindParent">
            <summary>The item automatically stacks behind it's parent if it's z-value is negative. This flag enables setZValue() to toggle ItemStacksBehindParent. This flag was introduced in Qt 4.6.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemIsPanel">
            <summary>The item is a panel. A panel provides activation and contained focus handling. Only one panel can be active at a time (see QGraphicsItem::isActive()). When no panel is active, QGraphicsScene activates all non-panel items. Window items (i.e., QGraphicsItem::isWindow() returns true) are panels. This flag was introduced in Qt 4.6.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemSendsScenePositionChanges">
            <summary>The item enables itemChange() notifications for ItemScenePositionHasChanged. For performance reasons, these notifications are disabled by default. You must enable this flag to receive notifications for scene position changes. This flag was introduced in Qt 4.6.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemFlag.ItemContainsChildrenInShape">
            <summary>This flag indicates that all of the item's direct or indirect children only draw within the item's shape. Unlike ItemClipsChildrenToShape, this restriction is not enforced. Set ItemContainsChildrenInShape when you manually assure that drawing is bound to the item's shape and want to avoid the cost associated with enforcing the clip. Setting this flag enables more efficient drawing and collision detection. The flag is disabled by default.</summary>
        </member>
        <member name="T:QtWidgets.QGraphicsItem.GraphicsItemChange">
            <summary>
            <para>This enum describes the state changes that are notified by
            QGraphicsItem::itemChange(). The notifications are sent as the state
            changes, and in some cases, adjustments can be made (see the documentation
            for each change for details).</para>
            <para>Note: Be careful with calling functions on the QGraphicsItem
            itself inside itemChange(), as certain function calls can lead to unwanted
            recursion. For example, you cannot call setPos() in itemChange() on an
            ItemPositionChange notification, as the setPos() function will again call
            itemChange(ItemPositionChange). Instead, you can return the new, adjusted
            position from itemChange().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemPositionChange">
            <summary>The item's position changes. This notification is sent if the ItemSendsGeometryChanges flag is enabled, and when the item's local position changes, relative to its parent (i.e., as a result of calling setPos() or moveBy()). The value argument is the new position (i.e., a QPointF). You can call pos() to get the original position. Do not call setPos() or moveBy() in itemChange() as this notification is delivered; instead, you can return the new, adjusted position from itemChange(). After this notification, QGraphicsItem immediately sends the ItemPositionHasChanged notification if the position changed.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemMatrixChange">
            <summary>The item's affine transformation matrix is changing. This value is obsolete; you can use ItemTransformChange instead.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemVisibleChange">
            <summary>The item's visible state changes. If the item is presently visible, it will become invisible, and vice verca. The value argument is the new visible state (i.e., true or false). Do not call setVisible() in itemChange() as this notification is delivered; instead, you can return the new visible state from itemChange().</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemEnabledChange">
            <summary>The item's enabled state changes. If the item is presently enabled, it will become disabled, and vice verca. The value argument is the new enabled state (i.e., true or false). Do not call setEnabled() in itemChange() as this notification is delivered. Instead, you can return the new state from itemChange().</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemSelectedChange">
            <summary>The item's selected state changes. If the item is presently selected, it will become unselected, and vice verca. The value argument is the new selected state (i.e., true or false). Do not call setSelected() in itemChange() as this notification is delivered; instead, you can return the new selected state from itemChange().</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemParentChange">
            <summary>The item's parent changes. The value argument is the new parent item (i.e., a QGraphicsItem pointer). Do not call setParentItem() in itemChange() as this notification is delivered; instead, you can return the new parent from itemChange().</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemChildAddedChange">
            <summary>A child is added to this item. The value argument is the new child item (i.e., a QGraphicsItem pointer). Do not pass this item to any item's setParentItem() function as this notification is delivered. The return value is unused; you cannot adjust anything in this notification. Note that the new child might not be fully constructed when this notification is sent; calling pure virtual functions on the child can lead to a crash.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemChildRemovedChange">
            <summary>A child is removed from this item. The value argument is the child item that is about to be removed (i.e., a QGraphicsItem pointer). The return value is unused; you cannot adjust anything in this notification.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemTransformChange">
            <summary>The item's transformation matrix changes. This notification is sent if the ItemSendsGeometryChanges flag is enabled, and when the item's local transformation matrix changes (i.e., as a result of calling setTransform(). The value argument is the new matrix (i.e., a QTransform); to get the old matrix, call transform(). Do not call setTransform() or set any of the transformation properties in itemChange() as this notification is delivered; instead, you can return the new matrix from itemChange(). This notification is not sent if you change the transformation properties.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemPositionHasChanged">
            <summary>The item's position has changed. This notification is sent if the ItemSendsGeometryChanges flag is enabled, and after the item's local position, relative to its parent, has changed. The value argument is the new position (the same as pos()), and QGraphicsItem ignores the return value for this notification (i.e., a read-only notification).</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemTransformHasChanged">
            <summary>The item's transformation matrix has changed either because setTransform is called, or one of the transformation properties is changed. This notification is sent if the ItemSendsGeometryChanges flag is enabled, and after the item's local transformation matrix has changed. The value argument is the new matrix (same as transform()), and QGraphicsItem ignores the return value for this notification (i.e., a read-only notification).</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemSceneChange">
            <summary>The item is moved to a new scene. This notification is also sent when the item is added to its initial scene, and when it is removed. The item's scene() is the old scene (or 0 if the item has not been added to a scene yet). The value argument is the new scene (i.e., a QGraphicsScene pointer), or a null pointer if the item is removed from a scene. Do not override this change by passing this item to QGraphicsScene::addItem() as this notification is delivered; instead, you can return the new scene from itemChange(). Use this feature with caution; objecting to a scene change can quickly lead to unwanted recursion.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemVisibleHasChanged">
            <summary>The item's visible state has changed. The value argument is the new visible state (i.e., true or false). Do not call setVisible() in itemChange() as this notification is delivered. The return value is ignored.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemEnabledHasChanged">
            <summary>The item's enabled state has changed. The value argument is the new enabled state (i.e., true or false). Do not call setEnabled() in itemChange() as this notification is delivered. The return value is ignored.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemSelectedHasChanged">
            <summary>The item's selected state has changed. The value argument is the new selected state (i.e., true or false). Do not call setSelected() in itemChange() as this notification is delivered. The return value is ignored.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemParentHasChanged">
            <summary>The item's parent has changed. The value argument is the new parent (i.e., a pointer to a QGraphicsItem). Do not call setParentItem() in itemChange() as this notification is delivered. The return value is ignored.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemSceneHasChanged">
            <summary>The item's scene has changed. The item's scene() is the new scene. This notification is also sent when the item is added to its initial scene, and when it is removed.The value argument is the new scene (i.e., a pointer to a QGraphicsScene). Do not call setScene() in itemChange() as this notification is delivered. The return value is ignored.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemCursorChange">
            <summary>The item's cursor changes. The value argument is the new cursor (i.e., a QCursor). Do not call setCursor() in itemChange() as this notification is delivered. Instead, you can return a new cursor from itemChange().</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemCursorHasChanged">
            <summary>The item's cursor has changed. The value argument is the new cursor (i.e., a QCursor). Do not call setCursor() as this notification is delivered. The return value is ignored.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemToolTipChange">
            <summary>The item's tooltip changes. The value argument is the new tooltip (i.e., a QToolTip). Do not call setToolTip() in itemChange() as this notification is delivered. Instead, you can return a new tooltip from itemChange().</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemToolTipHasChanged">
            <summary>The item's tooltip has changed. The value argument is the new tooltip (i.e., a QToolTip). Do not call setToolTip() as this notification is delivered. The return value is ignored.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemFlagsChange">
            <summary>The item's flags change. The value argument is the new flags (i.e., a quint32). Do not call setFlags() in itemChange() as this notification is delivered. Instead, you can return the new flags from itemChange().</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemFlagsHaveChanged">
            <summary>The item's flags have changed. The value argument is the new flags (i.e., a quint32). Do not call setFlags() in itemChange() as this notification is delivered. The return value is ignored.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemZValueChange">
            <summary>The item's Z-value changes. The value argument is the new Z-value (i.e., a double). Do not call setZValue() in itemChange() as this notification is delivered. Instead, you can return a new Z-value from itemChange().</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemZValueHasChanged">
            <summary>The item's Z-value has changed. The value argument is the new Z-value (i.e., a double). Do not call setZValue() as this notification is delivered. The return value is ignored.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemOpacityChange">
            <summary>The item's opacity changes. The value argument is the new opacity (i.e., a double). Do not call setOpacity() in itemChange() as this notification is delivered. Instead, you can return a new opacity from itemChange().</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemOpacityHasChanged">
            <summary>The item's opacity has changed. The value argument is the new opacity (i.e., a double). Do not call setOpacity() as this notification is delivered. The return value is ignored.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemScenePositionHasChanged">
            <summary>The item's scene position has changed. This notification is sent if the ItemSendsScenePositionChanges flag is enabled, and after the item's scene position has changed (i.e., the position or transformation of the item itself or the position or transformation of any ancestor has changed). The value argument is the new scene position (the same as scenePos()), and QGraphicsItem ignores the return value for this notification (i.e., a read-only notification).</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemRotationChange">
            <summary>The item's rotation property changes. This notification is sent if the ItemSendsGeometryChanges flag is enabled, and when the item's rotation property changes (i.e., as a result of calling setRotation()). The value argument is the new rotation (i.e., a double); to get the old rotation, call rotation(). Do not call setRotation() in itemChange() as this notification is delivered; instead, you can return the new rotation from itemChange().</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemRotationHasChanged">
            <summary>The item's rotation property has changed. This notification is sent if the ItemSendsGeometryChanges flag is enabled, and after the item's rotation property has changed. The value argument is the new rotation (i.e., a double), and QGraphicsItem ignores the return value for this notification (i.e., a read-only notification). Do not call setRotation() in itemChange() as this notification is delivered.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemScaleChange">
            <summary>The item's scale property changes. This notification is sent if the ItemSendsGeometryChanges flag is enabled, and when the item's scale property changes (i.e., as a result of calling setScale()). The value argument is the new scale (i.e., a double); to get the old scale, call scale(). Do not call setScale() in itemChange() as this notification is delivered; instead, you can return the new scale from itemChange().</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemScaleHasChanged">
            <summary>The item's scale property has changed. This notification is sent if the ItemSendsGeometryChanges flag is enabled, and after the item's scale property has changed. The value argument is the new scale (i.e., a double), and QGraphicsItem ignores the return value for this notification (i.e., a read-only notification). Do not call setScale() in itemChange() as this notification is delivered.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemTransformOriginPointChange">
            <summary>The item's transform origin point property changes. This notification is sent if the ItemSendsGeometryChanges flag is enabled, and when the item's transform origin point property changes (i.e., as a result of calling setTransformOriginPoint()). The value argument is the new origin point (i.e., a QPointF); to get the old origin point, call transformOriginPoint(). Do not call setTransformOriginPoint() in itemChange() as this notification is delivered; instead, you can return the new transform origin point from itemChange().</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.GraphicsItemChange.ItemTransformOriginPointHasChanged">
            <summary>The item's transform origin point property has changed. This notification is sent if the ItemSendsGeometryChanges flag is enabled, and after the item's transform origin point property has changed. The value argument is the new origin point (i.e., a QPointF), and QGraphicsItem ignores the return value for this notification (i.e., a read-only notification). Do not call setTransformOriginPoint() in itemChange() as this notification is delivered.</summary>
        </member>
        <member name="T:QtWidgets.QGraphicsItem.CacheMode">
            <summary>
            <para>This enum describes QGraphicsItem's cache modes. Caching is used
            to speed up rendering by allocating and rendering to an off-screen pixel
            buffer, which can be reused when the item requires redrawing. For some
            paint devices, the cache is stored directly in graphics memory, which makes
            rendering very quick.</para>
            <para>This enum was introduced or modified in  Qt 4.4.</para>
            <para>See also QGraphicsItem::setCacheMode().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.CacheMode.NoCache">
            <summary>The default; all item caching is disabled. QGraphicsItem::paint() is called every time the item needs redrawing.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.CacheMode.ItemCoordinateCache">
            <summary>Caching is enabled for the item's logical (local) coordinate system. QGraphicsItem creates an off-screen pixel buffer with a configurable size / resolution that you can pass to QGraphicsItem::setCacheMode(). Rendering quality will typically degrade, depending on the resolution of the cache and the item transformation. The first time the item is redrawn, it will render itself into the cache, and the cache is then reused for every subsequent expose. The cache is also reused as the item is transformed. To adjust the resolution of the cache, you can call setCacheMode() again.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.CacheMode.DeviceCoordinateCache">
            <summary>Caching is enabled at the paint device level, in device coordinates. This mode is for items that can move, but are not rotated, scaled or sheared. If the item is transformed directly or indirectly, the cache will be regenerated automatically. Unlike ItemCoordinateCacheMode, DeviceCoordinateCache always renders at maximum quality.</summary>
        </member>
        <member name="T:QtWidgets.QGraphicsItem.PanelModality">
            <summary>
            <para>This enum specifies the behavior of a modal panel. A modal panel
            is one that blocks input to other panels. Note that items that are children
            of a modal panel are not blocked.</para>
            <para>The values are:</para>
            <para>This enum was introduced or modified in  Qt 4.6.</para>
            <para>See also QGraphicsItem::setPanelModality(),
            QGraphicsItem::panelModality(), and QGraphicsItem::ItemIsPanel.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.PanelModality.NonModal">
            <summary>The panel is not modal and does not block input to other panels. This is the default value for panels.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.PanelModality.PanelModal">
            <summary>The panel is modal to a single item hierarchy and blocks input to its parent pane, all grandparent panels, and all siblings of its parent and grandparent panels.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsItem.PanelModality.SceneModal">
            <summary>The window is modal to the entire scene and blocks input to all panels.</summary>
        </member>
        <member name="T:QtWidgets.QGraphicsObject">
            <summary>
            <para>The QGraphicsObject class provides a base class for all graphics
            items that require signals, slots and properties.</para>
            </summary>
            <remarks>
            <para>The class extends a QGraphicsItem with QObject's signal/slot and
            property mechanisms. It maps many of QGraphicsItem's basic setters and
            getters to properties and adds notification signals for many of
            them.</para>
            <para></para>
            <para>Parents and Children</para>
            <para>Each graphics object can be constructed with a parent item. This
            ensures that the item will be destroyed when its parent item is destroyed.
            Although QGraphicsObject inherits from both QObject and QGraphicsItem, you
            should use the functions provided by QGraphicsItem, not QObject, to manage
            the relationships between parent and child items.</para>
            <para>The relationships between items can be explored using the
            parentItem() and childItems() functions. In the hierarchy of items in a
            scene, the parentObject() and parentWidget() functions are the equivalent
            of the QWidget::parent() and QWidget::parentWidget() functions for QWidget
            subclasses.</para>
            <para></para>
            <para>See also QGraphicsWidget.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.#ctor(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsObject with parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.GrabGesture(QtCore.Qt.GestureType,QtCore.Qt.GestureFlag)">
            <summary>
            <para>Subscribes the graphics object to the given gesture with specific
            flags.</para>
            <para>See also ungrabGesture() and QGestureEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.UngrabGesture(QtCore.Qt.GestureType)">
            <summary>
            <para>Unsubscribes the graphics object from the given gesture.</para>
            <para>See also grabGesture() and QGestureEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.UpdateMicroFocus">
            <summary>
            <para>Updates the item's micro focus. This is slot for
            convenience.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also QInputMethod.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.ToGraphicsObject">
            <summary>
            <para>Return the graphics item cast to a QGraphicsObject, if the class
            is actually a graphics object, 0 otherwise.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.SetFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag,System.Boolean)">
            <summary>
            <para>If enabled is true, the item flag flag is enabled; otherwise, it
            is disabled.</para>
            <para>See also flags() and setFlags().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.SetCacheMode(QtWidgets.QGraphicsItem.CacheMode,QtCore.QSize)">
            <summary>
            <para>Sets the item's cache mode to mode.</para>
            <para>The optional logicalCacheSize argument is used only by
            ItemCoordinateCache mode, and describes the resolution of the cache buffer;
            if logicalCacheSize is (100, 100), QGraphicsItem will fit the item into
            100x100 pixels in graphics memory, regardless of the logical size of the
            item itself. By default QGraphicsItem uses the size of boundingRect(). For
            all other cache modes than ItemCoordinateCache, logicalCacheSize is
            ignored.</para>
            <para>Caching can speed up rendering if your item spends a significant
            time redrawing itself. In some cases the cache can also slow down
            rendering, in particular when the item spends less time redrawing than
            QGraphicsItem spends redrawing from the cache.</para>
            <para>When caching is enabled, an item's paint() function will
            generally draw into an offscreen pixmap cache; for any subsequent repaint
            requests, the Graphics View framework will redraw from the cache. This
            approach works particularly well with QGLWidget, which stores all the cache
            as OpenGL textures.</para>
            <para>Be aware that QPixmapCache's cache limit may need to be changed
            to obtain optimal performance.</para>
            <para>You can read more about the different cache modes in the
            CacheMode documentation.</para>
            <para>Note: Enabling caching does not imply that the item's paint()
            function will be called only in response to an explicit update() call. For
            instance, under memory pressure, Qt may decide to drop some of the cache
            information; in such cases an item's paint() function will be called even
            if there was no update() call (that is, exactly as if there were no caching
            enabled).</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also cacheMode(), CacheMode, and
            QPixmapCache::setCacheLimit().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.IsBlockedByModalPanel(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns true if this item is blocked by a modal panel, false
            otherwise. If blockingPanel is non-zero, blockingPanel will be set to the
            modal panel that is blocking this item. If this item is not blocked,
            blockingPanel will not be set by this function.</para>
            <para>This function always returns false for items not in a
            scene.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also panelModality(), setPanelModality(), and
            PanelModality.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.UnsetCursor">
            <summary>
            <para>Clears the cursor from this item.</para>
            <para>See also hasCursor() and setCursor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.IsVisibleTo(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns true if the item is visible to parent; otherwise, false
            is returned. parent can be 0, in which case this function will return
            whether the item is visible to the scene or not.</para>
            <para>An item may not be visible to its ancestors even if isVisible()
            is true. It may also be visible to its ancestors even if isVisible() is
            false. If any ancestor is hidden, the item itself will be implicitly
            hidden, in which case this function will return false.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also isVisible() and setVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.Hide">
            <summary>
            <para>Hides the item (items are visible by default).</para>
            <para>This convenience function is equivalent to calling
            setVisible(false).</para>
            <para>See also show() and setVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.Show">
            <summary>
            <para>Shows the item (items are visible by default).</para>
            <para>This convenience function is equivalent to calling
            setVisible(true).</para>
            <para>See also hide() and setVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.SetFocus(QtCore.Qt.FocusReason)">
            <summary>
            <para>Gives keyboard input focus to this item. The focusReason argument
            will be passed into any focus event generated by this function; it is used
            to give an explanation of what caused the item to get focus.</para>
            <para>Only enabled items that set the ItemIsFocusable flag can accept
            keyboard focus.</para>
            <para>If this item is not visible, not active, or not associated with a
            scene, it will not gain immediate input focus. However, it will be
            registered as the preferred focus item for its subtree of items, should it
            later become visible.</para>
            <para>As a result of calling this function, this item will receive a
            focus in event with focusReason. If another item already has focus, that
            item will first receive a focus out event indicating that it has lost input
            focus.</para>
            <para>See also clearFocus(), hasFocus(), focusItem(), and
            focusProxy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.ClearFocus">
            <summary>
            <para>Takes keyboard input focus from the item.</para>
            <para>If it has focus, a focus out event is sent to this item to tell
            it that it is about to lose the focus.</para>
            <para>Only items that set the ItemIsFocusable flag, or widgets that set
            an appropriate focus policy, can accept keyboard focus.</para>
            <para>See also setFocus(), hasFocus(), and
            QGraphicsWidget::focusPolicy.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.FocusItem">
            <summary>
            <para>If this item, a child or descendant of this item currently has
            input focus, this function will return a pointer to that item. If no
            descendant has input focus, 0 is returned.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also hasFocus(), setFocus(), and
            QWidget::focusWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.GrabMouse">
            <summary>
            <para>Grabs the mouse input.</para>
            <para>This item will receive all mouse events for the scene until any
            of the following events occurs:</para>
            <para></para>
            <para>The item becomes invisible</para>
            <para>The item is removed from the scene</para>
            <para>The item is deleted</para>
            <para>The item call ungrabMouse()</para>
            <para>Another item calls grabMouse(); the item will regain the mouse
            grab when the other item calls ungrabMouse().</para>
            <para></para>
            <para>When an item gains the mouse grab, it receives a
            QEvent::GrabMouse event. When it loses the mouse grab, it receives a
            QEvent::UngrabMouse event. These events can be used to detect when your
            item gains or loses the mouse grab through other means than receiving mouse
            button events.</para>
            <para>It is almost never necessary to explicitly grab the mouse in Qt,
            as Qt grabs and releases it sensibly. In particular, Qt grabs the mouse
            when you press a mouse button, and keeps the mouse grabbed until you
            release the last mouse button. Also, Qt::Popup widgets implicitly call
            grabMouse() when shown, and ungrabMouse() when hidden.</para>
            <para>Note that only visible items can grab mouse input. Calling
            grabMouse() on an invisible item has no effect.</para>
            <para>Keyboard events are not affected.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QGraphicsScene::mouseGrabberItem(), ungrabMouse(), and
            grabKeyboard().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.UngrabMouse">
            <summary>
            <para>Releases the mouse grab.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also grabMouse() and ungrabKeyboard().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.GrabKeyboard">
            <summary>
            <para>Grabs the keyboard input.</para>
            <para>The item will receive all keyboard input to the scene until one
            of the following events occur:</para>
            <para></para>
            <para>The item becomes invisible</para>
            <para>The item is removed from the scene</para>
            <para>The item is deleted</para>
            <para>The item calls ungrabKeyboard()</para>
            <para>Another item calls grabKeyboard(); the item will regain the
            keyboard grab when the other item calls ungrabKeyboard().</para>
            <para></para>
            <para>When an item gains the keyboard grab, it receives a
            QEvent::GrabKeyboard event. When it loses the keyboard grab, it receives a
            QEvent::UngrabKeyboard event. These events can be used to detect when your
            item gains or loses the keyboard grab through other means than gaining
            input focus.</para>
            <para>It is almost never necessary to explicitly grab the keyboard in
            Qt, as Qt grabs and releases it sensibly. In particular, Qt grabs the
            keyboard when your item gains input focus, and releases it when your item
            loses input focus, or when the item is hidden.</para>
            <para>Note that only visible items can grab keyboard input. Calling
            grabKeyboard() on an invisible item has no effect.</para>
            <para>Keyboard events are not affected.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also ungrabKeyboard(), grabMouse(), and setFocus().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.UngrabKeyboard">
            <summary>
            <para>Releases the keyboard grab.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also grabKeyboard() and ungrabMouse().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.SetPos(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            setPos(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MoveBy(System.Double,System.Double)">
            <summary>
            <para>Moves the item by dx points horizontally, and dy point
            vertically. This function is equivalent to calling setPos(pos() +
            QPointF(dx, dy)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.EnsureVisible(QtCore.QRectF,System.Int32,System.Int32)">
            <summary>
            <para>If this item is part of a scene that is viewed by a
            QGraphicsView, this convenience function will attempt to scroll the view to
            ensure that rect is visible inside the view's viewport. If rect is a null
            rect (the default), QGraphicsItem will default to the item's bounding rect.
            xmargin and ymargin are the number of pixels the view should use for
            margins.</para>
            <para>If the specified rect cannot be reached, the contents are
            scrolled to the nearest valid position.</para>
            <para>If this item is not viewed by a QGraphicsView, this function does
            nothing.</para>
            <para>See also QGraphicsView::ensureVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.EnsureVisible(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            <para>This convenience function is equivalent to calling
            ensureVisible(QRectF(x, y, w, h), xmargin, ymargin).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.SetMatrix(QtGui.QMatrix,System.Boolean)">
            <summary>
            <para>Sets the item's affine transformation matrix. This is a subset or
            the item's full transformation matrix, and might not represent the item's
            full transformation.</para>
            <para>Use setTransform() instead.</para>
            <para>See also matrix(), transform(), and The Graphics View Coordinate
            System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.ResetMatrix">
            <summary>
            <para>Use resetTransform() instead.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.DeviceTransform(QtGui.QTransform)">
             <summary>
             <para>Returns this item's device transformation matrix, using
             viewportTransform to map from scene to device coordinates. This matrix can
             be used to map coordinates and geometrical shapes from this item's local
             coordinate system to the viewport's (or any device's) coordinate system. To
             map coordinates from the viewport, you must first invert the returned
             matrix.</para>
             <para>Example:</para>
             <para>QGraphicsRectItem rect;</para>
             <para>rect.setPos(100, 100);</para>
             <para></para>
             <para>rect.deviceTransform(view-&gt;viewportTransform()).map(QPointF(0,
             0));</para>
             <para>// returns the item's (0, 0) point in view's viewport
             coordinates</para>
             <para></para>
            
             <para>rect.deviceTransform(view-&gt;viewportTransform()).inverted().map(QPo
             intF(100, 100));</para>
             <para>// returns view's viewport's (100, 100) coordinate in item
             coordinates</para>
             <para>This function is the same as combining this item's scene
             transform with the view's viewport transform, but it also understands the
             ItemIgnoresTransformations flag. The device transform can be used to do
             accurate coordinate mapping (and collision detection) for untransformable
             items.</para>
             <para>This function was introduced in  Qt 4.3.</para>
             <para>See also transform(), setTransform(), scenePos(), The Graphics
             View Coordinate System, and itemTransform().</para>
             </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.ItemTransform(QtWidgets.IQGraphicsItem,System.Boolean@)">
            <summary>
            <para>Returns a QTransform that maps coordinates from this item to
            other. If ok is not null, and if there is no such transform, the boolean
            pointed to by ok will be set to false; otherwise it will be set to
            true.</para>
            <para>This transform provides an alternative to the mapToItem() or
            mapFromItem() functions, by returning the appropriate transform so that you
            can map shapes and coordinates yourself. It also helps you write more
            efficient code when repeatedly mapping between the same two items.</para>
            <para>Note: In rare circumstances, there is no transform that maps
            between two items.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also mapToItem(), mapFromItem(), and
            deviceTransform().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.SetTransform(QtGui.QTransform,System.Boolean)">
            <summary>
            <para>Sets the item's current transformation matrix to matrix.</para>
            <para>If combine is true, then matrix is combined with the current
            matrix; otherwise, matrix replaces the current matrix. combine is false by
            default.</para>
            <para>To simplify interation with items using a transformed view,
            QGraphicsItem provides mapTo... and mapFrom... functions that can translate
            between items' and the scene's coordinates. For example, you can call
            mapToScene() to map an item coordiate to a scene coordinate, or
            mapFromScene() to map from scene coordinates to item coordinates.</para>
            <para>The transformation matrix is combined with the item's rotation(),
            scale() and transformations() into a combined transformation that maps the
            item's coordinate system to its parent.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also transform(), setRotation(), setScale(),
            setTransformOriginPoint(), The Graphics View Coordinate System, and
            Transformations.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.ResetTransform">
            <summary>
            <para>Resets this item's transformation matrix to the identity matrix
            or all the transformation properties to their default values. This is
            equivalent to calling setTransform(QTransform()).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setTransform() and transform().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.SetTransformOriginPoint(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the origin point for the transformation in item coordinates.
            This is equivalent to calling setTransformOriginPoint(QPointF(x,
            y)).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setTransformOriginPoint() and Transformations.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.Advance(System.Int32)">
            <summary>
            <para>This virtual function is called twice for all items by the
            QGraphicsScene::advance() slot. In the first phase, all items are called
            with phase == 0, indicating that items on the scene are about to advance,
            and then all items are called with phase == 1. Reimplement this function to
            update your item if you need simple scene-controlled animation.</para>
            <para>The default implementation does nothing.</para>
            <para>This function is intended for animations. An alternative is to
            multiple-inherit from QObject and QGraphicsItem and use the Animation
            Framework.</para>
            <para>See also QGraphicsScene::advance() and QTimeLine.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.StackBefore(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Stacks this item before sibling, which must be a sibling item
            (i.e., the two items must share the same parent item, or must both be
            toplevel items). The sibling must have the same Z value as this item,
            otherwise calling this function will have no effect.</para>
            <para>By default, all sibling items are stacked by insertion order
            (i.e., the first item you add is drawn before the next item you add). If
            two items' Z values are different, then the item with the highest Z value
            is drawn on top. When the Z values are the same, the insertion order will
            decide the stacking order.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setZValue(), ItemStacksBehindParent, and Sorting.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.Contains(QtCore.QPointF)">
            <summary>
            <para>Returns true if this item contains point, which is in local
            coordinates; otherwise, false is returned. It is most often called from
            QGraphicsView to determine what item is under the cursor, and for that
            reason, the implementation of this function should be as light-weight as
            possible.</para>
            <para>By default, this function calls shape(), but you can reimplement
            it in a subclass to provide a (perhaps more efficient)
            implementation.</para>
            <para>See also shape(), boundingRect(), and collidesWithPath().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.CollidesWithItem(QtWidgets.IQGraphicsItem,QtCore.Qt.ItemSelectionMode)">
            <summary>
            <para>Returns true if this item collides with other; otherwise returns
            false.</para>
            <para>The mode is applied to other, and the resulting shape or bounding
            rectangle is then compared to this item's shape. The default value for mode
            is Qt::IntersectsItemShape; other collides with this item if it either
            intersects, contains, or is contained by this item's shape (see
            Qt::ItemSelectionMode for details).</para>
            <para>The default implementation is based on shape intersection, and it
            calls shape() on both items. Because the complexity of arbitrary
            shape-shape intersection grows with an order of magnitude when the shapes
            are complex, this operation can be noticably time consuming. You have the
            option of reimplementing this function in a subclass of QGraphicsItem to
            provide a custom algorithm. This allows you to make use of natural
            constraints in the shapes of your own items, in order to improve the
            performance of the collision detection. For instance, two untransformed
            perfectly circular items' collision can be determined very efficiently by
            comparing their positions and radii.</para>
            <para>Keep in mind that when reimplementing this function and calling
            shape() or boundingRect() on other, the returned coordinates must be mapped
            to this item's coordinate system before any intersection can take
            place.</para>
            <para>See also contains() and shape().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.CollidesWithPath(QtGui.QPainterPath,QtCore.Qt.ItemSelectionMode)">
            <summary>
            <para>Returns true if this item collides with path.</para>
            <para>The collision is determined by mode. The default value for mode
            is Qt::IntersectsItemShape; path collides with this item if it either
            intersects, contains, or is contained by this item's shape.</para>
            <para>Note that this function checks whether the item's shape or
            bounding rectangle (depending on mode) is contained within path, and not
            whether path is contained within the items shape or bounding
            rectangle.</para>
            <para>See also collidesWithItem(), contains(), and shape().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.IsObscured(QtCore.QRectF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if rect is completely obscured by the opaque shape
            of any of colliding items above it (i.e., with a higher Z value than this
            item).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also opaqueArea().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.IsObscured(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            isObscured(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.IsObscuredBy(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns true if this item's bounding rect is completely obscured
            by the opaque shape of item.</para>
            <para>The base implementation maps item's opaqueArea() to this item's
            coordinate system, and then checks if this item's boundingRect() is fully
            contained within the mapped shape.</para>
            <para>You can reimplement this function to provide a custom algorithm
            for determining whether this item is obscured by item.</para>
            <para>See also opaqueArea() and isObscured().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.BoundingRegion(QtGui.QTransform)">
            <summary>
            <para>Returns the bounding region for this item. The coordinate space
            of the returned region depends on itemToDeviceTransform. If you pass an
            identity QTransform as a parameter, this function will return a local
            coordinate region.</para>
            <para>The bounding region describes a coarse outline of the item's
            visual contents. Although it's expensive to calculate, it's also more
            precise than boundingRect(), and it can help to avoid unnecessary
            repainting when an item is updated. This is particularly efficient for thin
            items (e.g., lines or simple polygons). You can tune the granularity for
            the bounding region by calling setBoundingRegionGranularity(). The default
            granularity is 0; in which the item's bounding region is the same as its
            bounding rect.</para>
            <para>itemToDeviceTransform is the transformation from item coordinates
            to device coordinates. If you want this function to return a QRegion in
            scene coordinates, you can pass sceneTransform() as an argument.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also boundingRegionGranularity().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.Paint(QtGui.QPainter,QtWidgets.QStyleOptionGraphicsItem,QtWidgets.QWidget)">
            <summary>
            <para>This function, which is usually called by QGraphicsView, paints
            the contents of an item in local coordinates.</para>
            <para>Reimplement this function in a QGraphicsItem subclass to provide
            the item's painting implementation, using painter. The option parameter
            provides style options for the item, such as its state, exposed area and
            its level-of-detail hints. The widget argument is optional. If provided, it
            points to the widget that is being painted on; otherwise, it is 0. For
            cached painting, widget is always 0.</para>
            <para>void RoundRectItem::paint(QPainter *painter,</para>
            <para>                          const QStyleOptionGraphicsItem
            *option,</para>
            <para>                          QWidget *widget)</para>
            <para>{</para>
            <para>    painter-&gt;drawRoundedRect(-10, -10, 20, 20, 5, 5);</para>
            <para>}</para>
            <para>The painter's pen is 0-width by default, and its pen is
            initialized to the QPalette::Text brush from the paint device's palette.
            The brush is initialized to QPalette::Window.</para>
            <para>Make sure to constrain all painting inside the boundaries of
            boundingRect() to avoid rendering artifacts (as QGraphicsView does not clip
            the painter for you). In particular, when QPainter renders the outline of a
            shape using an assigned QPen, half of the outline will be drawn outside,
            and half inside, the shape you're rendering (e.g., with a pen width of 2
            units, you must draw outlines 1 unit inside boundingRect()). QGraphicsItem
            does not support use of cosmetic pens with a non-zero width.</para>
            <para>All painting is done in local coordinates.</para>
            <para>Note: It is mandatory that an item will always redraw itself in
            the exact same way, unless update() was called; otherwise visual artifacts
            may occur. In other words, two subsequent calls to paint() must always
            produce the same output, unless update() was called between them.</para>
            <para>Note: Enabling caching for an item does not guarantee that
            paint() will be invoked only once by the Graphics View framework, even
            without any explicit call to update(). See the documentation of
            setCacheMode() for more details.</para>
            <para>See also setCacheMode(), QPen::width(), Item Coordinates, and
            ItemUsesExtendedStyleOption.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.Update(QtCore.QRectF)">
            <summary>
            <para>Schedules a redraw of the area covered by rect in this item. You
            can call this function whenever your item needs to be redrawn, such as if
            it changes appearance or size.</para>
            <para>This function does not cause an immediate paint; instead it
            schedules a paint request that is processed by QGraphicsView after control
            reaches the event loop. The item will only be redrawn if it is visible in
            any associated view.</para>
            <para>As a side effect of the item being repainted, other items that
            overlap the area rect may also be repainted.</para>
            <para>If the item is invisible (i.e., isVisible() returns false), this
            function does nothing.</para>
            <para>See also paint() and boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.Update(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            update(QRectF(x, y, width, height)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.Scroll(System.Double,System.Double,QtCore.QRectF)">
            <summary>
            <para>Scrolls the contents of rect by dx, dy. If rect is a null rect
            (the default), the item's bounding rect is scrolled.</para>
            <para>Scrolling provides a fast alternative to simply redrawing when
            the contents of the item (or parts of the item) are shifted vertically or
            horizontally. Depending on the current transformation and the capabilities
            of the paint device (i.e., the viewport), this operation may consist of
            simply moving pixels from one location to another using memmove(). In most
            cases this is faster than rerendering the entire area.</para>
            <para>After scrolling, the item will issue an update for the newly
            exposed areas. If scrolling is not supported (e.g., you are rendering to an
            OpenGL viewport, which does not benefit from scroll optimizations), this
            function is equivalent to calling update(rect).</para>
            <para>Note: Scrolling is only supported when
            QGraphicsItem::ItemCoordinateCache is enabled; in all other cases calling
            this function is equivalent to calling update(rect). If you for sure know
            that the item is opaque and not overlapped by other items, you can map the
            rect to viewport coordinates and scroll the viewport.</para>
            <para>QTransform xform =
            item-&gt;deviceTransform(view-&gt;viewportTransform());</para>
            <para>QRect deviceRect = xform.mapRect(rect).toAlignedRect();</para>
            <para>view-&gt;viewport()-&gt;scroll(dx, dy, deviceRect);</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToItem(QtWidgets.IQGraphicsItem,QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in this item's coordinate system,
            to item's coordinate system, and returns the mapped coordinate.</para>
            <para>If item is 0, this function returns the same as
            mapToScene().</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            transform(), mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToParent(QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in this item's coordinate system,
            to its parent's coordinate system, and returns the mapped coordinate. If
            the item has no parent, point will be mapped to the scene's coordinate
            system.</para>
            <para>See also mapToItem(), mapToScene(), transform(), mapFromParent(),
            and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToScene(QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in this item's coordinate system,
            to the scene's coordinate system, and returns the mapped coordinate.</para>
            <para>See also mapToItem(), mapToParent(), transform(), mapFromScene(),
            and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToItem(QtWidgets.IQGraphicsItem,QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to item's coordinate system, and returns the mapped rectangle as a
            polygon.</para>
            <para>If item is 0, this function returns the same as
            mapToScene().</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToParent(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to its parent's coordinate system, and returns the mapped rectangle
            as a polygon. If the item has no parent, rect will be mapped to the scene's
            coordinate system.</para>
            <para>See also mapToScene(), mapToItem(), mapFromParent(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToScene(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to the scene's coordinate system, and returns the mapped rectangle
            as a polygon.</para>
            <para>See also mapToParent(), mapToItem(), mapFromScene(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapRectToItem(QtWidgets.IQGraphicsItem,QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to item's coordinate system, and returns the mapped rectangle as a
            new rectangle (i.e., the bounding rectangle of the resulting
            polygon).</para>
            <para>If item is 0, this function returns the same as
            mapRectToScene().</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapRectToParent(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to its parent's coordinate system, and returns the mapped rectangle
            as a new rectangle (i.e., the bounding rectangle of the resulting
            polygon).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapRectToScene(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's coordinate
            system, to the scene coordinate system, and returns the mapped rectangle as
            a new rectangle (i.e., the bounding rectangle of the resulting
            polygon).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToItem(QtWidgets.IQGraphicsItem,QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in this item's coordinate
            system, to item's coordinate system, and returns the mapped polygon.</para>
            <para>If item is 0, this function returns the same as
            mapToScene().</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToParent(QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in this item's coordinate
            system, to its parent's coordinate system, and returns the mapped polygon.
            If the item has no parent, polygon will be mapped to the scene's coordinate
            system.</para>
            <para>See also mapToScene(), mapToItem(), mapFromParent(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToScene(QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in this item's coordinate
            system, to the scene's coordinate system, and returns the mapped
            polygon.</para>
            <para>See also mapToParent(), mapToItem(), mapFromScene(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToItem(QtWidgets.IQGraphicsItem,QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in this item's coordinate system, to
            item's coordinate system, and returns the mapped path.</para>
            <para>If item is 0, this function returns the same as
            mapToScene().</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToParent(QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in this item's coordinate system, to
            its parent's coordinate system, and returns the mapped path. If the item
            has no parent, path will be mapped to the scene's coordinate system.</para>
            <para>See also mapToScene(), mapToItem(), mapFromParent(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToScene(QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in this item's coordinate system, to
            the scene's coordinate system, and returns the mapped path.</para>
            <para>See also mapToParent(), mapToItem(), mapFromScene(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromItem(QtWidgets.IQGraphicsItem,QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in item's coordinate system, to
            this item's coordinate system, and returns the mapped coordinate.</para>
            <para>If item is 0, this function returns the same as
            mapFromScene().</para>
            <para>See also itemTransform(), mapFromParent(), mapFromScene(),
            transform(), mapToItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromParent(QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in this item's parent's coordinate
            system, to this item's coordinate system, and returns the mapped
            coordinate.</para>
            <para>See also mapFromItem(), mapFromScene(), transform(),
            mapToParent(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromScene(QtCore.QPointF)">
            <summary>
            <para>Maps the point point, which is in this item's scene's coordinate
            system, to this item's coordinate system, and returns the mapped
            coordinate.</para>
            <para>See also mapFromItem(), mapFromParent(), transform(),
            mapToScene(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromItem(QtWidgets.IQGraphicsItem,QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in item's coordinate system, to
            this item's coordinate system, and returns the mapped rectangle as a
            polygon.</para>
            <para>If item is 0, this function returns the same as
            mapFromScene()</para>
            <para>See also itemTransform(), mapToItem(), mapFromParent(),
            transform(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromParent(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's parent's
            coordinate system, to this item's coordinate system, and returns the mapped
            rectangle as a polygon.</para>
            <para>See also mapToParent(), mapFromItem(), transform(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromScene(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's scene's
            coordinate system, to this item's coordinate system, and returns the mapped
            rectangle as a polygon.</para>
            <para>See also mapToScene(), mapFromItem(), transform(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapRectFromItem(QtWidgets.IQGraphicsItem,QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in item's coordinate system, to
            this item's coordinate system, and returns the mapped rectangle as a new
            rectangle (i.e., the bounding rectangle of the resulting polygon).</para>
            <para>If item is 0, this function returns the same as
            mapRectFromScene().</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapRectFromParent(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in this item's parent's
            coordinate system, to this item's coordinate system, and returns the mapped
            rectangle as a new rectangle (i.e., the bounding rectangle of the resulting
            polygon).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapRectFromScene(QtCore.QRectF)">
            <summary>
            <para>Maps the rectangle rect, which is in scene coordinates, to this
            item's coordinate system, and returns the mapped rectangle as a new
            rectangle (i.e., the bounding rectangle of the resulting polygon).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also itemTransform(), mapToParent(), mapToScene(),
            mapFromItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromItem(QtWidgets.IQGraphicsItem,QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in item's coordinate system,
            to this item's coordinate system, and returns the mapped polygon.</para>
            <para>If item is 0, this function returns the same as
            mapFromScene().</para>
            <para>See also itemTransform(), mapToItem(), mapFromParent(),
            transform(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromParent(QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in this item's parent's
            coordinate system, to this item's coordinate system, and returns the mapped
            polygon.</para>
            <para>See also mapToParent(), mapToItem(), transform(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromScene(QtGui.QPolygonF)">
            <summary>
            <para>Maps the polygon polygon, which is in this item's scene's
            coordinate system, to this item's coordinate system, and returns the mapped
            polygon.</para>
            <para>See also mapToScene(), mapFromParent(), transform(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromItem(QtWidgets.IQGraphicsItem,QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in item's coordinate system, to this
            item's coordinate system, and returns the mapped path.</para>
            <para>If item is 0, this function returns the same as
            mapFromScene().</para>
            <para>See also itemTransform(), mapFromParent(), mapFromScene(),
            mapToItem(), and The Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromParent(QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in this item's parent's coordinate
            system, to this item's coordinate system, and returns the mapped
            path.</para>
            <para>See also mapFromScene(), mapFromItem(), mapToParent(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromScene(QtGui.QPainterPath)">
            <summary>
            <para>Maps the path path, which is in this item's scene's coordinate
            system, to this item's coordinate system, and returns the mapped
            path.</para>
            <para>See also mapFromParent(), mapFromItem(), mapToScene(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToItem(QtWidgets.IQGraphicsItem,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapToItem(item, QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToParent(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapToParent(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToScene(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapToScene(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToItem(QtWidgets.IQGraphicsItem,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapToItem(item, QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToParent(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapToParent(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapToScene(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapToScene(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapRectToItem(QtWidgets.IQGraphicsItem,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectToItem(item, QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapRectToParent(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectToParent(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapRectToScene(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectToScene(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromItem(QtWidgets.IQGraphicsItem,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapFromItem(item, QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromParent(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapFromParent(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromScene(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            mapFromScene(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromItem(QtWidgets.IQGraphicsItem,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapFromItem(item, QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromParent(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapFromItem(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapFromScene(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapFromScene(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapRectFromItem(QtWidgets.IQGraphicsItem,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectFromItem(item, QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapRectFromParent(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectFromParent(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.MapRectFromScene(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            mapRectFromScene(QRectF(x, y, w, h)).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.IsAncestorOf(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns true if this item is an ancestor of child (i.e., if this
            item is child's parent, or one of child's parent's ancestors).</para>
            <para>See also parentItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.CommonAncestorItem(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns the closest common ancestor item of this item and other,
            or 0 if either other is 0, or there is no common ancestor.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also isAncestorOf().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.Data(System.Int32)">
            <summary>
            <para>Returns this item's custom data for the key key as a
            QVariant.</para>
            <para>Custom item data is useful for storing arbitrary properties in
            any item. Example:</para>
            <para>static const int ObjectName = 0;</para>
            <para></para>
            <para>QGraphicsItem *item = scene.itemAt(100, 50);</para>
            <para>if (item-&gt;data(ObjectName).toString().isEmpty()) {</para>
            <para>    if (qgraphicsitem_cast&lt;ButtonItem *&gt;(item))</para>
            <para>        item-&gt;setData(ObjectName, &quot;Button&quot;);</para>
            <para>}</para>
            <para>Qt does not use this feature for storing data; it is provided
            solely for the convenience of the user.</para>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.SetData(System.Int32,QtCore.QVariant)">
            <summary>
            <para>Sets this item's custom data for the key key to value.</para>
            <para>Custom item data is useful for storing arbitrary properties for
            any item. Qt does not use this feature for storing data; it is provided
            solely for the convenience of the user.</para>
            <para>See also data().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.InstallSceneEventFilter(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Installs an event filter for this item on filterItem, causing all
            events for this item to first pass through filterItem's sceneEventFilter()
            function.</para>
            <para>To filter another item's events, install this item as an event
            filter for the other item. Example:</para>
            <para>QGraphicsScene scene;</para>
            <para>QGraphicsEllipseItem *ellipse = scene.addEllipse(QRectF(-10, -10,
            20, 20));</para>
            <para>QGraphicsLineItem *line = scene.addLine(QLineF(-10, -10, 20,
            20));</para>
            <para></para>
            <para>line-&gt;installSceneEventFilter(ellipse);</para>
            <para>// line's events are filtered by ellipse's sceneEventFilter()
            function.</para>
            <para></para>
            <para>ellipse-&gt;installSceneEventFilter(line);</para>
            <para>// ellipse's events are filtered by line's sceneEventFilter()
            function.</para>
            <para>An item can only filter events for other items in the same scene.
            Also, an item cannot filter its own events; instead, you can reimplement
            sceneEvent() directly.</para>
            <para>Items must belong to a scene for scene event filters to be
            installed and used.</para>
            <para>See also removeSceneEventFilter(), sceneEventFilter(), and
            sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.RemoveSceneEventFilter(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Removes an event filter on this item from filterItem.</para>
            <para>See also installSceneEventFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.SceneEventFilter(QtWidgets.IQGraphicsItem,QtCore.QEvent)">
            <summary>
            <para>Filters events for the item watched. event is the filtered
            event.</para>
            <para>Reimplementing this function in a subclass makes it possible for
            the item to be used as an event filter for other items, intercepting all
            the events sent to those items before they are able to respond.</para>
            <para>Reimplementations must return true to prevent further processing
            of a given event, ensuring that it will not be delivered to the watched
            item, or return false to indicate that the event should be propagated
            further by the event system.</para>
            <para>See also installSceneEventFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnSceneEvent(QtCore.QEvent)">
            <summary>
            <para>This virtual function receives events to this item. Reimplement
            this function to intercept events before they are dispatched to the
            specialized event handlers contextMenuEvent(), focusInEvent(),
            focusOutEvent(), hoverEnterEvent(), hoverMoveEvent(), hoverLeaveEvent(),
            keyPressEvent(), keyReleaseEvent(), mousePressEvent(), mouseReleaseEvent(),
            mouseMoveEvent(), and mouseDoubleClickEvent().</para>
            <para>Returns true if the event was recognized and handled; otherwise,
            (e.g., if the event type was not recognized,) false is returned.</para>
            <para>event is the intercepted event.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnContextMenuEvent(QtWidgets.QGraphicsSceneContextMenuEvent)">
            <summary>
            <para>This event handler can be reimplemented in a subclass to process
            context menu events. The event parameter contains details about the event
            to be handled.</para>
            <para>If you ignore the event (i.e., by calling QEvent::ignore()),
            event will propagate to any item beneath this item. If no items accept the
            event, it will be ignored by the scene and propagate to the view.</para>
            <para>It's common to open a QMenu in response to receiving a context
            menu event. Example:</para>
            <para>void CustomItem::contextMenuEvent(QGraphicsSceneContextMenuEvent
            *event)</para>
            <para>{</para>
            <para>    QMenu menu;</para>
            <para>    QAction *removeAction =
            menu.addAction(&quot;Remove&quot;);</para>
            <para>    QAction *markAction =
            menu.addAction(&quot;Mark&quot;);</para>
            <para>    QAction *selectedAction =
            menu.exec(event-&gt;screenPos());</para>
            <para>    // ...</para>
            <para>}</para>
            <para>The default implementation ignores the event.</para>
            <para>See also sceneEvent().</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QtWidgets.QGraphicsObject.OnDragEnterEvent(QtWidgets.QGraphicsSceneDragDropEvent)" -->
        <member name="M:QtWidgets.QGraphicsObject.OnDragLeaveEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive drag leave events for this item. Drag leave events are generated as
            the cursor leaves the item's area. Most often you will not need to
            reimplement this function, but it can be useful for resetting state in your
            item (e.g., highlighting).</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no
            effect.</para>
            <para>Items do not receive drag and drop events by default; to enable
            this feature, call setAcceptDrops(true).</para>
            <para>The default implementation does nothing.</para>
            <para>See also dragEnterEvent(), dropEvent(), and
            dragMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnDragMoveEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive drag move events for this item. Drag move events are generated as
            the cursor moves around inside the item's area. Most often you will not
            need to reimplement this function; it is used to indicate that only parts
            of the item can accept drops.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event toggles
            whether or not the item will accept drops at the position from the event.
            By default, event is accepted, indicating that the item allows drops at the
            specified position.</para>
            <para>Items do not receive drag and drop events by default; to enable
            this feature, call setAcceptDrops(true).</para>
            <para>The default implementation does nothing.</para>
            <para>See also dropEvent(), dragEnterEvent(), and
            dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnDropEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive drop events for this item. Items can only receive drop events if
            the last drag move event was accepted.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no
            effect.</para>
            <para>Items do not receive drag and drop events by default; to enable
            this feature, call setAcceptDrops(true).</para>
            <para>The default implementation does nothing.</para>
            <para>See also dragEnterEvent(), dragMoveEvent(), and
            dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive focus in events for this item. The default implementation calls
            ensureVisible().</para>
            <para>See also focusOutEvent(), sceneEvent(), and setFocus().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive focus out events for this item. The default implementation does
            nothing.</para>
            <para>See also focusInEvent(), sceneEvent(), and setFocus().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnHoverEnterEvent(QtWidgets.QGraphicsSceneHoverEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive hover enter events for this item. The default implementation calls
            update(); otherwise it does nothing.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no
            effect.</para>
            <para>See also hoverMoveEvent(), hoverLeaveEvent(), sceneEvent(), and
            setAcceptHoverEvents().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnHoverMoveEvent(QtWidgets.QGraphicsSceneHoverEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive hover move events for this item. The default implementation does
            nothing.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no
            effect.</para>
            <para>See also hoverEnterEvent(), hoverLeaveEvent(), sceneEvent(), and
            setAcceptHoverEvents().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnHoverLeaveEvent(QtWidgets.QGraphicsSceneHoverEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive hover leave events for this item. The default implementation calls
            update(); otherwise it does nothing.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no
            effect.</para>
            <para>See also hoverEnterEvent(), hoverMoveEvent(), sceneEvent(), and
            setAcceptHoverEvents().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive key press events for this item. The default implementation ignores
            the event. If you reimplement this handler, the event will by default be
            accepted.</para>
            <para>Note that key events are only received for items that set the
            ItemIsFocusable flag, and that have keyboard input focus.</para>
            <para>See also keyReleaseEvent(), setFocus(),
            QGraphicsScene::setFocusItem(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnKeyReleaseEvent(QtGui.QKeyEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive key release events for this item. The default implementation
            ignores the event. If you reimplement this handler, the event will by
            default be accepted.</para>
            <para>Note that key events are only received for items that set the
            ItemIsFocusable flag, and that have keyboard input focus.</para>
            <para>See also keyPressEvent(), setFocus(),
            QGraphicsScene::setFocusItem(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnMousePressEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive mouse press events for this item. Mouse press events are only
            delivered to items that accept the mouse button that is pressed. By
            default, an item accepts all mouse buttons, but you can change this by
            calling setAcceptedMouseButtons().</para>
            <para>The mouse press event decides which item should become the mouse
            grabber (see QGraphicsScene::mouseGrabberItem()). If you do not reimplement
            this function, the press event will propagate to any topmost item beneath
            this item, and no other mouse events will be delivered to this item.</para>
            <para>If you do reimplement this function, event will by default be
            accepted (see QEvent::accept()), and this item is then the mouse grabber.
            This allows the item to receive future move, release and doubleclick
            events. If you call QEvent::ignore() on event, this item will lose the
            mouse grab, and event will propagate to any topmost item beneath. No
            further mouse events will be delivered to this item unless a new mouse
            press event is received.</para>
            <para>The default implementation handles basic item interaction, such
            as selection and moving. If you want to keep the base implementation when
            reimplementing this function, call QGraphicsItem::mousePressEvent() in your
            reimplementation.</para>
            <para>The event is QEvent::ignore()d for items that are neither movable
            nor selectable.</para>
            <para>See also mouseMoveEvent(), mouseReleaseEvent(),
            mouseDoubleClickEvent(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnMouseMoveEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive mouse move events for this item. If you do receive this event, you
            can be certain that this item also received a mouse press event, and that
            this item is the current mouse grabber.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no
            effect.</para>
            <para>The default implementation handles basic item interaction, such
            as selection and moving. If you want to keep the base implementation when
            reimplementing this function, call QGraphicsItem::mouseMoveEvent() in your
            reimplementation.</para>
            <para>Please note that mousePressEvent() decides which graphics item it
            is that receives mouse events. See the mousePressEvent() description for
            details.</para>
            <para>See also mousePressEvent(), mouseReleaseEvent(),
            mouseDoubleClickEvent(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnMouseReleaseEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive mouse release events for this item.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no
            effect.</para>
            <para>The default implementation handles basic item interaction, such
            as selection and moving. If you want to keep the base implementation when
            reimplementing this function, call QGraphicsItem::mouseReleaseEvent() in
            your reimplementation.</para>
            <para>Please note that mousePressEvent() decides which graphics item it
            is that receives mouse events. See the mousePressEvent() description for
            details.</para>
            <para>See also mousePressEvent(), mouseMoveEvent(),
            mouseDoubleClickEvent(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnMouseDoubleClickEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive mouse doubleclick events for this item.</para>
            <para>When doubleclicking an item, the item will first receive a mouse
            press event, followed by a release event (i.e., a click), then a
            doubleclick event, and finally a release event.</para>
            <para>Calling QEvent::ignore() or QEvent::accept() on event has no
            effect.</para>
            <para>The default implementation calls mousePressEvent(). If you want
            to keep the base implementation when reimplementing this function, call
            QGraphicsItem::mouseDoubleClickEvent() in your reimplementation.</para>
            <para>Note that an item will not receive double click events if it is
            neither selectable nor movable (single mouse clicks are ignored in this
            case, and that stops the generation of double clicks).</para>
            <para>See also mousePressEvent(), mouseMoveEvent(),
            mouseReleaseEvent(), and sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnWheelEvent(QtWidgets.QGraphicsSceneWheelEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive wheel events for this item. If you reimplement this function, event
            will be accepted by default.</para>
            <para>If you ignore the event, (i.e., by calling QEvent::ignore(),) it
            will propagate to any item beneath this item. If no items accept the event,
            it will be ignored by the scene, and propagate to the view (e.g., the
            view's vertical scroll bar).</para>
            <para>The default implementation ignores the event.</para>
            <para>See also sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.OnInputMethodEvent(QtGui.QInputMethodEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented to
            receive input method events for this item. The default implementation
            ignores the event.</para>
            <para>See also inputMethodQuery() and sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.InputMethodQuery(QtCore.Qt.InputMethodQuery)">
            <summary>
            <para>This method is only relevant for input items. It is used by the
            input method to query a set of properties of the item to be able to support
            complex input method operations, such as support for surrounding text and
            reconversions. query specifies which property is queried.</para>
            <para>See also inputMethodEvent() and QInputMethodEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.ItemChange(QtWidgets.QGraphicsItem.GraphicsItemChange,QtCore.QVariant)">
            <summary>
            <para>This virtual function is called by QGraphicsItem to notify custom
            items that some part of the item's state changes. By reimplementing this
            function, you can react to a change, and in some cases (depending on
            change), adjustments can be made.</para>
            <para>change is the parameter of the item that is changing. value is
            the new value; the type of the value depends on change.</para>
            <para>Example:</para>
            <para>QVariant Component::itemChange(GraphicsItemChange change, const
            QVariant &amp;value)</para>
            <para>{</para>
            <para>    if (change == ItemPositionChange &amp;&amp; scene()) {</para>
            <para>        // value is the new position.</para>
            <para>        QPointF newPos = value.toPointF();</para>
            <para>        QRectF rect = scene()-&gt;sceneRect();</para>
            <para>        if (!rect.contains(newPos)) {</para>
            <para>            // Keep the item inside the scene rect.</para>
            <para>            newPos.setX(qMin(rect.right(), qMax(newPos.x(),
            rect.left())));</para>
            <para>            newPos.setY(qMin(rect.bottom(), qMax(newPos.y(),
            rect.top())));</para>
            <para>            return newPos;</para>
            <para>        }</para>
            <para>    }</para>
            <para>    return QGraphicsItem::itemChange(change, value);</para>
            <para>}</para>
            <para>The default implementation does nothing, and returns
            value.</para>
            <para>Note: Certain QGraphicsItem functions cannot be called in a
            reimplementation of this function; see the GraphicsItemChange documentation
            for details.</para>
            <para>See also GraphicsItemChange.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.PrepareGeometryChange">
            <summary>
            <para>Prepares the item for a geometry change. Call this function
            before changing the bounding rect of an item to keep QGraphicsScene's index
            up to date.</para>
            <para>prepareGeometryChange() will call update() if this is
            necessary.</para>
            <para>Example:</para>
            <para>void CircleItem::setRadius(qreal newRadius)</para>
            <para>{</para>
            <para>    if (radius != newRadius) {</para>
            <para>        prepareGeometryChange();</para>
            <para>        radius = newRadius;</para>
            <para>    }</para>
            <para>}</para>
            <para>See also boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsObject.ItemTransform(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Returns a QTransform that maps coordinates from this item to
            other. If ok is not null, and if there is no such transform, the boolean
            pointed to by ok will be set to false; otherwise it will be set to
            true.</para>
            <para>This transform provides an alternative to the mapToItem() or
            mapFromItem() functions, by returning the appropriate transform so that you
            can map shapes and coordinates yourself. It also helps you write more
            efficient code when repeatedly mapping between the same two items.</para>
            <para>Note: In rare circumstances, there is no transform that maps
            between two items.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also mapToItem(), mapFromItem(), and
            deviceTransform().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsObject.ParentChanged">
            <summary>
            <para>This property holds the parent of the item.</para>
            <para>Note: The item's parent is set independently of the parent object returned by QObject::parent().</para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	parentChanged()</para>
            <para></para>
            <para>See also QGraphicsItem::setParentItem() and QGraphicsItem::parentObject().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsObject.OpacityChanged">
            <summary>
            <para>This property holds the opacity of the item.</para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	opacityChanged()</para>
            <para></para>
            <para>See also QGraphicsItem::setOpacity() and QGraphicsItem::opacity().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsObject.VisibleChanged">
            <summary>
            <para>This property holds whether the item is visible or not.</para>
            <para>This property is declared in QGraphicsItem.</para>
            <para>By default, this property is true.</para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	visibleChanged()</para>
            <para></para>
            <para>See also QGraphicsItem::isVisible() and QGraphicsItem::setVisible().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsObject.EnabledChanged">
            <summary>
            <para>This property holds whether the item is enabled or not.</para>
            <para>This property is declared in QGraphicsItem.</para>
            <para>By default, this property is true.</para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	enabledChanged()</para>
            <para></para>
            <para>See also QGraphicsItem::isEnabled() and QGraphicsItem::setEnabled().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsObject.XChanged">
            <summary>
            <para>This property holds the x position of the item.</para>
            <para>Describes the items x position.</para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	xChanged()</para>
            <para></para>
            <para>See also QGraphicsItem::setX() and setPos().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsObject.YChanged">
            <summary>
            <para>This property holds the y position of the item.</para>
            <para>Describes the items y position.</para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	yChanged()</para>
            <para></para>
            <para>See also QGraphicsItem::setY() and setPos().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsObject.ZChanged">
            <summary>
            <para>This property holds the z value of the item.</para>
            <para>Describes the items z value.</para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	zChanged()</para>
            <para></para>
            <para>See also QGraphicsItem::setZValue() and zValue().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsObject.RotationChanged">
            <summary>
            <para>This property holds the rotation of the item in degrees.</para>
            <para>This specifies how many degrees to rotate the item around its transformOrigin. The default rotation is 0 degrees (i.e. not rotated at all).</para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	rotationChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsObject.ScaleChanged">
            <summary>
            <para>This property holds the scale of the item.</para>
            <para>A scale of less than 1 means the item will be displayed smaller than normal, and a scale of greater than 1 means the item will be displayed larger than normal. A negative scale means the item will be mirrored.</para>
            <para>By default, items are displayed at a scale of 1 (i.e. at their normal size).</para>
            <para>Scaling is from the item's transformOrigin.</para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	scaleChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.ParentItem">
            <summary>
            <para>Returns a pointer to this item's parent item. If this item does
            not have a parent, 0 is returned.</para>
            <para>See also setParentItem() and childItems().</para>
            <para></para>
            <para>Sets this item's parent item to newParent. If this item already
            has a parent, it is first removed from the previous parent. If newParent is
            0, this item will become a top-level item.</para>
            <para>Note that this implicitly adds this graphics item to the scene of
            the parent. You should not add the item to the scene yourself.</para>
            <para>The behavior when calling this function on an item that is an
            ancestor of newParent is undefined.</para>
            <para>See also parentItem() and childItems().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Group">
            <summary>
            <para>Returns a pointer to this item's item group, or 0 if this item is
            not member of a group.</para>
            <para>See also setGroup(), QGraphicsItemGroup, and
            QGraphicsScene::createItemGroup().</para>
            <para></para>
            <para>Adds this item to the item group group. If group is 0, this item
            is removed from any current group and added as a child of the previous
            group's parent.</para>
            <para>See also group() and QGraphicsScene::createItemGroup().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Flags">
            <summary>
            <para>Returns this item's flags. The flags describe what configurable
            features of the item are enabled and not. For example, if the flags include
            ItemIsFocusable, the item can accept input focus.</para>
            <para>By default, no flags are enabled.</para>
            <para>See also setFlags() and setFlag().</para>
            <para></para>
            <para>Sets the item flags to flags. All flags in flags are enabled; all
            flags not in flags are disabled.</para>
            <para>If the item had focus and flags does not enable ItemIsFocusable,
            the item loses focus as a result of calling this function. Similarly, if
            the item was selected, and flags does not enabled ItemIsSelectable, the
            item is automatically unselected.</para>
            <para>By default, no flags are enabled. (QGraphicsWidget enables the
            ItemSendsGeometryChanges flag by default in order to track position
            changes.)</para>
            <para>See also flags() and setFlag().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.panelModality">
            <summary>
            <para>Returns the modality for this item.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setPanelModality().</para>
            <para></para>
            <para>Sets the modality for this item to panelModality.</para>
            <para>Changing the modality of a visible item takes effect
            immediately.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also panelModality().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.ToolTip">
            <summary>
            <para>Returns the item's tool tip, or an empty QString if no tool tip
            has been set.</para>
            <para>See also setToolTip() and QToolTip.</para>
            <para></para>
            <para>Sets the item's tool tip to toolTip. If toolTip is empty, the
            item's tool tip is cleared.</para>
            <para>See also toolTip() and QToolTip.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Cursor">
            <summary>
            <para>Returns the current cursor shape for the item. The mouse cursor
            will assume this shape when it's over this item. See the list of predefined
            cursor objects for a range of useful shapes.</para>
            <para>An editor item might want to use an I-beam cursor:</para>
            <para>item-&gt;setCursor(Qt::IBeamCursor);</para>
            <para>If no cursor has been set, the cursor of the item beneath is
            used.</para>
            <para>See also setCursor(), hasCursor(), unsetCursor(),
            QWidget::cursor, and QApplication::overrideCursor().</para>
            <para></para>
            <para>Sets the current cursor shape for the item to cursor. The mouse
            cursor will assume this shape when it's over this item. See the list of
            predefined cursor objects for a range of useful shapes.</para>
            <para>An editor item might want to use an I-beam cursor:</para>
            <para>item-&gt;setCursor(Qt::IBeamCursor);</para>
            <para>If no cursor has been set, the cursor of the item beneath is
            used.</para>
            <para>See also cursor(), hasCursor(), unsetCursor(), QWidget::cursor,
            and QApplication::overrideCursor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Visible">
            <summary>
            <para>This property holds whether the item is visible or not.</para>
            <para>This property is declared in QGraphicsItem.</para>
            <para>By default, this property is true.</para>
            <para>See also QGraphicsItem::isVisible() and
            QGraphicsItem::setVisible().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Enabled">
            <summary>
            <para>This property holds whether the item is enabled or not.</para>
            <para>This property is declared in QGraphicsItem.</para>
            <para>By default, this property is true.</para>
            <para>See also QGraphicsItem::isEnabled() and
            QGraphicsItem::setEnabled().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Selected">
            <summary>
            <para>Returns true if this item is selected; otherwise, false is
            returned.</para>
            <para>Items that are in a group inherit the group's selected
            state.</para>
            <para>Items are not selected by default.</para>
            <para>See also setSelected() and
            QGraphicsScene::setSelectionArea().</para>
            <para></para>
            <para>If selected is true and this item is selectable, this item is
            selected; otherwise, it is unselected.</para>
            <para>If the item is in a group, the whole group's selected state is
            toggled by this function. If the group is selected, all items in the group
            are also selected, and if the group is not selected, no item in the group
            is selected.</para>
            <para>Only visible, enabled, selectable items can be selected. If
            selected is true and this item is either invisible or disabled or
            unselectable, this function does nothing.</para>
            <para>By default, items cannot be selected. To enable selection, set
            the ItemIsSelectable flag.</para>
            <para>This function is provided for convenience, allowing individual
            toggling of the selected state of an item. However, a more common way of
            selecting items is to call QGraphicsScene::setSelectionArea(), which will
            call this function for all visible, enabled, and selectable items within a
            specified area on the scene.</para>
            <para>See also isSelected() and QGraphicsScene::selectedItems().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.AcceptDrops">
            <summary>
            <para>Returns true if this item can accept drag and drop events;
            otherwise, returns false. By default, items do not accept drag and drop
            events; items are transparent to drag and drop.</para>
            <para>See also setAcceptDrops().</para>
            <para></para>
            <para>If on is true, this item will accept drag and drop events;
            otherwise, it is transparent for drag and drop events. By default, items do
            not accept drag and drop events.</para>
            <para>See also acceptDrops().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Opacity">
            <summary>
            <para>This property holds the opacity of the item.</para>
            <para>See also QGraphicsItem::setOpacity() and
            QGraphicsItem::opacity().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.GraphicsEffect">
            <summary>
            <para>Returns a pointer to this item's effect if it has one; otherwise
            0.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setGraphicsEffect().</para>
            <para></para>
            <para>Sets effect as the item's effect. If there already is an effect
            installed on this item, QGraphicsItem will delete the existing effect
            before installing the new effect. You can delete an existing effect by
            calling setGraphicsEffect(0).</para>
            <para>If effect is the installed effect on a different item,
            setGraphicsEffect() will remove the effect from the item and install it on
            this item.</para>
            <para>QGraphicsItem takes ownership of effect.</para>
            <para>Note: This function will apply the effect on itself and all its
            children.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also graphicsEffect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.AcceptedMouseButtons">
            <summary>
            <para>Returns the mouse buttons that this item accepts mouse events
            for. By default, all mouse buttons are accepted.</para>
            <para>If an item accepts a mouse button, it will become the mouse
            grabber item when a mouse press event is delivered for that mouse button.
            However, if the item does not accept the button, QGraphicsScene will
            forward the mouse events to the first item beneath it that does.</para>
            <para>See also setAcceptedMouseButtons() and mousePressEvent().</para>
            <para></para>
            <para>Sets the mouse buttons that this item accepts mouse events
            for.</para>
            <para>By default, all mouse buttons are accepted. If an item accepts a
            mouse button, it will become the mouse grabber item when a mouse press
            event is delivered for that button. However, if the item does not accept
            the mouse button, QGraphicsScene will forward the mouse events to the first
            item beneath it that does.</para>
            <para>To disable mouse events for an item (i.e., make it transparent
            for mouse events), call setAcceptedMouseButtons(0).</para>
            <para>See also acceptedMouseButtons() and mousePressEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.AcceptHoverEvents">
            <summary>
            <para>Returns true if an item accepts hover events
            (QGraphicsSceneHoverEvent); otherwise, returns false. By default, items do
            not accept hover events.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setAcceptHoverEvents() and
            setAcceptedMouseButtons().</para>
            <para></para>
            <para>If enabled is true, this item will accept hover events;
            otherwise, it will ignore them. By default, items do not accept hover
            events.</para>
            <para>Hover events are delivered when there is no current mouse grabber
            item. They are sent when the mouse cursor enters an item, when it moves
            around inside the item, and when the cursor leaves an item. Hover events
            are commonly used to highlight an item when it's entered, and for tracking
            the mouse cursor as it hovers over the item (equivalent to
            QWidget::mouseTracking).</para>
            <para>Parent items receive hover enter events before their children,
            and leave events after their children. The parent does not receive a hover
            leave event if the cursor enters a child, though; the parent stays
            &quot;hovered&quot; until the cursor leaves its area, including its
            children's areas.</para>
            <para>If a parent item handles child events, it will receive hover
            move, drag move, and drop events as the cursor passes through its children,
            but it does not receive hover enter and hover leave, nor drag enter and
            drag leave events on behalf of its children.</para>
            <para>A QGraphicsWidget with window decorations will accept hover
            events regardless of the value of acceptHoverEvents().</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also acceptHoverEvents(), hoverEnterEvent(),
            hoverMoveEvent(), and hoverLeaveEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.AcceptTouchEvents">
            <summary>
            <para>Returns true if an item accepts touch events; otherwise, returns
            false. By default, items do not accept touch events.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setAcceptTouchEvents().</para>
            <para></para>
            <para>If enabled is true, this item will accept touch events;
            otherwise, it will ignore them. By default, items do not accept touch
            events.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also acceptTouchEvents().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.FiltersChildEvents">
            <summary>
            <para>Returns true if this item filters child events (i.e., all events
            intended for any of its children are instead sent to this item); otherwise,
            false is returned.</para>
            <para>The default value is false; child events are not filtered.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setFiltersChildEvents().</para>
            <para></para>
            <para>If enabled is true, this item is set to filter all events for all
            its children (i.e., all events intented for any of its children are instead
            sent to this item); otherwise, if enabled is false, this item will only
            handle its own events. The default value is false.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also filtersChildEvents().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.HandlesChildEvents">
            <summary>
            <para>Returns true if this item handles child events (i.e., all events
            intended for any of its children are instead sent to this item); otherwise,
            false is returned.</para>
            <para>This property is useful for item groups; it allows one item to
            handle events on behalf of its children, as opposed to its children
            handling their events individually.</para>
            <para>The default is to return false; children handle their own events.
            The exception for this is if the item is a QGraphicsItemGroup, then it
            defaults to return true.</para>
            <para>See also setHandlesChildEvents().</para>
            <para></para>
            <para>If enabled is true, this item is set to handle all events for all
            its children (i.e., all events intented for any of its children are instead
            sent to this item); otherwise, if enabled is false, this item will only
            handle its own events. The default value is false.</para>
            <para>This property is useful for item groups; it allows one item to
            handle events on behalf of its children, as opposed to its children
            handling their events individually.</para>
            <para>If a child item accepts hover events, its parent will receive
            hover move events as the cursor passes through the child, but it does not
            receive hover enter and hover leave events on behalf of its child.</para>
            <para>See also handlesChildEvents().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Active">
            <summary>
            <para>Returns true if this item is active; otherwise returns
            false.</para>
            <para>An item can only be active if the scene is active. An item is
            active if it is, or is a descendent of, an active panel. Items in
            non-active panels are not active.</para>
            <para>Items that are not part of a panel follow scene activation when
            the scene has no active panel.</para>
            <para>Only active items can gain input focus.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also QGraphicsScene::isActive(),
            QGraphicsScene::activePanel(), panel(), and isPanel().</para>
            <para></para>
            <para>If active is true, and the scene is active, this item's panel
            will be activated. Otherwise, the panel is deactivated.</para>
            <para>If the item is not part of an active scene, active will decide
            what happens to the panel when the scene becomes active or the item is
            added to the scene. If true, the item's panel will be activated when the
            item is either added to the scene or the scene is activated. Otherwise, the
            item will stay inactive independent of the scene's activated state.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also isPanel(), QGraphicsScene::setActivePanel(), and
            QGraphicsScene::isActive().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.FocusProxy">
            <summary>
            <para>Returns this item's focus proxy, or 0 if this item has no focus
            proxy.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setFocusProxy(), setFocus(), and hasFocus().</para>
            <para></para>
            <para>Sets the item's focus proxy to item.</para>
            <para>If an item has a focus proxy, the focus proxy will receive input
            focus when the item gains input focus. The item itself will still have
            focus (i.e., hasFocus() will return true), but only the focus proxy will
            receive the keyboard input.</para>
            <para>A focus proxy can itself have a focus proxy, and so on. In such
            case, keyboard input will be handled by the outermost focus proxy.</para>
            <para>The focus proxy item must belong to the same scene as this
            item.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also focusProxy(), setFocus(), and hasFocus().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.X">
            <summary>
            <para>This property holds the x position of the item.</para>
            <para>Describes the items x position.</para>
            <para>See also QGraphicsItem::setX() and setPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Y">
            <summary>
            <para>This property holds the y position of the item.</para>
            <para>Describes the items y position.</para>
            <para>See also QGraphicsItem::setY() and setPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Pos">
            <summary>
            <para>This property holds the position of the item.</para>
            <para>Describes the items position.</para>
            <para>See also QGraphicsItem::setPos() and QGraphicsItem::pos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Rotation">
            <summary>
            <para>This property holds the rotation of the item in degrees.</para>
            <para>This specifies how many degrees to rotate the item around its
            transformOrigin. The default rotation is 0 degrees (i.e. not rotated at
            all).</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Scale">
            <summary>
            <para>This property holds the scale of the item.</para>
            <para>A scale of less than 1 means the item will be displayed smaller
            than normal, and a scale of greater than 1 means the item will be displayed
            larger than normal. A negative scale means the item will be
            mirrored.</para>
            <para>By default, items are displayed at a scale of 1 (i.e. at their
            normal size).</para>
            <para>Scaling is from the item's transformOrigin.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.TransformOriginPoint">
            <summary>
            <para>This property holds the transformation origin.</para>
            <para>This property sets a specific point in the items coordiante
            system as the origin for scale and rotation.</para>
            <para>See also scale, rotation, and
            QGraphicsItem::transformOriginPoint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.ZValue">
            <summary>
            <para>Returns the Z-value of the item. The Z-value affects the stacking
            order of sibling (neighboring) items.</para>
            <para>The default Z-value is 0.</para>
            <para>See also setZValue(), Sorting, stackBefore(), and
            ItemStacksBehindParent.</para>
            <para></para>
            <para>Sets the Z-value of the item to z. The Z value decides the
            stacking order of sibling (neighboring) items. A sibling item of high Z
            value will always be drawn on top of another sibling item with a lower Z
            value.</para>
            <para>If you restore the Z value, the item's insertion order will
            decide its stacking order.</para>
            <para>The Z-value does not affect the item's size in any way.</para>
            <para>The default Z-value is 0.</para>
            <para>See also zValue(), Sorting, stackBefore(), and
            ItemStacksBehindParent.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.BoundingRegionGranularity">
            <summary>
            <para>Returns the item's bounding region granularity; a value between
            and including 0 and 1. The default value is 0 (i.e., the lowest
            granularity, where the bounding region corresponds to the item's bounding
            rectangle).</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setBoundingRegionGranularity().</para>
            <para></para>
            <para>Sets the bounding region granularity to granularity; a value
            between and including 0 and 1. The default value is 0 (i.e., the lowest
            granularity, where the bounding region corresponds to the item's bounding
            rectangle).</para>
            <para>The granularity is used by boundingRegion() to calculate how fine
            the bounding region of the item should be. The highest achievable
            granularity is 1, where boundingRegion() will return the finest outline
            possible for the respective device (e.g., for a QGraphicsView viewport,
            this gives you a pixel-perfect bounding region). The lowest possible
            granularity is 0. The value of granularity describes the ratio between
            device resolution and the resolution of the bounding region (e.g., a value
            of 0.25 will provide a region where each chunk corresponds to 4x4 device
            units / pixels).</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also boundingRegionGranularity().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.InputMethodHints">
            <summary>
            <para>Returns the current input method hints of this item.</para>
            <para>Input method hints are only relevant for input items. The hints
            are used by the input method to indicate how it should operate. For
            example, if the Qt::ImhNumbersOnly flag is set, the input method may change
            its visual components to reflect that only numbers can be entered.</para>
            <para>The effect may vary between input method implementations.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setInputMethodHints() and inputMethodQuery().</para>
            <para></para>
            <para>Sets the current input method hints of this item to hints.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also inputMethodHints() and inputMethodQuery().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.cacheMode">
            <summary>
            <para>Returns the cache mode for this item. The default mode is NoCache
            (i.e., cache is disabled and all painting is immediate).</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setCacheMode().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Matrix">
            <summary>
            <para>Returns the item's affine transformation matrix. This is a subset
            or the item's full transformation matrix, and might not represent the
            item's full transformation.</para>
            <para>Use transform() instead.</para>
            <para>See also setMatrix(), setTransform(), and
            sceneTransform().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Transform">
            <summary>
            <para>Returns this item's transformation matrix.</para>
            <para>The transformation matrix is combined with the item's rotation(),
            scale() and transformations() into a combined transformations for the
            item.</para>
            <para>The default transformation matrix is an identity matrix.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setTransform() and sceneTransform().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.BoundingRect">
            <summary>
            <para>This pure virtual function defines the outer bounds of the item
            as a rectangle; all painting must be restricted to inside an item's
            bounding rect. QGraphicsView uses this to determine whether the item
            requires redrawing.</para>
            <para>Although the item's shape can be arbitrary, the bounding rect is
            always rectangular, and it is unaffected by the items'
            transformation.</para>
            <para>If you want to change the item's bounding rectangle, you must
            first call prepareGeometryChange(). This notifies the scene of the imminent
            change, so that it can update its item geometry index; otherwise, the scene
            will be unaware of the item's new geometry, and the results are undefined
            (typically, rendering artifacts are left within the view).</para>
            <para>Reimplement this function to let QGraphicsView determine what
            parts of the widget, if any, need to be redrawn.</para>
            <para>Note: For shapes that paint an outline / stroke, it is important
            to include half the pen width in the bounding rect. It is not necessary to
            compensate for antialiasing, though.</para>
            <para>Example:</para>
            <para>QRectF CircleItem::boundingRect() const</para>
            <para>{</para>
            <para>    qreal penWidth = 1;</para>
            <para>    return QRectF(-radius - penWidth / 2, -radius - penWidth /
            2,</para>
            <para>                  diameter + penWidth, diameter +
            penWidth);</para>
            <para>}</para>
            <para>See also boundingRegion(), shape(), contains(), The Graphics View
            Coordinate System, and prepareGeometryChange().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Shape">
            <summary>
            <para>Returns the shape of this item as a QPainterPath in local
            coordinates. The shape is used for many things, including collision
            detection, hit tests, and for the QGraphicsScene::items() functions.</para>
            <para>The default implementation calls boundingRect() to return a
            simple rectangular shape, but subclasses can reimplement this function to
            return a more accurate shape for non-rectangular items. For example, a
            round item may choose to return an elliptic shape for better collision
            detection. For example:</para>
            <para>QPainterPath RoundItem::shape() const</para>
            <para>{</para>
            <para>    QPainterPath path;</para>
            <para>    path.addEllipse(boundingRect());</para>
            <para>    return path;</para>
            <para>}</para>
            <para>The outline of a shape can vary depending on the width and style
            of the pen used when drawing. If you want to include this outline in the
            item's shape, you can create a shape from the stroke using
            QPainterPathStroker.</para>
            <para>This function is called by the default implementations of
            contains() and collidesWithPath().</para>
            <para>See also boundingRect(), contains(), prepareGeometryChange(), and
            QPainterPathStroker.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.OpaqueArea">
            <summary>
            <para>This virtual function returns a shape representing the area where
            this item is opaque. An area is opaque if it is filled using an opaque
            brush or color (i.e., not transparent).</para>
            <para>This function is used by isObscuredBy(), which is called by
            underlying items to determine if they are obscured by this item.</para>
            <para>The default implementation returns an empty QPainterPath,
            indicating that this item is completely transparent and does not obscure
            any other items.</para>
            <para>See also isObscuredBy(), isObscured(), and shape().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Type">
            <summary>
            <para>Returns the type of an item as an int. All standard graphicsitem
            classes are associated with a unique value; see QGraphicsItem::Type. This
            type information is used by qgraphicsitem_cast() to distinguish between
            types.</para>
            <para>The default implementation (in QGraphicsItem) returns
            UserType.</para>
            <para>To enable use of qgraphicsitem_cast() with a custom item,
            reimplement this function and declare a Type enum value equal to your
            custom item's type. Custom items must return a value larger than or equal
            to UserType (65536).</para>
            <para>For example:</para>
            <para>class CustomItem : public QGraphicsItem</para>
            <para>{</para>
            <para>public:</para>
            <para>   enum { Type = UserType + 1 };</para>
            <para></para>
            <para>   int type() const</para>
            <para>   {</para>
            <para>       // Enable the use of qgraphicsitem_cast with this
            item.</para>
            <para>       return Type;</para>
            <para>   }</para>
            <para>   ...</para>
            <para>};</para>
            <para>See also UserType.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Scene">
            <summary>
            <para>Returns the current scene for the item, or 0 if the item is not
            stored in a scene.</para>
            <para>To add or move an item to a scene, call
            QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.TopLevelItem">
            <summary>
            <para>Returns this item's top-level item. The top-level item is the
            item's topmost ancestor item whose parent is 0. If an item has no parent,
            its own pointer is returned (i.e., a top-level item is its own top-level
            item).</para>
            <para>See also parentItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.ParentObject">
            <summary>
            <para>Returns a pointer to the item's parent, cast to a
            QGraphicsObject. returns 0 if the parent item is not a
            QGraphicsObject.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also parentItem() and childItems().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.ParentWidget">
            <summary>
            <para>Returns a pointer to the item's parent widget. The item's parent
            widget is the closest parent item that is a widget.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also parentItem() and childItems().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.TopLevelWidget">
            <summary>
            <para>Returns a pointer to the item's top level widget (i.e., the
            item's ancestor whose parent is 0, or whose parent is not a widget), or 0
            if this item does not have a top level widget. If the item is its own top
            level widget, this function returns a pointer to the item itself.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Window">
            <summary>
            <para>Returns the item's window, or 0 if this item does not have a
            window. If the item is a window, it will return itself. Otherwise it will
            return the closest ancestor that is a window.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QGraphicsWidget::isWindow().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.Panel">
            <summary>
            <para>Returns the item's panel, or 0 if this item does not have a
            panel. If the item is a panel, it will return itself. Otherwise it will
            return the closest ancestor that is a panel.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also isPanel() and ItemIsPanel.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.IsWidget">
            <summary>
            <para>Returns true if this item is a widget (i.e., QGraphicsWidget);
            otherwise, returns false.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.IsWindow">
            <summary>
            <para>Returns true if the item is a QGraphicsWidget window, otherwise
            returns false.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QGraphicsWidget::windowFlags().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.IsPanel">
            <summary>
            <para>Returns true if the item is a panel; otherwise returns
            false.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also QGraphicsItem::panel() and ItemIsPanel.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.HasCursor">
            <summary>
            <para>Returns true if this item has a cursor set; otherwise, false is
            returned.</para>
            <para>By default, items don't have any cursor set. cursor() will return
            a standard pointing arrow cursor.</para>
            <para>See also unsetCursor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.EffectiveOpacity">
            <summary>
            <para>Returns this item's effective opacity, which is between 0.0
            (transparent) and 1.0 (opaque). This value is a combination of this item's
            local opacity, and its parent and ancestors' opacities. The effective
            opacity decides how the item is rendered.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also opacity(), setOpacity(), paint(),
            ItemIgnoresParentOpacity, and ItemDoesntPropagateOpacityToChildren.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.HasFocus">
            <summary>
            <para>Returns true if this item is active, and it or its focus proxy
            has keyboard input focus; otherwise, returns false.</para>
            <para>See also focusItem(), setFocus(), QGraphicsScene::setFocusItem(),
            and isActive().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.ScenePos">
            <summary>
            <para>Returns the item's position in scene coordinates. This is
            equivalent to calling mapToScene(0, 0).</para>
            <para>See also pos(), sceneTransform(), and The Graphics View
            Coordinate System.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.SceneMatrix">
            <summary>
            <para>Use sceneTransform() instead.</para>
            <para>See also transform(), setTransform(), scenePos(), and The
            Graphics View Coordinate System.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.SceneTransform">
            <summary>
            <para>Returns this item's scene transformation matrix. This matrix can
            be used to map coordinates and geometrical shapes from this item's local
            coordinate system to the scene's coordinate system. To map coordinates from
            the scene, you must first invert the returned matrix.</para>
            <para>Example:</para>
            <para>QGraphicsRectItem rect;</para>
            <para>rect.setPos(100, 100);</para>
            <para></para>
            <para>rect.sceneTransform().map(QPointF(0, 0));</para>
            <para>// returns QPointF(100, 100);</para>
            <para></para>
            <para>rect.sceneTransform().inverted().map(QPointF(100, 100));</para>
            <para>// returns QPointF(0, 0);</para>
            <para>Unlike transform(), which returns only an item's local
            transformation, this function includes the item's (and any parents')
            position, and all the transfomation properties.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also transform(), setTransform(), scenePos(), The Graphics
            View Coordinate System, and Transformations.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.ChildrenBoundingRect">
            <summary>
            <para>Returns the bounding rect of this item's descendants (i.e., its
            children, their children, etc.) in local coordinates. The rectangle will
            contain all descendants after they have been mapped to local coordinates.
            If the item has no children, this function returns an empty QRectF.</para>
            <para>This does not include this item's own bounding rect; it only
            returns its descendants' accumulated bounding rect. If you need to include
            this item's bounding rect, you can add boundingRect() to
            childrenBoundingRect() using QRectF::operator|().</para>
            <para>This function is linear in complexity; it determines the size of
            the returned bounding rect by iterating through all descendants.</para>
            <para>See also boundingRect() and sceneBoundingRect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.SceneBoundingRect">
            <summary>
            <para>Returns the bounding rect of this item in scene coordinates, by
            combining sceneTransform() with boundingRect().</para>
            <para>See also boundingRect() and The Graphics View Coordinate
            System.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.IsClipped">
            <summary>
            <para>Returns true if this item is clipped. An item is clipped if it
            has either set the ItemClipsToShape flag, or if it or any of its ancestors
            has set the ItemClipsChildrenToShape flag.</para>
            <para>Clipping affects the item's appearance (i.e., painting), as well
            as mouse and hover event delivery.</para>
            <para>See also clipPath(), shape(), and setFlags().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.ClipPath">
            <summary>
            <para>Returns this item's clip path, or an empty QPainterPath if this
            item is not clipped. The clip path constrains the item's appearance and
            interaction (i.e., restricts the area the item can draw within and receive
            events for).</para>
            <para>You can enable clipping by setting the ItemClipsToShape or
            ItemClipsChildrenToShape flags. The item's clip path is calculated by
            intersecting all clipping ancestors' shapes. If the item sets
            ItemClipsToShape, the final clip is intersected with the item's own
            shape.</para>
            <para>Note: Clipping introduces a performance penalty for all items
            involved; you should generally avoid using clipping if you can (e.g., if
            your items always draw inside boundingRect() or shape() boundaries,
            clipping is not necessary).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also isClipped(), shape(), and setFlags().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsObject.IsUnderMouse">
            <summary>
            <para>Returns true if this item is currently under the mouse cursor in
            one of the views; otherwise, false is returned.</para>
            <para>This function was introduced in  Qt 4,4.</para>
            <para>See also QGraphicsScene::views() and QCursor::pos().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QAbstractGraphicsShapeItem">
            <summary>
            <para>The QAbstractGraphicsShapeItem class provides a common base for
            all path items.</para>
            </summary>
            <remarks>
            <para>This class does not fully implement an item by itself; in
            particular, it does not implement boundingRect() and paint(), which are
            inherited by QGraphicsItem.</para>
            <para>You can subclass this item to provide a simple base
            implementation of accessors for the item's pen and brush.</para>
            <para></para>
            <para>See also QGraphicsRectItem, QGraphicsEllipseItem,
            QGraphicsPathItem, QGraphicsPolygonItem, QGraphicsTextItem,
            QGraphicsLineItem, QGraphicsPixmapItem, and Graphics View Framework.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QAbstractGraphicsShapeItem.#ctor(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QAbstractGraphicsShapeItem. parent is passed to
            QGraphicsItem's constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractGraphicsShapeItem.IsObscuredBy(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Reimplemented from QGraphicsItem::isObscuredBy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractGraphicsShapeItem.Pen">
            <summary>
            <para>Returns the item's pen. If no pen has been set, this function
            returns QPen(), a default black solid line pen with 1 width.</para>
            <para>See also setPen().</para>
            <para></para>
            <para>Sets the pen for this item to pen.</para>
            <para>The pen is used to draw the item's outline.</para>
            <para>See also pen().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractGraphicsShapeItem.Brush">
            <summary>
            <para>Returns the item's brush, or an empty brush if no brush has been
            set.</para>
            <para>See also setBrush().</para>
            <para></para>
            <para>Sets the item's brush to brush.</para>
            <para>The item's brush is used to fill the item.</para>
            <para>If you use a brush with a QGradient, the gradient is relative to
            the item's coordinate system.</para>
            <para>See also brush().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractGraphicsShapeItem.OpaqueArea">
            <summary>
            <para>Reimplemented from QGraphicsItem::opaqueArea().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsPathItem">
            <summary>
            <para>The QGraphicsPathItem class provides a path item that you can add
            to a QGraphicsScene.</para>
            </summary>
            <remarks>
            <para>To set the item's path, pass a QPainterPath to
            QGraphicsPathItem's constructor, or call the setPath() function. The path()
            function returns the current path.</para>
            <para></para>
            <para>QGraphicsPathItem uses the path to provide a reasonable
            implementation of boundingRect(), shape(), and contains(). The paint()
            function draws the path using the item's associated pen and brush, which
            you can set by calling the setPen() and setBrush() functions.</para>
            <para></para>
            <para>See also QGraphicsRectItem, QGraphicsEllipseItem,
            QGraphicsPolygonItem, QGraphicsTextItem, QGraphicsLineItem,
            QGraphicsPixmapItem, and Graphics View Framework.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsPathItem.#ctor(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsPath. parent is passed to
            QAbstractGraphicsShapeItem's constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsPathItem.#ctor(QtGui.QPainterPath,QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsPath item using path as the default path.
            parent is passed to QAbstractGraphicsShapeItem's constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsPathItem.Contains(QtCore.QPointF)">
            <summary>
            <para>Reimplemented from QGraphicsItem::contains().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsPathItem.Paint(QtGui.QPainter,QtWidgets.QStyleOptionGraphicsItem,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QGraphicsItem::paint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsPathItem.IsObscuredBy(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Reimplemented from QGraphicsItem::isObscuredBy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPathItem.Path">
            <summary>
            <para>Returns the item's path as a QPainterPath. If no item has been
            set, an empty QPainterPath is returned.</para>
            <para>See also setPath().</para>
            <para></para>
            <para>Sets the item's path to be the given path.</para>
            <para>See also path().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPathItem.BoundingRect">
            <summary>
            <para>Reimplemented from QGraphicsItem::boundingRect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPathItem.Shape">
            <summary>
            <para>Reimplemented from QGraphicsItem::shape().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPathItem.OpaqueArea">
            <summary>
            <para>Reimplemented from QGraphicsItem::opaqueArea().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPathItem.Type">
            <summary>
            <para>Reimplemented from QGraphicsItem::type().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsRectItem">
            <summary>
            <para>The QGraphicsRectItem class provides a rectangle item that you
            can add to a QGraphicsScene.</para>
            </summary>
            <remarks>
            <para>To set the item's rectangle, pass a QRectF to QGraphicsRectItem's
            constructor, or call the setRect() function. The rect() function returns
            the current rectangle.</para>
            <para></para>
            <para>QGraphicsRectItem uses the rectangle and the pen width to provide
            a reasonable implementation of boundingRect(), shape(), and contains(). The
            paint() function draws the rectangle using the item's associated pen and
            brush, which you can set by calling the setPen() and setBrush()
            functions.</para>
            <para>Note: The rendering of invalid rectangles, such as those with
            negative widths or heights, is undefined. If you cannot be sure that you
            are using valid rectangles (for example, if you are creating rectangles
            using data from an unreliable source) then you should use
            QRectF::normalized() to create normalized rectangles, and use those
            instead.</para>
            <para></para>
            <para>See also QGraphicsPathItem, QGraphicsEllipseItem,
            QGraphicsPolygonItem, QGraphicsTextItem, QGraphicsLineItem,
            QGraphicsPixmapItem, and Graphics View Framework.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsRectItem.#ctor(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsRectItem. parent is passed to
            QAbstractGraphicsShapeItem's constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsRectItem.#ctor(QtCore.QRectF,QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsRectItem, using rect as the default
            rectangle. parent is passed to QAbstractGraphicsShapeItem's
            constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsRectItem.#ctor(System.Double,System.Double,System.Double,System.Double,QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsRectItem with a default rectangle defined
            by (x, y) and the given width and height.</para>
            <para>parent is passed to QAbstractGraphicsShapeItem's
            constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsRectItem.SetRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the item's rectangle to the rectangle defined by (x, y) and
            the given width and height.</para>
            <para>This convenience function is equivalent to calling
            setRect(QRectF(x, y, width, height))</para>
            <para>See also rect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsRectItem.Contains(QtCore.QPointF)">
            <summary>
            <para>Reimplemented from QGraphicsItem::contains().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsRectItem.Paint(QtGui.QPainter,QtWidgets.QStyleOptionGraphicsItem,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QGraphicsItem::paint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsRectItem.IsObscuredBy(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Reimplemented from QGraphicsItem::isObscuredBy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsRectItem.Rect">
            <summary>
            <para>Returns the item's rectangle.</para>
            <para>See also setRect().</para>
            <para></para>
            <para>Sets the item's rectangle to be the given rectangle.</para>
            <para>See also rect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsRectItem.BoundingRect">
            <summary>
            <para>Reimplemented from QGraphicsItem::boundingRect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsRectItem.Shape">
            <summary>
            <para>Reimplemented from QGraphicsItem::shape().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsRectItem.OpaqueArea">
            <summary>
            <para>Reimplemented from QGraphicsItem::opaqueArea().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsRectItem.Type">
            <summary>
            <para>Reimplemented from QGraphicsItem::type().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsEllipseItem">
            <summary>
            <para>The QGraphicsEllipseItem class provides an ellipse item that you
            can add to a QGraphicsScene.</para>
            </summary>
            <remarks>
            <para>QGraphicsEllipseItem respresents an ellipse with a fill and an
            outline, and you can also use it for ellipse segments (see startAngle(),
            spanAngle()).</para>
            <para></para>
            <para> 	</para>
            <para></para>
            <para>To set the item's ellipse, pass a QRectF to
            QGraphicsEllipseItem's constructor, or call setRect(). The rect() function
            returns the current ellipse geometry.</para>
            <para>QGraphicsEllipseItem uses the rect and the pen width to provide a
            reasonable implementation of boundingRect(), shape(), and contains(). The
            paint() function draws the ellipse using the item's associated pen and
            brush, which you can set by calling setPen() and setBrush().</para>
            <para></para>
            <para>See also QGraphicsPathItem, QGraphicsRectItem,
            QGraphicsPolygonItem, QGraphicsTextItem, QGraphicsLineItem,
            QGraphicsPixmapItem, and Graphics View Framework.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsEllipseItem.#ctor(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsEllipseItem. parent is passed to
            QAbstractGraphicsShapeItem's constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsEllipseItem.#ctor(QtCore.QRectF,QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsEllipseItem using rect as the default
            rectangle. parent is passed to QAbstractGraphicsShapeItem's
            constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsEllipseItem.#ctor(System.Double,System.Double,System.Double,System.Double,QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsEllipseItem using the rectangle defined by
            (x, y) and the given width and height, as the default rectangle. parent is
            passed to QAbstractGraphicsShapeItem's constructor.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsEllipseItem.SetRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the item's rectangle to the rectangle defined by (x, y) and
            the given width and height.</para>
            <para>This convenience function is equivalent to calling
            setRect(QRectF(x, y, width, height))</para>
            <para>See also rect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsEllipseItem.Contains(QtCore.QPointF)">
            <summary>
            <para>Reimplemented from QGraphicsItem::contains().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsEllipseItem.Paint(QtGui.QPainter,QtWidgets.QStyleOptionGraphicsItem,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QGraphicsItem::paint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsEllipseItem.IsObscuredBy(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Reimplemented from QGraphicsItem::isObscuredBy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsEllipseItem.Rect">
            <summary>
            <para>Returns the item's ellipse geometry as a QRectF.</para>
            <para>See also setRect() and QPainter::drawEllipse().</para>
            <para></para>
            <para>Sets the item's ellipse geometry to rect. The rectangle's left
            edge defines the left edge of the ellipse, and the rectangle's top edge
            describes the top of the ellipse. The height and width of the rectangle
            describe the height and width of the ellipse.</para>
            <para>See also rect() and QPainter::drawEllipse().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsEllipseItem.StartAngle">
            <summary>
            <para>Returns the start angle for an ellipse segment in 16ths of a
            degree. This angle is used together with spanAngle() for representing an
            ellipse segment (a pie). By default, the start angle is 0.</para>
            <para>See also setStartAngle() and spanAngle().</para>
            <para></para>
            <para>Sets the start angle for an ellipse segment to angle, which is in
            16ths of a degree. This angle is used together with spanAngle() for
            representing an ellipse segment (a pie). By default, the start angle is
            0.</para>
            <para>See also startAngle(), setSpanAngle(), and
            QPainter::drawPie().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsEllipseItem.SpanAngle">
            <summary>
            <para>Returns the span angle of an ellipse segment in 16ths of a
            degree. This angle is used together with startAngle() for representing an
            ellipse segment (a pie). By default, this function returns 5760 (360 * 16,
            a full ellipse).</para>
            <para>See also setSpanAngle() and startAngle().</para>
            <para></para>
            <para>Sets the span angle for an ellipse segment to angle, which is in
            16ths of a degree. This angle is used together with startAngle() to
            represent an ellipse segment (a pie). By default, the span angle is 5760
            (360 * 16, a full ellipse).</para>
            <para>See also spanAngle(), setStartAngle(), and
            QPainter::drawPie().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsEllipseItem.BoundingRect">
            <summary>
            <para>Reimplemented from QGraphicsItem::boundingRect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsEllipseItem.Shape">
            <summary>
            <para>Reimplemented from QGraphicsItem::shape().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsEllipseItem.OpaqueArea">
            <summary>
            <para>Reimplemented from QGraphicsItem::opaqueArea().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsEllipseItem.Type">
            <summary>
            <para>Reimplemented from QGraphicsItem::type().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsPolygonItem">
            <summary>
            <para>The QGraphicsPolygonItem class provides a polygon item that you
            can add to a QGraphicsScene.</para>
            </summary>
            <remarks>
            <para>To set the item's polygon, pass a QPolygonF to
            QGraphicsPolygonItem's constructor, or call the setPolygon() function. The
            polygon() function returns the current polygon.</para>
            <para></para>
            <para>QGraphicsPolygonItem uses the polygon and the pen width to
            provide a reasonable implementation of boundingRect(), shape(), and
            contains(). The paint() function draws the polygon using the item's
            associated pen and brush, which you can set by calling the setPen() and
            setBrush() functions.</para>
            <para></para>
            <para>See also QGraphicsPathItem, QGraphicsRectItem,
            QGraphicsEllipseItem, QGraphicsTextItem, QGraphicsLineItem,
            QGraphicsPixmapItem, and Graphics View Framework.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsPolygonItem.#ctor(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsPolygonItem. parent is passed to
            QAbstractGraphicsShapeItem's constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsPolygonItem.#ctor(QtGui.QPolygonF,QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsPolygonItem with polygon as the default
            polygon. parent is passed to QAbstractGraphicsShapeItem's
            constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsPolygonItem.Contains(QtCore.QPointF)">
            <summary>
            <para>Reimplemented from QGraphicsItem::contains().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsPolygonItem.Paint(QtGui.QPainter,QtWidgets.QStyleOptionGraphicsItem,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QGraphicsItem::paint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsPolygonItem.IsObscuredBy(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Reimplemented from QGraphicsItem::isObscuredBy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPolygonItem.Polygon">
            <summary>
            <para>Returns the item's polygon, or an empty polygon if no polygon has
            been set.</para>
            <para>See also setPolygon().</para>
            <para></para>
            <para>Sets the item's polygon to be the given polygon.</para>
            <para>See also polygon().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPolygonItem.FillRule">
            <summary>
            <para>Returns the fill rule of the polygon. The default fill rule is
            Qt::OddEvenFill.</para>
            <para>See also setFillRule(), QPainterPath::fillRule(), and
            QPainter::drawPolygon().</para>
            <para></para>
            <para>Sets the fill rule of the polygon to rule. The default fill rule
            is Qt::OddEvenFill.</para>
            <para>See also fillRule(), QPainterPath::fillRule(), and
            QPainter::drawPolygon().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPolygonItem.BoundingRect">
            <summary>
            <para>Reimplemented from QGraphicsItem::boundingRect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPolygonItem.Shape">
            <summary>
            <para>Reimplemented from QGraphicsItem::shape().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPolygonItem.OpaqueArea">
            <summary>
            <para>Reimplemented from QGraphicsItem::opaqueArea().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPolygonItem.Type">
            <summary>
            <para>Reimplemented from QGraphicsItem::type().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsLineItem">
            <summary>
            <para>The QGraphicsLineItem class provides a line item that you can add
            to a QGraphicsScene.</para>
            </summary>
            <remarks>
            <para>To set the item's line, pass a QLineF to QGraphicsLineItem's
            constructor, or call the setLine() function. The line() function returns
            the current line. By default the line is black with a width of 0, but you
            can change this by calling setPen().</para>
            <para></para>
            <para>QGraphicsLineItem uses the line and the pen width to provide a
            reasonable implementation of boundingRect(), shape(), and contains(). The
            paint() function draws the line using the item's associated pen.</para>
            <para></para>
            <para>See also QGraphicsPathItem, QGraphicsRectItem,
            QGraphicsEllipseItem, QGraphicsTextItem, QGraphicsPolygonItem,
            QGraphicsPixmapItem, and Graphics View Framework.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsLineItem.#ctor(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsLineItem. parent is passed to
            QGraphicsItem's constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLineItem.#ctor(QtCore.QLineF,QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsLineItem, using line as the default line.
            parent is passed to QGraphicsItem's constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLineItem.#ctor(System.Double,System.Double,System.Double,System.Double,QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsLineItem, using the line between (x1, y1)
            and (x2, y2) as the default line. parent is passed to QGraphicsItem's
            constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLineItem.SetLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the item's line to be the line between (x1, y1) and (x2,
            y2).</para>
            <para>This is the same as calling setLine(QLineF(x1, y1, x2,
            y2)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLineItem.Contains(QtCore.QPointF)">
            <summary>
            <para>Reimplemented from QGraphicsItem::contains().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLineItem.Paint(QtGui.QPainter,QtWidgets.QStyleOptionGraphicsItem,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QGraphicsItem::paint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLineItem.IsObscuredBy(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Reimplemented from QGraphicsItem::isObscuredBy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLineItem.Pen">
            <summary>
            <para>Returns the item's pen, or a black solid 0-width pen if no pen
            has been set.</para>
            <para>See also setPen().</para>
            <para></para>
            <para>Sets the item's pen to pen. If no pen is set, the line will be
            painted using a black solid 0-width pen.</para>
            <para>See also pen().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLineItem.Line">
            <summary>
            <para>Returns the item's line, or a null line if no line has been
            set.</para>
            <para>See also setLine().</para>
            <para></para>
            <para>Sets the item's line to be the given line.</para>
            <para>See also line().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLineItem.BoundingRect">
            <summary>
            <para>Reimplemented from QGraphicsItem::boundingRect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLineItem.Shape">
            <summary>
            <para>Reimplemented from QGraphicsItem::shape().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLineItem.OpaqueArea">
            <summary>
            <para>Reimplemented from QGraphicsItem::opaqueArea().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLineItem.Type">
            <summary>
            <para>Reimplemented from QGraphicsItem::type().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsPixmapItem">
            <summary>
            <para>The QGraphicsPixmapItem class provides a pixmap item that you can
            add to a QGraphicsScene.</para>
            </summary>
            <remarks>
            <para>To set the item's pixmap, pass a QPixmap to QGraphicsPixmapItem's
            constructor, or call the setPixmap() function. The pixmap() function
            returns the current pixmap.</para>
            <para>QGraphicsPixmapItem uses pixmap's optional alpha mask to provide
            a reasonable implementation of boundingRect(), shape(), and
            contains().</para>
            <para></para>
            <para>The pixmap is drawn at the item's (0, 0) coordinate, as returned
            by offset(). You can change the drawing offset by calling
            setOffset().</para>
            <para>You can set the pixmap's transformation mode by calling
            setTransformationMode(). By default, Qt::FastTransformation is used, which
            provides fast, non-smooth scaling. Qt::SmoothTransformation enables
            QPainter::SmoothPixmapTransform on the painter, and the quality depends on
            the platform and viewport. The result is usually not as good as calling
            QPixmap::scale() directly. Call transformationMode() to get the current
            transformation mode for the item.</para>
            <para></para>
            <para>See also QGraphicsPathItem, QGraphicsRectItem,
            QGraphicsEllipseItem, QGraphicsTextItem, QGraphicsPolygonItem,
            QGraphicsLineItem, and Graphics View Framework.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsPixmapItem.#ctor(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsPixmapItem. parent is passed to
            QGraphicsItem's constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsPixmapItem.#ctor(QtGui.QPixmap,QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsPixmapItem, using pixmap as the default
            pixmap. parent is passed to QGraphicsItem's constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsPixmapItem.SetOffset(System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            setOffset(QPointF(x, y)).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsPixmapItem.Contains(QtCore.QPointF)">
            <summary>
            <para>Reimplemented from QGraphicsItem::contains().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsPixmapItem.Paint(QtGui.QPainter,QtWidgets.QStyleOptionGraphicsItem,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QGraphicsItem::paint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsPixmapItem.IsObscuredBy(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Reimplemented from QGraphicsItem::isObscuredBy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPixmapItem.Pixmap">
            <summary>
            <para>Returns the item's pixmap, or an invalid QPixmap if no pixmap has
            been set.</para>
            <para>See also setPixmap().</para>
            <para></para>
            <para>Sets the item's pixmap to pixmap.</para>
            <para>See also pixmap().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPixmapItem.TransformationMode">
            <summary>
            <para>Returns the transformation mode of the pixmap. The default mode
            is Qt::FastTransformation, which provides quick transformation with no
            smoothing.</para>
            <para>See also setTransformationMode().</para>
            <para></para>
            <para>Sets the pixmap item's transformation mode to mode, and toggles
            an update of the item. The default mode is Qt::FastTransformation, which
            provides quick transformation with no smoothing.</para>
            <para>Qt::SmoothTransformation enables QPainter::SmoothPixmapTransform
            on the painter, and the quality depends on the platform and viewport. The
            result is usually not as good as calling QPixmap::scale() directly.</para>
            <para>See also transformationMode().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPixmapItem.Offset">
            <summary>
            <para>Returns the pixmap item's offset, which defines the point of the
            top-left corner of the pixmap, in local coordinates.</para>
            <para>See also setOffset().</para>
            <para></para>
            <para>Sets the pixmap item's offset to offset. QGraphicsPixmapItem will
            draw its pixmap using offset for its top-left corner.</para>
            <para>See also offset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPixmapItem.shapeMode">
            <summary>
            <para>Returns the item's shape mode. The shape mode describes how
            QGraphicsPixmapItem calculates its shape. The default mode is
            MaskShape.</para>
            <para>See also setShapeMode() and ShapeMode.</para>
            <para></para>
            <para>Sets the item's shape mode to mode. The shape mode describes how
            QGraphicsPixmapItem calculates its shape. The default mode is
            MaskShape.</para>
            <para>See also shapeMode() and ShapeMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPixmapItem.BoundingRect">
            <summary>
            <para>Reimplemented from QGraphicsItem::boundingRect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPixmapItem.Shape">
            <summary>
            <para>Reimplemented from QGraphicsItem::shape().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPixmapItem.OpaqueArea">
            <summary>
            <para>Reimplemented from QGraphicsItem::opaqueArea().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsPixmapItem.Type">
            <summary>
            <para>Reimplemented from QGraphicsItem::type().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsPixmapItem.ShapeMode">
            <summary>
            <para>This enum describes how QGraphicsPixmapItem calculates its shape
            and opaque area.</para>
            <para>The default value is MaskShape.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGraphicsPixmapItem.ShapeMode.MaskShape">
            <summary>The shape is determined by calling QPixmap::mask(). This shape includes only the opaque pixels of the pixmap. Because the shape is more complex, however, it can be slower than the other modes, and uses more memory.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsPixmapItem.ShapeMode.BoundingRectShape">
            <summary>The shape is determined by tracing the outline of the pixmap. This is the fastest shape mode, but it does not take into account any transparent areas on the pixmap.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsPixmapItem.ShapeMode.HeuristicMaskShape">
            <summary>The shape is determine by calling QPixmap::createHeuristicMask(). The performance and memory consumption is similar to MaskShape.</summary>
        </member>
        <member name="T:QtWidgets.QGraphicsTextItem">
            <summary>
            <para>The QGraphicsTextItem class provides a text item that you can add
            to a QGraphicsScene to display formatted text.</para>
            </summary>
            <remarks>
            <para>If you only need to show plain text in an item, consider using
            QGraphicsSimpleTextItem instead.</para>
            <para>To set the item's text, pass a QString to QGraphicsTextItem's
            constructor, or call setHtml()/setPlainText().</para>
            <para>QGraphicsTextItem uses the text's formatted size and the
            associated font to provide a reasonable implementation of boundingRect(),
            shape(), and contains(). You can set the font by calling setFont().</para>
            <para>It is possible to make the item editable by setting the
            Qt::TextEditorInteraction flag using setTextInteractionFlags().</para>
            <para>The item's preferred text width can be set using setTextWidth()
            and obtained using textWidth().</para>
            <para>Note: In order to align HTML text in the center, the item's text
            width must be set. Otherwise, you can call adjustSize() after setting the
            item's text.</para>
            <para></para>
            <para>Note: QGraphicsTextItem accepts hover events by default. You can
            change this with setAcceptHoverEvents().</para>
            <para></para>
            <para>See also QGraphicsSimpleTextItem, QGraphicsPathItem,
            QGraphicsRectItem, QGraphicsEllipseItem, QGraphicsPixmapItem,
            QGraphicsPolygonItem, QGraphicsLineItem, and Graphics View
            Framework.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.#ctor(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsTextItem. parent is passed to
            QGraphicsItem's constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.#ctor(System.String,QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsTextItem, using text as the default plain
            text. parent is passed to QGraphicsItem's constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.ToHtml">
            <summary>
            <para>Returns the item's text converted to HTML, or an empty QString if
            no text has been set.</para>
            <para>See also setHtml().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.SetHtml(System.String)">
            <summary>
            <para>Sets the item's text to text, assuming that text is HTML
            formatted. If the item has keyboard input focus, this function will also
            call ensureVisible() to ensure that the text is visible in all
            viewports.</para>
            <para>See also toHtml(), hasFocus(), and
            QGraphicsSimpleTextItem.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.ToPlainText">
            <summary>
            <para>Returns the item's text converted to plain text, or an empty
            QString if no text has been set.</para>
            <para>See also setPlainText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.SetPlainText(System.String)">
            <summary>
            <para>Sets the item's text to text. If the item has keyboard input
            focus, this function will also call ensureVisible() to ensure that the text
            is visible in all viewports.</para>
            <para>See also toHtml() and hasFocus().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.Contains(QtCore.QPointF)">
            <summary>
            <para>Reimplemented from QGraphicsItem::contains().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.Paint(QtGui.QPainter,QtWidgets.QStyleOptionGraphicsItem,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QGraphicsItem::paint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.IsObscuredBy(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Reimplemented from QGraphicsItem::isObscuredBy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.AdjustSize">
            <summary>
            <para>Adjusts the text item to a reasonable size.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnSceneEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnMousePressEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnMouseMoveEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnMouseReleaseEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnMouseDoubleClickEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::mouseDoubleClickEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnContextMenuEvent(QtWidgets.QGraphicsSceneContextMenuEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::contextMenuEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnKeyReleaseEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::keyReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnDragEnterEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::dragEnterEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnDragLeaveEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnDragMoveEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::dragMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnDropEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::dropEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnInputMethodEvent(QtGui.QInputMethodEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::inputMethodEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnHoverEnterEvent(QtWidgets.QGraphicsSceneHoverEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::hoverEnterEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnHoverMoveEvent(QtWidgets.QGraphicsSceneHoverEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::hoverMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.OnHoverLeaveEvent(QtWidgets.QGraphicsSceneHoverEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::hoverLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTextItem.InputMethodQuery(QtCore.Qt.InputMethodQuery)">
            <summary>
            <para>Reimplemented from QGraphicsItem::inputMethodQuery().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsTextItem.LinkActivated">
            <summary>
            <para>This signal is emitted when the user clicks on a link on a text item that enables Qt::LinksAccessibleByMouse or Qt::LinksAccessibleByKeyboard. link is the link that was clicked.</para>
            <para>See also setTextInteractionFlags().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsTextItem.LinkHovered">
            <summary>
            <para>This signal is emitted when the user hovers over a link on a text item that enables Qt::LinksAccessibleByMouse. link is the link that was hovered over.</para>
            <para>See also setTextInteractionFlags().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsTextItem.Font">
            <summary>
            <para>Returns the item's font, which is used to render the text.</para>
            <para>See also setFont().</para>
            <para></para>
            <para>Sets the font used to render the text item to font.</para>
            <para>See also font().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsTextItem.DefaultTextColor">
            <summary>
            <para>Returns the default text color that is used for unformatted
            text.</para>
            <para>See also setDefaultTextColor().</para>
            <para></para>
            <para>Sets the color for unformatted text to col.</para>
            <para>See also defaultTextColor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsTextItem.TextWidth">
            <summary>
            <para>Returns the text width.</para>
            <para>The width is calculated with the QTextDocument that
            QGraphicsTextItem keeps internally.</para>
            <para>See also setTextWidth() and QTextDocument::textWidth().</para>
            <para></para>
            <para>Sets the preferred width for the item's text. If the actual text
            is wider than the specified width then it will be broken into multiple
            lines.</para>
            <para>If width is set to -1 then the text will not be broken into
            multiple lines unless it is enforced through an explicit line break or a
            new paragraph.</para>
            <para>The default value is -1.</para>
            <para>Note that QGraphicsTextItem keeps a QTextDocument internally,
            which is used to calculate the text width.</para>
            <para>See also textWidth() and QTextDocument::setTextWidth().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsTextItem.Document">
            <summary>
            <para>Returns the item's text document.</para>
            <para>See also setDocument().</para>
            <para></para>
            <para>Sets the text document document on the item.</para>
            <para>See also document().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsTextItem.TextInteractionFlags">
            <summary>
            <para>Returns the current text interaction flags.</para>
            <para>See also setTextInteractionFlags().</para>
            <para></para>
            <para>Sets the flags flags to specify how the text item should react to
            user input.</para>
            <para>The default for a QGraphicsTextItem is Qt::NoTextInteraction.
            This function also affects the ItemIsFocusable QGraphicsItem flag by
            setting it if flags is different from Qt::NoTextInteraction and clearing it
            otherwise.</para>
            <para>By default, the text is read-only. To transform the item into an
            editor, set the Qt::TextEditable flag.</para>
            <para>See also textInteractionFlags().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsTextItem.TabChangesFocus">
            <summary>
            <para>Returns true if the Tab key will cause the widget to change
            focus; otherwise, false is returned.</para>
            <para>By default, this behavior is disabled, and this function will
            return false.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setTabChangesFocus().</para>
            <para></para>
            <para>If b is true, the Tab key will cause the widget to change focus;
            otherwise, the tab key will insert a tab into the document.</para>
            <para>In some occasions text edits should not allow the user to input
            tabulators or change indentation using the Tab key, as this breaks the
            focus chain. The default is false.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also tabChangesFocus(), ItemIsFocusable, and
            textInteractionFlags().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsTextItem.OpenExternalLinks">
            <summary>
            <para>Specifies whether QGraphicsTextItem should automatically open
            links using QDesktopServices::openUrl() instead of emitting the
            linkActivated signal.</para>
            <para>The default value is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsTextItem.TextCursor">
            <summary>
            <para>This property represents the visible text cursor in an editable
            text item.</para>
            <para>By default, if the item's text has not been set, this property
            contains a null text cursor; otherwise it contains a text cursor placed at
            the start of the item's document.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsTextItem.BoundingRect">
            <summary>
            <para>Reimplemented from QGraphicsItem::boundingRect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsTextItem.Shape">
            <summary>
            <para>Reimplemented from QGraphicsItem::shape().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsTextItem.OpaqueArea">
            <summary>
            <para>Reimplemented from QGraphicsItem::opaqueArea().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsTextItem.Type">
            <summary>
            <para>Reimplemented from QGraphicsItem::type().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsSimpleTextItem">
            <summary>
            <para>The QGraphicsSimpleTextItem class provides a simple text path
            item that you can add to a QGraphicsScene.</para>
            </summary>
            <remarks>
            <para>To set the item's text, you can either pass a QString to
            QGraphicsSimpleTextItem's constructor, or call setText() to change the text
            later. To set the text fill color, call setBrush().</para>
            <para>The simple text item can have both a fill and an outline;
            setBrush() will set the text fill (i.e., text color), and setPen() sets the
            pen that will be used to draw the text outline. (The latter can be slow,
            especially for complex pens, and items with long text content.) If all you
            want is to draw a simple line of text, you should call setBrush() only, and
            leave the pen unset; QGraphicsSimpleTextItem's pen is by default
            Qt::NoPen.</para>
            <para>QGraphicsSimpleTextItem uses the text's formatted size and the
            associated font to provide a reasonable implementation of boundingRect(),
            shape(), and contains(). You can set the font by calling setFont().</para>
            <para>QGraphicsSimpleText does not display rich text; instead, you can
            use QGraphicsTextItem, which provides full text control
            capabilities.</para>
            <para></para>
            <para></para>
            <para>See also QGraphicsTextItem, QGraphicsPathItem, QGraphicsRectItem,
            QGraphicsEllipseItem, QGraphicsPixmapItem, QGraphicsPolygonItem,
            QGraphicsLineItem, and Graphics View Framework.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsSimpleTextItem.#ctor(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsSimpleTextItem.</para>
            <para>parent is passed to QGraphicsItem's constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsSimpleTextItem.#ctor(System.String,QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsSimpleTextItem, using text as the default
            plain text.</para>
            <para>parent is passed to QGraphicsItem's constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsSimpleTextItem.Contains(QtCore.QPointF)">
            <summary>
            <para>Reimplemented from QGraphicsItem::contains().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsSimpleTextItem.Paint(QtGui.QPainter,QtWidgets.QStyleOptionGraphicsItem,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QGraphicsItem::paint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsSimpleTextItem.IsObscuredBy(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Reimplemented from QGraphicsItem::isObscuredBy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSimpleTextItem.Text">
            <summary>
            <para>Returns the item's text.</para>
            <para>See also setText().</para>
            <para></para>
            <para>Sets the item's text to text. The text will be displayed as plain
            text. Newline characters ('\n') as well as characters of type
            QChar::LineSeparator will cause item to break the text into multiple
            lines.</para>
            <para>See also text().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSimpleTextItem.Font">
            <summary>
            <para>Returns the font that is used to draw the item's text.</para>
            <para>See also setFont().</para>
            <para></para>
            <para>Sets the font that is used to draw the item's text to
            font.</para>
            <para>See also font().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSimpleTextItem.BoundingRect">
            <summary>
            <para>Reimplemented from QGraphicsItem::boundingRect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSimpleTextItem.Shape">
            <summary>
            <para>Reimplemented from QGraphicsItem::shape().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSimpleTextItem.OpaqueArea">
            <summary>
            <para>Reimplemented from QGraphicsItem::opaqueArea().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSimpleTextItem.Type">
            <summary>
            <para>Reimplemented from QGraphicsItem::type().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsItemGroup">
            <summary>
            <para>The QGraphicsItemGroup class provides a container that treats a
            group of items as a single item.</para>
            </summary>
            <remarks>
            <para>A QGraphicsItemGroup is a special type of compound item that
            treats itself and all its children as one item (i.e., all events and
            geometries for all children are merged together). It's common to use item
            groups in presentation tools, when the user wants to group several smaller
            items into one big item in order to simplify moving and copying of
            items.</para>
            <para>If all you want is to store items inside other items, you can use
            any QGraphicsItem directly by passing a suitable parent to
            setParentItem().</para>
            <para>The boundingRect() function of QGraphicsItemGroup returns the
            bounding rectangle of all items in the item group. QGraphicsItemGroup
            ignores the ItemIgnoresTransformations flag on its children (i.e., with
            respect to the geometry of the group item, the children are treated as if
            they were transformable).</para>
            <para>There are two ways to construct an item group. The easiest and
            most common approach is to pass a list of items (e.g., all selected items)
            to QGraphicsScene::createItemGroup(), which returns a new
            QGraphicsItemGroup item. The other approach is to manually construct a
            QGraphicsItemGroup item, add it to the scene calling
            QGraphicsScene::addItem(), and then add items to the group manually, one at
            a time by calling addToGroup(). To dismantle (&quot;ungroup&quot;) an item
            group, you can either call QGraphicsScene::destroyItemGroup(), or you can
            manually remove all items from the group by calling
            removeFromGroup().</para>
            <para>// Group all selected items together</para>
            <para>QGraphicsItemGroup *group =
            scene-&gt;createItemGroup(scene-&gt;selecteditems());</para>
            <para></para>
            <para>// Destroy the group, and delete the group item</para>
            <para>scene-&gt;destroyItemGroup(group);</para>
            <para>The operation of adding and removing items preserves the items'
            scene-relative position and transformation, as opposed to calling
            setParentItem(), where only the child item's parent-relative position and
            transformation are kept.</para>
            <para>The addtoGroup() function reparents the target item to this item
            group, keeping the item's position and transformation intact relative to
            the scene. Visually, this means that items added via addToGroup() will
            remain completely unchanged as a result of this operation, regardless of
            the item or the group's current position or transformation; although the
            item's position and matrix are likely to change.</para>
            <para>The removeFromGroup() function has similar semantics to
            setParentItem(); it reparents the item to the parent item of the item
            group. As with addToGroup(), the item's scene-relative position and
            transformation remain intact.</para>
            <para></para>
            <para>See also QGraphicsItem and Graphics View Framework.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsItemGroup.#ctor(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a QGraphicsItemGroup. parent is passed to
            QGraphicsItem's constructor.</para>
            <para>See also QGraphicsScene::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemGroup.AddToGroup(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Adds the given item and item's child items to this item group.
            The item and child items will be reparented to this group, but its position
            and transformation relative to the scene will stay intact.</para>
            <para>See also removeFromGroup() and
            QGraphicsScene::createItemGroup().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemGroup.RemoveFromGroup(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Removes the specified item from this group. The item will be
            reparented to this group's parent item, or to 0 if this group has no
            parent. Its position and transformation relative to the scene will stay
            intact.</para>
            <para>See also addToGroup() and
            QGraphicsScene::destroyItemGroup().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemGroup.Paint(QtGui.QPainter,QtWidgets.QStyleOptionGraphicsItem,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QGraphicsItem::paint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemGroup.IsObscuredBy(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Reimplemented from QGraphicsItem::isObscuredBy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItemGroup.BoundingRect">
            <summary>
            <para>Reimplemented from QGraphicsItem::boundingRect().</para>
            <para>Returns the bounding rect of this group item, and all its
            children.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItemGroup.OpaqueArea">
            <summary>
            <para>Reimplemented from QGraphicsItem::opaqueArea().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItemGroup.Type">
            <summary>
            <para>Reimplemented from QGraphicsItem::type().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsLayoutItem">
            <summary>
            <para>The QGraphicsLayoutItem class can be inherited to allow your
            custom items to be managed by layouts.</para>
            </summary>
            <remarks>
            <para>QGraphicsLayoutItem is an abstract class that defines a set of
            virtual functions describing sizes, size policies, and size hints for any
            object arranged by QGraphicsLayout. The API contains functions relevant for
            both the item itself and for the user of the item as most of
            QGraphicsLayoutItem's functions are also part of the subclass' public
            API.</para>
            <para>In most cases, existing layout-aware classes such as
            QGraphicsWidget and QGraphicsLayout already provide the functionality you
            require. However, subclassing these classes will enable you to create both
            graphical elements that work well with layouts (QGraphicsWidget) or custom
            layouts (QGraphicsLayout).</para>
            <para></para>
            <para>Subclassing QGraphicsLayoutItem</para>
            <para>If you create a subclass of QGraphicsLayoutItem and reimplement
            its virtual functions, you will enable the layout to resize and position
            your item along with other QGraphicsLayoutItems including QGraphicsWidget
            and QGraphicsLayout.</para>
            <para>You can start by reimplementing important functions: the
            protected sizeHint() function, as well as the public setGeometry()
            function. If you want your items to be aware of immediate geometry changes,
            you can also reimplement updateGeometry().</para>
            <para>The geometry, size hint, and size policy affect the item's size
            and position. Calling setGeometry() will always resize and reposition the
            item immediately. Normally, this function is called by QGraphicsLayout
            after the layout has been activated, but it can also be called by the
            item's user at any time.</para>
            <para>The sizeHint() function returns the item' minimum, preferred and
            maximum size hints. You can override these properties by calling
            setMinimumSize(), setPreferredSize() or setMaximumSize(). You can also use
            functions such as setMinimumWidth() or setMaximumHeight() to set only the
            width or height component if desired.</para>
            <para>The effectiveSizeHint() function, on the other hand, returns a
            size hint for any given Qt::SizeHint, and guarantees that the returned size
            is bound to the minimum and maximum sizes and size hints. You can set the
            item's vertical and horizontal size policy by calling setSizePolicy(). The
            sizePolicy property is used by the layout system to describe how this item
            prefers to grow or shrink.</para>
            <para></para>
            <para>Nesting QGraphicsLayoutItems</para>
            <para>QGraphicsLayoutItems can be nested within other
            QGraphicsLayoutItems, similar to layouts that can contain sublayouts. This
            is done either by passing a QGraphicsLayoutItem pointer to
            QGraphicsLayoutItem's protected constructor, or by calling
            setParentLayoutItem(). The parentLayoutItem() function returns a pointer to
            the item's layoutItem parent. If the item's parent is 0 or if the parent
            does not inherit from QGraphicsItem, the parentLayoutItem() function then
            returns 0. isLayout() returns true if the QGraphicsLayoutItem subclass is
            itself a layout, or false otherwise.</para>
            <para>Qt uses QGraphicsLayoutItem to provide layout functionality in
            the Graphics View Framework, but in the future its use may spread
            throughout Qt itself.</para>
            <para></para>
            <para>See also QGraphicsWidget, QGraphicsLayout, QGraphicsLinearLayout,
            and QGraphicsGridLayout.</para>
            </remarks>
        </member>
        <member name="T:QtWidgets.IQGraphicsLayoutItem">
            <summary>
            <para>The QGraphicsLayoutItem class can be inherited to allow your
            custom items to be managed by layouts.</para>
            </summary>
            <remarks>
            <para>QGraphicsLayoutItem is an abstract class that defines a set of
            virtual functions describing sizes, size policies, and size hints for any
            object arranged by QGraphicsLayout. The API contains functions relevant for
            both the item itself and for the user of the item as most of
            QGraphicsLayoutItem's functions are also part of the subclass' public
            API.</para>
            <para>In most cases, existing layout-aware classes such as
            QGraphicsWidget and QGraphicsLayout already provide the functionality you
            require. However, subclassing these classes will enable you to create both
            graphical elements that work well with layouts (QGraphicsWidget) or custom
            layouts (QGraphicsLayout).</para>
            <para></para>
            <para>Subclassing QGraphicsLayoutItem</para>
            <para>If you create a subclass of QGraphicsLayoutItem and reimplement
            its virtual functions, you will enable the layout to resize and position
            your item along with other QGraphicsLayoutItems including QGraphicsWidget
            and QGraphicsLayout.</para>
            <para>You can start by reimplementing important functions: the
            protected sizeHint() function, as well as the public setGeometry()
            function. If you want your items to be aware of immediate geometry changes,
            you can also reimplement updateGeometry().</para>
            <para>The geometry, size hint, and size policy affect the item's size
            and position. Calling setGeometry() will always resize and reposition the
            item immediately. Normally, this function is called by QGraphicsLayout
            after the layout has been activated, but it can also be called by the
            item's user at any time.</para>
            <para>The sizeHint() function returns the item' minimum, preferred and
            maximum size hints. You can override these properties by calling
            setMinimumSize(), setPreferredSize() or setMaximumSize(). You can also use
            functions such as setMinimumWidth() or setMaximumHeight() to set only the
            width or height component if desired.</para>
            <para>The effectiveSizeHint() function, on the other hand, returns a
            size hint for any given Qt::SizeHint, and guarantees that the returned size
            is bound to the minimum and maximum sizes and size hints. You can set the
            item's vertical and horizontal size policy by calling setSizePolicy(). The
            sizePolicy property is used by the layout system to describe how this item
            prefers to grow or shrink.</para>
            <para></para>
            <para>Nesting QGraphicsLayoutItems</para>
            <para>QGraphicsLayoutItems can be nested within other
            QGraphicsLayoutItems, similar to layouts that can contain sublayouts. This
            is done either by passing a QGraphicsLayoutItem pointer to
            QGraphicsLayoutItem's protected constructor, or by calling
            setParentLayoutItem(). The parentLayoutItem() function returns a pointer to
            the item's layoutItem parent. If the item's parent is 0 or if the parent
            does not inherit from QGraphicsItem, the parentLayoutItem() function then
            returns 0. isLayout() returns true if the QGraphicsLayoutItem subclass is
            itself a layout, or false otherwise.</para>
            <para>Qt uses QGraphicsLayoutItem to provide layout functionality in
            the Graphics View Framework, but in the future its use may spread
            throughout Qt itself.</para>
            <para></para>
            <para>See also QGraphicsWidget, QGraphicsLayout, QGraphicsLinearLayout,
            and QGraphicsGridLayout.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.IQGraphicsLayoutItem.SetSizePolicy(QtWidgets.QSizePolicy.Policy,QtWidgets.QSizePolicy.Policy,QtWidgets.QSizePolicy.ControlType)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function is equivalent to calling
            setSizePolicy(QSizePolicy(hPolicy, vPolicy, controlType)).</para>
            <para>See also sizePolicy() and QWidget::sizePolicy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsLayoutItem.SetMinimumSize(System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            setMinimumSize(QSizeF(w, h)).</para>
            <para>See also minimumSize(), setMaximumSize(), setPreferredSize(), and
            sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsLayoutItem.SetPreferredSize(System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            setPreferredSize(QSizeF(w, h)).</para>
            <para>See also preferredSize(), setMaximumSize(), setMinimumSize(), and
            sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsLayoutItem.SetMaximumSize(System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            setMaximumSize(QSizeF(w, h)).</para>
            <para>See also maximumSize(), setMinimumSize(), setPreferredSize(), and
            sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsLayoutItem.GetContentsMargins(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>This virtual function provides the left, top, right and bottom
            contents margins for this QGraphicsLayoutItem. The default implementation
            assumes all contents margins are 0. The parameters point to values stored
            in qreals. If any of the pointers is 0, that value will not be
            updated.</para>
            <para>See also QGraphicsWidget::setContentsMargins().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsLayoutItem.EffectiveSizeHint(QtCore.Qt.SizeHint,QtCore.QSizeF)">
            <summary>
            <para>Returns the effective size hint for this
            QGraphicsLayoutItem.</para>
            <para>which is the size hint in question. constraint is an optional
            argument that defines a special constrain when calculating the effective
            size hint. By default, constraint is QSizeF(-1, -1), which means there is
            no constraint to the size hint.</para>
            <para>If you want to specify the widget's size hint for a given width
            or height, you can provide the fixed dimension in constraint. This is
            useful for widgets that can grow only either vertically or horizontally,
            and need to set either their width or their height to a special
            value.</para>
            <para>For example, a text paragraph item fit into a column width of 200
            may grow vertically. You can pass QSizeF(200, -1) as a constraint to get a
            suitable minimum, preferred and maximum height).</para>
            <para>You can adjust the effective size hint by reimplementing
            sizeHint() in a QGraphicsLayoutItem subclass, or by calling one of the
            following functions: setMinimumSize(), setPreferredSize, or
            setMaximumSize() (or a combination of both).</para>
            <para>This function caches each of the size hints and guarantees that
            sizeHint() will be called only once for each value of which - unless
            constraint is not specified and updateGeometry() has been called.</para>
            <para>See also sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQGraphicsLayoutItem.UpdateGeometry">
            <summary>
            <para>This virtual function discards any cached size hint information.
            You should always call this function if you change the return value of the
            sizeHint() function. Subclasses must always call the base implementation
            when reimplementing this function.</para>
            <para>See also effectiveSizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsLayoutItem.SizePolicy">
            <summary>
            <para>Returns the current size policy.</para>
            <para>See also setSizePolicy() and QWidget::sizePolicy().</para>
            <para></para>
            <para>Sets the size policy to policy. The size policy describes how the
            item should grow horizontally and vertically when arranged in a
            layout.</para>
            <para>QGraphicsLayoutItem's default size policy is (QSizePolicy::Fixed,
            QSizePolicy::Fixed, QSizePolicy::DefaultType), but it is common for
            subclasses to change the default. For example, QGraphicsWidget defaults to
            (QSizePolicy::Preferred, QSizePolicy::Preferred,
            QSizePolicy::DefaultType).</para>
            <para>See also sizePolicy() and QWidget::sizePolicy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsLayoutItem.MinimumSize">
            <summary>
            <para>Returns the minimum size.</para>
            <para>See also setMinimumSize(), preferredSize(), maximumSize(),
            Qt::MinimumSize, and sizeHint().</para>
            <para></para>
            <para>Sets the minimum size to size. This property overrides sizeHint()
            for Qt::MinimumSize and ensures that effectiveSizeHint() will never return
            a size smaller than size. In order to unset the minimum size, use an
            invalid size.</para>
            <para>See also minimumSize(), maximumSize(), preferredSize(),
            Qt::MinimumSize, sizeHint(), setMinimumWidth(), and
            setMinimumHeight().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsLayoutItem.MinimumWidth">
            <summary>
            <para>Returns the minimum width.</para>
            <para>See also setMinimumWidth(), setMinimumSize(), and
            minimumSize().</para>
            <para></para>
            <para>Sets the minimum width to width.</para>
            <para>See also minimumWidth(), setMinimumSize(), and
            minimumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsLayoutItem.MinimumHeight">
            <summary>
            <para>Returns the minimum height.</para>
            <para>See also setMinimumHeight(), setMinimumSize(), and
            minimumSize().</para>
            <para></para>
            <para>Sets the minimum height to height.</para>
            <para>See also minimumHeight(), setMinimumSize(), and
            minimumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsLayoutItem.PreferredSize">
            <summary>
            <para>Returns the preferred size.</para>
            <para>See also setPreferredSize(), minimumSize(), maximumSize(),
            Qt::PreferredSize, and sizeHint().</para>
            <para></para>
            <para>Sets the preferred size to size. This property overrides
            sizeHint() for Qt::PreferredSize and provides the default value for
            effectiveSizeHint(). In order to unset the preferred size, use an invalid
            size.</para>
            <para>See also preferredSize(), minimumSize(), maximumSize(),
            Qt::PreferredSize, and sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsLayoutItem.PreferredWidth">
            <summary>
            <para>Returns the preferred width.</para>
            <para>See also setPreferredWidth(), setPreferredSize(), and
            preferredSize().</para>
            <para></para>
            <para>Sets the preferred width to width.</para>
            <para>See also preferredWidth(), preferredHeight(), setPreferredSize(),
            and preferredSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsLayoutItem.PreferredHeight">
            <summary>
            <para>Returns the preferred height.</para>
            <para>See also setPreferredHeight(), setPreferredSize(), and
            preferredSize().</para>
            <para></para>
            <para>Sets the preferred height to height.</para>
            <para>See also preferredHeight(), preferredWidth(), setPreferredSize(),
            and preferredSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsLayoutItem.MaximumSize">
            <summary>
            <para>Returns the maximum size.</para>
            <para>See also setMaximumSize(), minimumSize(), preferredSize(),
            Qt::MaximumSize, and sizeHint().</para>
            <para></para>
            <para>Sets the maximum size to size. This property overrides sizeHint()
            for Qt::MaximumSize and ensures that effectiveSizeHint() will never return
            a size larger than size. In order to unset the maximum size, use an invalid
            size.</para>
            <para>See also maximumSize(), minimumSize(), preferredSize(),
            Qt::MaximumSize, and sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsLayoutItem.MaximumWidth">
            <summary>
            <para>Returns the maximum width.</para>
            <para>See also setMaximumWidth(), setMaximumSize(), and
            maximumSize().</para>
            <para></para>
            <para>Sets the maximum width to width.</para>
            <para>See also maximumWidth(), setMaximumSize(), and
            maximumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsLayoutItem.MaximumHeight">
            <summary>
            <para>Returns the maximum height.</para>
            <para>See also setMaximumHeight(), setMaximumSize(), and
            maximumSize().</para>
            <para></para>
            <para>Sets the maximum height to height.</para>
            <para>See also maximumHeight(), setMaximumSize(), and
            maximumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsLayoutItem.Geometry">
            <summary>
            <para>Returns the item's geometry (e.g., position and size) as a
            QRectF. This function is equivalent to QRectF(pos(), size()).</para>
            <para>See also setGeometry().</para>
            <para></para>
            <para>This virtual function sets the geometry of the
            QGraphicsLayoutItem to rect, which is in parent coordinates (e.g., the
            top-left corner of rect is equivalent to the item's position in parent
            coordinates).</para>
            <para>You must reimplement this function in a subclass of
            QGraphicsLayoutItem to receive geometry updates. The layout will call this
            function when it does a rearrangement.</para>
            <para>If rect is outside of the bounds of minimumSize and maximumSize,
            it will be adjusted to its closest size so that it is within the legal
            bounds.</para>
            <para>See also geometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsLayoutItem.ParentLayoutItem">
            <summary>
            <para>Returns the parent of this QGraphicsLayoutItem, or 0 if there is
            no parent, or if the parent does not inherit from QGraphicsLayoutItem
            (QGraphicsLayoutItem is often used through multiple inheritance with
            QObject-derived classes).</para>
            <para>See also setParentLayoutItem().</para>
            <para></para>
            <para>Sets the parent of this QGraphicsLayoutItem to parent.</para>
            <para>See also parentLayoutItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsLayoutItem.GraphicsItem">
            <summary>
            <para>Returns the QGraphicsItem that this layout item represents. For
            QGraphicsWidget it will return itself. For custom items it can return an
            aggregated value.</para>
            <para>See also setGraphicsItem().</para>
            <para></para>
            <para>If the QGraphicsLayoutItem represents a QGraphicsItem, and it
            wants to take advantage of the automatic reparenting capabilities of
            QGraphicsLayout it should set this value. Note that if you delete item and
            not delete the layout item, you are responsible of calling
            setGraphicsItem(0) in order to avoid having a dangling pointer.</para>
            <para>See also graphicsItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsLayoutItem.OwnedByLayout">
            <summary>
            <para>Returns whether a layout should delete this item in its
            destructor. If its true, then the layout will delete it. If its false, then
            it is assumed that another object has the ownership of it, and the layout
            won't delete this item.</para>
            <para>If the item inherits both QGraphicsItem and QGraphicsLayoutItem
            (such as QGraphicsWidget does) the item is really part of two ownership
            hierarchies. This property informs what the layout should do with its child
            items when it is destructed. In the case of QGraphicsWidget, it is
            preferred that when the layout is deleted it won't delete its children
            (since they are also part of the graphics item hierarchy).</para>
            <para>By default this value is initialized to false in
            QGraphicsLayoutItem, but it is overridden by QGraphicsLayout to return
            true. This is because QGraphicsLayout is not normally part of the
            QGraphicsItem hierarchy, so the parent layout should delete it. Subclasses
            might override this default behaviour by calling
            setOwnedByLayout(true).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setOwnedByLayout().</para>
            <para></para>
            <para>Sets whether a layout should delete this item in its destructor
            or not. ownership must be true to in order for the layout to delete
            it.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also ownedByLayout().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsLayoutItem.ContentsRect">
            <summary>
            <para>Returns the contents rect in local coordinates.</para>
            <para>The contents rect defines the subrectangle used by an associated
            layout when arranging subitems. This function is a convenience function
            that adjusts the item's geometry() by its contents margins. Note that
            getContentsMargins() is a virtual function that you can reimplement to
            return the item's contents margins.</para>
            <para>See also getContentsMargins() and geometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQGraphicsLayoutItem.IsLayout">
            <summary>
            <para>Returns true if this QGraphicsLayoutItem is a layout (e.g., is
            inherited by an object that arranges other QGraphicsLayoutItem objects);
            otherwise returns false.</para>
            <para>See also QGraphicsLayout.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayoutItem.#ctor(QtWidgets.IQGraphicsLayoutItem,System.Boolean)">
            <summary>
            <para>Constructs the QGraphicsLayoutItem object. parent becomes the
            object's parent. If isLayout is true the item is a layout, otherwise
            isLayout is false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayoutItem.SetSizePolicy(QtWidgets.QSizePolicy.Policy,QtWidgets.QSizePolicy.Policy,QtWidgets.QSizePolicy.ControlType)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function is equivalent to calling
            setSizePolicy(QSizePolicy(hPolicy, vPolicy, controlType)).</para>
            <para>See also sizePolicy() and QWidget::sizePolicy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayoutItem.SetMinimumSize(System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            setMinimumSize(QSizeF(w, h)).</para>
            <para>See also minimumSize(), setMaximumSize(), setPreferredSize(), and
            sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayoutItem.SetPreferredSize(System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            setPreferredSize(QSizeF(w, h)).</para>
            <para>See also preferredSize(), setMaximumSize(), setMinimumSize(), and
            sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayoutItem.SetMaximumSize(System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            setMaximumSize(QSizeF(w, h)).</para>
            <para>See also maximumSize(), setMinimumSize(), setPreferredSize(), and
            sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayoutItem.GetContentsMargins(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>This virtual function provides the left, top, right and bottom
            contents margins for this QGraphicsLayoutItem. The default implementation
            assumes all contents margins are 0. The parameters point to values stored
            in qreals. If any of the pointers is 0, that value will not be
            updated.</para>
            <para>See also QGraphicsWidget::setContentsMargins().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayoutItem.EffectiveSizeHint(QtCore.Qt.SizeHint,QtCore.QSizeF)">
            <summary>
            <para>Returns the effective size hint for this
            QGraphicsLayoutItem.</para>
            <para>which is the size hint in question. constraint is an optional
            argument that defines a special constrain when calculating the effective
            size hint. By default, constraint is QSizeF(-1, -1), which means there is
            no constraint to the size hint.</para>
            <para>If you want to specify the widget's size hint for a given width
            or height, you can provide the fixed dimension in constraint. This is
            useful for widgets that can grow only either vertically or horizontally,
            and need to set either their width or their height to a special
            value.</para>
            <para>For example, a text paragraph item fit into a column width of 200
            may grow vertically. You can pass QSizeF(200, -1) as a constraint to get a
            suitable minimum, preferred and maximum height).</para>
            <para>You can adjust the effective size hint by reimplementing
            sizeHint() in a QGraphicsLayoutItem subclass, or by calling one of the
            following functions: setMinimumSize(), setPreferredSize, or
            setMaximumSize() (or a combination of both).</para>
            <para>This function caches each of the size hints and guarantees that
            sizeHint() will be called only once for each value of which - unless
            constraint is not specified and updateGeometry() has been called.</para>
            <para>See also sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayoutItem.UpdateGeometry">
            <summary>
            <para>This virtual function discards any cached size hint information.
            You should always call this function if you change the return value of the
            sizeHint() function. Subclasses must always call the base implementation
            when reimplementing this function.</para>
            <para>See also effectiveSizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayoutItem.SizeHint(QtCore.Qt.SizeHint,QtCore.QSizeF)">
            <summary>
            <para>This pure virtual function returns the size hint for which of the
            QGraphicsLayoutItem, using the width or height of constraint to constrain
            the output.</para>
            <para>Reimplement this function in a subclass of QGraphicsLayoutItem to
            provide the necessary size hints for your items.</para>
            <para>See also effectiveSizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayoutItem.SizePolicy">
            <summary>
            <para>Returns the current size policy.</para>
            <para>See also setSizePolicy() and QWidget::sizePolicy().</para>
            <para></para>
            <para>Sets the size policy to policy. The size policy describes how the
            item should grow horizontally and vertically when arranged in a
            layout.</para>
            <para>QGraphicsLayoutItem's default size policy is (QSizePolicy::Fixed,
            QSizePolicy::Fixed, QSizePolicy::DefaultType), but it is common for
            subclasses to change the default. For example, QGraphicsWidget defaults to
            (QSizePolicy::Preferred, QSizePolicy::Preferred,
            QSizePolicy::DefaultType).</para>
            <para>See also sizePolicy() and QWidget::sizePolicy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayoutItem.MinimumSize">
            <summary>
            <para>Returns the minimum size.</para>
            <para>See also setMinimumSize(), preferredSize(), maximumSize(),
            Qt::MinimumSize, and sizeHint().</para>
            <para></para>
            <para>Sets the minimum size to size. This property overrides sizeHint()
            for Qt::MinimumSize and ensures that effectiveSizeHint() will never return
            a size smaller than size. In order to unset the minimum size, use an
            invalid size.</para>
            <para>See also minimumSize(), maximumSize(), preferredSize(),
            Qt::MinimumSize, sizeHint(), setMinimumWidth(), and
            setMinimumHeight().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayoutItem.MinimumWidth">
            <summary>
            <para>Returns the minimum width.</para>
            <para>See also setMinimumWidth(), setMinimumSize(), and
            minimumSize().</para>
            <para></para>
            <para>Sets the minimum width to width.</para>
            <para>See also minimumWidth(), setMinimumSize(), and
            minimumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayoutItem.MinimumHeight">
            <summary>
            <para>Returns the minimum height.</para>
            <para>See also setMinimumHeight(), setMinimumSize(), and
            minimumSize().</para>
            <para></para>
            <para>Sets the minimum height to height.</para>
            <para>See also minimumHeight(), setMinimumSize(), and
            minimumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayoutItem.PreferredSize">
            <summary>
            <para>Returns the preferred size.</para>
            <para>See also setPreferredSize(), minimumSize(), maximumSize(),
            Qt::PreferredSize, and sizeHint().</para>
            <para></para>
            <para>Sets the preferred size to size. This property overrides
            sizeHint() for Qt::PreferredSize and provides the default value for
            effectiveSizeHint(). In order to unset the preferred size, use an invalid
            size.</para>
            <para>See also preferredSize(), minimumSize(), maximumSize(),
            Qt::PreferredSize, and sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayoutItem.PreferredWidth">
            <summary>
            <para>Returns the preferred width.</para>
            <para>See also setPreferredWidth(), setPreferredSize(), and
            preferredSize().</para>
            <para></para>
            <para>Sets the preferred width to width.</para>
            <para>See also preferredWidth(), preferredHeight(), setPreferredSize(),
            and preferredSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayoutItem.PreferredHeight">
            <summary>
            <para>Returns the preferred height.</para>
            <para>See also setPreferredHeight(), setPreferredSize(), and
            preferredSize().</para>
            <para></para>
            <para>Sets the preferred height to height.</para>
            <para>See also preferredHeight(), preferredWidth(), setPreferredSize(),
            and preferredSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayoutItem.MaximumSize">
            <summary>
            <para>Returns the maximum size.</para>
            <para>See also setMaximumSize(), minimumSize(), preferredSize(),
            Qt::MaximumSize, and sizeHint().</para>
            <para></para>
            <para>Sets the maximum size to size. This property overrides sizeHint()
            for Qt::MaximumSize and ensures that effectiveSizeHint() will never return
            a size larger than size. In order to unset the maximum size, use an invalid
            size.</para>
            <para>See also maximumSize(), minimumSize(), preferredSize(),
            Qt::MaximumSize, and sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayoutItem.MaximumWidth">
            <summary>
            <para>Returns the maximum width.</para>
            <para>See also setMaximumWidth(), setMaximumSize(), and
            maximumSize().</para>
            <para></para>
            <para>Sets the maximum width to width.</para>
            <para>See also maximumWidth(), setMaximumSize(), and
            maximumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayoutItem.MaximumHeight">
            <summary>
            <para>Returns the maximum height.</para>
            <para>See also setMaximumHeight(), setMaximumSize(), and
            maximumSize().</para>
            <para></para>
            <para>Sets the maximum height to height.</para>
            <para>See also maximumHeight(), setMaximumSize(), and
            maximumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayoutItem.Geometry">
            <summary>
            <para>Returns the item's geometry (e.g., position and size) as a
            QRectF. This function is equivalent to QRectF(pos(), size()).</para>
            <para>See also setGeometry().</para>
            <para></para>
            <para>This virtual function sets the geometry of the
            QGraphicsLayoutItem to rect, which is in parent coordinates (e.g., the
            top-left corner of rect is equivalent to the item's position in parent
            coordinates).</para>
            <para>You must reimplement this function in a subclass of
            QGraphicsLayoutItem to receive geometry updates. The layout will call this
            function when it does a rearrangement.</para>
            <para>If rect is outside of the bounds of minimumSize and maximumSize,
            it will be adjusted to its closest size so that it is within the legal
            bounds.</para>
            <para>See also geometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayoutItem.ParentLayoutItem">
            <summary>
            <para>Returns the parent of this QGraphicsLayoutItem, or 0 if there is
            no parent, or if the parent does not inherit from QGraphicsLayoutItem
            (QGraphicsLayoutItem is often used through multiple inheritance with
            QObject-derived classes).</para>
            <para>See also setParentLayoutItem().</para>
            <para></para>
            <para>Sets the parent of this QGraphicsLayoutItem to parent.</para>
            <para>See also parentLayoutItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayoutItem.GraphicsItem">
            <summary>
            <para>Returns the QGraphicsItem that this layout item represents. For
            QGraphicsWidget it will return itself. For custom items it can return an
            aggregated value.</para>
            <para>See also setGraphicsItem().</para>
            <para></para>
            <para>If the QGraphicsLayoutItem represents a QGraphicsItem, and it
            wants to take advantage of the automatic reparenting capabilities of
            QGraphicsLayout it should set this value. Note that if you delete item and
            not delete the layout item, you are responsible of calling
            setGraphicsItem(0) in order to avoid having a dangling pointer.</para>
            <para>See also graphicsItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayoutItem.OwnedByLayout">
            <summary>
            <para>Returns whether a layout should delete this item in its
            destructor. If its true, then the layout will delete it. If its false, then
            it is assumed that another object has the ownership of it, and the layout
            won't delete this item.</para>
            <para>If the item inherits both QGraphicsItem and QGraphicsLayoutItem
            (such as QGraphicsWidget does) the item is really part of two ownership
            hierarchies. This property informs what the layout should do with its child
            items when it is destructed. In the case of QGraphicsWidget, it is
            preferred that when the layout is deleted it won't delete its children
            (since they are also part of the graphics item hierarchy).</para>
            <para>By default this value is initialized to false in
            QGraphicsLayoutItem, but it is overridden by QGraphicsLayout to return
            true. This is because QGraphicsLayout is not normally part of the
            QGraphicsItem hierarchy, so the parent layout should delete it. Subclasses
            might override this default behaviour by calling
            setOwnedByLayout(true).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setOwnedByLayout().</para>
            <para></para>
            <para>Sets whether a layout should delete this item in its destructor
            or not. ownership must be true to in order for the layout to delete
            it.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also ownedByLayout().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayoutItem.ContentsRect">
            <summary>
            <para>Returns the contents rect in local coordinates.</para>
            <para>The contents rect defines the subrectangle used by an associated
            layout when arranging subitems. This function is a convenience function
            that adjusts the item's geometry() by its contents margins. Note that
            getContentsMargins() is a virtual function that you can reimplement to
            return the item's contents margins.</para>
            <para>See also getContentsMargins() and geometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayoutItem.IsLayout">
            <summary>
            <para>Returns true if this QGraphicsLayoutItem is a layout (e.g., is
            inherited by an object that arranges other QGraphicsLayoutItem objects);
            otherwise returns false.</para>
            <para>See also QGraphicsLayout.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsLayout">
            <summary>
            <para>The QGraphicsLayout class provides the base class for all layouts
            in Graphics View.</para>
            </summary>
            <remarks>
            <para>QGraphicsLayout is an abstract class that defines a virtual API
            for arranging QGraphicsWidget children and other QGraphicsLayoutItem
            objects for a QGraphicsWidget. QGraphicsWidget assigns responsibility to a
            QGraphicsLayout through QGraphicsWidget::setLayout(). As the widget is
            resized, the layout will automatically arrange the widget's children.
            QGraphicsLayout inherits QGraphicsLayoutItem, so, it can be managed by any
            layout, including its own subclasses.</para>
            <para></para>
            <para>Writing a Custom Layout</para>
            <para>You can use QGraphicsLayout as a base to write your own custom
            layout (e.g., a flowlayout), but it is more common to use one of its
            subclasses instead - QGraphicsLinearLayout or QGraphicsGridLayout. When
            creating a custom layout, the following functions must be reimplemented as
            a bare minimum:</para>
            <para></para>
            <para> FunctionDescription</para>
            <para>QGraphicsLayoutItem::setGeometry()	Notifies you when the geometry
            of the layout is set. You can store the geometry in your own layout class
            in a reimplementation of this function.</para>
            <para>QGraphicsLayoutItem::sizeHint()	Returns the layout's size
            hints.</para>
            <para>QGraphicsLayout::count()	Returns the number of items in your
            layout.</para>
            <para>QGraphicsLayout::itemAt()	Returns a pointer to an item in your
            layout.</para>
            <para>QGraphicsLayout::removeAt()	Removes an item from your layout
            without destroying it.</para>
            <para></para>
            <para>For more details on how to implement each function, refer to the
            individual function documentation.</para>
            <para>Each layout defines its own API for arranging widgets and layout
            items. For example, with a grid layout, you require a row and a column
            index with optional row and column spans, alignment, spacing, and more. A
            linear layout, however, requires a single row or column index to position
            its items. For a grid layout, the order of insertion does not affect the
            layout in any way, but for a linear layout, the order is essential. When
            writing your own layout subclass, you are free to choose the API that best
            suits your layout.</para>
            <para>QGraphicsLayout provides the addChildLayoutItem() convenience
            function to add layout items to a custom layout. The function will
            automatically reparent graphics items, if required.</para>
            <para></para>
            <para>Activating the Layout</para>
            <para>When the layout's geometry changes, QGraphicsLayout immediately
            rearranges all of its managed items by calling setGeometry() on each item.
            This rearrangement is called activating the layout.</para>
            <para>QGraphicsLayout updates its own geometry to match the
            contentsRect() of the QGraphicsLayoutItem it is managing. Thus, it will
            automatically rearrange all its items when the widget is resized.
            QGraphicsLayout caches the sizes of all its managed items to avoid calling
            setGeometry() too often.</para>
            <para>Note: A QGraphicsLayout will have the same geometry as the
            contentsRect() of the widget (not the layout) it is assigned to.</para>
            <para></para>
            <para>Activating the Layout Implicitly</para>
            <para>The layout can be activated implicitly using one of two ways: by
            calling activate() or by calling invalidate(). Calling activate() activates
            the layout immediately. In contrast, calling invalidate() is delayed, as it
            posts a LayoutRequest event to the managed widget. Due to event
            compression, the activate() will only be called once after control has
            returned to the event loop. This is referred to as invalidating the layout.
            Invalidating the layout also invalidates any cached information. Also, the
            invalidate() function is a virtual function. So, you can invalidate your
            own cache in a subclass of QGraphicsLayout by reimplementing this
            function.</para>
            <para></para>
            <para>Event Handling</para>
            <para>QGraphicsLayout listens to events for the widget it manages
            through the virtual widgetEvent() event handler. When the layout is
            assigned to a widget, all events delivered to the widget are first
            processed by widgetEvent(). This allows the layout to be aware of any
            relevant state changes on the widget such as visibility changes or layout
            direction changes.</para>
            <para></para>
            <para>Margin Handling</para>
            <para>The margins of a QGraphicsLayout can be modified by
            reimplementing setContentsMargins() and getContentsMargins().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsLayout.#ctor(QtWidgets.IQGraphicsLayoutItem)">
            <summary>
            <para>Contructs a QGraphicsLayout object.</para>
            <para>parent is passed to QGraphicsLayoutItem's constructor and the
            QGraphicsLayoutItem's isLayout argument is set to true.</para>
            <para>If parent is a QGraphicsWidget the layout will be installed on
            that widget. (Note that installing a layout will delete the old one
            installed.)</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayout.SetContentsMargins(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the contents margins to left, top, right and bottom. The
            default contents margins for toplevel layouts are style dependent (by
            querying the pixelMetric for QStyle::PM_LayoutLeftMargin,
            QStyle::PM_LayoutTopMargin, QStyle::PM_LayoutRightMargin and
            QStyle::PM_LayoutBottomMargin).</para>
            <para>For sublayouts the default margins are 0.</para>
            <para>Changing the contents margins automatically invalidates the
            layout.</para>
            <para>See also invalidate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayout.GetContentsMargins(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Reimplemented from
            QGraphicsLayoutItem::getContentsMargins().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayout.Activate">
            <summary>
            <para>Activates the layout, causing all items in the layout to be
            immediately rearranged. This function is based on calling count() and
            itemAt(), and then calling setGeometry() on all items sequentially. When
            activated, the layout will adjust its geometry to its parent's
            contentsRect(). The parent will then invalidate any layout of its
            own.</para>
            <para>If called in sequence or recursively, e.g., by one of the
            arranged items in response to being resized, this function will do
            nothing.</para>
            <para>Note that the layout is free to use geometry caching to optimize
            this process. To forcefully invalidate any such cache, you can call
            invalidate() before calling activate().</para>
            <para>See also invalidate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayout.Invalidate">
            <summary>
            <para>Clears any cached geometry and size hint information in the
            layout, and posts a LayoutRequest event to the managed parent
            QGraphicsLayoutItem.</para>
            <para>See also activate() and setGeometry().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayout.UpdateGeometry">
            <summary>
            <para>Reimplemented from QGraphicsLayoutItem::updateGeometry().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayout.OnWidgetEvent(QtCore.QEvent)">
            <summary>
            <para>This virtual event handler receives all events for the managed
            widget. QGraphicsLayout uses this event handler to listen for layout
            related events such as geometry changes, layout changes or layout direction
            changes.</para>
            <para>e is a pointer to the event.</para>
            <para>You can reimplement this event handler to track similar events
            for your own custom layout.</para>
            <para>See also QGraphicsWidget::event() and
            QGraphicsItem::sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayout.ItemAt(System.Int32)">
            <summary>
            <para>This pure virtual function must be reimplemented in a subclass of
            QGraphicsLayout to return a pointer to the item at index i. The
            reimplementation can assume that i is valid (i.e., it respects the value of
            count()). Together with count(), it is provided as a means of iterating
            over all items in a layout.</para>
            <para>The subclass is free to decide how to store the items, and the
            visual arrangement does not have to be reflected through this
            function.</para>
            <para>See also count() and removeAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayout.RemoveAt(System.Int32)">
            <summary>
            <para>This pure virtual function must be reimplemented in a subclass of
            QGraphicsLayout to remove the item at index. The reimplementation can
            assume that index is valid (i.e., it respects the value of count()).</para>
            <para>The implementation must ensure that the parentLayoutItem() of the
            removed item does not point to this layout, since the item is considered to
            be removed from the layout hierarchy.</para>
            <para>If the layout is to be reused between applications, we recommend
            that the layout deletes the item, but the graphics view framework does not
            depend on this.</para>
            <para>The subclass is free to decide how to store the items.</para>
            <para>See also itemAt() and count().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLayout.AddChildLayoutItem(QtWidgets.IQGraphicsLayoutItem)">
            <summary>
            <para>This function is a convenience function provided for custom
            layouts, and will go through all items in the layout and reparent their
            graphics items to the closest QGraphicsWidget ancestor of the
            layout.</para>
            <para>If layoutItem is already in a different layout, it will be
            removed from that layout.</para>
            <para>If custom layouts want special behaviour they can ignore to use
            this function, and implement their own behaviour.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also graphicsItem().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsLayout.WidgetEvent">
            <summary>
            <para>This virtual event handler receives all events for the managed widget. QGraphicsLayout uses this event handler to listen for layout related events such as geometry changes, layout changes or layout direction changes.</para>
            <para>e is a pointer to the event.</para>
            <para>You can reimplement this event handler to track similar events for your own custom layout.</para>
            <para>See also QGraphicsWidget::event() and QGraphicsItem::sceneEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayout.IsActivated">
            <summary>
            <para>Returns true if the layout is currently being activated;
            otherwise, returns false. If the layout is being activated, this means that
            it is currently in the process of rearranging its items (i.e., the
            activate() function has been called, and has not yet returned).</para>
            <para>See also activate() and invalidate().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLayout.Count">
            <summary>
            <para>This pure virtual function must be reimplemented in a subclass of
            QGraphicsLayout to return the number of items in the layout.</para>
            <para>The subclass is free to decide how to store the items.</para>
            <para>See also itemAt() and removeAt().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsAnchor">
            <summary>
            <para>The QGraphicsAnchor class represents an anchor between two items
            in a QGraphicsAnchorLayout.</para>
            </summary>
            <remarks>
            <para>The graphics anchor provides an API that enables you to query and
            manipulate the properties an anchor has. When an anchor is added to the
            layout with QGraphicsAnchorLayout::addAnchor(), a QGraphicsAnchor instance
            is returned where the properties are initialized to their default values.
            The properties can then be further changed, and they will be picked up the
            next time the layout is activated.</para>
            <para></para>
            <para>See also QGraphicsAnchorLayout::anchor().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsAnchor.UnsetSpacing">
            <summary>
            <para>This property holds the preferred space between items in the
            QGraphicsAnchorLayout.</para>
            <para>Depending on the anchor type, the default spacing is either 0 or
            a value returned from the style.</para>
            <para>See also QGraphicsAnchorLayout::addAnchor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsAnchor.Spacing">
            <summary>
            <para>This property holds the preferred space between items in the
            QGraphicsAnchorLayout.</para>
            <para>Depending on the anchor type, the default spacing is either 0 or
            a value returned from the style.</para>
            <para>See also QGraphicsAnchorLayout::addAnchor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsAnchor.SizePolicy">
            <summary>
            <para>This property holds the size policy for the
            QGraphicsAnchor.</para>
            <para>By setting the size policy on an anchor you can configure how the
            anchor can resize itself from its preferred spacing. For instance, if the
            anchor has the size policy QSizePolicy::Minimum, the spacing is the minimum
            size of the anchor. However, its size can grow up to the anchors maximum
            size. If the default size policy is QSizePolicy::Fixed, the anchor can
            neither grow or shrink, which means that the only size the anchor can have
            is the spacing. QSizePolicy::Fixed is the default size policy.
            QGraphicsAnchor always has a minimum spacing of 0 and a very large maximum
            spacing.</para>
            <para>See also QGraphicsAnchor::spacing.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsAnchorLayout">
            <summary>
            <para>The QGraphicsAnchorLayout class provides a layout where one can
            anchor widgets together in Graphics View.</para>
            </summary>
            <remarks>
            <para>The anchor layout allows developers to specify how widgets should
            be placed relative to each other, and to the layout itself. The
            specification is made by adding anchors to the layout by calling
            addAnchor(), addAnchors() or addCornerAnchors().</para>
            <para>Existing anchors in the layout can be accessed with the anchor()
            function. Items that are anchored are automatically added to the layout,
            and if items are removed, all their anchors will be automatically
            removed.</para>
            <para></para>
            <para></para>
            <para>Anchors are always set up between edges of an item, where the
            &quot;center&quot; is also considered to be an edge. Consider the following
            example:</para>
            <para>layout-&gt;addAnchor(b, Qt::AnchorLeft, a,
            Qt::AnchorRight);</para>
            <para>layout-&gt;addAnchor(b, Qt::AnchorTop, a,
            Qt::AnchorBottom);</para>
            <para>Here, the right edge of item a is anchored to the left edge of
            item b and the bottom edge of item a is anchored to the top edge of item b,
            with the result that item b will be placed diagonally to the right and
            below item b.</para>
            <para>The addCornerAnchors() function provides a simpler way of
            anchoring the corners of two widgets than the two individual calls to
            addAnchor() shown in the code above. Here, we see how a widget can be
            anchored to the top-left corner of the enclosing layout:</para>
            <para>layout-&gt;addCornerAnchors(a, Qt::TopLeftCorner, layout,
            Qt::TopLeftCorner);</para>
            <para>In cases where anchors are used to match the widths or heights of
            widgets, it is convenient to use the addAnchors() function. As with the
            other functions for specifying anchors, it can also be used to anchor a
            widget to a layout.</para>
            <para></para>
            <para>Size Hints and Size Policies in an Anchor Layout</para>
            <para>QGraphicsAnchorLayout respects each item's size hints and size
            policies. Note that there are some properties of QSizePolicy that are not
            respected.</para>
            <para></para>
            <para>Spacing within an Anchor Layout</para>
            <para>The layout may distribute some space between the items. If the
            spacing has not been explicitly specified, the actual amount of space will
            usually be 0.</para>
            <para>However, if the first edge is the opposite of the second edge
            (e.g., the right edge of the first widget is anchored to the left edge of
            the second widget), the size of the anchor will be queried from the style
            through a pixel metric: PM_LayoutHorizontalSpacing for horizontal anchors
            and PM_LayoutVerticalSpacing for vertical anchors.</para>
            <para>If the spacing is negative, the items will overlap to some
            extent.</para>
            <para></para>
            <para>Known Issues</para>
            <para>There are some features that QGraphicsAnchorLayout currently does
            not support. This might change in the future, so avoid using these features
            if you want to avoid any future regressions in behaviour:</para>
            <para></para>
            <para>Stretch factors are not respected.</para>
            <para>QSizePolicy::ExpandFlag is not respected.</para>
            <para>Height for width is not respected.</para>
            <para></para>
            <para></para>
            <para>See also QGraphicsLinearLayout, QGraphicsGridLayout, and
            QGraphicsLayout.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsAnchorLayout.#ctor(QtWidgets.IQGraphicsLayoutItem)">
            <summary>
            <para>Constructs a QGraphicsAnchorLayout instance. parent is passed to
            QGraphicsLayout's constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsAnchorLayout.AddAnchor(QtWidgets.IQGraphicsLayoutItem,QtCore.Qt.AnchorPoint,QtWidgets.IQGraphicsLayoutItem,QtCore.Qt.AnchorPoint)">
            <summary>
            <para>Creates an anchor between the edge firstEdge of item firstItem
            and the edge secondEdge of item secondItem. The spacing of the anchor is
            picked up from the style. Anchors between a layout edge and an item edge
            will have a size of 0. If there is already an anchor between the edges, the
            new anchor will replace the old one.</para>
            <para>firstItem and secondItem are automatically added to the layout if
            they are not part of the layout. This means that count() can increase by up
            to 2.</para>
            <para>The spacing an anchor will get depends on the type of anchor. For
            instance, anchors from the Right edge of one item to the Left edge of
            another (or vice versa) will use the default horizontal spacing. The same
            behaviour applies to Bottom to Top anchors, (but they will use the default
            vertical spacing). For all other anchor combinations, the spacing will be
            0. All anchoring functions will follow this rule.</para>
            <para>The spacing can also be set manually by using
            QGraphicsAnchor::setSpacing() method.</para>
            <para>Calling this function where firstItem or secondItem are ancestors
            of the layout have undefined behaviour.</para>
            <para>See also addAnchors() and addCornerAnchors().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsAnchorLayout.Anchor(QtWidgets.IQGraphicsLayoutItem,QtCore.Qt.AnchorPoint,QtWidgets.IQGraphicsLayoutItem,QtCore.Qt.AnchorPoint)">
            <summary>
            <para>Returns the anchor between the anchor points defined by firstItem
            and firstEdge and secondItem and secondEdge. If there is no such anchor,
            the function will return 0.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsAnchorLayout.AddCornerAnchors(QtWidgets.IQGraphicsLayoutItem,QtCore.Qt.Corner,QtWidgets.IQGraphicsLayoutItem,QtCore.Qt.Corner)">
            <summary>
            <para>Creates two anchors between firstItem and secondItem specified by
            the corners, firstCorner and secondCorner, where one is for the horizontal
            edge and another one for the vertical edge.</para>
            <para>This is a convenience function, since anchoring corners can be
            expressed as anchoring two edges. For instance:</para>
            <para>layout-&gt;addAnchor(a, Qt::AnchorTop, layout,
            Qt::AnchorTop);</para>
            <para>layout-&gt;addAnchor(a, Qt::AnchorLeft, layout,
            Qt::AnchorLeft);</para>
            <para>This can also be achieved with the following line of code:</para>
            <para>layout-&gt;addCornerAnchors(a, Qt::TopLeftCorner, layout,
            Qt::TopLeftCorner);</para>
            <para>If there is already an anchor between the edge pairs, it will be
            replaced by the anchors that this function specifies.</para>
            <para>firstItem and secondItem are automatically added to the layout if
            they are not part of the layout. This means that count() can increase by up
            to 2.</para>
            <para>See also addAnchor() and addAnchors().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsAnchorLayout.AddAnchors(QtWidgets.IQGraphicsLayoutItem,QtWidgets.IQGraphicsLayoutItem,QtCore.Qt.Orientation)">
            <summary>
            <para>Anchors two or four edges of firstItem with the corresponding
            edges of secondItem, so that firstItem has the same size as secondItem in
            the dimensions specified by orientations.</para>
            <para>For example, the following example anchors the left and right
            edges of two items to match their widths:</para>
            <para>layout-&gt;addAnchor(b, Qt::AnchorLeft, c,
            Qt::AnchorLeft);</para>
            <para>layout-&gt;addAnchor(b, Qt::AnchorRight, c,
            Qt::AnchorRight);</para>
            <para>This can also be achieved using the following line of
            code:</para>
            <para>layout-&gt;addAnchors(b, c, Qt::Horizontal);</para>
            <para>See also addAnchor() and addCornerAnchors().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsAnchorLayout.SetSpacing(System.Double)">
            <summary>
            <para>Sets the default horizontal and the default vertical spacing for
            the anchor layout to spacing.</para>
            <para>If an item is anchored with no spacing associated with the
            anchor, it will use the default spacing.</para>
            <para>QGraphicsAnchorLayout does not support negative spacings. Setting
            a negative value will unset the previous spacing and make the layout use
            the spacing provided by the current widget style.</para>
            <para>See also setHorizontalSpacing() and setVerticalSpacing().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsAnchorLayout.RemoveAt(System.Int32)">
            <summary>
            <para>Reimplemented from QGraphicsLayout::removeAt().</para>
            <para>Removes the layout item at index without destroying it. Ownership
            of the item is transferred to the caller.</para>
            <para>Removing an item will also remove any of the anchors associated
            with it.</para>
            <para>See also itemAt() and count().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsAnchorLayout.ItemAt(System.Int32)">
            <summary>
            <para>Reimplemented from QGraphicsLayout::itemAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsAnchorLayout.Invalidate">
            <summary>
            <para>Reimplemented from QGraphicsLayout::invalidate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsAnchorLayout.SizeHint(QtCore.Qt.SizeHint,QtCore.QSizeF)">
            <summary>
            <para>Reimplemented from QGraphicsLayoutItem::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsAnchorLayout.HorizontalSpacing">
            <summary>
            <para>Returns the default horizontal spacing for the anchor
            layout.</para>
            <para>See also verticalSpacing() and setHorizontalSpacing().</para>
            <para></para>
            <para>Sets the default horizontal spacing for the anchor layout to
            spacing.</para>
            <para>See also horizontalSpacing(), setVerticalSpacing(), and
            setSpacing().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsAnchorLayout.VerticalSpacing">
            <summary>
            <para>Returns the default vertical spacing for the anchor
            layout.</para>
            <para>See also horizontalSpacing() and setVerticalSpacing().</para>
            <para></para>
            <para>Sets the default vertical spacing for the anchor layout to
            spacing.</para>
            <para>See also verticalSpacing(), setHorizontalSpacing(), and
            setSpacing().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsAnchorLayout.Geometry">
            <summary>
            <para>Returns the item's geometry (e.g., position and size) as a
            QRectF. This function is equivalent to QRectF(pos(), size()).</para>
            <para>See also setGeometry().</para>
            <para></para>
            <para>This virtual function sets the geometry of the
            QGraphicsLayoutItem to rect, which is in parent coordinates (e.g., the
            top-left corner of rect is equivalent to the item's position in parent
            coordinates).</para>
            <para>You must reimplement this function in a subclass of
            QGraphicsLayoutItem to receive geometry updates. The layout will call this
            function when it does a rearrangement.</para>
            <para>If rect is outside of the bounds of minimumSize and maximumSize,
            it will be adjusted to its closest size so that it is within the legal
            bounds.</para>
            <para>See also geometry().</para>
            <para></para>
            <para>Reimplemented from QGraphicsLayoutItem::setGeometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsAnchorLayout.Count">
            <summary>
            <para>Reimplemented from QGraphicsLayout::count().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsGridLayout">
            <summary>
            <para>The QGraphicsGridLayout class provides a grid layout for managing
            widgets in Graphics View.</para>
            </summary>
            <remarks>
            <para>The most common way to use QGraphicsGridLayout is to construct an
            object on the heap with no parent, add widgets and layouts by calling
            addItem(), and finally assign the layout to a widget by calling
            QGraphicsWidget::setLayout(). QGraphicsGridLayout automatically computes
            the dimensions of the grid as you add items.</para>
            <para>QGraphicsScene scene;</para>
            <para>QGraphicsWidget *textEdit = scene.addWidget(new
            QTextEdit);</para>
            <para>QGraphicsWidget *pushButton = scene.addWidget(new
            QPushButton);</para>
            <para></para>
            <para>QGraphicsGridLayout *layout = new QGraphicsGridLayout;</para>
            <para>layout-&gt;addItem(textEdit, 0, 0);</para>
            <para>layout-&gt;addItem(pushButton, 0, 1);</para>
            <para></para>
            <para>QGraphicsWidget *form = new QGraphicsWidget;</para>
            <para>form-&gt;setLayout(layout);</para>
            <para>scene.addItem(form);</para>
            <para>The layout takes ownership of the items. In some cases when the
            layout item also inherits from QGraphicsItem (such as QGraphicsWidget)
            there will be a ambiguity in ownership because the layout item belongs to
            two ownership hierarchies. See the documentation of
            QGraphicsLayoutItem::setOwnedByLayout() how to handle this. You can access
            each item in the layout by calling count() and itemAt(). Calling removeAt()
            will remove an item from the layout, without destroying it.</para>
            <para></para>
            <para>Size Hints and Size Policies in QGraphicsGridLayout</para>
            <para>QGraphicsGridLayout respects each item's size hints and size
            policies, and when a cell in the grid has more space than the items can
            fill, each item is arranged according to the layout's alignment for that
            item. You can set an alignment for each item by calling setAlignment(), and
            check the alignment for any item by calling alignment(). You can also set
            the alignment for an entire row or column by calling setRowAlignment() and
            setColumnAlignment() respectively. By default, items are aligned to the top
            left.</para>
            <para></para>
            <para>See also QGraphicsLinearLayout and QGraphicsWidget.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.#ctor(QtWidgets.IQGraphicsLayoutItem)">
            <summary>
            <para>Constructs a QGraphicsGridLayout instance. parent is passed to
            QGraphicsLayout's constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.AddItem(QtWidgets.IQGraphicsLayoutItem,System.Int32,System.Int32,System.Int32,System.Int32,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>Adds item to the grid on row and column. You can specify a
            rowSpan and columnSpan and an optional alignment.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.AddItem(QtWidgets.IQGraphicsLayoutItem,System.Int32,System.Int32,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>Adds item to the grid on row and column. You can specify an
            optional alignment for item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SetSpacing(System.Double)">
            <summary>
            <para>Sets the grid layout's default spacing, both vertical and
            horizontal, to spacing.</para>
            <para>See also rowSpacing() and columnSpacing().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SetRowSpacing(System.Int32,System.Double)">
            <summary>
            <para>Sets the spacing for row to spacing.</para>
            <para>See also rowSpacing().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.RowSpacing(System.Int32)">
            <summary>
            <para>Returns the row spacing for row.</para>
            <para>See also setRowSpacing().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SetColumnSpacing(System.Int32,System.Double)">
            <summary>
            <para>Sets the spacing for column to spacing.</para>
            <para>See also columnSpacing().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.ColumnSpacing(System.Int32)">
            <summary>
            <para>Returns the column spacing for column.</para>
            <para>See also setColumnSpacing().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SetRowStretchFactor(System.Int32,System.Int32)">
            <summary>
            <para>Sets the stretch factor for row to stretch.</para>
            <para>See also rowStretchFactor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.RowStretchFactor(System.Int32)">
            <summary>
            <para>Returns the stretch factor for row.</para>
            <para>See also setRowStretchFactor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SetColumnStretchFactor(System.Int32,System.Int32)">
            <summary>
            <para>Sets the stretch factor for column to stretch.</para>
            <para>See also columnStretchFactor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.ColumnStretchFactor(System.Int32)">
            <summary>
            <para>Returns the stretch factor for column.</para>
            <para>See also setColumnStretchFactor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SetRowMinimumHeight(System.Int32,System.Double)">
            <summary>
            <para>Sets the minimum height for row, row, to height.</para>
            <para>See also rowMinimumHeight().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.RowMinimumHeight(System.Int32)">
            <summary>
            <para>Returns the minimum height for row, row.</para>
            <para>See also setRowMinimumHeight().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SetRowPreferredHeight(System.Int32,System.Double)">
            <summary>
            <para>Sets the preferred height for row, row, to height.</para>
            <para>See also rowPreferredHeight().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.RowPreferredHeight(System.Int32)">
            <summary>
            <para>Returns the preferred height for row, row.</para>
            <para>See also setRowPreferredHeight().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SetRowMaximumHeight(System.Int32,System.Double)">
            <summary>
            <para>Sets the maximum height for row, row, to height.</para>
            <para>See also rowMaximumHeight().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.RowMaximumHeight(System.Int32)">
            <summary>
            <para>Returns the maximum height for row, row.</para>
            <para>See also setRowMaximumHeight().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SetRowFixedHeight(System.Int32,System.Double)">
            <summary>
            <para>Sets the fixed height for row, row, to height.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SetColumnMinimumWidth(System.Int32,System.Double)">
            <summary>
            <para>Sets the minimum width for column to width.</para>
            <para>See also columnMinimumWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.ColumnMinimumWidth(System.Int32)">
            <summary>
            <para>Returns the minimum width for column.</para>
            <para>See also setColumnMinimumWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SetColumnPreferredWidth(System.Int32,System.Double)">
            <summary>
            <para>Sets the preferred width for column to width.</para>
            <para>See also columnPreferredWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.ColumnPreferredWidth(System.Int32)">
            <summary>
            <para>Returns the preferred width for column.</para>
            <para>See also setColumnPreferredWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SetColumnMaximumWidth(System.Int32,System.Double)">
            <summary>
            <para>Sets the maximum width of column to width.</para>
            <para>See also columnMaximumWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.ColumnMaximumWidth(System.Int32)">
            <summary>
            <para>Returns the maximum width for column.</para>
            <para>See also setColumnMaximumWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SetColumnFixedWidth(System.Int32,System.Double)">
            <summary>
            <para>Sets the fixed width of column to width.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SetRowAlignment(System.Int32,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>Sets the alignment of row to alignment.</para>
            <para>See also rowAlignment().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.RowAlignment(System.Int32)">
            <summary>
            <para>Returns the alignment of row.</para>
            <para>See also setRowAlignment().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SetColumnAlignment(System.Int32,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>Sets the alignment for column to alignment.</para>
            <para>See also columnAlignment().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.ColumnAlignment(System.Int32)">
            <summary>
            <para>Returns the alignment for column.</para>
            <para>See also setColumnAlignment().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SetAlignment(QtWidgets.IQGraphicsLayoutItem,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>Sets the alignment for item to alignment.</para>
            <para>See also alignment().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.Alignment(QtWidgets.IQGraphicsLayoutItem)">
            <summary>
            <para>Returns the alignment for item.</para>
            <para>See also setAlignment().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.ItemAt(System.Int32,System.Int32)">
            <summary>
            <para>Returns a pointer to the layout item at (row, column).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.ItemAt(System.Int32)">
            <summary>
            <para>Reimplemented from QGraphicsLayout::itemAt().</para>
            <para>Returns the layout item at index, or 0 if there is no layout item
            at this index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.RemoveAt(System.Int32)">
            <summary>
            <para>Reimplemented from QGraphicsLayout::removeAt().</para>
            <para>Removes the layout item at index without destroying it. Ownership
            of the item is transferred to the caller.</para>
            <para>See also addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.RemoveItem(QtWidgets.IQGraphicsLayoutItem)">
            <summary>
            <para>Removes the layout item item without destroying it. Ownership of
            the item is transferred to the caller.</para>
            <para>See also addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.Invalidate">
            <summary>
            <para>Reimplemented from QGraphicsLayout::invalidate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsGridLayout.SizeHint(QtCore.Qt.SizeHint,QtCore.QSizeF)">
            <summary>
            <para>Reimplemented from QGraphicsLayoutItem::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsGridLayout.HorizontalSpacing">
            <summary>
            <para>Returns the default horizontal spacing for the grid
            layout.</para>
            <para>See also setHorizontalSpacing().</para>
            <para></para>
            <para>Sets the default horizontal spacing for the grid layout to
            spacing.</para>
            <para>See also horizontalSpacing().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsGridLayout.VerticalSpacing">
            <summary>
            <para>Returns the default vertical spacing for the grid layout.</para>
            <para>See also setVerticalSpacing().</para>
            <para></para>
            <para>Sets the default vertical spacing for the grid layout to
            spacing.</para>
            <para>See also verticalSpacing().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsGridLayout.Geometry">
            <summary>
            <para>Returns the item's geometry (e.g., position and size) as a
            QRectF. This function is equivalent to QRectF(pos(), size()).</para>
            <para>See also setGeometry().</para>
            <para></para>
            <para>This virtual function sets the geometry of the
            QGraphicsLayoutItem to rect, which is in parent coordinates (e.g., the
            top-left corner of rect is equivalent to the item's position in parent
            coordinates).</para>
            <para>You must reimplement this function in a subclass of
            QGraphicsLayoutItem to receive geometry updates. The layout will call this
            function when it does a rearrangement.</para>
            <para>If rect is outside of the bounds of minimumSize and maximumSize,
            it will be adjusted to its closest size so that it is within the legal
            bounds.</para>
            <para>See also geometry().</para>
            <para></para>
            <para>Reimplemented from QGraphicsLayoutItem::setGeometry().</para>
            <para>Sets the bounding geometry of the grid layout to rect.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsGridLayout.Count">
            <summary>
            <para>Reimplemented from QGraphicsLayout::count().</para>
            <para>Returns the number of layout items in this grid layout.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsGridLayout.RowCount">
            <summary>
            <para>Returns the number of rows in the grid layout. This is always one
            more than the index of the last row that is occupied by a layout item
            (empty rows are counted except for those at the end).</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsGridLayout.ColumnCount">
            <summary>
            <para>Returns the number of columns in the grid layout. This is always
            one more than the index of the last column that is occupied by a layout
            item (empty columns are counted except for those at the end).</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsItemAnimation">
            <summary>
            <para>The QGraphicsItemAnimation class provides simple animation
            support for QGraphicsItem.</para>
            </summary>
            <remarks>
            <para>The QGraphicsItemAnimation class animates a QGraphicsItem. You
            can schedule changes to the item's transformation matrix at specified
            steps. The QGraphicsItemAnimation class has a current step value. When this
            value changes the transformations scheduled at that step are performed. The
            current step of the animation is set with the setStep() function.</para>
            <para>QGraphicsItemAnimation will do a simple linear interpolation
            between the nearest adjacent scheduled changes to calculate the matrix. For
            instance, if you set the position of an item at values 0.0 and 1.0, the
            animation will show the item moving in a straight line between these
            positions. The same is true for scaling and rotation.</para>
            <para>It is usual to use the class with a QTimeLine. The timeline's
            valueChanged() signal is then connected to the setStep() slot. For example,
            you can set up an item for rotation by calling setRotationAt() for
            different step values. The animations timeline is set with the
            setTimeLine() function.</para>
            <para>An example animation with a timeline follows:</para>
            <para>    QGraphicsItem *ball = new QGraphicsEllipseItem(0, 0, 20,
            20);</para>
            <para></para>
            <para>    QTimeLine *timer = new QTimeLine(5000);</para>
            <para>    timer-&gt;setFrameRange(0, 100);</para>
            <para></para>
            <para>    QGraphicsItemAnimation *animation = new
            QGraphicsItemAnimation;</para>
            <para>    animation-&gt;setItem(ball);</para>
            <para>    animation-&gt;setTimeLine(timer);</para>
            <para></para>
            <para>    for (int i = 0; i &lt; 200; ++i)</para>
            <para>        animation-&gt;setPosAt(i / 200.0, QPointF(i, i));</para>
            <para></para>
            <para>    QGraphicsScene *scene = new QGraphicsScene();</para>
            <para>    scene-&gt;setSceneRect(0, 0, 250, 250);</para>
            <para>    scene-&gt;addItem(ball);</para>
            <para></para>
            <para>    QGraphicsView *view = new QGraphicsView(scene);</para>
            <para>    view-&gt;show();</para>
            <para></para>
            <para>    timer-&gt;start();</para>
            <para>Note that steps lie between 0.0 and 1.0. It may be necessary to
            use setUpdateInterval(). The default update interval is 40 ms. A scheduled
            transformation cannot be removed when set, so scheduling several
            transformations of the same kind (e.g., rotations) at the same step is not
            recommended.</para>
            <para></para>
            <para>See also QTimeLine and Graphics View Framework.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an animation object with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.PosAt(System.Double)">
            <summary>
            <para>Returns the position of the item at the given step value.</para>
            <para>See also setPosAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.SetPosAt(System.Double,QtCore.QPointF)">
            <summary>
            <para>Sets the position of the item at the given step value to the
            point specified.</para>
            <para>See also posAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.MatrixAt(System.Double)">
            <summary>
            <para>Returns the matrix used to transform the item at the specified
            step value.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.RotationAt(System.Double)">
            <summary>
            <para>Returns the angle at which the item is rotated at the specified
            step value.</para>
            <para>See also setRotationAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.SetRotationAt(System.Double,System.Double)">
            <summary>
            <para>Sets the rotation of the item at the given step value to the
            angle specified.</para>
            <para>See also rotationAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.XTranslationAt(System.Double)">
            <summary>
            <para>Returns the horizontal translation of the item at the specified
            step value.</para>
            <para>See also setTranslationAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.YTranslationAt(System.Double)">
            <summary>
            <para>Returns the vertical translation of the item at the specified
            step value.</para>
            <para>See also setTranslationAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.SetTranslationAt(System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the translation of the item at the given step value using
            the horizontal and vertical coordinates specified by dx and dy.</para>
            <para>See also xTranslationAt() and yTranslationAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.VerticalScaleAt(System.Double)">
            <summary>
            <para>Returns the vertical scale for the item at the specified step
            value.</para>
            <para>See also setScaleAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.HorizontalScaleAt(System.Double)">
            <summary>
            <para>Returns the horizontal scale for the item at the specified step
            value.</para>
            <para>See also setScaleAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.SetScaleAt(System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the scale of the item at the given step value using the
            horizontal and vertical scale factors specified by sx and sy.</para>
            <para>See also verticalScaleAt() and horizontalScaleAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.VerticalShearAt(System.Double)">
            <summary>
            <para>Returns the vertical shear for the item at the specified step
            value.</para>
            <para>See also setShearAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.HorizontalShearAt(System.Double)">
            <summary>
            <para>Returns the horizontal shear for the item at the specified step
            value.</para>
            <para>See also setShearAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.SetShearAt(System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the shear of the item at the given step value using the
            horizontal and vertical shear factors specified by sh and sv.</para>
            <para>See also verticalShearAt() and horizontalShearAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.Clear">
            <summary>
            <para>Clears the scheduled transformations used for the animation, but
            retains the item and timeline.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.SetStep(System.Double)">
            <summary>
            <para>Sets the current step value for the animation, causing the
            transformations scheduled at this step to be performed.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.Reset">
            <summary>
            <para>Resets the item to its starting position and
            transformation.</para>
            <para>You can call setStep(0) instead.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.BeforeAnimationStep(System.Double)">
            <summary>
            <para>This method is meant to be overridden by subclassed that needs to
            execute additional code before a new step takes place. The animation step
            is provided for use in cases where the action depends on its value.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsItemAnimation.AfterAnimationStep(System.Double)">
            <summary>
            <para>This method is meant to be overridden in subclasses that need to
            execute additional code after a new step has taken place. The animation
            step is provided for use in cases where the action depends on its
            value.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItemAnimation.Item">
            <summary>
            <para>Returns the item on which the animation object operates.</para>
            <para>See also setItem().</para>
            <para></para>
            <para>Sets the specified item to be used in the animation.</para>
            <para>See also item().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsItemAnimation.TimeLine">
            <summary>
            <para>Returns the timeline object used to control the rate at which the
            animation occurs.</para>
            <para>See also setTimeLine().</para>
            <para></para>
            <para>Sets the timeline object used to control the rate of animation to
            the timeLine specified.</para>
            <para>See also timeLine().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsLinearLayout">
            <summary>
            <para>The QGraphicsLinearLayout class provides a horizontal or vertical
            layout for managing widgets in Graphics View.</para>
            </summary>
            <remarks>
            <para>The default orientation for a linear layout is Qt::Horizontal.
            You can choose a vertical orientation either by calling setOrientation(),
            or by passing Qt::Vertical to QGraphicsLinearLayout's constructor.</para>
            <para>The most common way to use QGraphicsLinearLayout is to construct
            an object on the heap with no parent, add widgets and layouts by calling
            addItem(), and finally assign the layout to a widget by calling
            QGraphicsWidget::setLayout().</para>
            <para>QGraphicsScene scene;</para>
            <para>QGraphicsWidget *textEdit = scene.addWidget(new
            QTextEdit);</para>
            <para>QGraphicsWidget *pushButton = scene.addWidget(new
            QPushButton);</para>
            <para></para>
            <para>QGraphicsLinearLayout *layout = new QGraphicsLinearLayout;</para>
            <para>layout-&gt;addItem(textEdit);</para>
            <para>layout-&gt;addItem(pushButton);</para>
            <para></para>
            <para>QGraphicsWidget *form = new QGraphicsWidget;</para>
            <para>form-&gt;setLayout(layout);</para>
            <para>scene.addItem(form);</para>
            <para>You can add widgets, layouts, stretches (addStretch(),
            insertStretch() or setStretchFactor()), and spacings (setItemSpacing()) to
            a linear layout. The layout takes ownership of the items. In some cases
            when the layout item also inherits from QGraphicsItem (such as
            QGraphicsWidget) there will be a ambiguity in ownership because the layout
            item belongs to two ownership hierarchies. See the documentation of
            QGraphicsLayoutItem::setOwnedByLayout() how to handle this. You can access
            each item in the layout by calling count() and itemAt(). Calling removeAt()
            or removeItem() will remove an item from the layout, without destroying
            it.</para>
            <para></para>
            <para>Size Hints and Size Policies in QGraphicsLinearLayout</para>
            <para>QGraphicsLinearLayout respects each item's size hints and size
            policies, and when the layout contains more space than the items can fill,
            each item is arranged according to the layout's alignment for that item.
            You can set an alignment for each item by calling setAlignment(), and check
            the alignment for any item by calling alignment(). By default, items are
            aligned to the top left.</para>
            <para></para>
            <para>Spacing within QGraphicsLinearLayout</para>
            <para>Between the items, the layout distributes some space. The actual
            amount of space depends on the managed widget's current style, but the
            common spacing is 4. You can also set your own spacing by calling
            setSpacing(), and get the current spacing value by calling spacing(). If
            you want to configure individual spacing for your items, you can call
            setItemSpacing().</para>
            <para></para>
            <para>Stretch Factor in QGraphicsLinearLayout</para>
            <para>You can assign a stretch factor to each item to control how much
            space it will get compared to the other items. By default, two identical
            widgets arranged in a linear layout will have the same size, but if the
            first widget has a stretch factor of 1 and the second widget has a stretch
            factor of 2, the first widget will get 1/3 of the available space, and the
            second will get 2/3.</para>
            <para>QGraphicsLinearLayout calculates the distribution of sizes by
            adding up the stretch factors of all items, and then dividing the available
            space accordingly. The default stretch factor is 0 for all items; a factor
            of 0 means the item does not have any defined stretch factor; effectively
            this is the same as setting the stretch factor to 1. The stretch factor
            only applies to the available space in the lengthwise direction of the
            layout (following its orientation). If you want to control both the item's
            horizontal and vertical stretch, you can use QGraphicsGridLayout
            instead.</para>
            <para></para>
            <para>QGraphicsLinearLayout Compared to Other Layouts</para>
            <para>QGraphicsLinearLayout is very similar to QVBoxLayout and
            QHBoxLayout, but in contrast to these classes, it is used to manage
            QGraphicsWidget and QGraphicsLayout instead of QWidget and QLayout.</para>
            <para></para>
            <para>See also QGraphicsGridLayout and QGraphicsWidget.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.#ctor(QtWidgets.IQGraphicsLayoutItem)">
            <summary>
            <para>Constructs a QGraphicsLinearLayout instance using Qt::Horizontal
            orientation. parent is passed to QGraphicsLayout's constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.#ctor(QtCore.Qt.Orientation,QtWidgets.IQGraphicsLayoutItem)">
            <summary>
            <para>Constructs a QGraphicsLinearLayout instance. You can pass the
            orientation for the layout, either horizontal or vertical, and parent is
            passed to QGraphicsLayout's constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.AddItem(QtWidgets.IQGraphicsLayoutItem)">
            <summary>
            <para>This convenience function is equivalent to calling insertItem(-1,
            item).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.AddStretch(System.Int32)">
            <summary>
            <para>This convenience function is equivalent to calling
            insertStretch(-1, stretch).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.InsertItem(System.Int32,QtWidgets.IQGraphicsLayoutItem)">
            <summary>
            <para>Inserts item into the layout at index, or before any item that is
            currently at index.</para>
            <para>See also addItem(), itemAt(), insertStretch(), and
            setItemSpacing().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.InsertStretch(System.Int32,System.Int32)">
            <summary>
            <para>Inserts a stretch of stretch at index, or before any item that is
            currently at index.</para>
            <para>See also addStretch(), setStretchFactor(), setItemSpacing(), and
            insertItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.RemoveItem(QtWidgets.IQGraphicsLayoutItem)">
            <summary>
            <para>Removes item from the layout without destroying it. Ownership of
            item is transferred to the caller.</para>
            <para>See also removeAt() and insertItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.RemoveAt(System.Int32)">
            <summary>
            <para>Reimplemented from QGraphicsLayout::removeAt().</para>
            <para>Removes the item at index without destroying it. Ownership of the
            item is transferred to the caller.</para>
            <para>See also removeItem() and insertItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.SetItemSpacing(System.Int32,System.Double)">
            <summary>
            <para>Sets the spacing after item at index to spacing.</para>
            <para>See also itemSpacing().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.ItemSpacing(System.Int32)">
            <summary>
            <para>Returns the spacing after item at index.</para>
            <para>See also setItemSpacing().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.SetStretchFactor(QtWidgets.IQGraphicsLayoutItem,System.Int32)">
            <summary>
            <para>Sets the stretch factor for item to stretch. If an item's stretch
            factor changes, this function will invalidate the layout.</para>
            <para>Setting stretch to 0 removes the stretch factor from the item,
            and is effectively equivalent to setting stretch to 1.</para>
            <para>See also stretchFactor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.StretchFactor(QtWidgets.IQGraphicsLayoutItem)">
            <summary>
            <para>Returns the stretch factor for item. The default stretch factor
            is 0, meaning that the item has no assigned stretch factor.</para>
            <para>See also setStretchFactor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.SetAlignment(QtWidgets.IQGraphicsLayoutItem,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>Sets the alignment of item to alignment. If item's alignment
            changes, the layout is automatically invalidated.</para>
            <para>See also alignment() and invalidate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.Alignment(QtWidgets.IQGraphicsLayoutItem)">
            <summary>
            <para>Returns the alignment for item. The default alignment is
            Qt::AlignTop | Qt::AlignLeft.</para>
            <para>The alignment decides how the item is positioned within its
            assigned space in the case where there's more space available in the layout
            than the widgets can occupy.</para>
            <para>See also setAlignment().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.ItemAt(System.Int32)">
            <summary>
            <para>Reimplemented from QGraphicsLayout::itemAt().</para>
            <para>When iterating from 0 and up, it will return the items in the
            visual arranged order.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.Invalidate">
            <summary>
            <para>Reimplemented from QGraphicsLayout::invalidate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsLinearLayout.SizeHint(QtCore.Qt.SizeHint,QtCore.QSizeF)">
            <summary>
            <para>Reimplemented from QGraphicsLayoutItem::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLinearLayout.Orientation">
            <summary>
            <para>Returns the layout orientation.</para>
            <para>See also setOrientation().</para>
            <para></para>
            <para>Change the layout orientation to orientation. Changing the layout
            orientation will automatically invalidate the layout.</para>
            <para>See also orientation().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLinearLayout.Spacing">
            <summary>
            <para>Returns the layout's spacing. Spacing refers to the vertical and
            horizontal distances between items.</para>
            <para>See also setSpacing().</para>
            <para></para>
            <para>Sets the layout's spacing to spacing. Spacing refers to the
            vertical and horizontal distances between items.</para>
            <para>See also spacing(), setItemSpacing(), setStretchFactor(), and
            QGraphicsGridLayout::setSpacing().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLinearLayout.Geometry">
            <summary>
            <para>Returns the item's geometry (e.g., position and size) as a
            QRectF. This function is equivalent to QRectF(pos(), size()).</para>
            <para>See also setGeometry().</para>
            <para></para>
            <para>This virtual function sets the geometry of the
            QGraphicsLayoutItem to rect, which is in parent coordinates (e.g., the
            top-left corner of rect is equivalent to the item's position in parent
            coordinates).</para>
            <para>You must reimplement this function in a subclass of
            QGraphicsLayoutItem to receive geometry updates. The layout will call this
            function when it does a rearrangement.</para>
            <para>If rect is outside of the bounds of minimumSize and maximumSize,
            it will be adjusted to its closest size so that it is within the legal
            bounds.</para>
            <para>See also geometry().</para>
            <para></para>
            <para>Reimplemented from QGraphicsLayoutItem::setGeometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsLinearLayout.Count">
            <summary>
            <para>Reimplemented from QGraphicsLayout::count().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsWidget">
            <summary>
            <para>The QGraphicsWidget class is the base class for all widget items
            in a QGraphicsScene.</para>
            </summary>
            <remarks>
            <para>QGraphicsWidget is an extended base item that provides extra
            functionality over QGraphicsItem. It is similar to QWidget in many
            ways:</para>
            <para></para>
            <para>Provides a palette, a font and a style().</para>
            <para>Has a defined geometry().</para>
            <para>Supports layouts with setLayout() and layout().</para>
            <para>Supports shortcuts and actions with grabShortcut() and
            insertAction()</para>
            <para></para>
            <para>Unlike QGraphicsItem, QGraphicsWidget is not an abstract class;
            you can create instances of a QGraphicsWidget without having to subclass
            it. This approach is useful for widgets that only serve the purpose of
            organizing child widgets into a layout.</para>
            <para>QGraphicsWidget can be used as a base item for your own custom
            item if you require advanced input focus handling, e.g., tab focus and
            activation, or layouts.</para>
            <para>Since QGraphicsWidget resembles QWidget and has similar API, it
            is easier to port a widget from QWidget to QGraphicsWidget, instead of
            QGraphicsItem.</para>
            <para>Note: QWidget-based widgets can be directly embedded into a
            QGraphicsScene using QGraphicsProxyWidget.</para>
            <para>Noticeable differences between QGraphicsWidget and QWidget
            are:</para>
            <para></para>
            <para> QGraphicsWidgetQWidget</para>
            <para>Coordinates and geometry are defined with qreals (doubles or
            floats, depending on the platform).	QWidget uses integer geometry (QPoint,
            QRect).</para>
            <para>The widget is already visible by default; you do not have to call
            show() to display the widget.	QWidget is hidden by default until you call
            show().</para>
            <para>A subset of widget attributes are supported.	All widget
            attributes are supported.</para>
            <para>A top-level item's style defaults to QGraphicsScene::style	A
            top-level widget's style defaults to QApplication::style</para>
            <para>Graphics View provides a custom drag and drop framework,
            different from QWidget.	Standard drag and drop framework.</para>
            <para>Widget items do not support modality.	Full modality
            support.</para>
            <para></para>
            <para>QGraphicsWidget supports a subset of Qt's widget attributes,
            (Qt::WidgetAttribute), as shown in the table below. Any attributes not
            listed in this table are unsupported, or otherwise unused.</para>
            <para></para>
            <para> Widget AttributeUsage</para>
            <para>Qt::WA_SetLayoutDirection	Set by setLayoutDirection(), cleared by
            unsetLayoutDirection(). You can test this attribute to check if the widget
            has been explicitly assigned a layoutDirection. If the attribute is not
            set, the layoutDirection() is inherited.</para>
            <para>Qt::WA_RightToLeft	Toggled by setLayoutDirection(). Inherited
            from the parent/scene. If set, the widget's layout will order horizontally
            arranged widgets from right to left.</para>
            <para>Qt::WA_SetStyle	Set and cleared by setStyle(). If this attribute
            is set, the widget has been explicitly assigned a style. If it is unset,
            the widget will use the scene's or the application's style.</para>
            <para>Qt::WA_Resized	Set by setGeometry() and resize().</para>
            <para>Qt::WA_SetPalette	Set by setPalette().</para>
            <para>Qt::WA_SetFont	Set by setFont().</para>
            <para>Qt::WA_WindowPropagation	Enables propagation to window
            widgets.</para>
            <para></para>
            <para>Although QGraphicsWidget inherits from both QObject and
            QGraphicsItem, you should use the functions provided by QGraphicsItem, not
            QObject, to manage the relationships between parent and child items. These
            functions control the stacking order of items as well as their
            ownership.</para>
            <para>Note: The QObject::parent() should always return 0 for
            QGraphicsWidgets, but this policy is not strictly defined.</para>
            <para></para>
            <para>See also QGraphicsProxyWidget, QGraphicsItem, and Widgets and
            Layouts.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.#ctor(QtWidgets.IQGraphicsItem,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a QGraphicsWidget instance. The optional parent
            argument is passed to QGraphicsItem's constructor. The optional wFlags
            argument specifies the widget's window flags (e.g., whether the widget
            should be a window, a tool, a popup, etc).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.AdjustSize">
            <summary>
            <para>Adjusts the size of the widget to its effective preferred size
            hint.</para>
            <para>This function is called implicitly when the item is shown for the
            first time.</para>
            <para>See also effectiveSizeHint() and Qt::MinimumSize.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.UnsetLayoutDirection">
            <summary>
            <para>This property holds the layout direction for this widget.</para>
            <para>This property modifies this widget's and all of its descendants'
            Qt::WA_RightToLeft attribute. It also sets this widget's
            Qt::WA_SetLayoutDirection attribute.</para>
            <para>The widget's layout direction determines the order in which the
            layout manager horizontally arranges subwidgets of this widget. The default
            value depends on the language and locale of the application, and is
            typically in the same direction as words are read and written. With
            Qt::LeftToRight, the layout starts placing subwidgets from the left side of
            this widget towards the right. Qt::RightToLeft does the opposite - the
            layout will place widgets starting from the right edge moving towards the
            left.</para>
            <para>Subwidgets inherit their layout direction from the parent.
            Top-level widget items inherit their layout direction from
            QGraphicsScene::layoutDirection. If you change a widget's layout direction
            by calling setLayoutDirection(), the widget will send itself a
            LayoutDirectionChange event, and then propagate the new layout direction to
            all its descendants.</para>
            <para>See also QWidget::layoutDirection and
            QApplication::layoutDirection.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.Resize(QtCore.QSizeF)">
            <summary>
            <para>This property holds the size of the widget.</para>
            <para>Calling resize() resizes the widget to a size bounded by
            minimumSize() and maximumSize(). This property only affects the widget's
            width and height (e.g., its right and bottom edges); the widget's position
            and top-left corner remains unaffected.</para>
            <para>Resizing a widget triggers the widget to immediately receive a
            GraphicsSceneResize event with the widget's old and new size. If the widget
            has a layout assigned when this event arrives, the layout will be activated
            and it will automatically update any child widgets's geometry.</para>
            <para>This property does not affect any layout of the parent widget. If
            the widget itself is managed by a parent layout; e.g., it has a parent
            widget with a layout assigned, that layout will not activate.</para>
            <para>By default, this property contains a size with zero width and
            height.</para>
            <para>See also setGeometry(), QGraphicsSceneResizeEvent, and
            QGraphicsLayout.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.Resize(System.Double,System.Double)">
            <summary>
            <para>This property holds the size of the widget.</para>
            <para>Calling resize() resizes the widget to a size bounded by
            minimumSize() and maximumSize(). This property only affects the widget's
            width and height (e.g., its right and bottom edges); the widget's position
            and top-left corner remains unaffected.</para>
            <para>Resizing a widget triggers the widget to immediately receive a
            GraphicsSceneResize event with the widget's old and new size. If the widget
            has a layout assigned when this event arrives, the layout will be activated
            and it will automatically update any child widgets's geometry.</para>
            <para>This property does not affect any layout of the parent widget. If
            the widget itself is managed by a parent layout; e.g., it has a parent
            widget with a layout assigned, that layout will not activate.</para>
            <para>By default, this property contains a size with zero width and
            height.</para>
            <para>See also setGeometry(), QGraphicsSceneResizeEvent, and
            QGraphicsLayout.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.SetGeometry(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This property holds the geometry of the widget.</para>
            <para>Sets the item's geometry to rect. The item's position and size
            are modified as a result of calling this function. The item is first moved,
            then resized.</para>
            <para>A side effect of calling this function is that the widget will
            receive a move event and a resize event. Also, if the widget has a layout
            assigned, the layout will activate.</para>
            <para>See also geometry() and resize().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.SetContentsMargins(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the widget's contents margins to left, top, right and
            bottom.</para>
            <para>Contents margins are used by the assigned layout to define the
            placement of subwidgets and layouts. Margins are particularly useful for
            widgets that constrain subwidgets to only a section of its own geometry.
            For example, a group box with a layout will place subwidgets inside its
            frame, but below the title.</para>
            <para>Changing a widget's contents margins will always trigger an
            update(), and any assigned layout will be activated automatically. The
            widget will then receive a ContentsRectChange event.</para>
            <para>See also getContentsMargins() and setGeometry().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.GetContentsMargins(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Reimplemented from
            QGraphicsLayoutItem::getContentsMargins().</para>
            <para>Gets the widget's contents margins. The margins are stored in
            left, top, right and bottom, as pointers to qreals. Each argument can be
            omitted by passing 0.</para>
            <para>See also setContentsMargins().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.SetWindowFrameMargins(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the widget's window frame margins to left, top, right and
            bottom. The default frame margins are provided by the style, and they
            depend on the current window flags.</para>
            <para>If you would like to draw your own window decoration, you can set
            your own frame margins to override the default margins.</para>
            <para>See also unsetWindowFrameMargins(), getWindowFrameMargins(), and
            windowFrameRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.GetWindowFrameMargins(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Gets the widget's window frame margins. The margins are stored in
            left, top, right and bottom as pointers to qreals. Each argument can be
            omitted by passing 0.</para>
            <para>See also setWindowFrameMargins() and windowFrameRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.UnsetWindowFrameMargins">
            <summary>
            <para>Resets the window frame margins to the default value, provided by
            the style.</para>
            <para>See also setWindowFrameMargins(), getWindowFrameMargins(), and
            windowFrameRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.FocusWidget">
            <summary>
            <para>If this widget, a child or descendant of this widget currently
            has input focus, this function will return a pointer to that widget. If no
            descendant widget has input focus, 0 is returned.</para>
            <para>See also QGraphicsItem::focusItem() and
            QWidget::focusWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.GrabShortcut(QtGui.QKeySequence,QtCore.Qt.ShortcutContext)">
            <summary>
            <para>Adds a shortcut to Qt's shortcut system that watches for the
            given key sequence in the given context. If the context is
            Qt::ApplicationShortcut, the shortcut applies to the application as a
            whole. Otherwise, it is either local to this widget, Qt::WidgetShortcut, or
            to the window itself, Qt::WindowShortcut. For widgets that are not part of
            a window (i.e., top-level widgets and their children), Qt::WindowShortcut
            shortcuts apply to the scene.</para>
            <para>If the same key sequence has been grabbed by several widgets,
            when the key sequence occurs a QEvent::Shortcut event is sent to all the
            widgets to which it applies in a non-deterministic order, but with the
            ``ambiguous'' flag set to true.</para>
            <para>Warning: You should not normally need to use this function;
            instead create QActions with the shortcut key sequences you require (if you
            also want equivalent menu options and toolbar buttons), or create
            QShortcuts if you just need key sequences. Both QAction and QShortcut
            handle all the event filtering for you, and provide signals which are
            triggered when the user triggers the key sequence, so are much easier to
            use than this low-level function.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also releaseShortcut(), setShortcutEnabled(), and
            QWidget::grabShortcut().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.ReleaseShortcut(System.Int32)">
            <summary>
            <para>Removes the shortcut with the given id from Qt's shortcut system.
            The widget will no longer receive QEvent::Shortcut events for the
            shortcut's key sequence (unless it has other shortcuts with the same key
            sequence).</para>
            <para>Warning: You should not normally need to use this function since
            Qt's shortcut system removes shortcuts automatically when their parent
            widget is destroyed. It is best to use QAction or QShortcut to handle
            shortcuts, since they are easier to use than this low-level function. Note
            also that this is an expensive operation.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also grabShortcut(), setShortcutEnabled(), and
            QWidget::releaseShortcut().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.SetShortcutEnabled(System.Int32,System.Boolean)">
            <summary>
            <para>If enabled is true, the shortcut with the given id is enabled;
            otherwise the shortcut is disabled.</para>
            <para>Warning: You should not normally need to use this function since
            Qt's shortcut system enables/disables shortcuts automatically as widgets
            become hidden/visible and gain or lose focus. It is best to use QAction or
            QShortcut to handle shortcuts, since they are easier to use than this
            low-level function.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also grabShortcut(), releaseShortcut(), and
            QWidget::setShortcutEnabled().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.SetShortcutAutoRepeat(System.Int32,System.Boolean)">
            <summary>
            <para>If enabled is true, auto repeat of the shortcut with the given id
            is enabled; otherwise it is disabled.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also grabShortcut(), releaseShortcut(), and
            QWidget::setShortcutAutoRepeat().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.AddAction(QtWidgets.QAction)">
            <summary>
            <para>Appends the action action to this widget's list of
            actions.</para>
            <para>All QGraphicsWidgets have a list of QActions, however they can be
            represented graphically in many different ways. The default use of the
            QAction list (as returned by actions()) is to create a context
            QMenu.</para>
            <para>A QGraphicsWidget should only have one of each action and adding
            an action it already has will not cause the same action to be in the widget
            twice.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also removeAction(), insertAction(), actions(), and
            QWidget::addAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.InsertAction(QtWidgets.QAction,QtWidgets.QAction)">
            <summary>
            <para>Inserts the action action to this widget's list of actions,
            before the action before. It appends the action if before is 0 or before is
            not a valid action for this widget.</para>
            <para>A QGraphicsWidget should only have one of each action.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also removeAction(), addAction(), QMenu, actions(), and
            QWidget::insertActions().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.RemoveAction(QtWidgets.QAction)">
            <summary>
            <para>Removes the action action from this widget's list of
            actions.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also insertAction(), actions(), insertAction(), and
            QWidget::removeAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.SetAttribute(QtCore.Qt.WidgetAttribute,System.Boolean)">
            <summary>
            <para>If on is true, this function enables attribute; otherwise
            attribute is disabled.</para>
            <para>See the class documentation for QGraphicsWidget for a complete
            list of which attributes are supported, and what they are for.</para>
            <para>See also testAttribute() and QWidget::setAttribute().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.TestAttribute(QtCore.Qt.WidgetAttribute)">
            <summary>
            <para>Returns true if attribute is enabled for this widget; otherwise,
            returns false.</para>
            <para>See also setAttribute().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.Paint(QtGui.QPainter,QtWidgets.QStyleOptionGraphicsItem,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QGraphicsItem::paint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.PaintWindowFrame(QtGui.QPainter,QtWidgets.QStyleOptionGraphicsItem,QtWidgets.QWidget)">
            <summary>
            <para>This virtual function is called by QGraphicsScene to draw the
            window frame for windows using painter, option, and widget, in local
            coordinates. The base implementation uses the current style to render the
            frame and title bar.</para>
            <para>You can reimplement this function in a subclass of
            QGraphicsWidget to provide custom rendering of the widget's window
            frame.</para>
            <para>See also QGraphicsItem::paint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.Close">
            <summary>
            <para>Call this function to close the widget.</para>
            <para>Returns true if the widget was closed; otherwise returns false.
            This slot will first send a QCloseEvent to the widget, which may or may not
            accept the event. If the event was ignored, nothing happens. If the event
            was accepted, it will hide() the widget.</para>
            <para>If the widget has the Qt::WA_DeleteOnClose attribute set it will
            be deleted.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.InitStyleOption(QtWidgets.QStyleOption)">
            <summary>
            <para>Populates a style option object for this widget based on its
            current state, and stores the output in option. The default implementation
            populates option with the following properties.</para>
            <para></para>
            <para> Style Option PropertyValue</para>
            <para>state &amp; QStyle::State_Enabled	Corresponds to
            QGraphicsItem::isEnabled().</para>
            <para>state &amp; QStyle::State_HasFocus	Corresponds to
            QGraphicsItem::hasFocus().</para>
            <para>state &amp; QStyle::State_MouseOver	Corresponds to
            QGraphicsItem::isUnderMouse().</para>
            <para>direction	Corresponds to
            QGraphicsWidget::layoutDirection().</para>
            <para>rect	Corresponds to QGraphicsWidget::rect().toRect().</para>
            <para>palette	Corresponds to QGraphicsWidget::palette().</para>
            <para>fontMetrics	Corresponds to
            QFontMetrics(QGraphicsWidget::font()).</para>
            <para></para>
            <para>Subclasses of QGraphicsWidget should call the base
            implementation, and then test the type of option using
            qstyleoption_cast&lt;&gt;() or test QStyleOption::Type before storing
            widget-specific options.</para>
            <para>For example:</para>
            <para>void MyGroupBoxWidget::initStyleOption(QStyleOption *option)
            const</para>
            <para>{</para>
            <para>    QGraphicsWidget::initStyleOption(option);</para>
            <para>    if (QStyleOptionGroupBox *box =
            qstyleoption_cast&lt;QStyleOptionGroupBox *&gt;(option)) {</para>
            <para>        // Add group box specific state.</para>
            <para>        box-&gt;flat = isFlat();</para>
            <para>        ...</para>
            <para>    }</para>
            <para>}</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.SizeHint(QtCore.Qt.SizeHint,QtCore.QSizeF)">
            <summary>
            <para>Reimplemented from QGraphicsLayoutItem::sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.UpdateGeometry">
            <summary>
            <para>Reimplemented from QGraphicsLayoutItem::updateGeometry().</para>
            <para>If this widget is currently managed by a layout, this function
            notifies the layout that the widget's size hints have changed and the
            layout may need to resize and reposition the widget accordingly.</para>
            <para>Call this function if the widget's sizeHint() has changed.</para>
            <para>See also QGraphicsLayout::invalidate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.ItemChange(QtWidgets.QGraphicsItem.GraphicsItemChange,QtCore.QVariant)">
            <summary>
            <para>Reimplemented from QGraphicsItem::itemChange().</para>
            <para>QGraphicsWidget uses the base implementation of this function to
            catch and deliver events related to state changes in the item. Because of
            this, it is very important that subclasses call the base
            implementation.</para>
            <para>change specifies the type of change, and value is the new
            value.</para>
            <para>For example, QGraphicsWidget uses ItemVisibleChange to deliver
            Show and Hide events, ItemPositionHasChanged to deliver Move events, and
            ItemParentChange both to deliver ParentChange events, and for managing the
            focus chain.</para>
            <para>QGraphicsWidget enables the ItemSendsGeometryChanges flag by
            default in order to track position changes.</para>
            <para>See also QGraphicsItem::itemChange().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnSceneEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::sceneEvent().</para>
            <para>QGraphicsWidget's implementation of sceneEvent() simply passes
            event to QGraphicsWidget::event(). You can handle all events for your
            widget in event() or in any of the convenience functions; you should not
            have to reimplement this function in a subclass of QGraphicsWidget.</para>
            <para>See also QGraphicsItem::sceneEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnWindowFrameEvent(QtCore.QEvent)">
            <summary>
            <para>This event handler, for event, receives events for the window
            frame if this widget is a window. Its base implementation provides support
            for default window frame interaction such as moving, resizing, etc.</para>
            <para>You can reimplement this handler in a subclass of QGraphicsWidget
            to provide your own custom window frame interaction support.</para>
            <para>Returns true if event has been recognized and processed;
            otherwise, returns false.</para>
            <para>See also event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.WindowFrameSectionAt(QtCore.QPointF)">
            <summary>
            <para>Returns the window frame section at position pos, or
            Qt::NoSection if there is no window frame section at this position.</para>
            <para>This function is used in QGraphicsWidget's base implementation
            for window frame interaction.</para>
            <para>You can reimplement this function if you want to customize how a
            window can be interactively moved or resized. For instance, if you only
            want to allow a window to be resized by the bottom right corner, you can
            reimplement this function to return Qt::NoSection for all sections except
            Qt::BottomRightSection.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also windowFrameEvent(), paintWindowFrame(), and
            windowFrameGeometry().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            <para>Handles the event. QGraphicsWidget handles the following
            events:</para>
            <para></para>
            <para> EventUsage</para>
            <para>Polish	Delivered to the widget some time after it has been
            shown.</para>
            <para>GraphicsSceneMove	Delivered to the widget after its local
            position has changed.</para>
            <para>GraphicsSceneResize	Delivered to the widget after its size has
            changed.</para>
            <para>Show	Delivered to the widget before it has been shown.</para>
            <para>Hide	Delivered to the widget after it has been hidden.</para>
            <para>PaletteChange	Delivered to the widget after its palette has
            changed.</para>
            <para>FontChange	Delivered to the widget after its font has
            changed.</para>
            <para>EnabledChange	Delivered to the widget after its enabled state has
            changed.</para>
            <para>StyleChange	Delivered to the widget after its style has
            changed.</para>
            <para>LayoutDirectionChange	Delivered to the widget after its layout
            direction has changed.</para>
            <para>ContentsRectChange	Delivered to the widget after its contents
            margins/ contents rect has changed.</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>This event handler can be reimplemented to handle state
            changes.</para>
            <para>The state being changed in this event can be retrieved through
            event.</para>
            <para>Change events include: QEvent::ActivationChange,
            QEvent::EnabledChange, QEvent::FontChange, QEvent::StyleChange,
            QEvent::PaletteChange, QEvent::ParentChange, QEvent::LayoutDirectionChange,
            and QEvent::ContentsRectChange.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnCloseEvent(QtGui.QCloseEvent)">
            <summary>
            <para>This event handler, for event, can be reimplemented in a subclass
            to receive widget close events. The default implementation accepts the
            event.</para>
            <para>See also close() and QCloseEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.FocusNextPrevChild(System.Boolean)">
            <summary>
            <para>Finds a new widget to give the keyboard focus to, as appropriate
            for Tab and Shift+Tab, and returns true if it can find a new widget;
            returns false otherwise. If next is true, this function searches forward;
            if next is false, it searches backward.</para>
            <para>Sometimes, you will want to reimplement this function to provide
            special focus handling for your widget and its subwidgets. For example, a
            web browser might reimplement it to move its current active link forward or
            backward, and call the base implementation only when it reaches the last or
            first link on the page.</para>
            <para>Child widgets call focusNextPrevChild() on their parent widgets,
            but only the window that contains the child widgets decides where to
            redirect focus. By reimplementing this function for an object, you gain
            control of focus traversal for all child widgets.</para>
            <para>See also focusPolicy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnHideEvent(QtGui.QHideEvent)">
            <summary>
            <para>This event handler, for Hide events, is delivered after the
            widget has been hidden, for example, setVisible(false) has been called for
            the widget or one of its ancestors when the widget was previously
            shown.</para>
            <para>You can reimplement this event handler to detect when your widget
            is hidden. Calling QEvent::accept() or QEvent::ignore() on event has no
            effect.</para>
            <para>See also showEvent(), QWidget::hideEvent(), and
            ItemVisibleChange.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnMoveEvent(QtWidgets.QGraphicsSceneMoveEvent)">
            <summary>
            <para>This event handler, for GraphicsSceneMove events, is delivered
            after the widget has moved (e.g., its local position has changed).</para>
            <para>This event is only delivered when the item is moved locally.
            Calling setTransform() or moving any of the item's ancestors does not
            affect the item's local position.</para>
            <para>You can reimplement this event handler to detect when your widget
            has moved. Calling QEvent::accept() or QEvent::ignore() on event has no
            effect.</para>
            <para>See also ItemPositionChange and ItemPositionHasChanged.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.PolishEvent">
            <summary>
            <para>This event is delivered to the item by the scene at some point
            after it has been constructed, but before it is shown or otherwise accessed
            through the scene. You can use this event handler to do last-minute
            initializations of the widget which require the item to be fully
            constructed.</para>
            <para>The base implementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnResizeEvent(QtWidgets.QGraphicsSceneResizeEvent)">
            <summary>
            <para>This event handler, for GraphicsSceneResize events, is delivered
            after the widget has been resized (i.e., its local size has changed). event
            contains both the old and the new size.</para>
            <para>This event is only delivered when the widget is resized locally;
            calling setTransform() on the widget or any of its ancestors or view, does
            not affect the widget's local size.</para>
            <para>You can reimplement this event handler to detect when your widget
            has been resized. Calling QEvent::accept() or QEvent::ignore() on event has
            no effect.</para>
            <para>See also geometry() and setGeometry().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>This event handler, for Show events, is delivered before the
            widget has been shown, for example, setVisible(true) has been called for
            the widget or one of its ancestors when the widget was previously
            hidden.</para>
            <para>You can reimplement this event handler to detect when your widget
            is shown. Calling QEvent::accept() or QEvent::ignore() on event has no
            effect.</para>
            <para>See also hideEvent(), QWidget::showEvent(), and
            ItemVisibleChange.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnHoverMoveEvent(QtWidgets.QGraphicsSceneHoverEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::hoverMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnHoverLeaveEvent(QtWidgets.QGraphicsSceneHoverEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::hoverLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnGrabMouseEvent(QtCore.QEvent)">
            <summary>
            <para>This event handler, for event, can be reimplemented in a subclass
            to receive notifications for QEvent::GrabMouse events.</para>
            <para>See also grabMouse() and grabKeyboard().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnUngrabMouseEvent(QtCore.QEvent)">
            <summary>
            <para>This event handler, for event, can be reimplemented in a subclass
            to receive notifications for QEvent::UngrabMouse events.</para>
            <para>See also ungrabMouse() and ungrabKeyboard().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnGrabKeyboardEvent(QtCore.QEvent)">
            <summary>
            <para>This event handler, for event, can be reimplemented in a subclass
            to receive notifications for QEvent::GrabKeyboard events.</para>
            <para>See also grabKeyboard() and grabMouse().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.OnUngrabKeyboardEvent(QtCore.QEvent)">
            <summary>
            <para>This event handler, for event, can be reimplemented in a subclass
            to receive notifications for QEvent::UngrabKeyboard events.</para>
            <para>See also ungrabKeyboard() and ungrabMouse().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.SetSizePolicy(QtWidgets.QSizePolicy.Policy,QtWidgets.QSizePolicy.Policy,QtWidgets.QSizePolicy.ControlType)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function is equivalent to calling
            setSizePolicy(QSizePolicy(hPolicy, vPolicy, controlType)).</para>
            <para>See also sizePolicy() and QWidget::sizePolicy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.SetMinimumSize(System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            setMinimumSize(QSizeF(w, h)).</para>
            <para>See also minimumSize(), setMaximumSize(), setPreferredSize(), and
            sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.SetPreferredSize(System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            setPreferredSize(QSizeF(w, h)).</para>
            <para>See also preferredSize(), setMaximumSize(), setMinimumSize(), and
            sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.SetMaximumSize(System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            setMaximumSize(QSizeF(w, h)).</para>
            <para>See also maximumSize(), setMinimumSize(), setPreferredSize(), and
            sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.EffectiveSizeHint(QtCore.Qt.SizeHint,QtCore.QSizeF)">
            <summary>
            <para>Returns the effective size hint for this
            QGraphicsLayoutItem.</para>
            <para>which is the size hint in question. constraint is an optional
            argument that defines a special constrain when calculating the effective
            size hint. By default, constraint is QSizeF(-1, -1), which means there is
            no constraint to the size hint.</para>
            <para>If you want to specify the widget's size hint for a given width
            or height, you can provide the fixed dimension in constraint. This is
            useful for widgets that can grow only either vertically or horizontally,
            and need to set either their width or their height to a special
            value.</para>
            <para>For example, a text paragraph item fit into a column width of 200
            may grow vertically. You can pass QSizeF(200, -1) as a constraint to get a
            suitable minimum, preferred and maximum height).</para>
            <para>You can adjust the effective size hint by reimplementing
            sizeHint() in a QGraphicsLayoutItem subclass, or by calling one of the
            following functions: setMinimumSize(), setPreferredSize, or
            setMaximumSize() (or a combination of both).</para>
            <para>This function caches each of the size hints and guarantees that
            sizeHint() will be called only once for each value of which - unless
            constraint is not specified and updateGeometry() has been called.</para>
            <para>See also sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsWidget.SetTabOrder(QtWidgets.QGraphicsWidget,QtWidgets.QGraphicsWidget)">
            <summary>
            <para>Moves the second widget around the ring of focus widgets so that
            keyboard focus moves from the first widget to the second widget when the
            Tab key is pressed.</para>
            <para>Note that since the tab order of the second widget is changed,
            you should order a chain like this:</para>
            <para>setTabOrder(a, b); // a to b</para>
            <para>setTabOrder(b, c); // a to b to c</para>
            <para>setTabOrder(c, d); // a to b to c to d</para>
            <para>not like this:</para>
            <para>// WRONG</para>
            <para>setTabOrder(c, d); // c to d</para>
            <para>setTabOrder(a, b); // a to b AND c to d</para>
            <para>setTabOrder(b, c); // a to b to c, but not c to d</para>
            <para>If first is 0, this indicates that second should be the first
            widget to receive input focus should the scene gain Tab focus (i.e., the
            user hits Tab so that focus passes into the scene). If second is 0, this
            indicates that first should be the first widget to gain focus if the scene
            gained BackTab focus.</para>
            <para>By default, tab order is defined implicitly using widget creation
            order.</para>
            <para>See also focusPolicy and Keyboard Focus in Widgets.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsWidget.GeometryChanged">
            <summary>
            <para>This property holds the geometry of the widget.</para>
            <para>Sets the item's geometry to rect. The item's position and size are modified as a result of calling this function. The item is first moved, then resized.</para>
            <para>A side effect of calling this function is that the widget will receive a move event and a resize event. Also, if the widget has a layout assigned, the layout will activate.</para>
            <para>Access functions:</para>
            <para></para>
            <para> virtual void 	setGeometry(const QRectF &amp; rect)</para>
            <para> void 	setGeometry(qreal x, qreal y, qreal w, qreal h)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	geometryChanged()</para>
            <para></para>
            <para>See also geometry() and resize().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsWidget.WindowFrameEvent">
            <summary>
            <para>This event handler, for event, receives events for the window frame if this widget is a window. Its base implementation provides support for default window frame interaction such as moving, resizing, etc.</para>
            <para>You can reimplement this handler in a subclass of QGraphicsWidget to provide your own custom window frame interaction support.</para>
            <para>Returns true if event has been recognized and processed; otherwise, returns false.</para>
            <para>See also event().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsWidget.ChangeEvent">
            <summary>
            <para>This event handler can be reimplemented to handle state changes.</para>
            <para>The state being changed in this event can be retrieved through event.</para>
            <para>Change events include: QEvent::ActivationChange, QEvent::EnabledChange, QEvent::FontChange, QEvent::StyleChange, QEvent::PaletteChange, QEvent::ParentChange, QEvent::LayoutDirectionChange, and QEvent::ContentsRectChange.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsWidget.CloseEvent">
            <summary>
            <para>This event handler, for event, can be reimplemented in a subclass to receive widget close events. The default implementation accepts the event.</para>
            <para>See also close() and QCloseEvent.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsWidget.HideEvent">
            <summary>
            <para>This event handler, for Hide events, is delivered after the widget has been hidden, for example, setVisible(false) has been called for the widget or one of its ancestors when the widget was previously shown.</para>
            <para>You can reimplement this event handler to detect when your widget is hidden. Calling QEvent::accept() or QEvent::ignore() on event has no effect.</para>
            <para>See also showEvent(), QWidget::hideEvent(), and ItemVisibleChange.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsWidget.MoveEvent">
            <summary>
            <para>This event handler, for GraphicsSceneMove events, is delivered after the widget has moved (e.g., its local position has changed).</para>
            <para>This event is only delivered when the item is moved locally. Calling setTransform() or moving any of the item's ancestors does not affect the item's local position.</para>
            <para>You can reimplement this event handler to detect when your widget has moved. Calling QEvent::accept() or QEvent::ignore() on event has no effect.</para>
            <para>See also ItemPositionChange and ItemPositionHasChanged.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsWidget.ResizeEvent">
            <summary>
            <para>This event handler, for GraphicsSceneResize events, is delivered after the widget has been resized (i.e., its local size has changed). event contains both the old and the new size.</para>
            <para>This event is only delivered when the widget is resized locally; calling setTransform() on the widget or any of its ancestors or view, does not affect the widget's local size.</para>
            <para>You can reimplement this event handler to detect when your widget has been resized. Calling QEvent::accept() or QEvent::ignore() on event has no effect.</para>
            <para>See also geometry() and setGeometry().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsWidget.ShowEvent">
            <summary>
            <para>This event handler, for Show events, is delivered before the widget has been shown, for example, setVisible(true) has been called for the widget or one of its ancestors when the widget was previously hidden.</para>
            <para>You can reimplement this event handler to detect when your widget is shown. Calling QEvent::accept() or QEvent::ignore() on event has no effect.</para>
            <para>See also hideEvent(), QWidget::showEvent(), and ItemVisibleChange.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsWidget.GrabMouseEvent">
            <summary>
            <para>This event handler, for event, can be reimplemented in a subclass to receive notifications for QEvent::GrabMouse events.</para>
            <para>See also grabMouse() and grabKeyboard().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsWidget.UngrabMouseEvent">
            <summary>
            <para>This event handler, for event, can be reimplemented in a subclass to receive notifications for QEvent::UngrabMouse events.</para>
            <para>See also ungrabMouse() and ungrabKeyboard().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsWidget.GrabKeyboardEvent">
            <summary>
            <para>This event handler, for event, can be reimplemented in a subclass to receive notifications for QEvent::GrabKeyboard events.</para>
            <para>See also grabKeyboard() and grabMouse().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsWidget.UngrabKeyboardEvent">
            <summary>
            <para>This event handler, for event, can be reimplemented in a subclass to receive notifications for QEvent::UngrabKeyboard events.</para>
            <para>See also ungrabKeyboard() and ungrabMouse().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.Layout">
            <summary>
            <para>This property holds the layout of the widget.</para>
            <para>Any existing layout manager is deleted before the new layout is
            assigned. If layout is 0, the widget is left without a layout. Existing
            subwidgets' geometries will remain unaffected.</para>
            <para>QGraphicsWidget takes ownership of layout.</para>
            <para>All widgets that are currently managed by layout or all of its
            sublayouts, are automatically reparented to this item. The layout is then
            invalidated, and the child widget geometries are adjusted according to this
            item's geometry() and contentsMargins(). Children who are not explicitly
            managed by layout remain unaffected by the layout after it has been
            assigned to this widget.</para>
            <para>If no layout is currently managing this widget, layout() will
            return 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.LayoutDirection">
            <summary>
            <para>This property holds the layout direction for this widget.</para>
            <para>This property modifies this widget's and all of its descendants'
            Qt::WA_RightToLeft attribute. It also sets this widget's
            Qt::WA_SetLayoutDirection attribute.</para>
            <para>The widget's layout direction determines the order in which the
            layout manager horizontally arranges subwidgets of this widget. The default
            value depends on the language and locale of the application, and is
            typically in the same direction as words are read and written. With
            Qt::LeftToRight, the layout starts placing subwidgets from the left side of
            this widget towards the right. Qt::RightToLeft does the opposite - the
            layout will place widgets starting from the right edge moving towards the
            left.</para>
            <para>Subwidgets inherit their layout direction from the parent.
            Top-level widget items inherit their layout direction from
            QGraphicsScene::layoutDirection. If you change a widget's layout direction
            by calling setLayoutDirection(), the widget will send itself a
            LayoutDirectionChange event, and then propagate the new layout direction to
            all its descendants.</para>
            <para>See also QWidget::layoutDirection and
            QApplication::layoutDirection.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.Style">
            <summary>
            <para>Returns a pointer to the widget's style. If this widget does not
            have any explicitly assigned style, the scene's style is returned instead.
            In turn, if the scene does not have any assigned style, this function
            returns QApplication::style().</para>
            <para>See also setStyle().</para>
            <para></para>
            <para>Sets the widget's style to style. QGraphicsWidget does not take
            ownership of style.</para>
            <para>If no style is assigned, or style is 0, the widget will use
            QGraphicsScene::style() (if this has been set). Otherwise the widget will
            use QApplication::style().</para>
            <para>This function sets the Qt::WA_SetStyle attribute if style is not
            0; otherwise it clears the attribute.</para>
            <para>See also style().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.Font">
            <summary>
            <para>This property holds the widgets' font.</para>
            <para>This property provides the widget's font.</para>
            <para>QFont consists of font properties that have been explicitly
            defined and properties implicitly inherited from the widget's parent.
            Hence, font() can return a different font compared to the one set with
            setFont(). This scheme allows you to define single entries in a font
            without affecting the font's inherited entries.</para>
            <para>When a widget's font changes, it resolves its entries against its
            parent widget. If the widget does not have a parent widget, it resolves its
            entries against the scene. The widget then sends itself a FontChange event
            and notifies all its descendants so that they can resolve their fonts as
            well.</para>
            <para>By default, this property contains the application's default
            font.</para>
            <para>See also QApplication::font(), QGraphicsScene::font, and
            QFont::resolve().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.Palette">
            <summary>
            <para>This property holds the widget's palette.</para>
            <para>This property provides the widget's palette. The palette provides
            colors and brushes for color groups (e.g., QPalette::Button) and states
            (e.g., QPalette::Inactive), loosely defining the general look of the widget
            and its children.</para>
            <para>QPalette consists of color groups that have been explicitly
            defined, and groups that are implicitly inherited from the widget's parent.
            Because of this, palette() can return a different palette than what has
            been set with setPalette(). This scheme allows you to define single entries
            in a palette without affecting the palette's inherited entries.</para>
            <para>When a widget's palette changes, it resolves its entries against
            its parent widget, or if it doesn't have a parent widget, it resolves
            against the scene. It then sends itself a PaletteChange event, and notifies
            all its descendants so they can resolve their palettes as well.</para>
            <para>By default, this property contains the application's default
            palette.</para>
            <para>See also QApplication::palette(), QGraphicsScene::palette, and
            QPalette::resolve().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.AutoFillBackground">
            <summary>
            <para>This property holds whether the widget background is filled
            automatically.</para>
            <para>If enabled, this property will cause Qt to fill the background of
            the widget before invoking the paint() method. The color used is defined by
            the QPalette::Window color role from the widget's palette.</para>
            <para>In addition, Windows are always filled with QPalette::Window,
            unless the WA_OpaquePaintEvent or WA_NoSystemBackground attributes are
            set.</para>
            <para>By default, this property is false.</para>
            <para>This property was introduced in  Qt 4.7.</para>
            <para>See also Qt::WA_OpaquePaintEvent and
            Qt::WA_NoSystemBackground.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.Geometry">
            <summary>
            <para>This property holds the geometry of the widget.</para>
            <para>Sets the item's geometry to rect. The item's position and size
            are modified as a result of calling this function. The item is first moved,
            then resized.</para>
            <para>A side effect of calling this function is that the widget will
            receive a move event and a resize event. Also, if the widget has a layout
            assigned, the layout will activate.</para>
            <para>See also geometry() and resize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.WindowFlags">
            <summary>
            <para>This property holds the widget's window flags.</para>
            <para>Window flags are a combination of a window type (e.g.,
            Qt::Dialog) and several flags giving hints on the behavior of the window.
            The behavior is platform-dependent.</para>
            <para>By default, this property contains no window flags.</para>
            <para>Windows are panels. If you set the Qt::Window flag, the
            ItemIsPanel flag will be set automatically. If you clear the Qt::Window
            flag, the ItemIsPanel flag is also cleared. Note that the ItemIsPanel flag
            can be set independently of Qt::Window.</para>
            <para>See also isWindow() and isPanel().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.WindowTitle">
            <summary>
            <para>This property holds this property holds the window title
            (caption).</para>
            <para>This property is only used for windows.</para>
            <para>By default, if no title has been set, this property contains an
            empty string.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.FocusPolicy">
            <summary>
            <para>This property holds the way the widget accepts keyboard
            focus.</para>
            <para>The focus policy is Qt::TabFocus if the widget accepts keyboard
            focus by tabbing, Qt::ClickFocus if the widget accepts focus by clicking,
            Qt::StrongFocus if it accepts both, and Qt::NoFocus (the default) if it
            does not accept focus at all.</para>
            <para>You must enable keyboard focus for a widget if it processes
            keyboard events. This is normally done from the widget's constructor. For
            instance, the QLineEdit constructor calls
            setFocusPolicy(Qt::StrongFocus).</para>
            <para>If you enable a focus policy (i.e., not Qt::NoFocus),
            QGraphicsWidget will automatically enable the ItemIsFocusable flag. Setting
            Qt::NoFocus on a widget will clear the ItemIsFocusable flag. If the widget
            currently has keyboard focus, the widget will automatically lose
            focus.</para>
            <para>See also focusInEvent(), focusOutEvent(), keyPressEvent(),
            keyReleaseEvent(), and enabled.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.SizePolicy">
            <summary>
            <para>This property holds the size policy for the widget.</para>
            <para>See also sizePolicy(), setSizePolicy(), and
            QWidget::sizePolicy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.MinimumSize">
            <summary>
            <para>This property holds the minimum size of the widget.</para>
            <para>See also setMinimumSize(), minimumSize(), preferredSize, and
            maximumSize.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.MinimumWidth">
            <summary>
            <para>Returns the minimum width.</para>
            <para>See also setMinimumWidth(), setMinimumSize(), and
            minimumSize().</para>
            <para></para>
            <para>Sets the minimum width to width.</para>
            <para>See also minimumWidth(), setMinimumSize(), and
            minimumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.MinimumHeight">
            <summary>
            <para>Returns the minimum height.</para>
            <para>See also setMinimumHeight(), setMinimumSize(), and
            minimumSize().</para>
            <para></para>
            <para>Sets the minimum height to height.</para>
            <para>See also minimumHeight(), setMinimumSize(), and
            minimumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.PreferredSize">
            <summary>
            <para>This property holds the preferred size of the widget.</para>
            <para>See also setPreferredSize(), preferredSize(), minimumSize, and
            maximumSize.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.PreferredWidth">
            <summary>
            <para>Returns the preferred width.</para>
            <para>See also setPreferredWidth(), setPreferredSize(), and
            preferredSize().</para>
            <para></para>
            <para>Sets the preferred width to width.</para>
            <para>See also preferredWidth(), preferredHeight(), setPreferredSize(),
            and preferredSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.PreferredHeight">
            <summary>
            <para>Returns the preferred height.</para>
            <para>See also setPreferredHeight(), setPreferredSize(), and
            preferredSize().</para>
            <para></para>
            <para>Sets the preferred height to height.</para>
            <para>See also preferredHeight(), preferredWidth(), setPreferredSize(),
            and preferredSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.MaximumSize">
            <summary>
            <para>This property holds the maximum size of the widget.</para>
            <para>See also setMaximumSize(), maximumSize(), minimumSize, and
            preferredSize.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.MaximumWidth">
            <summary>
            <para>Returns the maximum width.</para>
            <para>See also setMaximumWidth(), setMaximumSize(), and
            maximumSize().</para>
            <para></para>
            <para>Sets the maximum width to width.</para>
            <para>See also maximumWidth(), setMaximumSize(), and
            maximumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.MaximumHeight">
            <summary>
            <para>Returns the maximum height.</para>
            <para>See also setMaximumHeight(), setMaximumSize(), and
            maximumSize().</para>
            <para></para>
            <para>Sets the maximum height to height.</para>
            <para>See also maximumHeight(), setMaximumSize(), and
            maximumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.ParentLayoutItem">
            <summary>
            <para>Returns the parent of this QGraphicsLayoutItem, or 0 if there is
            no parent, or if the parent does not inherit from QGraphicsLayoutItem
            (QGraphicsLayoutItem is often used through multiple inheritance with
            QObject-derived classes).</para>
            <para>See also setParentLayoutItem().</para>
            <para></para>
            <para>Sets the parent of this QGraphicsLayoutItem to parent.</para>
            <para>See also parentLayoutItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.GraphicsItem">
            <summary>
            <para>Returns the QGraphicsItem that this layout item represents. For
            QGraphicsWidget it will return itself. For custom items it can return an
            aggregated value.</para>
            <para>See also setGraphicsItem().</para>
            <para></para>
            <para>If the QGraphicsLayoutItem represents a QGraphicsItem, and it
            wants to take advantage of the automatic reparenting capabilities of
            QGraphicsLayout it should set this value. Note that if you delete item and
            not delete the layout item, you are responsible of calling
            setGraphicsItem(0) in order to avoid having a dangling pointer.</para>
            <para>See also graphicsItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.OwnedByLayout">
            <summary>
            <para>Returns whether a layout should delete this item in its
            destructor. If its true, then the layout will delete it. If its false, then
            it is assumed that another object has the ownership of it, and the layout
            won't delete this item.</para>
            <para>If the item inherits both QGraphicsItem and QGraphicsLayoutItem
            (such as QGraphicsWidget does) the item is really part of two ownership
            hierarchies. This property informs what the layout should do with its child
            items when it is destructed. In the case of QGraphicsWidget, it is
            preferred that when the layout is deleted it won't delete its children
            (since they are also part of the graphics item hierarchy).</para>
            <para>By default this value is initialized to false in
            QGraphicsLayoutItem, but it is overridden by QGraphicsLayout to return
            true. This is because QGraphicsLayout is not normally part of the
            QGraphicsItem hierarchy, so the parent layout should delete it. Subclasses
            might override this default behaviour by calling
            setOwnedByLayout(true).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setOwnedByLayout().</para>
            <para></para>
            <para>Sets whether a layout should delete this item in its destructor
            or not. ownership must be true to in order for the layout to delete
            it.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also ownedByLayout().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.Type">
            <summary>
            <para>Reimplemented from QGraphicsItem::type().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.BoundingRect">
            <summary>
            <para>Reimplemented from QGraphicsItem::boundingRect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.Shape">
            <summary>
            <para>Reimplemented from QGraphicsItem::shape().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.Size">
            <summary>
            <para>This property holds the size of the widget.</para>
            <para>Calling resize() resizes the widget to a size bounded by
            minimumSize() and maximumSize(). This property only affects the widget's
            width and height (e.g., its right and bottom edges); the widget's position
            and top-left corner remains unaffected.</para>
            <para>Resizing a widget triggers the widget to immediately receive a
            GraphicsSceneResize event with the widget's old and new size. If the widget
            has a layout assigned when this event arrives, the layout will be activated
            and it will automatically update any child widgets's geometry.</para>
            <para>This property does not affect any layout of the parent widget. If
            the widget itself is managed by a parent layout; e.g., it has a parent
            widget with a layout assigned, that layout will not activate.</para>
            <para>By default, this property contains a size with zero width and
            height.</para>
            <para>See also setGeometry(), QGraphicsSceneResizeEvent, and
            QGraphicsLayout.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.Rect">
            <summary>
            <para>Returns the item's local rect as a QRectF. This function is
            equivalent to QRectF(QPointF(), size()).</para>
            <para>See also setGeometry() and resize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.WindowFrameGeometry">
            <summary>
            <para>Returns the widget's geometry in parent coordinates including any
            window frame.</para>
            <para>See also windowFrameRect(), getWindowFrameMargins(), and
            setWindowFrameMargins().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.WindowFrameRect">
            <summary>
            <para>Returns the widget's local rect including any window
            frame.</para>
            <para>See also windowFrameGeometry(), getWindowFrameMargins(), and
            setWindowFrameMargins().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.WindowType">
            <summary>
            <para>Returns the widgets window type.</para>
            <para>See also windowFlags(), isWindow(), and isPanel().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.IsActiveWindow">
            <summary>
            <para>Returns true if this widget's window is in the active window, or
            if the widget does not have a window but is in an active scene (i.e., a
            scene that currently has focus).</para>
            <para>The active window is the window that either contains a child
            widget that currently has input focus, or that itself has input
            focus.</para>
            <para>See also QGraphicsScene::activeWindow(),
            QGraphicsScene::setActiveWindow(), and isActive().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.ContentsRect">
            <summary>
            <para>Returns the contents rect in local coordinates.</para>
            <para>The contents rect defines the subrectangle used by an associated
            layout when arranging subitems. This function is a convenience function
            that adjusts the item's geometry() by its contents margins. Note that
            getContentsMargins() is a virtual function that you can reimplement to
            return the item's contents margins.</para>
            <para>See also getContentsMargins() and geometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsWidget.IsLayout">
            <summary>
            <para>Returns true if this QGraphicsLayoutItem is a layout (e.g., is
            inherited by an object that arranges other QGraphicsLayoutItem objects);
            otherwise returns false.</para>
            <para>See also QGraphicsLayout.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsProxyWidget">
            <summary>
            <para>The QGraphicsProxyWidget class provides a proxy layer for
            embedding a QWidget in a QGraphicsScene.</para>
            </summary>
            <remarks>
            <para>QGraphicsProxyWidget embeds QWidget-based widgets, for example, a
            QPushButton, QFontComboBox, or even QFileDialog, into QGraphicsScene. It
            forwards events between the two objects and translates between QWidget's
            integer-based geometry and QGraphicsWidget's qreal-based geometry.
            QGraphicsProxyWidget supports all core features of QWidget, including tab
            focus, keyboard input, Drag &amp; Drop, and popups. You can also embed
            complex widgets, e.g., widgets with subwidgets.</para>
            <para>Example:</para>
            <para>int main(int argc, char **argv)</para>
            <para>{</para>
            <para>    QApplication app(argc, argv);</para>
            <para></para>
            <para>    QTabWidget *tabWidget = new QTabWidget;</para>
            <para></para>
            <para>    QGraphicsScene scene;</para>
            <para>    QGraphicsProxyWidget *proxy =
            scene.addWidget(tabWidget);</para>
            <para></para>
            <para>    QGraphicsView view(&amp;scene);</para>
            <para>    view.show();</para>
            <para></para>
            <para>    return app.exec();</para>
            <para>}</para>
            <para>QGraphicsProxyWidget takes care of automatically embedding popup
            children of embedded widgets through creating a child proxy for each popup.
            This means that when an embedded QComboBox shows its popup list, a new
            QGraphicsProxyWidget is created automatically, embedding the popup, and
            positioning it correctly. This only works if the popup is child of the
            embedded widget (for example QToolButton::setMenu() requires the QMenu
            instance to be child of the QToolButton).</para>
            <para></para>
            <para>Embedding a Widget with QGraphicsProxyWidget</para>
            <para>There are two ways to embed a widget using QGraphicsProxyWidget.
            The most common way is to pass a widget pointer to
            QGraphicsScene::addWidget() together with any relevant Qt::WindowFlags.
            This function returns a pointer to a QGraphicsProxyWidget. You can then
            choose to reparent or position either the proxy, or the embedded widget
            itself.</para>
            <para>For example, in the code snippet below, we embed a group box into
            the proxy:</para>
            <para>QGroupBox *groupBox = new QGroupBox(&quot;Contact
            Details&quot;);</para>
            <para>QLabel *numberLabel = new QLabel(&quot;Telephone
            number&quot;);</para>
            <para>QLineEdit *numberEdit = new QLineEdit;</para>
            <para></para>
            <para>QFormLayout *layout = new QFormLayout;</para>
            <para>layout-&gt;addRow(numberLabel, numberEdit);</para>
            <para>groupBox-&gt;setLayout(layout);</para>
            <para></para>
            <para>QGraphicsScene scene;</para>
            <para>QGraphicsProxyWidget *proxy = scene.addWidget(groupBox);</para>
            <para></para>
            <para>QGraphicsView view(&amp;scene);</para>
            <para>view.show();</para>
            <para>The image below is the output obtained with its contents margin
            and contents rect labeled.</para>
            <para></para>
            <para>Alternatively, you can start by creating a new
            QGraphicsProxyWidget item, and then call setWidget() to embed a QWidget
            later. The widget() function returns a pointer to the embedded widget.
            QGraphicsProxyWidget shares ownership with QWidget, so if either of the two
            widgets are destroyed, the other widget will be automatically destroyed as
            well.</para>
            <para></para>
            <para>Synchronizing Widget States</para>
            <para>QGraphicsProxyWidget keeps its state in sync with the embedded
            widget. For example, if the proxy is hidden or disabled, the embedded
            widget will be hidden or disabled as well, and vice versa. When the widget
            is embedded by calling addWidget(), QGraphicsProxyWidget copies the state
            from the widget into the proxy, and after that, the two will stay
            synchronized where possible. By default, when you embed a widget into a
            proxy, both the widget and the proxy will be visible because a
            QGraphicsWidget is visible when created (you do not have to call show()).
            If you explicitly hide the embedded widget, the proxy will also become
            invisible.</para>
            <para>Example:</para>
            <para>QGraphicsScene scene;</para>
            <para></para>
            <para>QLineEdit *edit = new QLineEdit;</para>
            <para>QGraphicsProxyWidget *proxy = scene.addWidget(edit);</para>
            <para></para>
            <para>edit-&gt;isVisible();  // returns true</para>
            <para>proxy-&gt;isVisible(); // also returns true</para>
            <para></para>
            <para>edit-&gt;hide();</para>
            <para></para>
            <para>edit-&gt;isVisible();  // returns false</para>
            <para>proxy-&gt;isVisible(); // also returns false</para>
            <para>QGraphicsProxyWidget maintains symmetry for the following
            states:</para>
            <para></para>
            <para> QWidget stateQGraphicsProxyWidget stateNotes</para>
            <para>QWidget::enabled	QGraphicsProxyWidget::enabled	</para>
            <para>QWidget::visible	QGraphicsProxyWidget::visible	The explicit state
            is also symmetric.</para>
            <para>QWidget::geometry	QGraphicsProxyWidget::geometry	Geometry is only
            guaranteed to be symmetric while the embedded widget is visible.</para>
            <para>QWidget::layoutDirection	QGraphicsProxyWidget::layoutDirection
            </para>
            <para>QWidget::style	QGraphicsProxyWidget::style	</para>
            <para>QWidget::palette	QGraphicsProxyWidget::palette	</para>
            <para>QWidget::font	QGraphicsProxyWidget::font	</para>
            <para>QWidget::cursor	QGraphicsProxyWidget::cursor	The embedded widget
            overrides the proxy widget cursor. The proxy cursor changes depending on
            which embedded subwidget is currently under the mouse.</para>
            <para>QWidget::sizeHint()	QGraphicsProxyWidget::sizeHint()	All size
            hint functionality from the embedded widget is forwarded by the
            proxy.</para>
            <para>QWidget::getContentsMargins()
            QGraphicsProxyWidget::getContentsMargins()	Updated once by
            setWidget().</para>
            <para>QWidget::windowTitle	QGraphicsProxyWidget::windowTitle	Updated
            once by setWidget().</para>
            <para></para>
            <para>Note: QGraphicsScene keeps the embedded widget in a special state
            that prevents it from disturbing other widgets (both embedded and not
            embedded) while the widget is embedded. In this state, the widget may
            differ slightly in behavior from when it is not embedded.</para>
            <para>Warning: This class is provided for convenience when bridging
            QWidgets and QGraphicsItems, it should not be used for high-performance
            scenarios.</para>
            <para></para>
            <para>See also QGraphicsScene::addWidget() and QGraphicsWidget.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.#ctor(QtWidgets.IQGraphicsItem,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a new QGraphicsProxy widget. parent and wFlags are
            passed to QGraphicsItem's constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.SubWidgetRect(QtWidgets.QWidget)">
            <summary>
            <para>Returns the rectangle for widget, which must be a descendant of
            widget(), or widget() itself, in this proxy item's local
            coordinates.</para>
            <para>If no widget is embedded, widget is 0, or widget is not a
            descendant of the embedded widget, this function returns an empty
            QRectF.</para>
            <para>See also widget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.Paint(QtGui.QPainter,QtWidgets.QStyleOptionGraphicsItem,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QGraphicsItem::paint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.CreateProxyForChildWidget(QtWidgets.QWidget)">
            <summary>
            <para>Creates a proxy widget for the given child of the widget
            contained in this proxy.</para>
            <para>This function makes it possible to acquire proxies for non
            top-level widgets. For instance, you can embed a dialog, and then transform
            only one of its widgets.</para>
            <para>If the widget is already embedded, return the existing proxy
            widget.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also newProxyWidget() and QGraphicsScene::addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.ItemChange(QtWidgets.QGraphicsItem.GraphicsItemChange,QtCore.QVariant)">
            <summary>
            <para>Reimplemented from QGraphicsItem::itemChange().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.EventFilter(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::eventFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QGraphicsWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnHideEvent(QtGui.QHideEvent)">
            <summary>
            <para>Reimplemented from QGraphicsWidget::hideEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnContextMenuEvent(QtWidgets.QGraphicsSceneContextMenuEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::contextMenuEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnDragEnterEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::dragEnterEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnDragLeaveEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnDragMoveEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::dragMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnDropEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::dropEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnHoverEnterEvent(QtWidgets.QGraphicsSceneHoverEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::hoverEnterEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnHoverLeaveEvent(QtWidgets.QGraphicsSceneHoverEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::hoverLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnHoverMoveEvent(QtWidgets.QGraphicsSceneHoverEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::hoverMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnGrabMouseEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QGraphicsWidget::grabMouseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnUngrabMouseEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QGraphicsWidget::ungrabMouseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnMouseMoveEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnMousePressEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnMouseReleaseEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnMouseDoubleClickEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::mouseDoubleClickEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnWheelEvent(QtWidgets.QGraphicsSceneWheelEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::wheelEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnKeyReleaseEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::keyReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.FocusNextPrevChild(System.Boolean)">
            <summary>
            <para>Reimplemented from QGraphicsWidget::focusNextPrevChild().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.InputMethodQuery(QtCore.Qt.InputMethodQuery)">
            <summary>
            <para>Reimplemented from QGraphicsItem::inputMethodQuery().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnInputMethodEvent(QtGui.QInputMethodEvent)">
            <summary>
            <para>Reimplemented from QGraphicsItem::inputMethodEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.SizeHint(QtCore.Qt.SizeHint,QtCore.QSizeF)">
            <summary>
            <para>Reimplemented from QGraphicsLayoutItem::sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.OnResizeEvent(QtWidgets.QGraphicsSceneResizeEvent)">
            <summary>
            <para>Reimplemented from QGraphicsWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsProxyWidget.NewProxyWidget(QtWidgets.QWidget)">
            <summary>
            <para>Creates a proxy widget for the given child of the widget
            contained in this proxy.</para>
            <para>You should not call this function directly; use
            QGraphicsProxyWidget::createProxyForChildWidget() instead.</para>
            <para>This function is a fake virtual slot that you can reimplement in
            your subclass in order to control how new proxy widgets are created. The
            default implementation returns a proxy created with the
            QGraphicsProxyWidget() constructor with this proxy widget as the
            parent.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also createProxyForChildWidget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsProxyWidget.Widget">
            <summary>
            <para>Returns a pointer to the embedded widget.</para>
            <para>See also setWidget().</para>
            <para></para>
            <para>Embeds widget into this proxy widget. The embedded widget must
            reside exclusively either inside or outside of Graphics View. You cannot
            embed a widget as long as it is is visible elsewhere in the UI, at the same
            time.</para>
            <para>widget must be a top-level widget whose parent is 0.</para>
            <para>When the widget is embedded, its state (e.g., visible, enabled,
            geometry, size hints) is copied into the proxy widget. If the embedded
            widget is explicitly hidden or disabled, the proxy widget will become
            explicitly hidden or disabled after embedding is complete. The class
            documentation has a full overview over the shared state.</para>
            <para>QGraphicsProxyWidget's window flags determine whether the widget,
            after embedding, will be given window decorations or not.</para>
            <para>After this function returns, QGraphicsProxyWidget will keep its
            state synchronized with that of widget whenever possible.</para>
            <para>If a widget is already embedded by this proxy when this function
            is called, that widget will first be automatically unembedded. Passing 0
            for the widget argument will only unembed the widget, and the ownership of
            the currently embedded widget will be passed on to the caller. Every child
            widget that are embedded will also be embedded and their proxy widget
            destroyed.</para>
            <para>Note that widgets with the Qt::WA_PaintOnScreen widget attribute
            set and widgets that wrap an external application or controller cannot be
            embedded. Examples are QGLWidget and QAxWidget.</para>
            <para>See also widget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsProxyWidget.Geometry">
            <summary>
            <para>Returns the item's geometry (e.g., position and size) as a
            QRectF. This function is equivalent to QRectF(pos(), size()).</para>
            <para>See also setGeometry().</para>
            <para></para>
            <para>This virtual function sets the geometry of the
            QGraphicsLayoutItem to rect, which is in parent coordinates (e.g., the
            top-left corner of rect is equivalent to the item's position in parent
            coordinates).</para>
            <para>You must reimplement this function in a subclass of
            QGraphicsLayoutItem to receive geometry updates. The layout will call this
            function when it does a rearrangement.</para>
            <para>If rect is outside of the bounds of minimumSize and maximumSize,
            it will be adjusted to its closest size so that it is within the legal
            bounds.</para>
            <para>See also geometry().</para>
            <para></para>
            <para>Reimplemented from QGraphicsLayoutItem::setGeometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsProxyWidget.Type">
            <summary>
            <para>Reimplemented from QGraphicsItem::type().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsScene">
            <summary>
            <para>The QGraphicsScene class provides a surface for managing a large
            number of 2D graphical items.</para>
            </summary>
            <remarks>
            <para>The class serves as a container for QGraphicsItems. It is used
            together with QGraphicsView for visualizing graphical items, such as lines,
            rectangles, text, or even custom items, on a 2D surface. QGraphicsScene is
            part of the Graphics View Framework.</para>
            <para>QGraphicsScene also provides functionality that lets you
            efficiently determine both the location of items, and for determining what
            items are visible within an arbitrary area on the scene. With the
            QGraphicsView widget, you can either visualize the whole scene, or zoom in
            and view only parts of the scene.</para>
            <para>Example:</para>
            <para>QGraphicsScene scene;</para>
            <para>scene.addText(&quot;Hello, world!&quot;);</para>
            <para></para>
            <para>QGraphicsView view(&amp;scene);</para>
            <para>view.show();</para>
            <para>Note that QGraphicsScene has no visual appearance of its own; it
            only manages the items. You need to create a QGraphicsView widget to
            visualize the scene.</para>
            <para>To add items to a scene, you start off by constructing a
            QGraphicsScene object. Then, you have two options: either add your existing
            QGraphicsItem objects by calling addItem(), or you can call one of the
            convenience functions addEllipse(), addLine(), addPath(), addPixmap(),
            addPolygon(), addRect(), or addText(), which all return a pointer to the
            newly added item. The dimensions of the items added with these functions
            are relative to the item's coordinate system, and the items position is
            initialized to (0, 0) in the scene.</para>
            <para>You can then visualize the scene using QGraphicsView. When the
            scene changes, (e.g., when an item moves or is transformed) QGraphicsScene
            emits the changed() signal. To remove an item, call removeItem().</para>
            <para>QGraphicsScene uses an indexing algorithm to manage the location
            of items efficiently. By default, a BSP (Binary Space Partitioning) tree is
            used; an algorithm suitable for large scenes where most items remain static
            (i.e., do not move around). You can choose to disable this index by calling
            setItemIndexMethod(). For more information about the available indexing
            algorithms, see the itemIndexMethod property.</para>
            <para>The scene's bounding rect is set by calling setSceneRect(). Items
            can be placed at any position on the scene, and the size of the scene is by
            default unlimited. The scene rect is used only for internal bookkeeping,
            maintaining the scene's item index. If the scene rect is unset,
            QGraphicsScene will use the bounding area of all items, as returned by
            itemsBoundingRect(), as the scene rect. However, itemsBoundingRect() is a
            relatively time consuming function, as it operates by collecting positional
            information for every item on the scene. Because of this, you should always
            set the scene rect when operating on large scenes.</para>
            <para>One of QGraphicsScene's greatest strengths is its ability to
            efficiently determine the location of items. Even with millions of items on
            the scene, the items() functions can determine the location of an item
            within a few milliseconds. There are several overloads to items(): one that
            finds items at a certain position, one that finds items inside or
            intersecting with a polygon or a rectangle, and more. The list of returned
            items is sorted by stacking order, with the topmost item being the first
            item in the list. For convenience, there is also an itemAt() function that
            returns the topmost item at a given position.</para>
            <para>QGraphicsScene maintains selection information for the scene. To
            select items, call setSelectionArea(), and to clear the current selection,
            call clearSelection(). Call selectedItems() to get the list of all selected
            items.</para>
            <para></para>
            <para>Event Handling and Propagation</para>
            <para>Another responsibility that QGraphicsScene has, is to propagate
            events from QGraphicsView. To send an event to a scene, you construct an
            event that inherits QEvent, and then send it using, for example,
            QApplication::sendEvent(). event() is responsible for dispatching the event
            to the individual items. Some common events are handled by convenience
            event handlers. For example, key press events are handled by
            keyPressEvent(), and mouse press events are handled by
            mousePressEvent().</para>
            <para>Key events are delivered to the focus item. To set the focus
            item, you can either call setFocusItem(), passing an item that accepts
            focus, or the item itself can call QGraphicsItem::setFocus(). Call
            focusItem() to get the current focus item. For compatibility with widgets,
            the scene also maintains its own focus information. By default, the scene
            does not have focus, and all key events are discarded. If setFocus() is
            called, or if an item on the scene gains focus, the scene automatically
            gains focus. If the scene has focus, hasFocus() will return true, and key
            events will be forwarded to the focus item, if any. If the scene loses
            focus, (i.e., someone calls clearFocus()) while an item has focus, the
            scene will maintain its item focus information, and once the scene regains
            focus, it will make sure the last focus item regains focus.</para>
            <para>For mouse-over effects, QGraphicsScene dispatches hover events.
            If an item accepts hover events (see QGraphicsItem::acceptHoverEvents()),
            it will receive a GraphicsSceneHoverEnter event when the mouse enters its
            area. As the mouse continues moving inside the item's area, QGraphicsScene
            will send it GraphicsSceneHoverMove events. When the mouse leaves the
            item's area, the item will receive a GraphicsSceneHoverLeave event.</para>
            <para>All mouse events are delivered to the current mouse grabber item.
            An item becomes the scene's mouse grabber if it accepts mouse events (see
            QGraphicsItem::acceptedMouseButtons()) and it receives a mouse press. It
            stays the mouse grabber until it receives a mouse release when no other
            mouse buttons are pressed. You can call mouseGrabberItem() to determine
            what item is currently grabbing the mouse.</para>
            <para></para>
            <para>See also QGraphicsItem and QGraphicsView.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QGraphicsScene object. The parent parameter is
            passed to QObject's constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.#ctor(QtCore.QRectF,QtCore.QObject)">
            <summary>
            <para>Constructs a QGraphicsScene object, using sceneRect for its scene
            rectangle. The parent parameter is passed to QObject's constructor.</para>
            <para>See also sceneRect.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.#ctor(System.Double,System.Double,System.Double,System.Double,QtCore.QObject)">
            <summary>
            <para>Constructs a QGraphicsScene object, using the rectangle specified
            by (x, y), and the given width and height for its scene rectangle. The
            parent parameter is passed to QObject's constructor.</para>
            <para>See also sceneRect.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.SetSceneRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This property holds the scene rectangle; the bounding rectangle
            of the scene.</para>
            <para>The scene rectangle defines the extent of the scene. It is
            primarily used by QGraphicsView to determine the view's default scrollable
            area, and by QGraphicsScene to manage item indexing.</para>
            <para>If unset, or if set to a null QRectF, sceneRect() will return the
            largest bounding rect of all items on the scene since the scene was created
            (i.e., a rectangle that grows when items are added to or moved in the
            scene, but never shrinks).</para>
            <para>See also width(), height(), and QGraphicsView::sceneRect.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.Render(QtGui.QPainter,QtCore.QRectF,QtCore.QRectF,QtCore.Qt.AspectRatioMode)">
            <summary>
            <para>Renders the source rect from scene into target, using painter.
            This function is useful for capturing the contents of the scene onto a
            paint device, such as a QImage (e.g., to take a screenshot), or for
            printing with QPrinter. For example:</para>
            <para>QGraphicsScene scene;</para>
            <para>scene.addItem(...</para>
            <para>...</para>
            <para>QPrinter printer(QPrinter::HighResolution);</para>
            <para>printer.setPaperSize(QPrinter::A4);</para>
            <para></para>
            <para>QPainter painter(&amp;printer);</para>
            <para>scene.render(&amp;painter);</para>
            <para>If source is a null rect, this function will use sceneRect() to
            determine what to render. If target is a null rect, the dimensions of
            painter's paint device will be used.</para>
            <para>The source rect contents will be transformed according to
            aspectRatioMode to fit into the target rect. By default, the aspect ratio
            is kept, and source is scaled to fit in target.</para>
            <para>See also QGraphicsView::render().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.ItemAt(QtCore.QPointF,QtGui.QTransform)">
            <summary>
            <para>Returns the topmost visible item at the specified position, or 0
            if there are no items at this position.</para>
            <para>deviceTransform is the transformation that applies to the view,
            and needs to be provided if the scene contains items that ignore
            transformations.</para>
            <para>Note: See items() for a definition of which items are considered
            visible by this function.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also items(), collidingItems(), and Sorting.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.ItemAt(System.Double,System.Double,QtGui.QTransform)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the topmost visible item at the position specified by (x,
            y), or 0 if there are no items at this position.</para>
            <para>deviceTransform is the transformation that applies to the view,
            and needs to be provided if the scene contains items that ignore
            transformations.</para>
            <para>This convenience function is equivalent to calling
            itemAt(QPointF(x, y), deviceTransform).</para>
            <para>Note: See items() for a definition of which items are considered
            visible by this function.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.SetSelectionArea(QtGui.QPainterPath,QtGui.QTransform)">
            <summary>
            <para>Sets the selection area to path. All items within this area are
            immediately selected, and all items outside are unselected. You can get the
            list of all selected items by calling selectedItems().</para>
            <para>deviceTransform is the transformation that applies to the view,
            and needs to be provided if the scene contains items that ignore
            transformations.</para>
            <para>For an item to be selected, it must be marked as selectable
            (QGraphicsItem::ItemIsSelectable).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also clearSelection() and selectionArea().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.SetSelectionArea(QtGui.QPainterPath,QtCore.Qt.ItemSelectionMode,QtGui.QTransform)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the selection area to path using mode to determine if items
            are included in the selection area.</para>
            <para>deviceTransform is the transformation that applies to the view,
            and needs to be provided if the scene contains items that ignore
            transformations.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also clearSelection() and selectionArea().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.SetSelectionArea(QtGui.QPainterPath,QtCore.Qt.ItemSelectionOperation,QtCore.Qt.ItemSelectionMode,QtGui.QTransform)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the selection area to path using mode to determine if items
            are included in the selection area.</para>
            <para>deviceTransform is the transformation that applies to the view,
            and needs to be provided if the scene contains items that ignore
            transformations.</para>
            <para>selectionOperation determines what to do with the currently
            selected items.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also clearSelection() and selectionArea().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.DestroyItemGroup(QtWidgets.QGraphicsItemGroup)">
            <summary>
            <para>Reparents all items in group to group's parent item, then removes
            group from the scene, and finally deletes it. The items' positions and
            transformations are mapped from the group to the group's parent.</para>
            <para>See also createItemGroup() and
            QGraphicsItemGroup::removeFromGroup().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddItem(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Adds or moves the item and all its childen to this scene. This
            scene takes ownership of the item.</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>If the item is already in a different scene, it will first be
            removed from its old scene, and then added to this scene as a
            top-level.</para>
            <para>QGraphicsScene will send ItemSceneChange notifications to item
            while it is added to the scene. If item does not currently belong to a
            scene, only one notification is sent. If it does belong to scene already
            (i.e., it is moved to this scene), QGraphicsScene will send an addition
            notification as the item is removed from its previous scene.</para>
            <para>If the item is a panel, the scene is active, and there is no
            active panel in the scene, then the item will be activated.</para>
            <para>See also removeItem(), addEllipse(), addLine(), addPath(),
            addPixmap(), addRect(), addText(), addWidget(), and Sorting.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddEllipse(QtCore.QRectF,QtGui.QPen,QtGui.QBrush)">
            <summary>
            <para>Creates and adds an ellipse item to the scene, and returns the
            item pointer. The geometry of the ellipse is defined by rect, and its pen
            and brush are initialized to pen and brush.</para>
            <para>Note that the item's geometry is provided in item coordinates,
            and its position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addLine(), addPath(), addPixmap(), addRect(), addText(),
            addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddLine(QtCore.QLineF,QtGui.QPen)">
            <summary>
            <para>Creates and adds a line item to the scene, and returns the item
            pointer. The geometry of the line is defined by line, and its pen is
            initialized to pen.</para>
            <para>Note that the item's geometry is provided in item coordinates,
            and its position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addEllipse(), addPath(), addPixmap(), addRect(),
            addText(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddPath(QtGui.QPainterPath,QtGui.QPen,QtGui.QBrush)">
            <summary>
            <para>Creates and adds a path item to the scene, and returns the item
            pointer. The geometry of the path is defined by path, and its pen and brush
            are initialized to pen and brush.</para>
            <para>Note that the item's geometry is provided in item coordinates,
            and its position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addEllipse(), addLine(), addPixmap(), addRect(),
            addText(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddPixmap(QtGui.QPixmap)">
            <summary>
            <para>Creates and adds a pixmap item to the scene, and returns the item
            pointer. The pixmap is defined by pixmap.</para>
            <para>Note that the item's geometry is provided in item coordinates,
            and its position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addEllipse(), addLine(), addPath(), addRect(),
            addText(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddPolygon(QtGui.QPolygonF,QtGui.QPen,QtGui.QBrush)">
            <summary>
            <para>Creates and adds a polygon item to the scene, and returns the
            item pointer. The polygon is defined by polygon, and its pen and brush are
            initialized to pen and brush.</para>
            <para>Note that the item's geometry is provided in item coordinates,
            and its position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addEllipse(), addLine(), addPath(), addRect(),
            addText(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddRect(QtCore.QRectF,QtGui.QPen,QtGui.QBrush)">
            <summary>
            <para>Creates and adds a rectangle item to the scene, and returns the
            item pointer. The geometry of the rectangle is defined by rect, and its pen
            and brush are initialized to pen and brush.</para>
            <para>Note that the item's geometry is provided in item coordinates,
            and its position is initialized to (0, 0). For example, if a QRect(50, 50,
            100, 100) is added, its top-left corner will be at (50, 50) relative to the
            origin in the items coordinate system.</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addEllipse(), addLine(), addPixmap(), addPixmap(),
            addText(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddText(System.String,QtGui.QFont)">
            <summary>
            <para>Creates and adds a text item to the scene, and returns the item
            pointer. The text string is initialized to text, and its font is
            initialized to font.</para>
            <para>The item's position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addEllipse(), addLine(), addPixmap(), addPixmap(),
            addRect(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddSimpleText(System.String,QtGui.QFont)">
            <summary>
            <para>Creates and adds a QGraphicsSimpleTextItem to the scene, and
            returns the item pointer. The text string is initialized to text, and its
            font is initialized to font.</para>
            <para>The item's position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addEllipse(), addLine(), addPixmap(), addPixmap(),
            addRect(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddWidget(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Creates a new QGraphicsProxyWidget for widget, adds it to the
            scene, and returns a pointer to the proxy. wFlags set the default window
            flags for the embedding proxy widget.</para>
            <para>The item's position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>Note that widgets with the Qt::WA_PaintOnScreen widget attribute
            set and widgets that wrap an external application or controller are not
            supported. Examples are QGLWidget and QAxWidget.</para>
            <para>See also addEllipse(), addLine(), addPixmap(), addPixmap(),
            addRect(), addText(), addSimpleText(), and addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddEllipse(System.Double,System.Double,System.Double,System.Double,QtGui.QPen,QtGui.QBrush)">
            <summary>
            <para>This convenience function is equivalent to calling
            addEllipse(QRectF(x, y, w, h), pen, brush).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddLine(System.Double,System.Double,System.Double,System.Double,QtGui.QPen)">
            <summary>
            <para>This convenience function is equivalent to calling
            addLine(QLineF(x1, y1, x2, y2), pen).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddRect(System.Double,System.Double,System.Double,System.Double,QtGui.QPen,QtGui.QBrush)">
            <summary>
            <para>This convenience function is equivalent to calling
            addRect(QRectF(x, y, w, h), pen, brush).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.RemoveItem(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Removes the item item and all its children from the scene. The
            ownership of item is passed on to the caller (i.e., QGraphicsScene will no
            longer delete item when destroyed).</para>
            <para>See also addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.SetFocusItem(QtWidgets.IQGraphicsItem,QtCore.Qt.FocusReason)">
            <summary>
            <para>Sets the scene's focus item to item, with the focus reason
            focusReason, after removing focus from any previous item that may have had
            focus.</para>
            <para>If item is 0, or if it either does not accept focus (i.e., it
            does not have the QGraphicsItem::ItemIsFocusable flag enabled), or is not
            visible or not enabled, this function only removes focus from any previous
            focusitem.</para>
            <para>If item is not 0, and the scene does not currently have focus
            (i.e., hasFocus() returns false), this function will call setFocus()
            automatically.</para>
            <para>See also focusItem(), hasFocus(), and setFocus().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.SetFocus(QtCore.Qt.FocusReason)">
            <summary>
            <para>Sets focus on the scene by sending a QFocusEvent to the scene,
            passing focusReason as the reason. If the scene regains focus after having
            previously lost it while an item had focus, the last focus item will
            receive focus with focusReason as the reason.</para>
            <para>If the scene already has focus, this function does
            nothing.</para>
            <para>See also hasFocus(), clearFocus(), and setFocusItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.ClearFocus">
            <summary>
            <para>Clears focus from the scene. If any item has focus when this
            function is called, it will lose focus, and regain focus again once the
            scene regains focus.</para>
            <para>A scene that does not have focus ignores key events.</para>
            <para>See also hasFocus(), setFocus(), and setFocusItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.InputMethodQuery(QtCore.Qt.InputMethodQuery)">
            <summary>
            <para>This method is used by input methods to query a set of properties
            of the scene to be able to support complex input method operations as
            support for surrounding text and reconversions.</para>
            <para>The query parameter specifies which property is queried.</para>
            <para>See also QWidget::inputMethodQuery().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.Update(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function is equivalent to calling update(QRectF(x, y, w,
            h));</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.Invalidate(System.Double,System.Double,System.Double,System.Double,QtWidgets.QGraphicsScene.SceneLayer)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            invalidate(QRectF(x, y, w, h), layers);</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.SendEvent(QtWidgets.IQGraphicsItem,QtCore.QEvent)">
            <summary>
            <para>Sends event event to item item through possible event
            filters.</para>
            <para>The event is sent only if the item is enabled.</para>
            <para>Returns false if the event was filtered or if the item is
            disabled. Otherwise returns the value that was returned from the event
            handler.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also QGraphicsItem::sceneEvent() and
            QGraphicsItem::sceneEventFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.Update(QtCore.QRectF)">
            <summary>
            <para>Schedules a redraw of the area rect on the scene.</para>
            <para>See also sceneRect() and changed().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.Invalidate(QtCore.QRectF,QtWidgets.QGraphicsScene.SceneLayer)">
            <summary>
            <para>Invalidates and schedules a redraw of the layers in rect on the
            scene. Any cached content in layers is unconditionally invalidated and
            redrawn.</para>
            <para>You can use this function overload to notify QGraphicsScene of
            changes to the background or the foreground of the scene. This function is
            commonly used for scenes with tile-based backgrounds to notify changes when
            QGraphicsView has enabled CacheBackground.</para>
            <para>Example:</para>
            <para>QRectF TileScene::rectForTile(int x, int y) const</para>
            <para>{</para>
            <para>    // Return the rectangle for the tile at position (x,
            y).</para>
            <para>    return QRectF(x * tileWidth, y * tileHeight, tileWidth,
            tileHeight);</para>
            <para>}</para>
            <para></para>
            <para>void TileScene::setTile(int x, int y, const QPixmap
            &amp;pixmap)</para>
            <para>{</para>
            <para>    // Sets or replaces the tile at position (x, y) with
            pixmap.</para>
            <para>    if (x &gt;= 0 &amp;&amp; x &lt; numTilesH &amp;&amp; y &gt;=
            0 &amp;&amp; y &lt; numTilesV) {</para>
            <para>        tiles[y][x] = pixmap;</para>
            <para>        invalidate(rectForTile(x, y), BackgroundLayer);</para>
            <para>    }</para>
            <para>}</para>
            <para></para>
            <para>void TileScene::drawBackground(QPainter *painter, const QRectF
            &amp;exposed)</para>
            <para>{</para>
            <para>    // Draws all tiles that intersect the exposed area.</para>
            <para>    for (int y = 0; y &lt; numTilesV; ++y) {</para>
            <para>        for (int x = 0; x &lt; numTilesH; ++x) {</para>
            <para>            QRectF rect = rectForTile(x, y);</para>
            <para>            if (exposed.intersects(rect))</para>
            <para>                painter-&gt;drawPixmap(rect.topLeft(),
            tiles[y][x]);</para>
            <para>        }</para>
            <para>    }</para>
            <para>}</para>
            <para>Note that QGraphicsView currently supports background caching
            only (see QGraphicsView::CacheBackground). This function is equivalent to
            calling update() if any layer but BackgroundLayer is passed.</para>
            <para>See also QGraphicsView::resetCachedContent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.Advance">
            <summary>
            <para>This slot advances the scene by one step, by calling
            QGraphicsItem::advance() for all items on the scene. This is done in two
            phases: in the first phase, all items are notified that the scene is about
            to change, and in the second phase all items are notified that they can
            move. In the first phase, QGraphicsItem::advance() is called passing a
            value of 0 as an argument, and 1 is passed in the second phase.</para>
            <para>Note that you can also use the Animation Framework for
            animations.</para>
            <para>See also QGraphicsItem::advance() and QTimeLine.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.ClearSelection">
            <summary>
            <para>Clears the current selection.</para>
            <para>See also setSelectionArea() and selectedItems().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.Clear">
            <summary>
            <para>Removes and deletes all items from the scene, but otherwise
            leaves the state of the scene unchanged.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            <para>Processes the event event, and dispatches it to the respective
            event handlers.</para>
            <para>In addition to calling the convenience event handlers, this
            function is responsible for converting mouse move events to hover events
            for when there is no mouse grabber item. Hover events are delivered
            directly to items; there is no convenience function for them.</para>
            <para>Unlike QWidget, QGraphicsScene does not have the convenience
            functions enterEvent() and leaveEvent(). Use this function to obtain those
            events instead.</para>
            <para>See also contextMenuEvent(), keyPressEvent(), keyReleaseEvent(),
            mousePressEvent(), mouseMoveEvent(), mouseReleaseEvent(),
            mouseDoubleClickEvent(), focusInEvent(), and focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.EventFilter(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::eventFilter().</para>
            <para>QGraphicsScene filters QApplication's events to detect palette
            and font changes.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnContextMenuEvent(QtWidgets.QGraphicsSceneContextMenuEvent)">
            <summary>
            <para>This event handler, for event contextMenuEvent, can be
            reimplemented in a subclass to receive context menu events. The default
            implementation forwards the event to the topmost visible item that accepts
            context menu events at the position of the event. If no items accept
            context menu events at this position, the event is ignored.</para>
            <para>Note: See items() for a definition of which items are considered
            visible by this function.</para>
            <para>See also QGraphicsItem::contextMenuEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnDragEnterEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a
            subclass to receive drag enter events for the scene.</para>
            <para>The default implementation accepts the event and prepares the
            scene to accept drag move events.</para>
            <para>See also QGraphicsItem::dragEnterEvent(), dragMoveEvent(),
            dragLeaveEvent(), and dropEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnDragMoveEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a
            subclass to receive drag move events for the scene.</para>
            <para>Note: See items() for a definition of which items are considered
            visible by this function.</para>
            <para>See also QGraphicsItem::dragMoveEvent(), dragEnterEvent(),
            dragLeaveEvent(), and dropEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnDragLeaveEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a
            subclass to receive drag leave events for the scene.</para>
            <para>See also QGraphicsItem::dragLeaveEvent(), dragEnterEvent(),
            dragMoveEvent(), and dropEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnDropEvent(QtWidgets.QGraphicsSceneDragDropEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a
            subclass to receive drop events for the scene.</para>
            <para>See also QGraphicsItem::dropEvent(), dragEnterEvent(),
            dragMoveEvent(), and dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>This event handler, for event focusEvent, can be reimplemented in
            a subclass to receive focus in events.</para>
            <para>The default implementation sets focus on the scene, and then on
            the last focus item.</para>
            <para>See also QGraphicsItem::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>This event handler, for event focusEvent, can be reimplemented in
            a subclass to receive focus out events.</para>
            <para>The default implementation removes focus from any focus item,
            then removes focus from the scene.</para>
            <para>See also QGraphicsItem::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnHelpEvent(QtWidgets.QGraphicsSceneHelpEvent)">
            <summary>
            <para>This event handler, for event helpEvent, can be reimplemented in
            a subclass to receive help events. The events are of type QEvent::ToolTip,
            which are created when a tooltip is requested.</para>
            <para>The default implementation shows the tooltip of the topmost
            visible item, i.e., the item with the highest z-value, at the mouse cursor
            position. If no item has a tooltip set, this function does nothing.</para>
            <para>Note: See items() for a definition of which items are considered
            visible by this function.</para>
            <para>See also QGraphicsItem::toolTip() and
            QGraphicsSceneHelpEvent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>This event handler, for event keyEvent, can be reimplemented in a
            subclass to receive keypress events. The default implementation forwards
            the event to current focus item.</para>
            <para>See also QGraphicsItem::keyPressEvent() and focusItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnKeyReleaseEvent(QtGui.QKeyEvent)">
            <summary>
            <para>This event handler, for event keyEvent, can be reimplemented in a
            subclass to receive key release events. The default implementation forwards
            the event to current focus item.</para>
            <para>See also QGraphicsItem::keyReleaseEvent() and focusItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnMousePressEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>This event handler, for event mouseEvent, can be reimplemented in
            a subclass to receive mouse press events for the scene.</para>
            <para>The default implementation depends on the state of the scene. If
            there is a mouse grabber item, then the event is sent to the mouse grabber.
            Otherwise, it is forwarded to the topmost visible item that accepts mouse
            events at the scene position from the event, and that item promptly becomes
            the mouse grabber item.</para>
            <para>If there is no item at the given position on the scene, the
            selection area is reset, any focus item loses its input focus, and the
            event is then ignored.</para>
            <para>Note: See items() for a definition of which items are considered
            visible by this function.</para>
            <para>See also QGraphicsItem::mousePressEvent() and
            QGraphicsItem::setAcceptedMouseButtons().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnMouseMoveEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>This event handler, for event mouseEvent, can be reimplemented in
            a subclass to receive mouse move events for the scene.</para>
            <para>The default implementation depends on the mouse grabber state. If
            there is a mouse grabber item, the event is sent to the mouse grabber. If
            there are any items that accept hover events at the current position, the
            event is translated into a hover event and accepted; otherwise it's
            ignored.</para>
            <para>See also QGraphicsItem::mousePressEvent(),
            QGraphicsItem::mouseReleaseEvent(), QGraphicsItem::mouseDoubleClickEvent(),
            and QGraphicsItem::setAcceptedMouseButtons().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnMouseReleaseEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>This event handler, for event mouseEvent, can be reimplemented in
            a subclass to receive mouse release events for the scene.</para>
            <para>The default implementation depends on the mouse grabber state. If
            there is no mouse grabber, the event is ignored. Otherwise, if there is a
            mouse grabber item, the event is sent to the mouse grabber. If this mouse
            release represents the last pressed button on the mouse, the mouse grabber
            item then loses the mouse grab.</para>
            <para>See also QGraphicsItem::mousePressEvent(),
            QGraphicsItem::mouseMoveEvent(), QGraphicsItem::mouseDoubleClickEvent(),
            and QGraphicsItem::setAcceptedMouseButtons().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnMouseDoubleClickEvent(QtWidgets.QGraphicsSceneMouseEvent)">
            <summary>
            <para>This event handler, for event mouseEvent, can be reimplemented in
            a subclass to receive mouse doubleclick events for the scene.</para>
            <para>If someone doubleclicks on the scene, the scene will first
            receive a mouse press event, followed by a release event (i.e., a click),
            then a doubleclick event, and finally a release event. If the doubleclick
            event is delivered to a different item than the one that received the first
            press and release, it will be delivered as a press event. However,
            tripleclick events are not delivered as doubleclick events in this
            case.</para>
            <para>The default implementation is similar to
            mousePressEvent().</para>
            <para>Note: See items() for a definition of which items are considered
            visible by this function.</para>
            <para>See also QGraphicsItem::mousePressEvent(),
            QGraphicsItem::mouseMoveEvent(), QGraphicsItem::mouseReleaseEvent(), and
            QGraphicsItem::setAcceptedMouseButtons().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnWheelEvent(QtWidgets.QGraphicsSceneWheelEvent)">
            <summary>
            <para>This event handler, for event wheelEvent, can be reimplemented in
            a subclass to receive mouse wheel events for the scene.</para>
            <para>By default, the event is delivered to the topmost visible item
            under the cursor. If ignored, the event propagates to the item beneath, and
            again until the event is accepted, or it reaches the scene. If no items
            accept the event, it is ignored.</para>
            <para>Note: See items() for a definition of which items are considered
            visible by this function.</para>
            <para>See also QGraphicsItem::wheelEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.OnInputMethodEvent(QtGui.QInputMethodEvent)">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a
            subclass to receive input method events for the scene.</para>
            <para>The default implementation forwards the event to the focusItem().
            If no item currently has focus or the current focus item does not accept
            input methods, this function does nothing.</para>
            <para>See also QGraphicsItem::inputMethodEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.DrawBackground(QtGui.QPainter,QtCore.QRectF)">
            <summary>
            <para>Draws the background of the scene using painter, before any items
            and the foreground are drawn. Reimplement this function to provide a custom
            background for the scene.</para>
            <para>All painting is done in scene coordinates. The rect parameter is
            the exposed rectangle.</para>
            <para>If all you want is to define a color, texture, or gradient for
            the background, you can call setBackgroundBrush() instead.</para>
            <para>See also drawForeground() and drawItems().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.DrawForeground(QtGui.QPainter,QtCore.QRectF)">
            <summary>
            <para>Draws the foreground of the scene using painter, after the
            background and all items have been drawn. Reimplement this function to
            provide a custom foreground for the scene.</para>
            <para>All painting is done in scene coordinates. The rect parameter is
            the exposed rectangle.</para>
            <para>If all you want is to define a color, texture or gradient for the
            foreground, you can call setForegroundBrush() instead.</para>
            <para>See also drawBackground() and drawItems().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.FocusNextPrevChild(System.Boolean)">
            <summary>
            <para>Finds a new widget to give the keyboard focus to, as appropriate
            for Tab and Shift+Tab, and returns true if it can find a new widget, or
            false if it cannot. If next is true, this function searches forward; if
            next is false, it searches backward.</para>
            <para>You can reimplement this function in a subclass of QGraphicsScene
            to provide fine-grained control over how tab focus passes inside your
            scene. The default implementation is based on the tab focus chain defined
            by QGraphicsWidget::setTabOrder().</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.SetSelectionArea(QtGui.QPainterPath,QtCore.Qt.ItemSelectionMode)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the selection area to path using mode to determine if items
            are included in the selection area.</para>
            <para>deviceTransform is the transformation that applies to the view,
            and needs to be provided if the scene contains items that ignore
            transformations.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also clearSelection() and selectionArea().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.SetSelectionArea(QtGui.QPainterPath,QtCore.Qt.ItemSelectionOperation,QtCore.Qt.ItemSelectionMode)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the selection area to path using mode to determine if items
            are included in the selection area.</para>
            <para>deviceTransform is the transformation that applies to the view,
            and needs to be provided if the scene contains items that ignore
            transformations.</para>
            <para>selectionOperation determines what to do with the currently
            selected items.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also clearSelection() and selectionArea().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddEllipse(QtCore.QRectF)">
            <summary>
            <para>Creates and adds an ellipse item to the scene, and returns the
            item pointer. The geometry of the ellipse is defined by rect, and its pen
            and brush are initialized to pen and brush.</para>
            <para>Note that the item's geometry is provided in item coordinates,
            and its position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addLine(), addPath(), addPixmap(), addRect(), addText(),
            addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddEllipse(QtCore.QRectF,QtGui.QPen)">
            <summary>
            <para>Creates and adds an ellipse item to the scene, and returns the
            item pointer. The geometry of the ellipse is defined by rect, and its pen
            and brush are initialized to pen and brush.</para>
            <para>Note that the item's geometry is provided in item coordinates,
            and its position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addLine(), addPath(), addPixmap(), addRect(), addText(),
            addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddLine(QtCore.QLineF)">
            <summary>
            <para>Creates and adds a line item to the scene, and returns the item
            pointer. The geometry of the line is defined by line, and its pen is
            initialized to pen.</para>
            <para>Note that the item's geometry is provided in item coordinates,
            and its position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addEllipse(), addPath(), addPixmap(), addRect(),
            addText(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddPath(QtGui.QPainterPath)">
            <summary>
            <para>Creates and adds a path item to the scene, and returns the item
            pointer. The geometry of the path is defined by path, and its pen and brush
            are initialized to pen and brush.</para>
            <para>Note that the item's geometry is provided in item coordinates,
            and its position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addEllipse(), addLine(), addPixmap(), addRect(),
            addText(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddPath(QtGui.QPainterPath,QtGui.QPen)">
            <summary>
            <para>Creates and adds a path item to the scene, and returns the item
            pointer. The geometry of the path is defined by path, and its pen and brush
            are initialized to pen and brush.</para>
            <para>Note that the item's geometry is provided in item coordinates,
            and its position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addEllipse(), addLine(), addPixmap(), addRect(),
            addText(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddPolygon(QtGui.QPolygonF)">
            <summary>
            <para>Creates and adds a polygon item to the scene, and returns the
            item pointer. The polygon is defined by polygon, and its pen and brush are
            initialized to pen and brush.</para>
            <para>Note that the item's geometry is provided in item coordinates,
            and its position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addEllipse(), addLine(), addPath(), addRect(),
            addText(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddPolygon(QtGui.QPolygonF,QtGui.QPen)">
            <summary>
            <para>Creates and adds a polygon item to the scene, and returns the
            item pointer. The polygon is defined by polygon, and its pen and brush are
            initialized to pen and brush.</para>
            <para>Note that the item's geometry is provided in item coordinates,
            and its position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addEllipse(), addLine(), addPath(), addRect(),
            addText(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddRect(QtCore.QRectF)">
            <summary>
            <para>Creates and adds a rectangle item to the scene, and returns the
            item pointer. The geometry of the rectangle is defined by rect, and its pen
            and brush are initialized to pen and brush.</para>
            <para>Note that the item's geometry is provided in item coordinates,
            and its position is initialized to (0, 0). For example, if a QRect(50, 50,
            100, 100) is added, its top-left corner will be at (50, 50) relative to the
            origin in the items coordinate system.</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addEllipse(), addLine(), addPixmap(), addPixmap(),
            addText(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddRect(QtCore.QRectF,QtGui.QPen)">
            <summary>
            <para>Creates and adds a rectangle item to the scene, and returns the
            item pointer. The geometry of the rectangle is defined by rect, and its pen
            and brush are initialized to pen and brush.</para>
            <para>Note that the item's geometry is provided in item coordinates,
            and its position is initialized to (0, 0). For example, if a QRect(50, 50,
            100, 100) is added, its top-left corner will be at (50, 50) relative to the
            origin in the items coordinate system.</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addEllipse(), addLine(), addPixmap(), addPixmap(),
            addText(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddText(System.String)">
            <summary>
            <para>Creates and adds a text item to the scene, and returns the item
            pointer. The text string is initialized to text, and its font is
            initialized to font.</para>
            <para>The item's position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addEllipse(), addLine(), addPixmap(), addPixmap(),
            addRect(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddSimpleText(System.String)">
            <summary>
            <para>Creates and adds a QGraphicsSimpleTextItem to the scene, and
            returns the item pointer. The text string is initialized to text, and its
            font is initialized to font.</para>
            <para>The item's position is initialized to (0, 0).</para>
            <para>If the item is visible (i.e., QGraphicsItem::isVisible() returns
            true), QGraphicsScene will emit changed() once control goes back to the
            event loop.</para>
            <para>See also addEllipse(), addLine(), addPixmap(), addPixmap(),
            addRect(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddEllipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            addEllipse(QRectF(x, y, w, h), pen, brush).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddEllipse(System.Double,System.Double,System.Double,System.Double,QtGui.QPen)">
            <summary>
            <para>This convenience function is equivalent to calling
            addEllipse(QRectF(x, y, w, h), pen, brush).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            addLine(QLineF(x1, y1, x2, y2), pen).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This convenience function is equivalent to calling
            addRect(QRectF(x, y, w, h), pen, brush).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScene.AddRect(System.Double,System.Double,System.Double,System.Double,QtGui.QPen)">
            <summary>
            <para>This convenience function is equivalent to calling
            addRect(QRectF(x, y, w, h), pen, brush).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.SceneRectChanged">
            <summary>
            <para>This signal is emitted by QGraphicsScene whenever the scene rect changes. The rect parameter is the new scene rectangle.</para>
            <para>See also QGraphicsView::updateSceneRect().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.SelectionChanged">
            <summary>
            <para>This signal is emitted by QGraphicsScene whenever the selection changes. You can call selectedItems() to get the new list of selected items.</para>
            <para>The selection changes whenever an item is selected or unselected, a selection area is set, cleared or otherwise changed, if a preselected item is added to the scene, or if a selected item is removed from the scene.</para>
            <para>QGraphicsScene emits this signal only once for group selection operations. For example, if you set a selection area, select or unselect a QGraphicsItemGroup, or if you add or remove from the scene a parent item that contains several selected items, selectionChanged() is emitted only once after the operation has completed (instead of once for each item).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setSelectionArea(), selectedItems(), and QGraphicsItem::setSelected().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.FocusItemChanged">
            <summary>
            <para>This signal is emitted by QGraphicsScene whenever focus changes in the scene (i.e., when an item gains or loses input focus, or when focus passes from one item to another). You can connect to this signal if you need to keep track of when other items gain input focus. It is particularly useful for implementing virtual keyboards, input methods, and cursor items.</para>
            <para>oldFocusItem is a pointer to the item that previously had focus, or 0 if no item had focus before the signal was emitted. newFocusItem is a pointer to the item that gained input focus, or 0 if focus was lost. reason is the reason for the focus change (e.g., if the scene was deactivated while an input field had focus, oldFocusItem would point to the input field item, newFocusItem would be 0, and reason would be Qt::ActiveWindowFocusReason.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.ContextMenuEvent">
            <summary>
            <para>This event handler, for event contextMenuEvent, can be reimplemented in a subclass to receive context menu events. The default implementation forwards the event to the topmost visible item that accepts context menu events at the position of the event. If no items accept context menu events at this position, the event is ignored.</para>
            <para>Note: See items() for a definition of which items are considered visible by this function.</para>
            <para>See also QGraphicsItem::contextMenuEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.DragEnterEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a subclass to receive drag enter events for the scene.</para>
            <para>The default implementation accepts the event and prepares the scene to accept drag move events.</para>
            <para>See also QGraphicsItem::dragEnterEvent(), dragMoveEvent(), dragLeaveEvent(), and dropEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.DragMoveEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a subclass to receive drag move events for the scene.</para>
            <para>Note: See items() for a definition of which items are considered visible by this function.</para>
            <para>See also QGraphicsItem::dragMoveEvent(), dragEnterEvent(), dragLeaveEvent(), and dropEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.DragLeaveEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a subclass to receive drag leave events for the scene.</para>
            <para>See also QGraphicsItem::dragLeaveEvent(), dragEnterEvent(), dragMoveEvent(), and dropEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.DropEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a subclass to receive drop events for the scene.</para>
            <para>See also QGraphicsItem::dropEvent(), dragEnterEvent(), dragMoveEvent(), and dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.FocusInEvent">
            <summary>
            <para>This event handler, for event focusEvent, can be reimplemented in a subclass to receive focus in events.</para>
            <para>The default implementation sets focus on the scene, and then on the last focus item.</para>
            <para>See also QGraphicsItem::focusOutEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.FocusOutEvent">
            <summary>
            <para>This event handler, for event focusEvent, can be reimplemented in a subclass to receive focus out events.</para>
            <para>The default implementation removes focus from any focus item, then removes focus from the scene.</para>
            <para>See also QGraphicsItem::focusInEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.HelpEvent">
            <summary>
            <para>This event handler, for event helpEvent, can be reimplemented in a subclass to receive help events. The events are of type QEvent::ToolTip, which are created when a tooltip is requested.</para>
            <para>The default implementation shows the tooltip of the topmost visible item, i.e., the item with the highest z-value, at the mouse cursor position. If no item has a tooltip set, this function does nothing.</para>
            <para>Note: See items() for a definition of which items are considered visible by this function.</para>
            <para>See also QGraphicsItem::toolTip() and QGraphicsSceneHelpEvent.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.KeyPressEvent">
            <summary>
            <para>This event handler, for event keyEvent, can be reimplemented in a subclass to receive keypress events. The default implementation forwards the event to current focus item.</para>
            <para>See also QGraphicsItem::keyPressEvent() and focusItem().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.KeyReleaseEvent">
            <summary>
            <para>This event handler, for event keyEvent, can be reimplemented in a subclass to receive key release events. The default implementation forwards the event to current focus item.</para>
            <para>See also QGraphicsItem::keyReleaseEvent() and focusItem().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.MousePressEvent">
            <summary>
            <para>This event handler, for event mouseEvent, can be reimplemented in a subclass to receive mouse press events for the scene.</para>
            <para>The default implementation depends on the state of the scene. If there is a mouse grabber item, then the event is sent to the mouse grabber. Otherwise, it is forwarded to the topmost visible item that accepts mouse events at the scene position from the event, and that item promptly becomes the mouse grabber item.</para>
            <para>If there is no item at the given position on the scene, the selection area is reset, any focus item loses its input focus, and the event is then ignored.</para>
            <para>Note: See items() for a definition of which items are considered visible by this function.</para>
            <para>See also QGraphicsItem::mousePressEvent() and QGraphicsItem::setAcceptedMouseButtons().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.MouseMoveEvent">
            <summary>
            <para>This event handler, for event mouseEvent, can be reimplemented in a subclass to receive mouse move events for the scene.</para>
            <para>The default implementation depends on the mouse grabber state. If there is a mouse grabber item, the event is sent to the mouse grabber. If there are any items that accept hover events at the current position, the event is translated into a hover event and accepted; otherwise it's ignored.</para>
            <para>See also QGraphicsItem::mousePressEvent(), QGraphicsItem::mouseReleaseEvent(), QGraphicsItem::mouseDoubleClickEvent(), and QGraphicsItem::setAcceptedMouseButtons().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.MouseReleaseEvent">
            <summary>
            <para>This event handler, for event mouseEvent, can be reimplemented in a subclass to receive mouse release events for the scene.</para>
            <para>The default implementation depends on the mouse grabber state. If there is no mouse grabber, the event is ignored. Otherwise, if there is a mouse grabber item, the event is sent to the mouse grabber. If this mouse release represents the last pressed button on the mouse, the mouse grabber item then loses the mouse grab.</para>
            <para>See also QGraphicsItem::mousePressEvent(), QGraphicsItem::mouseMoveEvent(), QGraphicsItem::mouseDoubleClickEvent(), and QGraphicsItem::setAcceptedMouseButtons().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.MouseDoubleClickEvent">
            <summary>
            <para>This event handler, for event mouseEvent, can be reimplemented in a subclass to receive mouse doubleclick events for the scene.</para>
            <para>If someone doubleclicks on the scene, the scene will first receive a mouse press event, followed by a release event (i.e., a click), then a doubleclick event, and finally a release event. If the doubleclick event is delivered to a different item than the one that received the first press and release, it will be delivered as a press event. However, tripleclick events are not delivered as doubleclick events in this case.</para>
            <para>The default implementation is similar to mousePressEvent().</para>
            <para>Note: See items() for a definition of which items are considered visible by this function.</para>
            <para>See also QGraphicsItem::mousePressEvent(), QGraphicsItem::mouseMoveEvent(), QGraphicsItem::mouseReleaseEvent(), and QGraphicsItem::setAcceptedMouseButtons().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.WheelEvent">
            <summary>
            <para>This event handler, for event wheelEvent, can be reimplemented in a subclass to receive mouse wheel events for the scene.</para>
            <para>By default, the event is delivered to the topmost visible item under the cursor. If ignored, the event propagates to the item beneath, and again until the event is accepted, or it reaches the scene. If no items accept the event, it is ignored.</para>
            <para>Note: See items() for a definition of which items are considered visible by this function.</para>
            <para>See also QGraphicsItem::wheelEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScene.InputMethodEvent">
            <summary>
            <para>This event handler, for event event, can be reimplemented in a subclass to receive input method events for the scene.</para>
            <para>The default implementation forwards the event to the focusItem(). If no item currently has focus or the current focus item does not accept input methods, this function does nothing.</para>
            <para>See also QGraphicsItem::inputMethodEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.SceneRect">
            <summary>
            <para>This property holds the scene rectangle; the bounding rectangle
            of the scene.</para>
            <para>The scene rectangle defines the extent of the scene. It is
            primarily used by QGraphicsView to determine the view's default scrollable
            area, and by QGraphicsScene to manage item indexing.</para>
            <para>If unset, or if set to a null QRectF, sceneRect() will return the
            largest bounding rect of all items on the scene since the scene was created
            (i.e., a rectangle that grows when items are added to or moved in the
            scene, but never shrinks).</para>
            <para>See also width(), height(), and QGraphicsView::sceneRect.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.itemIndexMethod">
            <summary>
            <para>This property holds the item indexing method.</para>
            <para>QGraphicsScene applies an indexing algorithm to the scene, to
            speed up item discovery functions like items() and itemAt(). Indexing is
            most efficient for static scenes (i.e., where items don't move around). For
            dynamic scenes, or scenes with many animated items, the index bookkeeping
            can outweight the fast lookup speeds.</para>
            <para>For the common case, the default index method BspTreeIndex works
            fine. If your scene uses many animations and you are experiencing slowness,
            you can disable indexing by calling setItemIndexMethod(NoIndex).</para>
            <para>See also bspTreeDepth.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.SortCacheEnabled">
            <summary>
            <para>This property holds whether sort caching is enabled.</para>
            <para>Since Qt 4.6, this property has no effect.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.BspTreeDepth">
            <summary>
            <para>This property holds the depth of QGraphicsScene's BSP index
            tree.</para>
            <para>This property has no effect when NoIndex is used.</para>
            <para>This value determines the depth of QGraphicsScene's BSP tree. The
            depth directly affects QGraphicsScene's performance and memory usage; the
            latter growing exponentially with the depth of the tree. With an optimal
            tree depth, QGraphicsScene can instantly determine the locality of items,
            even for scenes with thousands or millions of items. This also greatly
            improves rendering performance.</para>
            <para>By default, the value is 0, in which case Qt will guess a
            reasonable default depth based on the size, location and number of items in
            the scene. If these parameters change frequently, however, you may
            experience slowdowns as QGraphicsScene retunes the depth internally. You
            can avoid potential slowdowns by fixating the tree depth through setting
            this property.</para>
            <para>The depth of the tree and the size of the scene rectangle decide
            the granularity of the scene's partitioning. The size of each scene segment
            is determined by the following algorithm:</para>
            <para>QSizeF segmentSize = sceneRect().size() / pow(2, depth -
            1);</para>
            <para>The BSP tree has an optimal size when each segment contains
            between 0 and 10 items.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            <para>See also itemIndexMethod.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.StickyFocus">
            <summary>
            <para>This property holds whether clicking into the scene background
            will clear focus.</para>
            <para>In a QGraphicsScene with stickyFocus set to true, focus will
            remain unchanged when the user clicks into the scene background or on an
            item that does not accept focus. Otherwise, focus will be cleared.</para>
            <para>By default, this property is false.</para>
            <para>Focus changes in response to a mouse press. You can reimplement
            mousePressEvent() in a subclass of QGraphicsScene to toggle this property
            based on where the user has clicked.</para>
            <para>This property was introduced in  Qt 4.6.</para>
            <para>See also clearFocus() and setFocusItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.BackgroundBrush">
            <summary>
            <para>This property holds the background brush of the scene.</para>
            <para>Set this property to changes the scene's background to a
            different color, gradient or texture. The default background brush is
            Qt::NoBrush. The background is drawn before (behind) the items.</para>
            <para>Example:</para>
            <para>QGraphicsScene scene;</para>
            <para>QGraphicsView view(&amp;scene);</para>
            <para>view.show();</para>
            <para></para>
            <para>// a blue background</para>
            <para>scene.setBackgroundBrush(Qt::blue);</para>
            <para></para>
            <para>// a gradient background</para>
            <para>QRadialGradient gradient(0, 0, 10);</para>
            <para>gradient.setSpread(QGradient::RepeatSpread);</para>
            <para>scene.setBackgroundBrush(gradient);</para>
            <para>QGraphicsScene::render() calls drawBackground() to draw the scene
            background. For more detailed control over how the background is drawn, you
            can reimplement drawBackground() in a subclass of QGraphicsScene.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.ForegroundBrush">
            <summary>
            <para>This property holds the foreground brush of the scene.</para>
            <para>Change this property to set the scene's foreground to a different
            color, gradient or texture.</para>
            <para>The foreground is drawn after (on top of) the items. The default
            foreground brush is Qt::NoBrush ( i.e. the foreground is not drawn).</para>
            <para>Example:</para>
            <para>QGraphicsScene scene;</para>
            <para>QGraphicsView view(&amp;scene);</para>
            <para>view.show();</para>
            <para></para>
            <para>// a white semi-transparent foreground</para>
            <para>scene.setForegroundBrush(QColor(255, 255, 255, 127));</para>
            <para></para>
            <para>// a grid foreground</para>
            <para>scene.setForegroundBrush(QBrush(Qt::lightGray,
            Qt::CrossPattern));</para>
            <para>QGraphicsScene::render() calls drawForeground() to draw the scene
            foreground. For more detailed control over how the foreground is drawn, you
            can reimplement the drawForeground() function in a QGraphicsScene
            subclass.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.Style">
            <summary>
            <para>Returns the scene's style, or the same as QApplication::style()
            if the scene has not been explicitly assigned a style.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setStyle().</para>
            <para></para>
            <para>Sets or replaces the style of the scene to style, and reparents
            the style to this scene. Any previously assigned style is deleted. The
            scene's style defaults to QApplication::style(), and serves as the default
            for all QGraphicsWidget items in the scene.</para>
            <para>Changing the style, either directly by calling this function, or
            indirectly by calling QApplication::setStyle(), will automatically update
            the style for all widgets in the scene that do not have a style explicitly
            assigned to them.</para>
            <para>If style is 0, QGraphicsScene will revert to
            QApplication::style().</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also style().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.Font">
            <summary>
            <para>This property holds the scene's default font.</para>
            <para>This property provides the scene's font. The scene font defaults
            to, and resolves all its entries from, QApplication::font.</para>
            <para>If the scene's font changes, either directly through setFont() or
            indirectly when the application font changes, QGraphicsScene first sends
            itself a FontChange event, and it then sends FontChange events to all
            top-level widget items in the scene. These items respond by resolving their
            own fonts to the scene, and they then notify their children, who again
            notify their children, and so on, until all widget items have updated their
            fonts.</para>
            <para>Changing the scene font, (directly or indirectly through
            QApplication::setFont(),) automatically schedules a redraw the entire
            scene.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also QWidget::font, QApplication::setFont(), palette, and
            style().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.Palette">
            <summary>
            <para>This property holds the scene's default palette.</para>
            <para>This property provides the scene's palette. The scene palette
            defaults to, and resolves all its entries from,
            QApplication::palette.</para>
            <para>If the scene's palette changes, either directly through
            setPalette() or indirectly when the application palette changes,
            QGraphicsScene first sends itself a PaletteChange event, and it then sends
            PaletteChange events to all top-level widget items in the scene. These
            items respond by resolving their own palettes to the scene, and they then
            notify their children, who again notify their children, and so on, until
            all widget items have updated their palettes.</para>
            <para>Changing the scene palette, (directly or indirectly through
            QApplication::setPalette(),) automatically schedules a redraw the entire
            scene.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also QWidget::palette, QApplication::setPalette(), font, and
            style().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.ActivePanel">
            <summary>
            <para>Returns the current active panel, or 0 if no panel is currently
            active.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also QGraphicsScene::setActivePanel().</para>
            <para></para>
            <para>Activates item, which must be an item in this scene. You can also
            pass 0 for item, in which case QGraphicsScene will deactivate any currently
            active panel.</para>
            <para>If the scene is currently inactive, item remains inactive until
            the scene becomes active (or, ir item is 0, no item will be
            activated).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also activePanel(), isActive(), and
            QGraphicsItem::isActive().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.ActiveWindow">
            <summary>
            <para>Returns the current active window, or 0 if no window is currently
            active.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QGraphicsScene::setActiveWindow().</para>
            <para></para>
            <para>Activates widget, which must be a widget in this scene. You can
            also pass 0 for widget, in which case QGraphicsScene will deactivate any
            currently active window.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also activeWindow() and
            QGraphicsWidget::isActiveWindow().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.MinimumRenderSize">
            <summary>
            <para>This property holds the minimal view-transformed size an item
            must have to be drawn.</para>
            <para>When the scene is rendered, any item whose width or height,
            transformed to the target view, is smaller that minimumRenderSize(), will
            not be rendered. If an item is not rendered and it clips its children items
            they will also not be rendered. Set this value to speed up rendering of
            scenes with many objects rendered on a zoomed out view.</para>
            <para>The default value is 0. If unset, or if set to 0 or a negative
            value, all items will always be rendered.</para>
            <para>For example, setting this property can be especially useful if a
            scene is rendered by multiple views, one of which serves as an overview
            which always displays all items. In scenes with many items, such a view
            will use a high scaling factor so that all items can be shown. Due to the
            scaling, smaller items will only make an insignificant contribution to the
            final rendered scene. To avoid drawing these items and reduce the time
            necessary to render the scene, you can call setMinimumRenderSize() with a
            non-negative value.</para>
            <para>Note: Items that are not drawn as a result of being too small,
            are still returned by methods such as items() and itemAt(), and participate
            in collision detection and interactions. It is recommended that you set
            minimumRenderSize() to a value less than or equal to 1 in order to avoid
            large unrendered items that are interactive.</para>
            <para>This property was introduced in  Qt 5.4.</para>
            <para>See also
            QStyleOptionGraphicsItem::levelOfDetailFromTransform().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.SelectionArea">
            <summary>
            <para>Returns the selection area that was previously set with
            setSelectionArea(), or an empty QPainterPath if no selection area has been
            set.</para>
            <para>See also setSelectionArea().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.FocusItem">
            <summary>
            <para>When the scene is active, this functions returns the scene's
            current focus item, or 0 if no item currently has focus. When the scene is
            inactive, this functions returns the item that will gain input focus when
            the scene becomes active.</para>
            <para>The focus item receives keyboard input when the scene receives a
            key event.</para>
            <para>See also setFocusItem(), QGraphicsItem::hasFocus(), and
            isActive().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.Width">
            <summary>
            <para>This convenience function is equivalent to calling
            sceneRect().width().</para>
            <para>See also height().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.Height">
            <summary>
            <para>This convenience function is equivalent to calling
            sceneRect().height().</para>
            <para>See also width().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.ItemsBoundingRect">
            <summary>
            <para>Calculates and returns the bounding rect of all items on the
            scene. This function works by iterating over all items, and because of
            this, it can be slow for large scenes.</para>
            <para>See also sceneRect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.HasFocus">
            <summary>
            <para>Returns true if the scene has focus; otherwise returns false. If
            the scene has focus, it will will forward key events from QKeyEvent to any
            item that has focus.</para>
            <para>See also setFocus() and setFocusItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.MouseGrabberItem">
            <summary>
            <para>Returns the current mouse grabber item, or 0 if no item is
            currently grabbing the mouse. The mouse grabber item is the item that
            receives all mouse events sent to the scene.</para>
            <para>An item becomes a mouse grabber when it receives and accepts a
            mouse press event, and it stays the mouse grabber until either of the
            following events occur:</para>
            <para></para>
            <para>If the item receives a mouse release event when there are no
            other buttons pressed, it loses the mouse grab.</para>
            <para>If the item becomes invisible (i.e., someone calls
            item-&gt;setVisible(false)), or if it becomes disabled (i.e., someone calls
            item-&gt;setEnabled(false)), it loses the mouse grab.</para>
            <para>If the item is removed from the scene, it loses the mouse
            grab.</para>
            <para></para>
            <para>If the item loses its mouse grab, the scene will ignore all mouse
            events until a new item grabs the mouse (i.e., until a new item receives a
            mouse press event).</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScene.IsActive">
            <summary>
            <para>Returns true if the scene is active (e.g., it's viewed by at
            least one QGraphicsView that is active); otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also QGraphicsItem::isActive() and
            QWidget::isActiveWindow().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsScene.ItemIndexMethod">
            <summary>
            <para>This enum describes the indexing algorithms QGraphicsScene
            provides for managing positional information about items on the
            scene.</para>
            <para>See also setItemIndexMethod() and bspTreeDepth.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGraphicsScene.ItemIndexMethod.BspTreeIndex">
            <summary>A Binary Space Partitioning tree is applied. All QGraphicsScene's item location algorithms are of an order close to logarithmic complexity, by making use of binary search. Adding, moving and removing items is logarithmic. This approach is best for static scenes (i.e., scenes where most items do not move).</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsScene.ItemIndexMethod.NoIndex">
            <summary>No index is applied. Item location is of linear complexity, as all items on the scene are searched. Adding, moving and removing items, however, is done in constant time. This approach is ideal for dynamic scenes, where many items are added, moved or removed continuously.</summary>
        </member>
        <member name="T:QtWidgets.QGraphicsScene.SceneLayer">
            <summary>
            <para>This enum describes the rendering layers in a QGraphicsScene.
            When QGraphicsScene draws the scene contents, it renders each of these
            layers separately, in order.</para>
            <para>Each layer represents a flag that can be OR'ed together when
            calling functions such as invalidate() or
            QGraphicsView::invalidateScene().</para>
            <para>This enum was introduced or modified in  Qt 4.3.</para>
            <para>The SceneLayers type is a typedef for QFlags&lt;SceneLayer&gt;.
            It stores an OR combination of SceneLayer values.</para>
            <para>See also invalidate() and
            QGraphicsView::invalidateScene().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGraphicsScene.SceneLayer.ItemLayer">
            <summary>The item layer. QGraphicsScene renders all items are in this layer by calling the virtual function drawItems(). The item layer is drawn after the background layer, but before the foreground layer.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsScene.SceneLayer.BackgroundLayer">
            <summary>The background layer. QGraphicsScene renders the scene's background in this layer by calling the virtual function drawBackground(). The background layer is drawn first of all layers.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsScene.SceneLayer.ForegroundLayer">
            <summary>The foreground layer. QGraphicsScene renders the scene's foreground in this layer by calling the virtual function drawForeground(). The foreground layer is drawn last of all layers.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsScene.SceneLayer.AllLayers">
            <summary>All layers; this value represents a combination of all three layers.</summary>
        </member>
        <member name="T:QtWidgets.QGraphicsSceneEvent">
            <summary>
            <para>The QGraphicsSceneEvent class provides a base class for all
            graphics view related events.</para>
            </summary>
            <remarks>
            <para>When a QGraphicsView receives Qt mouse, keyboard, and drag and
            drop events (QMouseEvent, QKeyEvent, QDragEvent, etc.), it translates them
            into instances of QGraphicsSceneEvent subclasses and forwards them to the
            QGraphicsScene it displays. The scene then forwards the events to the
            relevant items.</para>
            <para>For example, when a QGraphicsView receives a QMouseEvent of type
            MousePress as a response to a user click, the view sends a
            QGraphicsSceneMouseEvent of type GraphicsSceneMousePress to the underlying
            QGraphicsScene through its mousePressEvent() function. The default
            QGraphicsScene::mousePressEvent() implementation determines which item was
            clicked and forwards the event to QGraphicsItem::mousePressEvent().</para>
            <para>Subclasses such as QGraphicsSceneMouseEvent and
            QGraphicsSceneContextMenuEvent provide the coordinates from the original
            QEvent in screen, scene, and item coordinates (see screenPos(), scenePos(),
            and pos()). The item coordinates are set by the QGraphicsScene before it
            forwards the event to the event to a QGraphicsItem. The mouse events also
            add the possibility to retrieve the coordinates from the last event
            received by the view (see lastScreenPos(), lastScenePos(), and
            lastPos()).</para>
            <para></para>
            <para>See also QEvent.</para>
            </remarks>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneEvent.Widget">
            <summary>
            <para>Returns the widget where the event originated, or 0 if the event
            originates from another application.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsSceneMouseEvent">
            <summary>
            <para>The QGraphicsSceneMouseEvent class provides mouse events in the
            graphics view framework.</para>
            </summary>
            <remarks>
            <para>When a QGraphicsView receives a QMouseEvent, it translates it to
            a QGraphicsSceneMouseEvent. The event is then forwarded to the
            QGraphicsScene associated with the view. If the event is not handled by the
            scene, the view may use it, e.g., for the DragMode.</para>
            <para>In addition to containing the item, scene, and screen coordinates
            of the event (as pos(), scenePos(), and screenPos()), mouse events also
            contain the coordinates of the previous mouse event received by the view.
            These can be retrieved with lastPos(), lastScreenPos(), and
            lastScenePos().</para>
            <para></para>
            <para>See also QGraphicsSceneContextMenuEvent,
            QGraphicsSceneHoverEvent, QGraphicsSceneWheelEvent, and QMouseEvent.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsSceneMouseEvent.ButtonDownPos(QtCore.Qt.MouseButton)">
            <summary>
            <para>Returns the mouse cursor position in item coordinates where the
            specified button was clicked.</para>
            <para>See also buttonDownScenePos(), buttonDownScreenPos(), and
            pos().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsSceneMouseEvent.ButtonDownScenePos(QtCore.Qt.MouseButton)">
            <summary>
            <para>Returns the mouse cursor position in scene coordinates where the
            specified button was clicked.</para>
            <para>See also buttonDownPos(), buttonDownScreenPos(), and
            scenePos().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsSceneMouseEvent.ButtonDownScreenPos(QtCore.Qt.MouseButton)">
            <summary>
            <para>Returns the mouse cursor position in screen coordinates where the
            specified button was clicked.</para>
            <para>See also screenPos(), buttonDownPos(), and
            buttonDownScenePos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneMouseEvent.Pos">
            <summary>
            <para>Returns the mouse cursor position in item coordinates.</para>
            <para>See also scenePos(), screenPos(), and lastPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneMouseEvent.ScenePos">
            <summary>
            <para>Returns the mouse cursor position in scene coordinates.</para>
            <para>See also pos(), screenPos(), and lastScenePos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneMouseEvent.ScreenPos">
            <summary>
            <para>Returns the mouse cursor position in screen coordinates.</para>
            <para>See also pos(), scenePos(), and lastScreenPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneMouseEvent.LastPos">
            <summary>
            <para>Returns the last recorded mouse cursor position in item
            coordinates.</para>
            <para>See also lastScenePos(), lastScreenPos(), and pos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneMouseEvent.LastScenePos">
            <summary>
            <para>Returns the last recorded mouse cursor position in scene
            coordinates. The last recorded position is the position of the previous
            mouse event received by the view that created the event.</para>
            <para>See also lastPos(), lastScreenPos(), and scenePos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneMouseEvent.LastScreenPos">
            <summary>
            <para>Returns the last recorded mouse cursor position in screen
            coordinates. The last recorded position is the position of the previous
            mouse event received by the view that created the event.</para>
            <para>See also lastPos(), lastScenePos(), and screenPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneMouseEvent.Buttons">
            <summary>
            <para>Returns the combination of mouse buttons that were pressed at the
            time the event was sent.</para>
            <para>See also button() and modifiers().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneMouseEvent.Button">
            <summary>
            <para>Returns the mouse button (if any) that caused the event.</para>
            <para>See also buttons() and modifiers().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneMouseEvent.Modifiers">
            <summary>
            <para>Returns the keyboard modifiers in use at the time the event was
            sent.</para>
            <para>See also buttons() and button().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneMouseEvent.Source">
            <summary>
            <para>Returns information about the mouse event source.</para>
            <para>The mouse event source can be used to distinguish between genuine
            and artificial mouse events. The latter are events that are synthesized
            from touch events by the operating system or Qt itself.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also Qt::MouseEventSource and QMouseEvent::source().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneMouseEvent.Flags">
            <summary>
            <para>Returns the mouse event flags.</para>
            <para>The mouse event flags provide additional information about a
            mouse event.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also Qt::MouseEventFlag and QMouseEvent::flags().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsSceneWheelEvent">
            <summary>
            <para>The QGraphicsSceneWheelEvent class provides wheel events in the
            graphics view framework.</para>
            </summary>
            <remarks>
            <para>The QGraphicsSceneWheelEvent class provides wheel events in the
            graphics view framework.</para>
            <para>QWheelEvents received by a QGraphicsView are translated into
            QGraphicsSceneWheelEvents; it translates the QWheelEvent::globalPos() into
            item, scene, and screen coordinates (pos(), scenePos(), and
            screenPos()).</para>
            <para></para>
            <para>See also QGraphicsSceneMouseEvent,
            QGraphicsSceneContextMenuEvent, QGraphicsSceneHoverEvent, and
            QWheelEvent.</para>
            </remarks>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneWheelEvent.Pos">
            <summary>
            <para>Returns the position of the cursor in item coordinates when the
            wheel event occurred.</para>
            <para>See also scenePos() and screenPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneWheelEvent.ScenePos">
            <summary>
            <para>Returns the position of the cursor in scene coordinates when the
            wheel event occurred.</para>
            <para>See also pos() and screenPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneWheelEvent.ScreenPos">
            <summary>
            <para>Returns the position of the cursor in screen coordinates when the
            wheel event occurred.</para>
            <para>See also pos() and scenePos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneWheelEvent.Buttons">
            <summary>
            <para>Returns the mouse buttons that were pressed when the wheel event
            occurred.</para>
            <para>See also modifiers().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneWheelEvent.Modifiers">
            <summary>
            <para>Returns the keyboard modifiers that were active when the wheel
            event occurred.</para>
            <para>See also buttons().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneWheelEvent.Delta">
            <summary>
            <para>Returns the distance that the wheel is rotated, in eighths (1/8s)
            of a degree. A positive value indicates that the wheel was rotated forwards
            away from the user; a negative value indicates that the wheel was rotated
            backwards toward the user.</para>
            <para>Most mouse types work in steps of 15 degrees, in which case the
            delta value is a multiple of 120 (== 15 * 8).</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneWheelEvent.Orientation">
            <summary>
            <para>Returns the wheel orientation.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsSceneContextMenuEvent">
            <summary>
            <para>The QGraphicsSceneContextMenuEvent class provides context menu
            events in the graphics view framework.</para>
            </summary>
            <remarks>
            <para>A QContextMenuEvent received by a QGraphicsView is translated
            into a QGraphicsSceneContextMenuEvent. The QContextMenuEvent::globalPos()
            is translated into item, scene, and screen coordinates (pos(), scenePos(),
            and screenPos()).</para>
            <para></para>
            <para>See also QGraphicsSceneMouseEvent, QGraphicsSceneWheelEvent, and
            QContextMenuEvent.</para>
            </remarks>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneContextMenuEvent.Pos">
            <summary>
            <para>Returns the position of the mouse cursor in item coordinates at
            the moment the context menu was requested.</para>
            <para>See also scenePos() and screenPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneContextMenuEvent.ScenePos">
            <summary>
            <para>Returns the position of the mouse cursor in scene coordinates at
            the moment the context menu was requested.</para>
            <para>See also pos() and screenPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneContextMenuEvent.ScreenPos">
            <summary>
            <para>Returns the position of the mouse cursor in screen coordinates at
            the moment the context menu was requested.</para>
            <para>See also pos() and scenePos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneContextMenuEvent.Modifiers">
            <summary>
            <para>Returns the keyboard modifiers in use when the context menu was
            requested.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneContextMenuEvent.reason">
            <summary>
            <para>Returns the reason for the context menu event.</para>
            <para>See also QGraphicsSceneContextMenuEvent::Reason.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsSceneContextMenuEvent.Reason">
            <summary>
            <para>This enum describes the reason why the context event was
            sent.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGraphicsSceneContextMenuEvent.Reason.Mouse">
            <summary>The mouse caused the event to be sent. On most platforms, this means the right mouse button was clicked.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsSceneContextMenuEvent.Reason.Keyboard">
            <summary>The keyboard caused this event to be sent. On Windows and Mac OS X, this means the menu button was pressed.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsSceneContextMenuEvent.Reason.Other">
            <summary>The event was sent by some other means (i.e. not by the mouse or keyboard).</summary>
        </member>
        <member name="T:QtWidgets.QGraphicsSceneHoverEvent">
            <summary>
            <para>The QGraphicsSceneHoverEvent class provides hover events in the
            graphics view framework.</para>
            </summary>
            <remarks>
            <para>When a QGraphicsView receives a QHoverEvent event, it translates
            it into QGraphicsSceneHoverEvent. The event is then forwarded to the
            QGraphicsScene associated with the view.</para>
            <para></para>
            <para>See also QGraphicsSceneMouseEvent,
            QGraphicsSceneContextMenuEvent, QGraphicsSceneWheelEvent, and
            QHoverEvent.</para>
            </remarks>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneHoverEvent.Pos">
            <summary>
            <para>Returns the position of the mouse cursor in item coordinates at
            the moment the hover event was sent.</para>
            <para>See also scenePos() and screenPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneHoverEvent.ScenePos">
            <summary>
            <para>Returns the position of the mouse cursor in scene coordinates at
            the moment the hover event was sent.</para>
            <para>See also pos() and screenPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneHoverEvent.ScreenPos">
            <summary>
            <para>Returns the position of the mouse cursor in screen coordinates at
            the moment the hover event was sent.</para>
            <para>See also pos() and scenePos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneHoverEvent.LastPos">
            <summary>
            <para>Returns the last recorded mouse cursor position in item
            coordinates.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also lastScenePos(), lastScreenPos(), and pos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneHoverEvent.LastScenePos">
            <summary>
            <para>Returns the last recorded, the scene coordinates of the previous
            mouse or hover event received by the view, that created the event mouse
            cursor position in scene coordinates.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also lastPos(), lastScreenPos(), and scenePos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneHoverEvent.LastScreenPos">
            <summary>
            <para>Returns the last recorded mouse cursor position in screen
            coordinates. The last recorded position is the position of the previous
            mouse or hover event received by the view that created the event.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also lastPos(), lastScenePos(), and screenPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneHoverEvent.Modifiers">
            <summary>
            <para>Returns the keyboard modifiers at the moment the hover event was
            sent.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsSceneHelpEvent">
            <summary>
            <para>The QGraphicsSceneHelpEvent class provides events when a tooltip
            is requested.</para>
            </summary>
            <remarks>
            <para>When a QGraphicsView receives a QEvent of type QEvent::ToolTip,
            it creates a QGraphicsSceneHelpEvent, which is forwarded to the scene. You
            can set a tooltip on a QGraphicsItem with setToolTip(); by default
            QGraphicsScene displays the tooltip of the QGraphicsItem with the highest
            z-value (i.e, the top-most item) under the mouse position.</para>
            <para>QGraphicsView does not forward events when &quot;What's
            This&quot; and status tip help is requested. If you need this, you can
            reimplement QGraphicsView::viewportEvent() and forward QStatusTipEvent
            events and QEvents of type QEvent::WhatsThis to the scene.</para>
            <para></para>
            <para>See also QEvent.</para>
            </remarks>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneHelpEvent.ScenePos">
            <summary>
            <para>Returns the position of the mouse cursor in scene coordinates at
            the moment the help event was sent.</para>
            <para>See also screenPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneHelpEvent.ScreenPos">
            <summary>
            <para>Returns the position of the mouse cursor in screen coordinates at
            the moment the help event was sent.</para>
            <para>See also scenePos().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsSceneDragDropEvent">
            <summary>
            <para>The QGraphicsSceneDragDropEvent class provides events for drag
            and drop in the graphics view framework.</para>
            </summary>
            <remarks>
            <para>QGraphicsView inherits the drag and drop functionality provided
            by QWidget. When it receives a drag and drop event, it translates it to a
            QGraphicsSceneDragDropEvent.</para>
            <para>QGraphicsSceneDragDropEvent stores events of type
            GraphicsSceneDragEnter, GraphicsSceneDragLeave, GraphicsSceneDragMove, or
            GraphicsSceneDrop.</para>
            <para>QGraphicsSceneDragDropEvent contains the position of the mouse
            cursor in both item, scene, and screen coordinates; this can be retrieved
            with pos(), scenePos(), and screenPos().</para>
            <para>The scene sends the event to the first QGraphicsItem under the
            mouse cursor that accepts drops; a graphics item is set to accept drops
            with setAcceptDrops().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsSceneDragDropEvent.AcceptProposedAction">
            <summary>
            <para>Sets the proposed action as accepted, i.e, the drop action is set
            to the proposed action. This is equal to:</para>
            <para>setDropAction(proposedAction());</para>
            <para>When using this function, one should not call accept().</para>
            <para>See also dropAction(), setDropAction(), and
            proposedAction().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneDragDropEvent.Pos">
            <summary>
            <para>Returns the mouse position of the event relative to the view that
            sent the event.</para>
            <para>See also QGraphicsView, screenPos(), and scenePos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneDragDropEvent.ScenePos">
            <summary>
            <para>Returns the position of the mouse in scene coordinates.</para>
            <para>See also pos() and screenPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneDragDropEvent.ScreenPos">
            <summary>
            <para>Returns the position of the mouse relative to the screen.</para>
            <para>See also pos() and scenePos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneDragDropEvent.Buttons">
            <summary>
            <para>Returns a Qt::MouseButtons value indicating which buttons were
            pressed on the mouse when this mouse event was generated.</para>
            <para>See also Qt::MouseButtons.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneDragDropEvent.Modifiers">
            <summary>
            <para>Returns the keyboard modifiers that were pressed when the drag
            and drop event was created.</para>
            <para>See also Qt::KeyboardModifiers.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneDragDropEvent.PossibleActions">
            <summary>
            <para>Returns the possible drop actions that the drag and drop can
            result in.</para>
            <para>See also Qt::DropActions.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneDragDropEvent.ProposedAction">
            <summary>
            <para>Returns the drop action that is proposed, i.e., preferred. The
            action must be one of the possible actions as defined by
            possibleActions().</para>
            <para>See also Qt::DropAction and possibleActions().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneDragDropEvent.DropAction">
            <summary>
            <para>Returns the action that was performed in this drag and drop. This
            should be set by the receiver of the drop and is returned by
            QDrag::exec().</para>
            <para>See also setDropAction() and acceptProposedAction().</para>
            <para></para>
            <para>This function lets the receiver of the drop set the drop action
            that was performed to action, which should be one of the possible actions.
            Call accept() in stead of acceptProposedAction() if you use this
            function.</para>
            <para>See also dropAction(), accept(), and possibleActions().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneDragDropEvent.Source">
            <summary>
            <para>This function returns the QGraphicsView that created the
            QGraphicsSceneDragDropEvent.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneDragDropEvent.MimeData">
            <summary>
            <para>This function returns the MIME data of the event.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsSceneResizeEvent">
            <summary>
            <para>The QGraphicsSceneResizeEvent class provides events for widget
            resizing in the graphics view framework.</para>
            </summary>
            <remarks>
            <para>A QGraphicsWidget sends itself a QGraphicsSceneResizeEvent
            immediately when its geometry changes.</para>
            <para>It's similar to QResizeEvent, but its sizes, oldSize() and
            newSize(), use QSizeF instead of QSize.</para>
            <para></para>
            <para>See also QGraphicsWidget::setGeometry() and
            QGraphicsWidget::resize().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsSceneResizeEvent.#ctor">
            <summary>
            <para>Constructs a QGraphicsSceneResizeEvent.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneResizeEvent.OldSize">
            <summary>
            <para>Returns the old size (i.e., the size immediately before the
            widget was resized).</para>
            <para>See also newSize() and QGraphicsWidget::resize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneResizeEvent.NewSize">
            <summary>
            <para>Returns the new size (i.e., the current size).</para>
            <para>See also oldSize() and QGraphicsWidget::resize().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsSceneMoveEvent">
            <summary>
            <para>The QGraphicsSceneMoveEvent class provides events for widget
            moving in the graphics view framework.</para>
            </summary>
            <remarks>
            <para>A QGraphicsWidget sends itself a QGraphicsSceneMoveEvent
            immediately when its local position changes. The delivery is implemented as
            part of QGraphicsItem::itemChange().</para>
            <para>It's similar to QMoveEvent, but its positions, oldPos() and
            newPos(), use QPointF instead of QPoint.</para>
            <para></para>
            <para>See also QGraphicsItem::setPos(),
            QGraphicsItem::ItemPositionChange, and
            QGraphicsItem::ItemPositionHasChanged.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsSceneMoveEvent.#ctor">
            <summary>
            <para>Constructs a QGraphicsSceneMoveEvent.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneMoveEvent.OldPos">
            <summary>
            <para>Returns the old position (i.e., the position immediately before
            the widget was moved).</para>
            <para>See also newPos() and QGraphicsItem::setPos().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsSceneMoveEvent.NewPos">
            <summary>
            <para>Returns the new position (i.e., the current position).</para>
            <para>See also oldPos() and QGraphicsItem::setPos().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsTransform">
            <summary>
            <para>The QGraphicsTransform class is an abstract base class for
            building advanced transformations on QGraphicsItems.</para>
            </summary>
            <remarks>
            <para>As an alternative to QGraphicsItem::transform, QGraphicsTransform
            lets you create and control advanced transformations that can be configured
            independently using specialized properties.</para>
            <para>QGraphicsItem allows you to assign any number of
            QGraphicsTransform instances to one QGraphicsItem. Each QGraphicsTransform
            is applied in order, one at a time, to the QGraphicsItem it's assigned
            to.</para>
            <para>QGraphicsTransform is particularly useful for animations. Whereas
            QGraphicsItem::setTransform() lets you assign any transform directly to an
            item, there is no direct way to interpolate between two different
            transformations (e.g., when transitioning between two states, each for
            which the item has a different arbitrary transform assigned). Using
            QGraphicsTransform you can interpolate the property values of each
            independent transformation. The resulting operation is then combined into a
            single transform which is applied to QGraphicsItem.</para>
            <para>Transformations are computed in true 3D space using QMatrix4x4.
            When the transformation is applied to a QGraphicsItem, it will be projected
            back to a 2D QTransform. When multiple QGraphicsTransform objects are
            applied to a QGraphicsItem, all of the transformations are computed in true
            3D space, with the projection back to 2D only occurring after the last
            QGraphicsTransform is applied. The exception to this is QGraphicsRotation,
            which projects back to 2D after each rotation to preserve the perspective
            effect around the X and Y axes.</para>
            <para>If you want to create your own configurable transformation, you
            can create a subclass of QGraphicsTransform (or any or the existing
            subclasses), and reimplement the pure virtual applyTo() function, which
            takes a pointer to a QMatrix4x4. Each operation you would like to apply
            should be exposed as properties (e.g.,
            customTransform-&gt;setVerticalShear(2.5)). Inside you reimplementation of
            applyTo(), you can modify the provided transform respectively.</para>
            <para>QGraphicsTransform can be used together with
            QGraphicsItem::setTransform(), QGraphicsItem::setRotation(), and
            QGraphicsItem::setScale().</para>
            <para></para>
            <para>See also QGraphicsItem::transform(), QGraphicsScale, and
            QGraphicsRotation.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsTransform.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QGraphicsTransform with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTransform.ApplyTo(QtGui.QMatrix4x4)">
            <summary>
            <para>This pure virtual method has to be reimplemented in derived
            classes.</para>
            <para>It applies this transformation to matrix.</para>
            <para>See also QGraphicsItem::transform() and
            QMatrix4x4::toTransform().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsTransform.Update">
            <summary>
            <para>Notifies that this transform operation has changed its parameters
            in such a way that applyTo() will return a different result than
            before.</para>
            <para>When implementing you own custom graphics transform, you must
            call this function every time you change a parameter, to let QGraphicsItem
            know that its transformation needs to be updated.</para>
            <para>See also applyTo().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsScale">
            <summary>
            <para>The QGraphicsScale class provides a scale transformation.</para>
            </summary>
            <remarks>
            <para>QGraphicsScene provides certain parameters to help control how
            the scale should be applied.</para>
            <para>The origin is the point that the item is scaled from (i.e., it
            stays fixed relative to the parent as the rest of the item grows). By
            default the origin is QPointF(0, 0).</para>
            <para>The parameters xScale, yScale, and zScale describe the scale
            factors to apply in horizontal, vertical, and depth directions. They can
            take on any value, including 0 (to collapse the item to a point) or
            negative value. A negative xScale value will mirror the item horizontally.
            A negative yScale value will flip the item vertically. A negative zScale
            will flip the item end for end.</para>
            <para></para>
            <para>See also QGraphicsTransform, QGraphicsItem::setScale(), and
            QTransform::scale().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsScale.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an empty QGraphicsScale object with the given
            parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsScale.ApplyTo(QtGui.QMatrix4x4)">
            <summary>
            <para>Reimplemented from QGraphicsTransform::applyTo().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScale.OriginChanged">
            <summary>
            <para>This property holds the origin of the scale in 3D space.</para>
            <para>All scaling will be done relative to this point (i.e., this point will stay fixed, relative to the parent, when the item is scaled).</para>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	origin() const</para>
            <para> void 	setOrigin(const QVector3D &amp; point)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	originChanged()</para>
            <para></para>
            <para>See also xScale, yScale, and zScale.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScale.XScaleChanged">
            <summary>
            <para>This property holds the horizontal scale factor.</para>
            <para>The scale factor can be any real number; the default value is 1.0. If you set the factor to 0.0, the item will be collapsed to a single point. If you provide a negative value, the item will be mirrored horizontally around its origin.</para>
            <para>Access functions:</para>
            <para></para>
            <para> qreal 	xScale() const</para>
            <para> void 	setXScale(qreal)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	xScaleChanged()</para>
            <para></para>
            <para>See also yScale, zScale, and origin.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScale.YScaleChanged">
            <summary>
            <para>This property holds the vertical scale factor.</para>
            <para>The scale factor can be any real number; the default value is 1.0. If you set the factor to 0.0, the item will be collapsed to a single point. If you provide a negative value, the item will be flipped vertically around its origin.</para>
            <para>Access functions:</para>
            <para></para>
            <para> qreal 	yScale() const</para>
            <para> void 	setYScale(qreal)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	yScaleChanged()</para>
            <para></para>
            <para>See also xScale, zScale, and origin.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScale.ZScaleChanged">
            <summary>
            <para>This property holds the depth scale factor.</para>
            <para>The scale factor can be any real number; the default value is 1.0. If you set the factor to 0.0, the item will be collapsed to a single point. If you provide a negative value, the item will be flipped end for end around its origin.</para>
            <para>Access functions:</para>
            <para></para>
            <para> qreal 	zScale() const</para>
            <para> void 	setZScale(qreal)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	zScaleChanged()</para>
            <para></para>
            <para>See also xScale, yScale, and origin.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsScale.ScaleChanged">
            <summary>
            <para>This signal is emitted whenever the xScale, yScale, or zScale of the object changes.</para>
            <para>See also QGraphicsScale::xScale, QGraphicsScale::yScale, and QGraphicsScale::zScale.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScale.Origin">
            <summary>
            <para>This property holds the origin of the scale in 3D space.</para>
            <para>All scaling will be done relative to this point (i.e., this point
            will stay fixed, relative to the parent, when the item is scaled).</para>
            <para>See also xScale, yScale, and zScale.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScale.XScale">
            <summary>
            <para>This property holds the horizontal scale factor.</para>
            <para>The scale factor can be any real number; the default value is
            1.0. If you set the factor to 0.0, the item will be collapsed to a single
            point. If you provide a negative value, the item will be mirrored
            horizontally around its origin.</para>
            <para>See also yScale, zScale, and origin.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScale.YScale">
            <summary>
            <para>This property holds the vertical scale factor.</para>
            <para>The scale factor can be any real number; the default value is
            1.0. If you set the factor to 0.0, the item will be collapsed to a single
            point. If you provide a negative value, the item will be flipped vertically
            around its origin.</para>
            <para>See also xScale, zScale, and origin.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsScale.ZScale">
            <summary>
            <para>This property holds the depth scale factor.</para>
            <para>The scale factor can be any real number; the default value is
            1.0. If you set the factor to 0.0, the item will be collapsed to a single
            point. If you provide a negative value, the item will be flipped end for
            end around its origin.</para>
            <para>See also xScale, yScale, and origin.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsRotation">
            <summary>
            <para>The QGraphicsRotation class provides a rotation transformation
            around a given axis.</para>
            </summary>
            <remarks>
            <para>You can provide the desired axis by assigning a QVector3D to the
            axis property or by passing a member if Qt::Axis to the setAxis convenience
            function. By default the axis is (0, 0, 1) i.e., rotation around the Z
            axis.</para>
            <para>The angle property, which is provided by QGraphicsRotation, now
            describes the number of degrees to rotate around this axis.</para>
            <para>QGraphicsRotation provides certain parameters to help control how
            the rotation should be applied.</para>
            <para>The origin is the point that the item is rotated around (i.e., it
            stays fixed relative to the parent as the rest of the item is rotated). By
            default the origin is QPointF(0, 0).</para>
            <para>The angle property provides the number of degrees to rotate the
            item clockwise around the origin. This value also be negative, indicating a
            counter-clockwise rotation. For animation purposes it may also be useful to
            provide rotation angles exceeding (-360, 360) degrees, for instance to
            animate how an item rotates several times.</para>
            <para>Note: the final rotation is the combined effect of a rotation in
            3D space followed by a projection back to 2D. If several rotations are
            performed in succession, they will not behave as expected unless they were
            all around the Z axis.</para>
            <para></para>
            <para>See also QGraphicsTransform, QGraphicsItem::setRotation(), and
            QTransform::rotate().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsRotation.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QGraphicsRotation with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsRotation.SetAxis(QtCore.Qt.Axis)">
            <summary>
            <para>This property holds a rotation axis, specified by a vector in 3D
            space.</para>
            <para>This can be any axis in 3D space. By default the axis is (0, 0,
            1), which is aligned with the Z axis. If you provide another axis,
            QGraphicsRotation will provide a transformation that rotates around this
            axis. For example, if you would like to rotate an item around its X axis,
            you could pass (1, 0, 0) as the axis.</para>
            <para>See also QTransform and QGraphicsRotation::angle.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsRotation.ApplyTo(QtGui.QMatrix4x4)">
            <summary>
            <para>Reimplemented from QGraphicsTransform::applyTo().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsRotation.OriginChanged">
            <summary>
            <para>This property holds the origin of the rotation in 3D space.</para>
            <para>All rotations will be done relative to this point (i.e., this point will stay fixed, relative to the parent, when the item is rotated).</para>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	origin() const</para>
            <para> void 	setOrigin(const QVector3D &amp; point)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	originChanged()</para>
            <para></para>
            <para>See also angle.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsRotation.AngleChanged">
            <summary>
            <para>This property holds the angle for clockwise rotation, in degrees.</para>
            <para>The angle can be any real number; the default value is 0.0. A value of 180 will rotate 180 degrees, clockwise. If you provide a negative number, the item will be rotated counter-clockwise. Normally the rotation angle will be in the range (-360, 360), but you can also provide numbers outside of this range (e.g., a angle of 370 degrees gives the same result as 10 degrees). Setting the angle to NaN results in no rotation.</para>
            <para>Access functions:</para>
            <para></para>
            <para> qreal 	angle() const</para>
            <para> void 	setAngle(qreal)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	angleChanged()</para>
            <para></para>
            <para>See also origin.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsRotation.AxisChanged">
            <summary>
            <para>This property holds a rotation axis, specified by a vector in 3D space.</para>
            <para>This can be any axis in 3D space. By default the axis is (0, 0, 1), which is aligned with the Z axis. If you provide another axis, QGraphicsRotation will provide a transformation that rotates around this axis. For example, if you would like to rotate an item around its X axis, you could pass (1, 0, 0) as the axis.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	axis() const</para>
            <para> void 	setAxis(const QVector3D &amp; axis)</para>
            <para> void 	setAxis(Qt::Axis axis)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	axisChanged()</para>
            <para></para>
            <para>See also QTransform and QGraphicsRotation::angle.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsRotation.Origin">
            <summary>
            <para>This property holds the origin of the rotation in 3D
            space.</para>
            <para>All rotations will be done relative to this point (i.e., this
            point will stay fixed, relative to the parent, when the item is
            rotated).</para>
            <para>See also angle.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsRotation.Angle">
            <summary>
            <para>This property holds the angle for clockwise rotation, in
            degrees.</para>
            <para>The angle can be any real number; the default value is 0.0. A
            value of 180 will rotate 180 degrees, clockwise. If you provide a negative
            number, the item will be rotated counter-clockwise. Normally the rotation
            angle will be in the range (-360, 360), but you can also provide numbers
            outside of this range (e.g., a angle of 370 degrees gives the same result
            as 10 degrees). Setting the angle to NaN results in no rotation.</para>
            <para>See also origin.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsRotation.Axis">
            <summary>
            <para>This property holds a rotation axis, specified by a vector in 3D
            space.</para>
            <para>This can be any axis in 3D space. By default the axis is (0, 0,
            1), which is aligned with the Z axis. If you provide another axis,
            QGraphicsRotation will provide a transformation that rotates around this
            axis. For example, if you would like to rotate an item around its X axis,
            you could pass (1, 0, 0) as the axis.</para>
            <para>See also QTransform and QGraphicsRotation::angle.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QScrollArea">
            <summary>
            <para>The QScrollArea class provides a scrolling view onto another
            widget.</para>
            </summary>
            <remarks>
            <para>A scroll area is used to display the contents of a child widget
            within a frame. If the widget exceeds the size of the frame, the view can
            provide scroll bars so that the entire area of the child widget can be
            viewed. The child widget must be specified with setWidget(). For
            example:</para>
            <para>QLabel *imageLabel = new QLabel;</para>
            <para>QImage image(&quot;happyguy.png&quot;);</para>
            <para>imageLabel-&gt;setPixmap(QPixmap::fromImage(image));</para>
            <para></para>
            <para>scrollArea = new QScrollArea;</para>
            <para>scrollArea-&gt;setBackgroundRole(QPalette::Dark);</para>
            <para>scrollArea-&gt;setWidget(imageLabel);</para>
            <para>The code above creates a scroll area (shown in the images below)
            containing an image label. When scaling the image, the scroll area can
            provide the necessary scroll bars:</para>
            <para></para>
            <para> 	</para>
            <para></para>
            <para>The scroll bars appearance depends on the currently set scroll
            bar policies. You can control the appearance of the scroll bars using the
            inherited functionality from QAbstractScrollArea.</para>
            <para>For example, you can set the
            QAbstractScrollArea::horizontalScrollBarPolicy and
            QAbstractScrollArea::verticalScrollBarPolicy properties. Or if you want the
            scroll bars to adjust dynamically when the contents of the scroll area
            changes, you can use the horizontalScrollBar() and verticalScrollBar()
            functions (which enable you to access the scroll bars) and set the scroll
            bars' values whenever the scroll area's contents change, using the
            QScrollBar::setValue() function.</para>
            <para>You can retrieve the child widget using the widget() function.
            The view can be made to be resizable with the setWidgetResizable()
            function. The alignment of the widget can be specified with
            setAlignment().</para>
            <para>Two convenience functions ensureVisible() and
            ensureWidgetVisible() ensure a certain region of the contents is visible
            inside the viewport, by scrolling the contents if necessary.</para>
            <para></para>
            <para>Size Hints and Layouts</para>
            <para>When using a scroll area to display the contents of a custom
            widget, it is important to ensure that the size hint of the child widget is
            set to a suitable value. If a standard QWidget is used for the child
            widget, it may be necessary to call QWidget::setMinimumSize() to ensure
            that the contents of the widget are shown correctly within the scroll
            area.</para>
            <para>If a scroll area is used to display the contents of a widget that
            contains child widgets arranged in a layout, it is important to realize
            that the size policy of the layout will also determine the size of the
            widget. This is especially useful to know if you intend to dynamically
            change the contents of the layout. In such cases, setting the layout's size
            constraint property to one which provides constraints on the minimum and/or
            maximum size of the layout (e.g., QLayout::SetMinAndMaxSize) will cause the
            size of the scroll area to be updated whenever the contents of the layout
            changes.</para>
            <para>For a complete example using the QScrollArea class, see the Image
            Viewer example. The example shows how to combine QLabel and QScrollArea to
            display an image.</para>
            <para></para>
            <para>See also QAbstractScrollArea, QScrollBar, and Image Viewer
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QScrollArea.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty scroll area with the given parent.</para>
            <para>See also setWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollArea.TakeWidget">
            <summary>
            <para>Removes the scroll area's widget, and passes ownership of the
            widget to the caller.</para>
            <para>See also widget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollArea.FocusNextPrevChild(System.Boolean)">
            <summary>
            <para>Reimplemented from QWidget::focusNextPrevChild().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollArea.EnsureVisible(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Scrolls the contents of the scroll area so that the point (x, y)
            is visible inside the region of the viewport with margins specified in
            pixels by xmargin and ymargin. If the specified point cannot be reached,
            the contents are scrolled to the nearest valid position. The default value
            for both margins is 50 pixels.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollArea.EnsureWidgetVisible(QtWidgets.QWidget,System.Int32,System.Int32)">
            <summary>
            <para>Scrolls the contents of the scroll area so that the childWidget
            of QScrollArea::widget() is visible inside the viewport with margins
            specified in pixels by xmargin and ymargin. If the specified point cannot
            be reached, the contents are scrolled to the nearest valid position. The
            default value for both margins is 50 pixels.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollArea.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollArea.EventFilter(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::eventFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollArea.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollArea.ScrollContentsBy(System.Int32,System.Int32)">
            <summary>
            <para>Reimplemented from
            QAbstractScrollArea::scrollContentsBy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QScrollArea.Widget">
            <summary>
            <para>Returns the scroll area's widget, or 0 if there is none.</para>
            <para>See also setWidget().</para>
            <para></para>
            <para>Sets the scroll area's widget.</para>
            <para>The widget becomes a child of the scroll area, and will be
            destroyed when the scroll area is deleted or when a new widget is
            set.</para>
            <para>The widget's autoFillBackground property will be set to
            true.</para>
            <para>If the scroll area is visible when the widget is added, you must
            show() it explicitly.</para>
            <para>Note that You must add the layout of widget before you call this
            function; if you add it later, the widget will not be visible - regardless
            of when you show() the scroll area. In this case, you can also not show()
            the widget later.</para>
            <para>See also widget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QScrollArea.WidgetResizable">
            <summary>
            <para>This property holds whether the scroll area should resize the
            view widget.</para>
            <para>If this property is set to false (the default), the scroll area
            honors the size of its widget. Regardless of this property, you can
            programmatically resize the widget using widget()-&gt;resize(), and the
            scroll area will automatically adjust itself to the new size.</para>
            <para>If this property is set to true, the scroll area will
            automatically resize the widget in order to avoid scroll bars where they
            can be avoided, or to take advantage of extra space.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QScrollArea.Alignment">
            <summary>
            <para>This property holds the alignment of the scroll area's
            widget.</para>
            <para>A valid alignment is a combination of the following flags:</para>
            <para></para>
            <para>Qt::AlignLeft</para>
            <para>Qt::AlignHCenter</para>
            <para>Qt::AlignRight</para>
            <para>Qt::AlignTop</para>
            <para>Qt::AlignVCenter</para>
            <para>Qt::AlignBottom</para>
            <para></para>
            <para>By default, the widget stays rooted to the top-left corner of the
            scroll area.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QScrollArea.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QScrollArea.ViewportSizeHint">
            <summary>
            <para>Reimplemented from
            QAbstractScrollArea::viewportSizeHint().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsView">
            <summary>
            <para>The QGraphicsView class provides a widget for displaying the
            contents of a QGraphicsScene.</para>
            </summary>
            <remarks>
            <para>QGraphicsView visualizes the contents of a QGraphicsScene in a
            scrollable viewport. To create a scene with geometrical items, see
            QGraphicsScene's documentation. QGraphicsView is part of the Graphics View
            Framework.</para>
            <para>To visualize a scene, you start by constructing a QGraphicsView
            object, passing the address of the scene you want to visualize to
            QGraphicsView's constructor. Alternatively, you can call setScene() to set
            the scene at a later point. After you call show(), the view will by default
            scroll to the center of the scene and display any items that are visible at
            this point. For example:</para>
            <para>QGraphicsScene scene;</para>
            <para>scene.addText(&quot;Hello, world!&quot;);</para>
            <para></para>
            <para>QGraphicsView view(&amp;scene);</para>
            <para>view.show();</para>
            <para>You can explicitly scroll to any position on the scene by using
            the scroll bars, or by calling centerOn(). By passing a point to
            centerOn(), QGraphicsView will scroll its viewport to ensure that the point
            is centered in the view. An overload is provided for scrolling to a
            QGraphicsItem, in which case QGraphicsView will see to that the center of
            the item is centered in the view. If all you want is to ensure that a
            certain area is visible, (but not necessarily centered,) you can call
            ensureVisible() instead.</para>
            <para>QGraphicsView can be used to visualize a whole scene, or only
            parts of it. The visualized area is by default detected automatically when
            the view is displayed for the first time (by calling
            QGraphicsScene::itemsBoundingRect()). To set the visualized area rectangle
            yourself, you can call setSceneRect(). This will adjust the scroll bars'
            ranges appropriately. Note that although the scene supports a virtually
            unlimited size, the range of the scroll bars will never exceed the range of
            an integer (INT_MIN, INT_MAX).</para>
            <para>QGraphicsView visualizes the scene by calling render(). By
            default, the items are drawn onto the viewport by using a regular QPainter,
            and using default render hints. To change the default render hints that
            QGraphicsView passes to QPainter when painting items, you can call
            setRenderHints().</para>
            <para>By default, QGraphicsView provides a regular QWidget for the
            viewport widget. You can access this widget by calling viewport(), or you
            can replace it by calling setViewport(). To render using OpenGL, simply
            call setViewport(new QGLWidget). QGraphicsView takes ownership of the
            viewport widget.</para>
            <para>QGraphicsView supports affine transformations, using QTransform.
            You can either pass a matrix to setTransform(), or you can call one of the
            convenience functions rotate(), scale(), translate() or shear(). The most
            two common transformations are scaling, which is used to implement zooming,
            and rotation. QGraphicsView keeps the center of the view fixed during a
            transformation. Because of the scene alignment (setAligment()), translating
            the view will have no visual impact.</para>
            <para>You can interact with the items on the scene by using the mouse
            and keyboard. QGraphicsView translates the mouse and key events into scene
            events, (events that inherit QGraphicsSceneEvent,), and forward them to the
            visualized scene. In the end, it's the individual item that handles the
            events and reacts to them. For example, if you click on a selectable item,
            the item will typically let the scene know that it has been selected, and
            it will also redraw itself to display a selection rectangle. Similiary, if
            you click and drag the mouse to move a movable item, it's the item that
            handles the mouse moves and moves itself. Item interaction is enabled by
            default, and you can toggle it by calling setInteractive().</para>
            <para>You can also provide your own custom scene interaction, by
            creating a subclass of QGraphicsView, and reimplementing the mouse and key
            event handlers. To simplify how you programmatically interact with items in
            the view, QGraphicsView provides the mapping functions mapToScene() and
            mapFromScene(), and the item accessors items() and itemAt(). These
            functions allow you to map points, rectangles, polygons and paths between
            view coordinates and scene coordinates, and to find items on the scene
            using view coordinates.</para>
            <para></para>
            <para></para>
            <para>See also QGraphicsScene, QGraphicsItem, and
            QGraphicsSceneEvent.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGraphicsView.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a QGraphicsView. parent is passed to QWidget's
            constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.#ctor(QtWidgets.QGraphicsScene,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a QGraphicsView and sets the visualized scene to
            scene. parent is passed to QWidget's constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.SetRenderHint(QtGui.QPainter.RenderHint,System.Boolean)">
            <summary>
            <para>If enabled is true, the render hint hint is enabled; otherwise it
            is disabled.</para>
            <para>See also renderHints.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.SetOptimizationFlag(QtWidgets.QGraphicsView.OptimizationFlag,System.Boolean)">
            <summary>
            <para>Enables flag if enabled is true; otherwise disables flag.</para>
            <para>See also optimizationFlags.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.ResetCachedContent">
            <summary>
            <para>Resets any cached content. Calling this function will clear
            QGraphicsView's cache. If the current cache mode is CacheNone, this
            function does nothing.</para>
            <para>This function is called automatically for you when the
            backgroundBrush or QGraphicsScene::backgroundBrush properties change; you
            only need to call this function if you have reimplemented
            QGraphicsScene::drawBackground() or QGraphicsView::drawBackground() to draw
            a custom background, and need to trigger a full redraw.</para>
            <para>See also cacheMode().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.SetSceneRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This property holds the area of the scene visualized by this
            view.</para>
            <para>The scene rectangle defines the extent of the scene, and in the
            view's case, this means the area of the scene that you can navigate using
            the scroll bars.</para>
            <para>If unset, or if a null QRectF is set, this property has the same
            value as QGraphicsScene::sceneRect, and it changes with
            QGraphicsScene::sceneRect. Otherwise, the view's scene rect is unaffected
            by the scene.</para>
            <para>Note that, although the scene supports a virtually unlimited
            size, the range of the scroll bars will never exceed the range of an
            integer (INT_MIN, INT_MAX). When the scene is larger than the scroll bars'
            values, you can choose to use translate() to navigate the scene
            instead.</para>
            <para>By default, this property contains a rectangle at the origin with
            zero width and height.</para>
            <para>See also QGraphicsScene::sceneRect.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.SetMatrix(QtGui.QMatrix,System.Boolean)">
            <summary>
            <para>Sets the view's current transformation matrix to matrix.</para>
            <para>If combine is true, then matrix is combined with the current
            matrix; otherwise, matrix replaces the current matrix. combine is false by
            default.</para>
            <para>The transformation matrix tranforms the scene into view
            coordinates. Using the default transformation, provided by the identity
            matrix, one pixel in the view represents one unit in the scene (e.g., a
            10x10 rectangular item is drawn using 10x10 pixels in the view). If a 2x2
            scaling matrix is applied, the scene will be drawn in 1:2 (e.g., a 10x10
            rectangular item is then drawn using 20x20 pixels in the view).</para>
            <para>Example:</para>
            <para>QGraphicsScene scene;</para>
            <para>scene.addText(&quot;GraphicsView rotated clockwise&quot;);</para>
            <para></para>
            <para>QGraphicsView view(&amp;scene);</para>
            <para>view.rotate(90); // the text is rendered with a 90 degree
            clockwise rotation</para>
            <para>view.show();</para>
            <para>To simplify interation with items using a transformed view,
            QGraphicsView provides mapTo... and mapFrom... functions that can translate
            between scene and view coordinates. For example, you can call mapToScene()
            to map a view coordinate to a floating point scene coordinate, or
            mapFromScene() to map from floating point scene coordinates to view
            coordinates.</para>
            <para>See also matrix(), setTransform(), rotate(), scale(), shear(),
            and translate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.ResetMatrix">
            <summary>
            <para>Resets the view transformation matrix to the identity
            matrix.</para>
            <para>See also resetTransform().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.SetTransform(QtGui.QTransform,System.Boolean)">
            <summary>
            <para>Sets the view's current transformation matrix to matrix.</para>
            <para>If combine is true, then matrix is combined with the current
            matrix; otherwise, matrix replaces the current matrix. combine is false by
            default.</para>
            <para>The transformation matrix tranforms the scene into view
            coordinates. Using the default transformation, provided by the identity
            matrix, one pixel in the view represents one unit in the scene (e.g., a
            10x10 rectangular item is drawn using 10x10 pixels in the view). If a 2x2
            scaling matrix is applied, the scene will be drawn in 1:2 (e.g., a 10x10
            rectangular item is then drawn using 20x20 pixels in the view).</para>
            <para>Example:</para>
            <para>QGraphicsScene scene;</para>
            <para>scene.addText(&quot;GraphicsView rotated clockwise&quot;);</para>
            <para></para>
            <para>QGraphicsView view(&amp;scene);</para>
            <para>view.rotate(90); // the text is rendered with a 90 degree
            clockwise rotation</para>
            <para>view.show();</para>
            <para>To simplify interation with items using a transformed view,
            QGraphicsView provides mapTo... and mapFrom... functions that can translate
            between scene and view coordinates. For example, you can call mapToScene()
            to map a view coordiate to a floating point scene coordinate, or
            mapFromScene() to map from floating point scene coordinates to view
            coordinates.</para>
            <para>See also transform(), rotate(), scale(), shear(), and
            translate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.ResetTransform">
            <summary>
            <para>Resets the view transformation to the identity matrix.</para>
            <para>See also transform() and setTransform().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.Rotate(System.Double)">
            <summary>
            <para>Rotates the current view transformation angle degrees
            clockwise.</para>
            <para>See also setTransform(), transform(), scale(), shear(), and
            translate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.Scale(System.Double,System.Double)">
            <summary>
            <para>Scales the current view transformation by (sx, sy).</para>
            <para>See also setTransform(), transform(), rotate(), shear(), and
            translate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.Shear(System.Double,System.Double)">
            <summary>
            <para>Shears the current view transformation by (sh, sv).</para>
            <para>See also setTransform(), transform(), rotate(), scale(), and
            translate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.Translate(System.Double,System.Double)">
            <summary>
            <para>Translates the current view transformation by (dx, dy).</para>
            <para>See also setTransform(), transform(), rotate(), and
            shear().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.CenterOn(QtCore.QPointF)">
            <summary>
            <para>Scrolls the contents of the viewport to ensure that the scene
            coordinate pos, is centered in the view.</para>
            <para>Because pos is a floating point coordinate, and the scroll bars
            operate on integer coordinates, the centering is only an
            approximation.</para>
            <para>Note: If the item is close to or outside the border, it will be
            visible in the view, but not centered.</para>
            <para>See also ensureVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.CenterOn(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function is provided for convenience. It's equivalent to
            calling centerOn(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.CenterOn(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Scrolls the contents of the viewport to ensure that item is
            centered in the view.</para>
            <para>See also ensureVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.EnsureVisible(QtCore.QRectF,System.Int32,System.Int32)">
            <summary>
            <para>Scrolls the contents of the viewport so that the scene rectangle
            rect is visible, with margins specified in pixels by xmargin and ymargin.
            If the specified rect cannot be reached, the contents are scrolled to the
            nearest valid position. The default value for both margins is 50
            pixels.</para>
            <para>See also centerOn().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.EnsureVisible(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function is provided for convenience. It's equivalent to
            calling ensureVisible(QRectF(x, y, w, h), xmargin, ymargin).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.EnsureVisible(QtWidgets.IQGraphicsItem,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Scrolls the contents of the viewport so that the center of item
            item is visible, with margins specified in pixels by xmargin and ymargin.
            If the specified point cannot be reached, the contents are scrolled to the
            nearest valid position. The default value for both margins is 50
            pixels.</para>
            <para>See also centerOn().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.FitInView(QtCore.QRectF,QtCore.Qt.AspectRatioMode)">
            <summary>
            <para>Scales the view matrix and scrolls the scroll bars to ensure that
            the scene rectangle rect fits inside the viewport. rect must be inside the
            scene rect; otherwise, fitInView() cannot guarantee that the whole rect is
            visible.</para>
            <para>This function keeps the view's rotation, translation, or shear.
            The view is scaled according to aspectRatioMode. rect will be centered in
            the view if it does not fit tightly.</para>
            <para>It's common to call fitInView() from inside a reimplementation of
            resizeEvent(), to ensure that the whole scene, or parts of the scene,
            scales automatically to fit the new size of the viewport as the view is
            resized. Note though, that calling fitInView() from inside resizeEvent()
            can lead to unwanted resize recursion, if the new transformation toggles
            the automatic state of the scrollbars. You can toggle the scrollbar
            policies to always on or always off to prevent this (see
            horizontalScrollBarPolicy() and verticalScrollBarPolicy()).</para>
            <para>If rect is empty, or if the viewport is too small, this function
            will do nothing.</para>
            <para>See also setTransform(), ensureVisible(), and centerOn().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.FitInView(System.Double,System.Double,System.Double,System.Double,QtCore.Qt.AspectRatioMode)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function is equivalent to calling
            fitInView(QRectF(x, y, w, h), aspectRatioMode).</para>
            <para>See also ensureVisible() and centerOn().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.FitInView(QtWidgets.IQGraphicsItem,QtCore.Qt.AspectRatioMode)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Ensures that item fits tightly inside the view, scaling the view
            according to aspectRatioMode.</para>
            <para>See also ensureVisible() and centerOn().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.Render(QtGui.QPainter,QtCore.QRectF,QtCore.QRect,QtCore.Qt.AspectRatioMode)">
            <summary>
            <para>Renders the source rect, which is in view coordinates, from the
            scene into target, which is in paint device coordinates, using painter.
            This function is useful for capturing the contents of the view onto a paint
            device, such as a QImage (e.g., to take a screenshot), or for printing to
            QPrinter. For example:</para>
            <para>QGraphicsScene scene;</para>
            <para>scene.addItem(...</para>
            <para>...</para>
            <para></para>
            <para>QGraphicsView view(&amp;scene);</para>
            <para>view.show();</para>
            <para>...</para>
            <para></para>
            <para>QPrinter printer(QPrinter::HighResolution);</para>
            <para>printer.setPageSize(QPrinter::A4);</para>
            <para>QPainter painter(&amp;printer);</para>
            <para></para>
            <para>// print, fitting the viewport contents into a full page</para>
            <para>view.render(&amp;painter);</para>
            <para></para>
            <para>// print the upper half of the viewport into the lower.</para>
            <para>// half of the page.</para>
            <para>QRect viewport = view.viewport()-&gt;rect();</para>
            <para>view.render(&amp;painter,</para>
            <para>            QRectF(0, printer.height() / 2,</para>
            <para>                   printer.width(), printer.height() / 2),</para>
            <para>            viewport.adjusted(0, 0, 0, -viewport.height() /
            2));</para>
            <para>If source is a null rect, this function will use
            viewport()-&gt;rect() to determine what to draw. If target is a null rect,
            the full dimensions of painter's paint device (e.g., for a QPrinter, the
            page size) will be used.</para>
            <para>The source rect contents will be transformed according to
            aspectRatioMode to fit into the target rect. By default, the aspect ratio
            is kept, and source is scaled to fit in target.</para>
            <para>See also QGraphicsScene::render().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.ItemAt(QtCore.QPoint)">
            <summary>
            <para>Returns the item at position pos, which is in viewport
            coordinates. If there are several items at this position, this function
            returns the topmost item.</para>
            <para>Example:</para>
            <para>void CustomView::mousePressEvent(QMouseEvent *event)</para>
            <para>{</para>
            <para>    if (QGraphicsItem *item = itemAt(event-&gt;pos())) {</para>
            <para>        qDebug() &lt;&lt; &quot;You clicked on item&quot;
            &lt;&lt; item;</para>
            <para>    } else {</para>
            <para>        qDebug() &lt;&lt; &quot;You didn't click on an
            item.&quot;;</para>
            <para>    }</para>
            <para>}</para>
            <para>See also items() and Sorting.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.ItemAt(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function is provided for convenience. It's equivalent to
            calling itemAt(QPoint(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.MapToScene(QtCore.QPoint)">
            <summary>
            <para>Returns the viewport coordinate point mapped to scene
            coordinates.</para>
            <para>Note: It can be useful to map the whole rectangle covered by the
            pixel at point instead of the point itself. To do this, you can call
            mapToScene(QRect(point, QSize(2, 2))).</para>
            <para>See also mapFromScene().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.MapToScene(QtCore.QRect)">
            <summary>
            <para>Returns the viewport rectangle rect mapped to a scene coordinate
            polygon.</para>
            <para>See also mapFromScene().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.MapToScene(QtGui.QPolygon)">
            <summary>
            <para>Returns the viewport polygon polygon mapped to a scene coordinate
            polygon.</para>
            <para>See also mapFromScene().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.MapToScene(QtGui.QPainterPath)">
            <summary>
            <para>Returns the viewport painter path path mapped to a scene
            coordinate painter path.</para>
            <para>See also mapFromScene().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.MapFromScene(QtCore.QPointF)">
            <summary>
            <para>Returns the scene coordinate point to viewport
            coordinates.</para>
            <para>See also mapToScene().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.MapFromScene(QtCore.QRectF)">
            <summary>
            <para>Returns the scene rectangle rect to a viewport coordinate
            polygon.</para>
            <para>See also mapToScene().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.MapFromScene(QtGui.QPolygonF)">
            <summary>
            <para>Returns the scene coordinate polygon polygon to a viewport
            coordinate polygon.</para>
            <para>See also mapToScene().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.MapFromScene(QtGui.QPainterPath)">
            <summary>
            <para>Returns the scene coordinate painter path path to a viewport
            coordinate painter path.</para>
            <para>See also mapToScene().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.MapToScene(System.Int32,System.Int32)">
            <summary>
            <para>This function is provided for convenience. It's equivalent to
            calling mapToScene(QPoint(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.MapToScene(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This function is provided for convenience. It's equivalent to
            calling mapToScene(QRect(x, y, w, h)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.MapFromScene(System.Double,System.Double)">
            <summary>
            <para>This function is provided for convenience. It's equivalent to
            calling mapFromScene(QPointF(x, y)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.MapFromScene(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This function is provided for convenience. It's equivalent to
            calling mapFromScene(QRectF(x, y, w, h)).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.InputMethodQuery(QtCore.Qt.InputMethodQuery)">
            <summary>
            <para>Reimplemented from QWidget::inputMethodQuery().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.InvalidateScene(QtCore.QRectF,QtWidgets.QGraphicsScene.SceneLayer)">
            <summary>
            <para>Invalidates and schedules a redraw of layers inside rect. rect is
            in scene coordinates. Any cached content for layers inside rect is
            unconditionally invalidated and redrawn.</para>
            <para>You can call this function to notify QGraphicsView of changes to
            the background or the foreground of the scene. It is commonly used for
            scenes with tile-based backgrounds to notify changes when QGraphicsView has
            enabled background caching.</para>
            <para>Note that QGraphicsView currently supports background caching
            only (see QGraphicsView::CacheBackground). This function is equivalent to
            calling update() if any layer but QGraphicsScene::BackgroundLayer is
            passed.</para>
            <para>See also QGraphicsScene::invalidate() and update().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.UpdateSceneRect(QtCore.QRectF)">
            <summary>
            <para>Notifies QGraphicsView that the scene's scene rect has changed.
            rect is the new scene rect. If the view already has an explicitly set scene
            rect, this function does nothing.</para>
            <para>See also sceneRect and QGraphicsScene::sceneRectChanged().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.SetupViewport(QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QAbstractScrollArea::setupViewport().</para>
            <para>This slot is called by QAbstractScrollArea after setViewport()
            has been called. Reimplement this function in a subclass of QGraphicsView
            to initialize the new viewport widget before it is used.</para>
            <para>See also setViewport().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnViewportEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractScrollArea::viewportEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnContextMenuEvent(QtGui.QContextMenuEvent)">
            <summary>
            <para>Reimplemented from QWidget::contextMenuEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnDragEnterEvent(QtGui.QDragEnterEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragEnterEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnDragLeaveEvent(QtGui.QDragLeaveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnDragMoveEvent(QtGui.QDragMoveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnDropEvent(QtGui.QDropEvent)">
            <summary>
            <para>Reimplemented from QWidget::dropEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.FocusNextPrevChild(System.Boolean)">
            <summary>
            <para>Reimplemented from QWidget::focusNextPrevChild().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnKeyReleaseEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnMouseDoubleClickEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseDoubleClickEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnWheelEvent(QtGui.QWheelEvent)">
            <summary>
            <para>Reimplemented from QWidget::wheelEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.ScrollContentsBy(System.Int32,System.Int32)">
            <summary>
            <para>Reimplemented from
            QAbstractScrollArea::scrollContentsBy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.OnInputMethodEvent(QtGui.QInputMethodEvent)">
            <summary>
            <para>Reimplemented from QWidget::inputMethodEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.DrawBackground(QtGui.QPainter,QtCore.QRectF)">
            <summary>
            <para>Draws the background of the scene using painter, before any items
            and the foreground are drawn. Reimplement this function to provide a custom
            background for this view.</para>
            <para>If all you want is to define a color, texture or gradient for the
            background, you can call setBackgroundBrush() instead.</para>
            <para>All painting is done in scene coordinates. rect is the exposed
            rectangle.</para>
            <para>The default implementation fills rect using the view's
            backgroundBrush. If no such brush is defined (the default), the scene's
            drawBackground() function is called instead.</para>
            <para>See also drawForeground() and
            QGraphicsScene::drawBackground().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGraphicsView.DrawForeground(QtGui.QPainter,QtCore.QRectF)">
            <summary>
            <para>Draws the foreground of the scene using painter, after the
            background and all items are drawn. Reimplement this function to provide a
            custom foreground for this view.</para>
            <para>If all you want is to define a color, texture or gradient for the
            foreground, you can call setForegroundBrush() instead.</para>
            <para>All painting is done in scene coordinates. rect is the exposed
            rectangle.</para>
            <para>The default implementation fills rect using the view's
            foregroundBrush. If no such brush is defined (the default), the scene's
            drawForeground() function is called instead.</para>
            <para>See also drawBackground() and
            QGraphicsScene::drawForeground().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGraphicsView.RubberBandChanged">
            <summary>
            <para>This signal is emitted when the rubber band rect is changed. The viewport Rect is specified by rubberBandRect. The drag start position and drag end position are provided in scene points with fromScenePoint and toScenePoint.</para>
            <para>When rubberband selection ends this signal will be emitted with null vales.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also rubberBandRect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.RenderHints">
            <summary>
            <para>This property holds the default render hints for the view.</para>
            <para>These hints are used to initialize QPainter before each visible
            item is drawn. QPainter uses render hints to toggle rendering features such
            as antialiasing and smooth pixmap transformation.</para>
            <para>QPainter::TextAntialiasing is enabled by default.</para>
            <para>Example:</para>
            <para>QGraphicsScene scene;</para>
            <para>scene.addRect(QRectF(-10, -10, 20, 20));</para>
            <para></para>
            <para>QGraphicsView view(&amp;scene);</para>
            <para>view.setRenderHints(QPainter::Antialiasing |
            QPainter::SmoothPixmapTransform);</para>
            <para>view.show();</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.Alignment">
            <summary>
            <para>This property holds the alignment of the scene in the view when
            the whole scene is visible.</para>
            <para>If the whole scene is visible in the view, (i.e., there are no
            visible scroll bars,) the view's alignment will decide where the scene will
            be rendered in the view. For example, if the alignment is Qt::AlignCenter,
            which is default, the scene will be centered in the view, and if the
            alignment is (Qt::AlignLeft | Qt::AlignTop), the scene will be rendered in
            the top-left corner of the view.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.TransformationAnchor">
            <summary>
            <para>This property holds how the view should position the scene during
            transformations.</para>
            <para>QGraphicsView uses this property to decide how to position the
            scene in the viewport when the transformation matrix changes, and the
            coordinate system of the view is transformed. The default behavior,
            AnchorViewCenter, ensures that the scene point at the center of the view
            remains unchanged during transformations (e.g., when rotating, the scene
            will appear to rotate around the center of the view).</para>
            <para>Note that the effect of this property is noticeable when only a
            part of the scene is visible (i.e., when there are scroll bars). Otherwise,
            if the whole scene fits in the view, QGraphicsScene uses the view alignment
            to position the scene in the view.</para>
            <para>See also alignment and resizeAnchor.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.ResizeAnchor">
            <summary>
            <para>This property holds how the view should position the scene when
            the view is resized.</para>
            <para>QGraphicsView uses this property to decide how to position the
            scene in the viewport when the viewport widget's size changes. The default
            behavior, NoAnchor, leaves the scene's position unchanged during a resize;
            the top-left corner of the view will appear to be anchored while
            resizing.</para>
            <para>Note that the effect of this property is noticeable when only a
            part of the scene is visible (i.e., when there are scroll bars). Otherwise,
            if the whole scene fits in the view, QGraphicsScene uses the view alignment
            to position the scene in the view.</para>
            <para>See also alignment and transformationAnchor.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.viewportUpdateMode">
            <summary>
            <para>This property holds how the viewport should update its
            contents.</para>
            <para>QGraphicsView uses this property to decide how to update areas of
            the scene that have been reexposed or changed. Usually you do not need to
            modify this property, but there are some cases where doing so can improve
            rendering performance. See the ViewportUpdateMode documentation for
            specific details.</para>
            <para>The default value is MinimalViewportUpdate, where QGraphicsView
            will update as small an area of the viewport as possible when the contents
            change.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            <para>See also ViewportUpdateMode and cacheMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.OptimizationFlags">
            <summary>
            <para>This property holds flags that can be used to tune
            QGraphicsView's performance.</para>
            <para>QGraphicsView uses clipping, extra bounding rect adjustments, and
            certain other aids to improve rendering quality and performance for the
            common case graphics scene. However, depending on the target platform, the
            scene, and the viewport in use, some of these operations can degrade
            performance.</para>
            <para>The effect varies from flag to flag; see the OptimizationFlags
            documentation for details.</para>
            <para>By default, no optimization flags are enabled.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            <para>See also setOptimizationFlag().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.dragMode">
            <summary>
            <para>This property holds the behavior for dragging the mouse over the
            scene while the left mouse button is pressed.</para>
            <para>This property defines what should happen when the user clicks on
            the scene background and drags the mouse (e.g., scrolling the viewport
            contents using a pointing hand cursor, or selecting multiple items with a
            rubber band). The default value, NoDrag, does nothing.</para>
            <para>This behavior only affects mouse clicks that are not handled by
            any item. You can define a custom behavior by creating a subclass of
            QGraphicsView and reimplementing mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.RubberBandSelectionMode">
            <summary>
            <para>This property holds the behavior for selecting items with a
            rubber band selection rectangle.</para>
            <para>This property defines how items are selected when using the
            RubberBandDrag drag mode.</para>
            <para>The default value is Qt::IntersectsItemShape; all items whose
            shape intersects with or is contained by the rubber band are
            selected.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            <para>See also dragMode, items(), and rubberBandRect().</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:QtWidgets.QGraphicsView.CacheMode" -->
        <member name="P:QtWidgets.QGraphicsView.Interactive">
            <summary>
            <para>This property holds whether the view allows scene
            interaction.</para>
            <para>If enabled, this view is set to allow scene interaction.
            Otherwise, this view will not allow interaction, and any mouse or key
            events are ignored (i.e., it will act as a read-only view).</para>
            <para>By default, this property is true.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.Scene">
            <summary>
            <para>Returns a pointer to the scene that is currently visualized in
            the view. If no scene is currently visualized, 0 is returned.</para>
            <para>See also setScene().</para>
            <para></para>
            <para>Sets the current scene to scene. If scene is already being
            viewed, this function does nothing.</para>
            <para>When a scene is set on a view, the QGraphicsScene::changed()
            signal is automatically connected to this view's updateScene() slot, and
            the view's scroll bars are adjusted to fit the size of the scene.</para>
            <para>The view does not take ownership of scene.</para>
            <para>See also scene().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.SceneRect">
            <summary>
            <para>This property holds the area of the scene visualized by this
            view.</para>
            <para>The scene rectangle defines the extent of the scene, and in the
            view's case, this means the area of the scene that you can navigate using
            the scroll bars.</para>
            <para>If unset, or if a null QRectF is set, this property has the same
            value as QGraphicsScene::sceneRect, and it changes with
            QGraphicsScene::sceneRect. Otherwise, the view's scene rect is unaffected
            by the scene.</para>
            <para>Note that, although the scene supports a virtually unlimited
            size, the range of the scroll bars will never exceed the range of an
            integer (INT_MIN, INT_MAX). When the scene is larger than the scroll bars'
            values, you can choose to use translate() to navigate the scene
            instead.</para>
            <para>By default, this property contains a rectangle at the origin with
            zero width and height.</para>
            <para>See also QGraphicsScene::sceneRect.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.BackgroundBrush">
            <summary>
            <para>This property holds the background brush of the scene.</para>
            <para>This property sets the background brush for the scene in this
            view. It is used to override the scene's own background, and defines the
            behavior of drawBackground(). To provide custom background drawing for this
            view, you can reimplement drawBackground() instead.</para>
            <para>By default, this property contains a brush with the Qt::NoBrush
            pattern.</para>
            <para>See also QGraphicsScene::backgroundBrush and
            foregroundBrush.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.ForegroundBrush">
            <summary>
            <para>This property holds the foreground brush of the scene.</para>
            <para>This property sets the foreground brush for the scene in this
            view. It is used to override the scene's own foreground, and defines the
            behavior of drawForeground(). To provide custom foreground drawing for this
            view, you can reimplement drawForeground() instead.</para>
            <para>By default, this property contains a brush with the Qt::NoBrush
            pattern.</para>
            <para>See also QGraphicsScene::foregroundBrush and
            backgroundBrush.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.Matrix">
            <summary>
            <para>Returns the current transformation matrix for the view. If no
            current transformation is set, the identity matrix is returned.</para>
            <para>See also setMatrix(), transform(), rotate(), scale(), shear(),
            and translate().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.Transform">
            <summary>
            <para>Returns the current transformation matrix for the view. If no
            current transformation is set, the identity matrix is returned.</para>
            <para>See also setTransform(), rotate(), scale(), shear(), and
            translate().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.RubberBandRect">
            <summary>
            <para>This functions returns the current rubber band area (in viewport
            coordinates) if the user is currently doing an itemselection with rubber
            band. When the user is not using the rubber band this functions returns (a
            null) QRectF().</para>
            <para>Notice that part of this QRect can be outise the visual viewport.
            It can e.g contain negative values.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also rubberBandSelectionMode and rubberBandChanged().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.ViewportTransform">
            <summary>
            <para>Returns a matrix that maps viewport coordinates to scene
            coordinates.</para>
            <para>See also mapToScene() and mapFromScene().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGraphicsView.IsTransformed">
            <summary>
            <para>Returns true if the view is transformed (i.e., a non-identity
            transform has been assigned, or the scrollbars are adjusted).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setTransform(), horizontalScrollBar(), and
            verticalScrollBar().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGraphicsView.ViewportAnchor">
            <summary>
            <para>This enums describe the possible anchors that QGraphicsView can
            use when the user resizes the view or when the view is transformed.</para>
            <para>See also resizeAnchor and transformationAnchor.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.ViewportAnchor.NoAnchor">
            <summary>No anchor, i.e. the view leaves the scene's position unchanged.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.ViewportAnchor.AnchorViewCenter">
            <summary>The scene point at the center of the view is used as the anchor.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.ViewportAnchor.AnchorUnderMouse">
            <summary>The point under the mouse is used as the anchor.</summary>
        </member>
        <member name="T:QtWidgets.QGraphicsView.CacheModeFlag">
            <summary>
            <para>This enum describes the flags that you can set for a
            QGraphicsView's cache mode.</para>
            <para>The CacheMode type is a typedef for QFlags&lt;CacheModeFlag&gt;.
            It stores an OR combination of CacheModeFlag values.</para>
            <para>See also cacheMode.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.CacheModeFlag.CacheNone">
            <summary>All painting is done directly onto the viewport.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.CacheModeFlag.CacheBackground">
            <summary>The background is cached. This affects both custom backgrounds, and backgrounds based on the backgroundBrush property. When this flag is enabled, QGraphicsView will allocate one pixmap with the full size of the viewport.</summary>
        </member>
        <member name="T:QtWidgets.QGraphicsView.DragMode">
            <summary>
            <para>This enum describes the default action for the view when pressing
            and dragging the mouse over the viewport.</para>
            <para>See also dragMode and QGraphicsScene::setSelectionArea().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.DragMode.NoDrag">
            <summary>Nothing happens; the mouse event is ignored.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.DragMode.ScrollHandDrag">
            <summary>The cursor changes into a pointing hand, and dragging the mouse around will scroll the scrolbars. This mode works both in interactive and non-interactive mode.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.DragMode.RubberBandDrag">
            <summary>A rubber band will appear. Dragging the mouse will set the rubber band geometry, and all items covered by the rubber band are selected. This mode is disabled for non-interactive views.</summary>
        </member>
        <member name="T:QtWidgets.QGraphicsView.ViewportUpdateMode">
            <summary>
            <para>This enum describes how QGraphicsView updates its viewport when
            the scene contents change or are exposed.</para>
            <para>This enum was introduced or modified in  Qt 4.3.</para>
            <para>See also viewportUpdateMode.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.ViewportUpdateMode.FullViewportUpdate">
            <summary>When any visible part of the scene changes or is reexposed, QGraphicsView will update the entire viewport. This approach is fastest when QGraphicsView spends more time figuring out what to draw than it would spend drawing (e.g., when very many small items are repeatedly updated). This is the preferred update mode for viewports that do not support partial updates, such as QGLWidget, and for viewports that need to disable scroll optimization.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.ViewportUpdateMode.MinimalViewportUpdate">
            <summary>QGraphicsView will determine the minimal viewport region that requires a redraw, minimizing the time spent drawing by avoiding a redraw of areas that have not changed. This is QGraphicsView's default mode. Although this approach provides the best performance in general, if there are many small visible changes on the scene, QGraphicsView might end up spending more time finding the minimal approach than it will spend drawing.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.ViewportUpdateMode.SmartViewportUpdate">
            <summary>QGraphicsView will attempt to find an optimal update mode by analyzing the areas that require a redraw.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.ViewportUpdateMode.NoViewportUpdate">
            <summary>QGraphicsView will never update its viewport when the scene changes; the user is expected to control all updates. This mode disables all (potentially slow) item visibility testing in QGraphicsView, and is suitable for scenes that either require a fixed frame rate, or where the viewport is otherwise updated externally.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.ViewportUpdateMode.BoundingRectViewportUpdate">
            <summary>The bounding rectangle of all changes in the viewport will be redrawn. This mode has the advantage that QGraphicsView searches only one region for changes, minimizing time spent determining what needs redrawing. The disadvantage is that areas that have not changed also need to be redrawn.</summary>
        </member>
        <member name="T:QtWidgets.QGraphicsView.OptimizationFlag">
            <summary>
            <para>This enum describes flags that you can enable to improve
            rendering performance in QGraphicsView. By default, none of these flags are
            set. Note that setting a flag usually imposes a side effect, and this
            effect can vary between paint devices and platforms.</para>
            <para>This enum was introduced or modified in  Qt 4.3.</para>
            <para>The OptimizationFlags type is a typedef for
            QFlags&lt;OptimizationFlag&gt;. It stores an OR combination of
            OptimizationFlag values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.OptimizationFlag.DontClipPainter">
            <summary>This value is obsolete and has no effect.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.OptimizationFlag.DontSavePainterState">
            <summary>When rendering, QGraphicsView protects the painter state (see QPainter::save()) when rendering the background or foreground, and when rendering each item. This allows you to leave the painter in an altered state (i.e., you can call QPainter::setPen() or QPainter::setBrush() without restoring the state after painting). However, if the items consistently do restore the state, you should enable this flag to prevent QGraphicsView from doing the same.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.OptimizationFlag.DontAdjustForAntialiasing">
            <summary>Disables QGraphicsView's antialiasing auto-adjustment of exposed areas. Items that render antialiased lines on the boundaries of their QGraphicsItem::boundingRect() can end up rendering parts of the line outside. To prevent rendering artifacts, QGraphicsView expands all exposed regions by 2 pixels in all directions. If you enable this flag, QGraphicsView will no longer perform these adjustments, minimizing the areas that require redrawing, which improves performance. A common side effect is that items that do draw with antialiasing can leave painting traces behind on the scene as they are moved.</summary>
        </member>
        <member name="F:QtWidgets.QGraphicsView.OptimizationFlag.IndirectPainting">
            <summary>Since Qt 4.6, restore the old painting algorithm that calls QGraphicsView::drawItems() and QGraphicsScene::drawItems(). To be used only for compatibility with old code.</summary>
        </member>
        <member name="T:QtWidgets.QColumnView">
            <summary>
            <para>The QColumnView class provides a model/view implementation of a
            column view.</para>
            </summary>
            <remarks>
            <para>QColumnView displays a model in a number of QListViews, one for
            each hierarchy in the tree. This is sometimes referred to as a cascading
            list.</para>
            <para>The QColumnView class is one of the Model/View Classes and is
            part of Qt's model/view framework.</para>
            <para>QColumnView implements the interfaces defined by the
            QAbstractItemView class to allow it to display data provided by models
            derived from the QAbstractItemModel class.</para>
            <para></para>
            <para></para>
            <para>See also Model/View Programming.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QColumnView.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a column view with a parent to represent a model's
            data. Use setModel() to set the model.</para>
            <para>See also QAbstractItemModel.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColumnView.IndexAt(QtCore.QPoint)">
            <summary>
            <para>Reimplemented from QAbstractItemView::indexAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColumnView.ScrollTo(QtCore.QModelIndex,QtWidgets.QAbstractItemView.ScrollHint)">
            <summary>
            <para>Reimplemented from QAbstractItemView::scrollTo().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColumnView.VisualRect(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemView::visualRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColumnView.SelectAll">
            <summary>
            <para>Reimplemented from QAbstractItemView::selectAll().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColumnView.IsIndexHidden(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemView::isIndexHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColumnView.MoveCursor(QtWidgets.QAbstractItemView.CursorAction,QtCore.Qt.KeyboardModifier)">
            <summary>
            <para>Reimplemented from QAbstractItemView::moveCursor().</para>
            <para>Move left should go to the parent index Move right should go to
            the child index or down if there is no child</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColumnView.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColumnView.SetSelection(QtCore.QRect,QtCore.QItemSelectionModel.SelectionFlag)">
            <summary>
            <para>Reimplemented from QAbstractItemView::setSelection().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColumnView.VisualRegionForSelection(QtCore.QItemSelection)">
            <summary>
            <para>Reimplemented from
            QAbstractItemView::visualRegionForSelection().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColumnView.RowsInserted(QtCore.QModelIndex,System.Int32,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemView::rowsInserted().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColumnView.CurrentChanged(QtCore.QModelIndex,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemView::currentChanged().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColumnView.ScrollContentsBy(System.Int32,System.Int32)">
            <summary>
            <para>Reimplemented from
            QAbstractScrollArea::scrollContentsBy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColumnView.CreateColumn(QtCore.QModelIndex)">
            <summary>
            <para>To use a custom widget for the final column when you select an
            item overload this function and return a widget. index is the root index
            that will be assigned to the view.</para>
            <para>Return the new view. QColumnView will automatically take
            ownership of the widget.</para>
            <para>See also setPreviewWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColumnView.InitializeColumn(QtWidgets.QAbstractItemView)">
            <summary>
            <para>Copies the behavior and options of the column view and applies
            them to the column such as the iconSize(), textElideMode() and
            alternatingRowColors(). This can be useful when reimplementing
            createColumn().</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also createColumn().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QColumnView.UpdatePreviewWidget">
            <summary>
            <para>This signal is emitted when the preview widget should be updated to provide rich information about index</para>
            <para>See also previewWidget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QColumnView.Model">
            <summary>
            <para>Returns the model that this view is presenting.</para>
            <para>See also setModel().</para>
            <para></para>
            <para>Sets the model for the view to present.</para>
            <para>This function will create and set a new selection model,
            replacing any model that was previously set with setSelectionModel().
            However, the old selection model will not be deleted as it may be shared
            between several views. We recommend that you delete the old selection model
            if it is no longer required. This is done with the following code:</para>
            <para>QItemSelectionModel *m = view-&gt;selectionModel();</para>
            <para>view-&gt;setModel(new model);</para>
            <para>delete m;</para>
            <para>If both the old model and the old selection model do not have
            parents, or if their parents are long-lived objects, it may be preferable
            to call their deleteLater() functions to explicitly delete them.</para>
            <para>The view does not take ownership of the model unless it is the
            model's parent object because the model may be shared between many
            different views.</para>
            <para>See also model(), selectionModel(), and
            setSelectionModel().</para>
            <para></para>
            <para>Reimplemented from QAbstractItemView::setModel().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QColumnView.SelectionModel">
            <summary>
            <para>Returns the current selection model.</para>
            <para>See also setSelectionModel() and selectedIndexes().</para>
            <para></para>
            <para>Sets the current selection model to the given
            selectionModel.</para>
            <para>Note that, if you call setModel() after this function, the given
            selectionModel will be replaced by one created by the view.</para>
            <para>Note: It is up to the application to delete the old selection
            model if it is no longer needed; i.e., if it is not being used by other
            views. This will happen automatically when its parent object is deleted.
            However, if it does not have a parent, or if the parent is a long-lived
            object, it may be preferable to call its deleteLater() function to
            explicitly delete it.</para>
            <para>See also selectionModel(), setModel(), and
            clearSelection().</para>
            <para></para>
            <para>Reimplemented from QAbstractItemView::setSelectionModel().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QColumnView.RootIndex">
            <summary>
            <para>Returns the model index of the model's root item. The root item
            is the parent item to the view's toplevel items. The root can be
            invalid.</para>
            <para>See also setRootIndex().</para>
            <para></para>
            <para>Sets the root item to the item at the given index.</para>
            <para>See also rootIndex().</para>
            <para></para>
            <para>Reimplemented from QAbstractItemView::setRootIndex().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QColumnView.ResizeGripsVisible">
            <summary>
            <para>This property holds the way to specify if the list views gets
            resize grips or not.</para>
            <para>By default, visible is set to true</para>
            <para>See also setRootIndex().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QColumnView.PreviewWidget">
            <summary>
            <para>Returns the preview widget, or 0 if there is none.</para>
            <para>See also setPreviewWidget() and updatePreviewWidget().</para>
            <para></para>
            <para>Sets the preview widget.</para>
            <para>The widget becomes a child of the column view, and will be
            destroyed when the column area is deleted or when a new widget is
            set.</para>
            <para>See also previewWidget() and updatePreviewWidget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QColumnView.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QColumnView.HorizontalOffset">
            <summary>
            <para>Reimplemented from QAbstractItemView::horizontalOffset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QColumnView.VerticalOffset">
            <summary>
            <para>Reimplemented from QAbstractItemView::verticalOffset().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QDataWidgetMapper">
            <summary>
            <para>The QDataWidgetMapper class provides mapping between a section of
            a data model to widgets.</para>
            </summary>
            <remarks>
            <para>QDataWidgetMapper can be used to create data-aware widgets by
            mapping them to sections of an item model. A section is a column of a model
            if the orientation is horizontal (the default), otherwise a row.</para>
            <para>Every time the current index changes, each widget is updated with
            data from the model via the property specified when its mapping was made.
            If the user edits the contents of a widget, the changes are read using the
            same property and written back to the model. By default, each widget's user
            property is used to transfer data between the model and the widget. Since
            Qt 4.3, an additional addMapping() function enables a named property to be
            used instead of the default user property.</para>
            <para>It is possible to set an item delegate to support custom widgets.
            By default, a QItemDelegate is used to synchronize the model with the
            widgets.</para>
            <para>Let us assume that we have an item model named model with the
            following contents:</para>
            <para></para>
            <para> 1	Qt Norway	Oslo</para>
            <para>2	Qt Australia	Brisbane</para>
            <para>3	Qt USA	Palo Alto</para>
            <para>4	Qt China	Beijing</para>
            <para>5	Qt Germany	Berlin</para>
            <para></para>
            <para>The following code will map the columns of the model to widgets
            called mySpinBox, myLineEdit and myCountryChooser:</para>
            <para>QDataWidgetMapper *mapper = new QDataWidgetMapper;</para>
            <para>mapper-&gt;setModel(model);</para>
            <para>mapper-&gt;addMapping(mySpinBox, 0);</para>
            <para>mapper-&gt;addMapping(myLineEdit, 1);</para>
            <para>mapper-&gt;addMapping(myCountryChooser, 2);</para>
            <para>mapper-&gt;toFirst();</para>
            <para>After the call to toFirst(), mySpinBox displays the value 1,
            myLineEdit displays Qt Norway and myCountryChooser displays Oslo. The
            navigational functions toFirst(), toNext(), toPrevious(), toLast() and
            setCurrentIndex() can be used to navigate in the model and update the
            widgets with contents from the model.</para>
            <para>The setRootIndex() function enables a particular item in a model
            to be specified as the root index - children of this item will be mapped to
            the relevant widgets in the user interface.</para>
            <para>QDataWidgetMapper supports two submit policies, AutoSubmit and
            ManualSubmit. AutoSubmit will update the model as soon as the current
            widget loses focus, ManualSubmit will not update the model unless submit()
            is called. ManualSubmit is useful when displaying a dialog that lets the
            user cancel all modifications. Also, other views that display the model
            won't update until the user finishes all their modifications and
            submits.</para>
            <para>Note that QDataWidgetMapper keeps track of external
            modifications. If the contents of the model are updated in another module
            of the application, the widgets are updated as well.</para>
            <para></para>
            <para>See also QAbstractItemModel and QAbstractItemDelegate.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QDataWidgetMapper.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QDataWidgetMapper with parent object parent. By
            default, the orientation is horizontal and the submit policy is
            AutoSubmit.</para>
            <para>See also setOrientation() and setSubmitPolicy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDataWidgetMapper.AddMapping(QtWidgets.QWidget,System.Int32)">
            <summary>
            <para>Adds a mapping between a widget and a section from the model. The
            section is a column in the model if the orientation is horizontal (the
            default), otherwise a row.</para>
            <para>For the following example, we assume a model myModel that has two
            columns: the first one contains the names of people in a group, and the
            second column contains their ages. The first column is mapped to the
            QLineEdit nameLineEdit, and the second is mapped to the QSpinBox
            ageSpinBox:</para>
            <para>QDataWidgetMapper *mapper = new QDataWidgetMapper();</para>
            <para>mapper-&gt;setModel(myModel);</para>
            <para>mapper-&gt;addMapping(nameLineEdit, 0);</para>
            <para>mapper-&gt;addMapping(ageSpinBox, 1);</para>
            <para>Notes:</para>
            <para></para>
            <para>If the widget is already mapped to a section, the old mapping
            will be replaced by the new one.</para>
            <para>Only one-to-one mappings between sections and widgets are
            allowed. It is not possible to map a single section to multiple widgets, or
            to map a single widget to multiple sections.</para>
            <para></para>
            <para>See also removeMapping(), mappedSection(), and
            clearMapping().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDataWidgetMapper.AddMapping(QtWidgets.QWidget,System.Int32,QtCore.QByteArray)">
            <summary>
            <para>Essentially the same as addMapping(), but adds the possibility to
            specify the property to use specifying propertyName.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also addMapping().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDataWidgetMapper.RemoveMapping(QtWidgets.QWidget)">
            <summary>
            <para>Removes the mapping for the given widget.</para>
            <para>See also addMapping() and clearMapping().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDataWidgetMapper.MappedSection(QtWidgets.QWidget)">
            <summary>
            <para>Returns the section the widget is mapped to or -1 if the widget
            is not mapped.</para>
            <para>See also addMapping() and removeMapping().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDataWidgetMapper.MappedPropertyName(QtWidgets.QWidget)">
            <summary>
            <para>Returns the name of the property that is used when mapping data
            to the given widget.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also mappedSection(), addMapping(), and
            removeMapping().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDataWidgetMapper.MappedWidgetAt(System.Int32)">
            <summary>
            <para>Returns the widget that is mapped at section, or 0 if no widget
            is mapped at that section.</para>
            <para>See also addMapping() and removeMapping().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDataWidgetMapper.ClearMapping">
            <summary>
            <para>Clears all mappings.</para>
            <para>See also addMapping() and removeMapping().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDataWidgetMapper.Revert">
            <summary>
            <para>Repopulates all widgets with the current data of the model. All
            unsubmitted changes will be lost.</para>
            <para>See also submit() and setSubmitPolicy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDataWidgetMapper.Submit">
            <summary>
            <para>Submits all changes from the mapped widgets to the model.</para>
            <para>For every mapped section, the item delegate reads the current
            value from the widget and sets it in the model. Finally, the model's
            submit() method is invoked.</para>
            <para>Returns true if all the values were submitted, otherwise
            false.</para>
            <para>Note: For database models, QSqlQueryModel::lastError() can be
            used to retrieve the last error.</para>
            <para>See also revert() and setSubmitPolicy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDataWidgetMapper.ToFirst">
            <summary>
            <para>Populates the widgets with data from the first row of the model
            if the orientation is horizontal (the default), otherwise with data from
            the first column.</para>
            <para>This is equivalent to calling setCurrentIndex(0).</para>
            <para>See also toLast() and setCurrentIndex().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDataWidgetMapper.ToLast">
            <summary>
            <para>Populates the widgets with data from the last row of the model if
            the orientation is horizontal (the default), otherwise with data from the
            last column.</para>
            <para>Calls setCurrentIndex() internally.</para>
            <para>See also toFirst() and setCurrentIndex().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDataWidgetMapper.ToNext">
            <summary>
            <para>Populates the widgets with data from the next row of the model if
            the orientation is horizontal (the default), otherwise with data from the
            next column.</para>
            <para>Calls setCurrentIndex() internally. Does nothing if there is no
            next row in the model.</para>
            <para>See also toPrevious() and setCurrentIndex().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDataWidgetMapper.ToPrevious">
            <summary>
            <para>Populates the widgets with data from the previous row of the
            model if the orientation is horizontal (the default), otherwise with data
            from the previous column.</para>
            <para>Calls setCurrentIndex() internally. Does nothing if there is no
            previous row in the model.</para>
            <para>See also toNext() and setCurrentIndex().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDataWidgetMapper.SetCurrentModelIndex(QtCore.QModelIndex)">
            <summary>
            <para>Sets the current index to the row of the index if the orientation
            is horizontal (the default), otherwise to the column of the index.</para>
            <para>Calls setCurrentIndex() internally. This convenience slot can be
            connected to the signal currentRowChanged() or currentColumnChanged() of
            another view's selection model.</para>
            <para>The following example illustrates how to update all widgets with
            new data whenever the selection of a QTableView named myTableView
            changes:</para>
            <para>QDataWidgetMapper *mapper = new QDataWidgetMapper();</para>
            <para>connect(myTableView-&gt;selectionModel(),
            SIGNAL(currentRowChanged(QModelIndex,QModelIndex)),</para>
            <para>        mapper, SLOT(setCurrentModelIndex(QModelIndex)));</para>
            <para>See also currentIndex().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDataWidgetMapper.CurrentIndexChanged">
            <summary>
            <para>This property holds the current row or column.</para>
            <para>The widgets are populated with with data from the row at index if the orientation is horizontal (the default), otherwise with data from the column at index.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	currentIndex() const</para>
            <para> virtual void 	setCurrentIndex(int index)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	currentIndexChanged(int index)</para>
            <para></para>
            <para>See also setCurrentModelIndex(), toFirst(), toNext(), toPrevious(), and toLast().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDataWidgetMapper.Model">
            <summary>
            <para>Returns the current model.</para>
            <para>See also setModel().</para>
            <para></para>
            <para>Sets the current model to model. If another model was set, all
            mappings to that old model are cleared.</para>
            <para>See also model().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDataWidgetMapper.ItemDelegate">
            <summary>
            <para>Returns the current item delegate.</para>
            <para>See also setItemDelegate().</para>
            <para></para>
            <para>Sets the item delegate to delegate. The delegate will be used to
            write data from the model into the widget and from the widget to the model,
            using QAbstractItemDelegate::setEditorData() and
            QAbstractItemDelegate::setModelData().</para>
            <para>The delegate also decides when to apply data and when to change
            the editor, using QAbstractItemDelegate::commitData() and
            QAbstractItemDelegate::closeEditor().</para>
            <para>Warning: You should not share the same instance of a delegate
            between widget mappers or views. Doing so can cause incorrect or
            unintuitive editing behavior since each view connected to a given delegate
            may receive the closeEditor() signal, and attempt to access, modify or
            close an editor that has already been closed.</para>
            <para>See also itemDelegate().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDataWidgetMapper.RootIndex">
            <summary>
            <para>Returns the current root index.</para>
            <para>See also setRootIndex().</para>
            <para></para>
            <para>Sets the root item to index. This can be used to display a branch
            of a tree. Pass an invalid model index to display the top-most
            branch.</para>
            <para>See also rootIndex().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDataWidgetMapper.Orientation">
            <summary>
            <para>This property holds the orientation of the model.</para>
            <para>If the orientation is Qt::Horizontal (the default), a widget is
            mapped to a column of a data model. The widget will be populated with the
            model's data from its mapped column and the row that currentIndex() points
            at.</para>
            <para>Use Qt::Horizontal for tabular data that looks like this:</para>
            <para></para>
            <para> 1	Qt Norway	Oslo</para>
            <para>2	Qt Australia	Brisbane</para>
            <para>3	Qt USA	Silicon Valley</para>
            <para>4	Qt China	Beijing</para>
            <para>5	Qt Germany	Berlin</para>
            <para></para>
            <para>If the orientation is set to Qt::Vertical, a widget is mapped to
            a row. Calling setCurrentIndex() will change the current column. The widget
            will be populates with the model's data from its mapped row and the column
            that currentIndex() points at.</para>
            <para>Use Qt::Vertical for tabular data that looks like this:</para>
            <para></para>
            <para> 1	2	3	4	5</para>
            <para>Qt Norway	Qt Australia	Qt USA	Qt China	Qt Germany</para>
            <para>Oslo	Brisbane	Silicon Valley	Beijing	Berlin</para>
            <para></para>
            <para>Changing the orientation clears all existing mappings.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDataWidgetMapper.submitPolicy">
            <summary>
            <para>This property holds the current submit policy.</para>
            <para>Changing the current submit policy will revert all widgets to the
            current data from the model.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDataWidgetMapper.CurrentIndex">
            <summary>
            <para>This property holds the current row or column.</para>
            <para>The widgets are populated with with data from the row at index if
            the orientation is horizontal (the default), otherwise with data from the
            column at index.</para>
            <para>See also setCurrentModelIndex(), toFirst(), toNext(),
            toPrevious(), and toLast().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QDataWidgetMapper.SubmitPolicy">
            <summary>
            <para>This enum describes the possible submit policies a
            QDataWidgetMapper supports.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QDataWidgetMapper.SubmitPolicy.AutoSubmit">
            <summary>Whenever a widget loses focus, the widget's current value is set to the item model.</summary>
        </member>
        <member name="F:QtWidgets.QDataWidgetMapper.SubmitPolicy.ManualSubmit">
            <summary>The model is not updated until submit() is called.</summary>
        </member>
        <member name="T:QtWidgets.QFileIconProvider">
            <summary>
            <para>The QFileIconProvider class provides file icons for the QDirModel
            and the QFileSystemModel classes.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileIconProvider.#ctor">
            <summary>
            <para>Constructs a file icon provider.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileIconProvider.Icon(QtWidgets.QFileIconProvider.IconType)">
            <summary>
            <para>Returns an icon set for the given type.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileIconProvider.Icon(QtCore.QFileInfo)">
            <summary>
            <para>Returns an icon for the file described by info.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFileIconProvider.Type(QtCore.QFileInfo)">
            <summary>
            <para>Returns the type of the file described by info.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFileIconProvider.Options">
            <summary>
            <para>Returns all the options that affect the icon provider. By
            default, all options are disabled.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also setOptions().</para>
            <para></para>
            <para>Sets options that affect the icon provider.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also options().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QFileIconProvider.Option">
            <summary>
            <para>This enum was introduced or modified in  Qt 5.2.</para>
            <para>The Options type is a typedef for QFlags&lt;Option&gt;. It stores
            an OR combination of Option values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QFileIconProvider.Option.DontUseCustomDirectoryIcons">
            <summary>Always use the default directory icon. Some platforms allow the user to set a different icon. Custom icon lookup cause a big performance impact over network or removable drives.</summary>
        </member>
        <member name="T:QtWidgets.QDirModel">
            <summary>
            <para>The QDirModel class provides a data model for the local
            filesystem.</para>
            </summary>
            <remarks>
            <para>The usage of QDirModel is not recommended anymore. The
            QFileSystemModel class is a more performant alternative.</para>
            <para>This class provides access to the local filesystem, providing
            functions for renaming and removing files and directories, and for creating
            new directories. In the simplest case, it can be used with a suitable
            display widget as part of a browser or filer.</para>
            <para>QDirModel keeps a cache with file information. The cache needs to
            be updated with refresh().</para>
            <para>QDirModel can be accessed using the standard interface provided
            by QAbstractItemModel, but it also provides some convenience functions that
            are specific to a directory model. The fileInfo() and isDir() functions
            provide information about the underlying files and directories related to
            items in the model.</para>
            <para>Directories can be created and removed using mkdir(), rmdir(),
            and the model will be automatically updated to take the changes into
            account.</para>
            <para>Note: QDirModel requires an instance of a GUI application.</para>
            <para></para>
            <para>See also nameFilters(), setFilter(), filter(), QListView,
            QTreeView, QFileSystemModel, Dir View Example, and Model Classes.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QDirModel.#ctor(QtCore.QStringList,QtCore.QDir.Filter,QtCore.QDir.SortFlag,QtCore.QObject)">
            <summary>
            <para>Constructs a new directory model with the given parent. Only
            those files matching the nameFilters and the filters are included in the
            model. The sort order is given by the sort flags.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a directory model with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.Index(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::index().</para>
            <para>Returns the model item index for the item in the parent with the
            given row and column.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.parent(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::parent().</para>
            <para>Return the parent of the given child model item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.RowCount(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::rowCount().</para>
            <para>Returns the number of rows in the parent model item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.ColumnCount(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::columnCount().</para>
            <para>Returns the number of columns in the parent model item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.Data(QtCore.QModelIndex,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::data().</para>
            <para>Returns the data for the model item index with the given
            role.</para>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.SetData(QtCore.QModelIndex,QtCore.QVariant,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::setData().</para>
            <para>Sets the data for the model item index with the given role to the
            data referenced by the value. Returns true if successful; otherwise returns
            false.</para>
            <para>See also data() and Qt::ItemDataRole.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.HeaderData(System.Int32,QtCore.Qt.Orientation,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::headerData().</para>
            <para>Returns the data stored under the given role for the specified
            section of the header with the given orientation.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.HasChildren(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::hasChildren().</para>
            <para>Returns true if the parent model item has children; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.Flags(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::flags().</para>
            <para>Returns the item flags for the given index in the model.</para>
            <para>See also Qt::ItemFlags.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.Sort(System.Int32,QtCore.Qt.SortOrder)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::sort().</para>
            <para>Sort the model items in the column using the order given. The
            order is a value defined in Qt::SortOrder.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.DropMimeData(QtCore.QMimeData,QtCore.Qt.DropAction,System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::dropMimeData().</para>
            <para>Handles the data supplied by a drag and drop operation that ended
            with the given action over the row in the model specified by the row and
            column and by the parent index.</para>
            <para>Returns true if the drop was successful, and false
            otherwise.</para>
            <para>See also supportedDropActions().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.Index(System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the model item index for the given path.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.IsDir(QtCore.QModelIndex)">
            <summary>
            <para>Returns true if the model item index represents a directory;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.Mkdir(QtCore.QModelIndex,System.String)">
            <summary>
            <para>Create a directory with the name in the parent model item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.Rmdir(QtCore.QModelIndex)">
            <summary>
            <para>Removes the directory corresponding to the model item index in
            the directory model and deletes the corresponding directory from the file
            system, returning true if successful. If the directory cannot be removed,
            false is returned.</para>
            <para>Warning: This function deletes directories from the file system;
            it does not move them to a location where they can be recovered.</para>
            <para>See also remove().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.Remove(QtCore.QModelIndex)">
            <summary>
            <para>Removes the model item index from the directory model and deletes
            the corresponding file from the file system, returning true if successful.
            If the item cannot be removed, false is returned.</para>
            <para>Warning: This function deletes files from the file system; it
            does not move them to a location where they can be recovered.</para>
            <para>See also rmdir().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.FilePath(QtCore.QModelIndex)">
            <summary>
            <para>Returns the path of the item stored in the model under the index
            given.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.FileName(QtCore.QModelIndex)">
            <summary>
            <para>Returns the name of the item stored in the model under the index
            given.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.FileIcon(QtCore.QModelIndex)">
            <summary>
            <para>Returns the icons for the item stored in the model under the
            given index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.FileInfo(QtCore.QModelIndex)">
            <summary>
            <para>Returns the file information for the specified model
            index.</para>
            <para>Note: If the model index represents a symbolic link in the
            underlying filing system, the file information returned will contain
            information about the symbolic link itself, regardless of whether
            resolveSymlinks is enabled or not.</para>
            <para>See also QFileInfo::symLinkTarget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDirModel.Refresh(QtCore.QModelIndex)">
            <summary>
            <para>QDirModel caches file information. This function updates the
            cache. The parent parameter is the directory from which the model is
            updated; the default value will update the model from root directory of the
            file system (the entire model).</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDirModel.IconProvider">
            <summary>
            <para>Returns the file icon provider for this directory model.</para>
            <para>See also setIconProvider().</para>
            <para></para>
            <para>Sets the provider of file icons for the directory model.</para>
            <para>See also iconProvider().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDirModel.NameFilters">
            <summary>
            <para>Returns a list of filters applied to the names in the
            model.</para>
            <para>See also setNameFilters().</para>
            <para></para>
            <para>Sets the name filters for the directory model.</para>
            <para>See also nameFilters().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDirModel.Filter">
            <summary>
            <para>Returns the filter specification for the directory model.</para>
            <para>See also setFilter() and QDir::Filters.</para>
            <para></para>
            <para>Sets the directory model's filter to that specified by
            filters.</para>
            <para>Note that the filter you set should always include the
            QDir::AllDirs enum value, otherwise QDirModel won't be able to read the
            directory structure.</para>
            <para>See also filter() and QDir::Filters.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDirModel.Sorting">
            <summary>
            <para>Returns the sorting method used for the directory model.</para>
            <para>See also setSorting() and QDir::SortFlags.</para>
            <para></para>
            <para>Sets the directory model's sorting order to that specified by
            sort.</para>
            <para>See also sorting() and QDir::SortFlags.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDirModel.ResolveSymlinks">
            <summary>
            <para>This property holds whether the directory model should resolve
            symbolic links.</para>
            <para>This is only relevant on operating systems that support symbolic
            links.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDirModel.ReadOnly">
            <summary>
            <para>This property holds whether the directory model allows writing to
            the file system.</para>
            <para>If this property is set to false, the directory model will allow
            renaming, copying and deleting of files and directories.</para>
            <para>This property is true by default</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDirModel.LazyChildCount">
            <summary>
            <para>This property holds whether the directory model optimizes the
            hasChildren function to only check if the item is a directory.</para>
            <para>If this property is set to false, the directory model will make
            sure that a directory actually containes any files before reporting that it
            has children. Otherwise the directory model will report that an item has
            children if the item is a directory.</para>
            <para>This property is false by default</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDirModel.MimeTypes">
            <summary>
            <para>Reimplemented from QAbstractItemModel::mimeTypes().</para>
            <para>Returns a list of MIME types that can be used to describe a list
            of items in the model.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDirModel.SupportedDropActions">
            <summary>
            <para>Reimplemented from
            QAbstractItemModel::supportedDropActions().</para>
            <para>Returns the drop actions supported by this model.</para>
            <para>See also Qt::DropActions.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QItemDelegate">
            <summary>
            <para>The QItemDelegate class provides display and editing facilities
            for data items from a model.</para>
            </summary>
            <remarks>
            <para>QItemDelegate can be used to provide custom display features and
            editor widgets for item views based on QAbstractItemView subclasses. Using
            a delegate for this purpose allows the display and editing mechanisms to be
            customized and developed independently from the model and view.</para>
            <para>The QItemDelegate class is one of the Model/View Classes and is
            part of Qt's model/view framework. Note that QStyledItemDelegate has taken
            over the job of drawing Qt's item views. We recommend the use of
            QStyledItemDelegate when creating new delegates.</para>
            <para>When displaying items from a custom model in a standard view, it
            is often sufficient to simply ensure that the model returns appropriate
            data for each of the roles that determine the appearance of items in views.
            The default delegate used by Qt's standard views uses this role information
            to display items in most of the common forms expected by users. However, it
            is sometimes necessary to have even more control over the appearance of
            items than the default delegate can provide.</para>
            <para>This class provides default implementations of the functions for
            painting item data in a view and editing data from item models. Default
            implementations of the paint() and sizeHint() virtual functions, defined in
            QAbstractItemDelegate, are provided to ensure that the delegate implements
            the correct basic behavior expected by views. You can reimplement these
            functions in subclasses to customize the appearance of items.</para>
            <para>When editing data in an item view, QItemDelegate provides an
            editor widget, which is a widget that is placed on top of the view while
            editing takes place. Editors are created with a QItemEditorFactory; a
            default static instance provided by QItemEditorFactory is installed on all
            item delegates. You can set a custom factory using setItemEditorFactory()
            or set a new default factory with QItemEditorFactory::setDefaultFactory().
            It is the data stored in the item model with the Qt::EditRole that is
            edited.</para>
            <para>Only the standard editing functions for widget-based delegates
            are reimplemented here:</para>
            <para></para>
            <para>createEditor() returns the widget used to change data from the
            model and can be reimplemented to customize editing behavior.</para>
            <para>setEditorData() provides the widget with data to
            manipulate.</para>
            <para>updateEditorGeometry() ensures that the editor is displayed
            correctly with respect to the item view.</para>
            <para>setModelData() returns updated data to the model.</para>
            <para></para>
            <para>The closeEditor() signal indicates that the user has completed
            editing the data, and that the editor widget can be destroyed.</para>
            <para></para>
            <para>Standard Roles and Data Types</para>
            <para>The default delegate used by the standard views supplied with Qt
            associates each standard role (defined by Qt::ItemDataRole) with certain
            data types. Models that return data in these types can influence the
            appearance of the delegate as described in the following table.</para>
            <para></para>
            <para> RoleAccepted Types</para>
            <para>Qt::BackgroundRole	QBrush</para>
            <para>Qt::BackgroundColorRole	QColor (obsolete; use Qt::BackgroundRole
            instead)</para>
            <para>Qt::CheckStateRole	Qt::CheckState</para>
            <para>Qt::DecorationRole	QIcon, QPixmap and QColor</para>
            <para>Qt::DisplayRole	QString and types with a string
            representation</para>
            <para>Qt::EditRole	See QItemEditorFactory for details</para>
            <para>Qt::FontRole	QFont</para>
            <para>Qt::SizeHintRole	QSize</para>
            <para>Qt::TextAlignmentRole	Qt::Alignment</para>
            <para>Qt::ForegroundRole	QBrush</para>
            <para>Qt::TextColorRole	QColor (obsolete; use Qt::ForegroundRole
            instead)</para>
            <para></para>
            <para>If the default delegate does not allow the level of customization
            that you need, either for display purposes or for editing data, it is
            possible to subclass QItemDelegate to implement the desired
            behavior.</para>
            <para></para>
            <para>Subclassing</para>
            <para>When subclassing QItemDelegate to create a delegate that displays
            items using a custom renderer, it is important to ensure that the delegate
            can render items suitably for all the required states; e.g. selected,
            disabled, checked. The documentation for the paint() function contains some
            hints to show how this can be achieved.</para>
            <para>You can provide custom editors by using a QItemEditorFactory. The
            Color Editor Factory Example shows how a custom editor can be made
            available to delegates with the default item editor factory. This way,
            there is no need to subclass QItemDelegate. An alternative is to
            reimplement createEditor(), setEditorData(), setModelData(), and
            updateEditorGeometry(). This process is described in the Spin Box Delegate
            Example.</para>
            <para></para>
            <para>QStyledItemDelegate vs. QItemDelegate</para>
            <para>Since Qt 4.4, there are two delegate classes: QItemDelegate and
            QStyledItemDelegate. However, the default delegate is QStyledItemDelegate.
            These two classes are independent alternatives to painting and providing
            editors for items in views. The difference between them is that
            QStyledItemDelegate uses the current style to paint its items. We therefore
            recommend using QStyledItemDelegate as the base class when implementing
            custom delegates or when working with Qt style sheets. The code required
            for either class should be equal unless the custom delegate needs to use
            the style for drawing.</para>
            <para></para>
            <para>See also Delegate Classes, QStyledItemDelegate,
            QAbstractItemDelegate, Spin Box Delegate Example, Settings Editor Example,
            and Icons Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QItemDelegate.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an item delegate with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemDelegate.SetClipping(System.Boolean)">
            <summary>
            <para>This property holds if the delegate should clip the paint
            events.</para>
            <para>This property will set the paint clip to the size of the item.
            The default value is on. It is useful for cases such as when images are
            larger than the size of the item.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasClipping() const</para>
            <para> void 	setClipping(bool clip)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemDelegate.Paint(QtGui.QPainter,QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemDelegate::paint().</para>
            <para>Renders the delegate using the given painter and style option for
            the item specified by index.</para>
            <para>When reimplementing this function in a subclass, you should
            update the area held by the option's rect variable, using the option's
            state variable to determine the state of the item to be displayed, and
            adjust the way it is painted accordingly.</para>
            <para>For example, a selected item may need to be displayed differently
            to unselected items, as shown in the following code:</para>
            <para>    if (option.state &amp; QStyle::State_Selected)</para>
            <para>        painter-&gt;fillRect(option.rect,
            option.palette.highlight());</para>
            <para></para>
            <para>    int size = qMin(option.rect.width(),
            option.rect.height());</para>
            <para>    int brightness = index.model()-&gt;data(index,
            Qt::DisplayRole).toInt();</para>
            <para>    double radius = (size / 2.0) - (brightness / 255.0 * size /
            2.0);</para>
            <para>    if (radius == 0.0)</para>
            <para>        return;</para>
            <para></para>
            <para>    painter-&gt;save();</para>
            <para>    painter-&gt;setRenderHint(QPainter::Antialiasing,
            true);</para>
            <para>    painter-&gt;setPen(Qt::NoPen);</para>
            <para>    if (option.state &amp; QStyle::State_Selected)</para>
            <para>
            painter-&gt;setBrush(option.palette.highlightedText());</para>
            <para>    else</para>
            <para>    ...</para>
            <para>After painting, you should ensure that the painter is returned to
            its the state it was supplied in when this function was called. For
            example, it may be useful to call QPainter::save() before painting and
            QPainter::restore() afterwards.</para>
            <para>See also QStyle::State.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemDelegate.SizeHint(QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemDelegate::sizeHint().</para>
            <para>Returns the size needed by the delegate to display the item
            specified by index, taking into account the style information provided by
            option.</para>
            <para>When reimplementing this function, note that in case of text
            items, QItemDelegate adds a margin (i.e. 2 * QStyle::PM_FocusFrameHMargin)
            to the length of the text.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemDelegate.CreateEditor(QtWidgets.QWidget,QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemDelegate::createEditor().</para>
            <para>Returns the widget used to edit the item specified by index for
            editing. The parent widget and style option are used to control how the
            editor widget appears.</para>
            <para>See also QAbstractItemDelegate::createEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemDelegate.SetEditorData(QtWidgets.QWidget,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemDelegate::setEditorData().</para>
            <para>Sets the data to be displayed and edited by the editor from the
            data model item specified by the model index.</para>
            <para>The default implementation stores the data in the editor widget's
            user property.</para>
            <para>See also QMetaProperty::isUser().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemDelegate.SetModelData(QtWidgets.QWidget,QtCore.QAbstractItemModel,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemDelegate::setModelData().</para>
            <para>Gets data from the editor widget and stores it in the specified
            model at the item index.</para>
            <para>The default implementation gets the value to be stored in the
            data model from the editor widget's user property.</para>
            <para>See also QMetaProperty::isUser().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemDelegate.UpdateEditorGeometry(QtWidgets.QWidget,QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from
            QAbstractItemDelegate::updateEditorGeometry().</para>
            <para>Updates the editor for the item specified by index according to
            the style option given.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemDelegate.DrawDisplay(QtGui.QPainter,QtWidgets.QStyleOptionViewItem,QtCore.QRect,System.String)">
            <summary>
            <para>Renders the item view text within the rectangle specified by rect
            using the given painter and style option.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemDelegate.DrawDecoration(QtGui.QPainter,QtWidgets.QStyleOptionViewItem,QtCore.QRect,QtGui.QPixmap)">
            <summary>
            <para>Renders the decoration pixmap within the rectangle specified by
            rect using the given painter and style option.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemDelegate.DrawFocus(QtGui.QPainter,QtWidgets.QStyleOptionViewItem,QtCore.QRect)">
            <summary>
            <para>Renders the region within the rectangle specified by rect,
            indicating that it has the focus, using the given painter and style
            option.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemDelegate.DrawCheck(QtGui.QPainter,QtWidgets.QStyleOptionViewItem,QtCore.QRect,QtCore.Qt.CheckState)">
            <summary>
            <para>Renders a check indicator within the rectangle specified by rect,
            using the given painter and style option, using the given state.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemDelegate.DrawBackground(QtGui.QPainter,QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>Renders the item background for the given index, using the given
            painter and style option.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemDelegate.EventFilter(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::eventFilter().</para>
            <para>Returns true if the given editor is a valid QWidget and the given
            event is handled; otherwise returns false. The following key press events
            are handled by default:</para>
            <para></para>
            <para>Tab</para>
            <para>Backtab</para>
            <para>Enter</para>
            <para>Return</para>
            <para>Esc</para>
            <para></para>
            <para>In the case of Tab, Backtab, Enter and Return key press events,
            the editor's data is comitted to the model and the editor is closed. If the
            event is a Tab key press the view will open an editor on the next item in
            the view. Likewise, if the event is a Backtab key press the view will open
            an editor on the previous item in the view.</para>
            <para>If the event is a Esc key press event, the editor is closed
            without committing its data.</para>
            <para>See also commitData() and closeEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemDelegate.EditorEvent(QtCore.QEvent,QtCore.QAbstractItemModel,QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemDelegate::editorEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QItemDelegate.ItemEditorFactory">
            <summary>
            <para>Returns the editor factory used by the item delegate. If no
            editor factory is set, the function will return null.</para>
            <para>See also setItemEditorFactory().</para>
            <para></para>
            <para>Sets the editor factory to be used by the item delegate to be the
            factory specified. If no editor factory is set, the item delegate will use
            the default editor factory.</para>
            <para>See also itemEditorFactory().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QItemDelegate.HasClipping">
            <summary>
            <para>This property holds if the delegate should clip the paint
            events.</para>
            <para>This property will set the paint clip to the size of the item.
            The default value is on. It is useful for cases such as when images are
            larger than the size of the item.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasClipping() const</para>
            <para> void 	setClipping(bool clip)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:QtWidgets.QItemEditorCreatorBase">
            <summary>
            <para>The QItemEditorCreatorBase class provides an abstract base class
            that must be subclassed when implementing new item editor creators.</para>
            </summary>
            <remarks>
            <para>QItemEditorCreatorBase objects are specialized widget factories
            that provide editor widgets for one particular QVariant data type. They are
            used by QItemEditorFactory to create editors for QItemDelegates. Creator
            bases must be registered with QItemEditorFactory::registerEditor().</para>
            <para>An editor should provide a user property for the data it edits.
            QItemDelagates can then access the property using Qt's meta-object system
            to set and retrieve the editing data. A property is set as the user
            property with the USER keyword:</para>
            <para>Q_PROPERTY(QColor color READ color WRITE setColor USER
            true)</para>
            <para>If the editor does not provide a user property, it must return
            the name of the property from valuePropertyName(); delegates will then use
            the name to access the property. If a user property exists, item delegates
            will not call valuePropertyName().</para>
            <para>QStandardItemEditorCreator is a convenience template class that
            can be used to register widgets without the need to subclass
            QItemEditorCreatorBase.</para>
            <para></para>
            <para>See also QStandardItemEditorCreator, QItemEditorFactory,
            Model/View Programming, and Color Editor Factory Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QItemEditorCreatorBase.CreateWidget(QtWidgets.QWidget)">
            <summary>
            <para>Returns an editor widget with the given parent.</para>
            <para>When implementing this function in subclasses of this class, you
            must construct and return new editor widgets with the parent widget
            specified.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QItemEditorCreatorBase.ValuePropertyName">
            <summary>
            <para>Returns the name of the property used to get and set values in
            the creator's editor widgets.</para>
            <para>When implementing this function in subclasses, you must ensure
            that the editor widget's property specified by this function can accept the
            type the creator is registered for. For example, a creator which constructs
            QCheckBox widgets to edit boolean values would return the checkable
            property name from this function, and must be registered in the item editor
            factory for the QVariant::Bool type.</para>
            <para>Note: Since Qt 4.2 the item delegates query the user property of
            widgets, and only call this function if the widget has no user property.
            You can override this behavior by reimplementing
            QAbstractItemDelegate::setModelData() and
            QAbstractItemDelegate::setEditorData().</para>
            <para>See also QMetaObject::userProperty() and
            QItemEditorFactory::registerEditor().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QItemEditorFactory">
            <summary>
            <para>The QItemEditorFactory class provides widgets for editing item
            data in views and delegates.</para>
            </summary>
            <remarks>
            <para>When editing data in an item view, editors are created and
            displayed by a delegate. QItemDelegate, which is the delegate by default
            installed on Qt's item views, uses a QItemEditorFactory to create editors
            for it. A default unique instance provided by QItemEditorFactory is used by
            all item delegates. If you set a new default factory with
            setDefaultFactory(), the new factory will be used by existing and new
            delegates.</para>
            <para>A factory keeps a collection of QItemEditorCreatorBase instances,
            which are specialized editors that produce editors for one particular
            QVariant data type (All Qt models store their data in QVariants).</para>
            <para></para>
            <para>Standard Editing Widgets</para>
            <para>The standard factory implementation provides editors for a
            variety of data types. These are created whenever a delegate needs to
            provide an editor for data supplied by a model. The following table shows
            the relationship between types and the standard editors provided.</para>
            <para></para>
            <para> TypeEditor Widget</para>
            <para>bool	QComboBox</para>
            <para>double	QDoubleSpinBox</para>
            <para>int	QSpinBox</para>
            <para>unsigned int</para>
            <para>QDate	QDateEdit</para>
            <para>QDateTime	QDateTimeEdit</para>
            <para>QPixmap	QLabel</para>
            <para>QString	QLineEdit</para>
            <para>QTime	QTimeEdit</para>
            <para></para>
            <para>Additional editors can be registered with the registerEditor()
            function.</para>
            <para></para>
            <para>See also QItemDelegate, Model/View Programming, and Color Editor
            Factory Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QItemEditorFactory.#ctor">
            <summary>
            <para>Constructs a new item editor factory.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemEditorFactory.CreateEditor(System.Int32,QtWidgets.QWidget)">
            <summary>
            <para>Creates an editor widget with the given parent for the specified
            userType of data, and returns it as a QWidget.</para>
            <para>See also registerEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemEditorFactory.ValuePropertyName(System.Int32)">
            <summary>
            <para>Returns the property name used to access data for the given
            userType of data.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QItemEditorFactory.RegisterEditor(System.Int32,QtWidgets.QItemEditorCreatorBase)">
            <summary>
            <para>Registers an item editor creator specified by creator for the
            given userType of data.</para>
            <para>Note: The factory takes ownership of the item editor creator and
            will destroy it if a new creator for the same type is registered
            later.</para>
            <para>See also createEditor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QItemEditorFactory.DefaultFactory">
            <summary>
            <para>Returns the default item editor factory.</para>
            <para>See also setDefaultFactory().</para>
            <para></para>
            <para>Sets the default item editor factory to the given factory. Both
            new and existing delegates will use the new factory.</para>
            <para>See also defaultFactory().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QListView">
            <summary>
            <para>The QListView class provides a list or icon view onto a
            model.</para>
            </summary>
            <remarks>
            <para>A QListView presents items stored in a model, either as a simple
            non-hierarchical list, or as a collection of icons. This class is used to
            provide lists and icon views that were previously provided by the QListBox
            and QIconView classes, but using the more flexible approach provided by
            Qt's model/view architecture.</para>
            <para>The QListView class is one of the Model/View Classes and is part
            of Qt's model/view framework.</para>
            <para>This view does not display horizontal or vertical headers; to
            display a list of items with a horizontal header, use QTreeView
            instead.</para>
            <para>QListView implements the interfaces defined by the
            QAbstractItemView class to allow it to display data provided by models
            derived from the QAbstractItemModel class.</para>
            <para>Items in a list view can be displayed using one of two view
            modes: In ListMode, the items are displayed in the form of a simple list;
            in IconMode, the list view takes the form of an icon view in which the
            items are displayed with icons like files in a file manager. By default,
            the list view is in ListMode. To change the view mode, use the
            setViewMode() function, and to determine the current view mode, use
            viewMode().</para>
            <para>Items in these views are laid out in the direction specified by
            the flow() of the list view. The items may be fixed in place, or allowed to
            move, depending on the view's movement() state.</para>
            <para>If the items in the model cannot be completely laid out in the
            direction of flow, they can be wrapped at the boundary of the view widget;
            this depends on isWrapping(). This property is useful when the items are
            being represented by an icon view.</para>
            <para>The resizeMode() and layoutMode() govern how and when the items
            are laid out. Items are spaced according to their spacing(), and can exist
            within a notional grid of size specified by gridSize(). The items can be
            rendered as large or small icons depending on their iconSize().</para>
            <para></para>
            <para> 	</para>
            <para>A Windows Vista style list view.	A Macintosh style list view.	A
            Fusion style list view.</para>
            <para></para>
            <para></para>
            <para>Improving Performance</para>
            <para>It is possible to give the view hints about the data it is
            handling in order to improve its performance when displaying large numbers
            of items. One approach that can be taken for views that are intended to
            display items with equal sizes is to set the uniformItemSizes property to
            true.</para>
            <para></para>
            <para>See also View Classes, Item Views Puzzle Example, QTreeView,
            QTableView, and QListWidget.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QListView.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Creates a new QListView with the given parent to view a model.
            Use setModel() to set the model.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.ClearPropertyFlags">
            <summary>
            <para>Clears the QListView-specific property flags. See
            viewMode.</para>
            <para>Properties inherited from QAbstractItemView are not covered by
            the property flags. Specifically, dragEnabled and acceptsDrops are computed
            by QListView when calling setMovement() or setViewMode().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.IsRowHidden(System.Int32)">
            <summary>
            <para>Returns true if the row is hidden; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.SetRowHidden(System.Int32,System.Boolean)">
            <summary>
            <para>If hide is true, the given row will be hidden; otherwise the row
            will be shown.</para>
            <para>See also isRowHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.VisualRect(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemView::visualRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.ScrollTo(QtCore.QModelIndex,QtWidgets.QAbstractItemView.ScrollHint)">
            <summary>
            <para>Reimplemented from QAbstractItemView::scrollTo().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.IndexAt(QtCore.QPoint)">
            <summary>
            <para>Reimplemented from QAbstractItemView::indexAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.RowsInserted(QtCore.QModelIndex,System.Int32,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemView::rowsInserted().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.RowsAboutToBeRemoved(QtCore.QModelIndex,System.Int32,System.Int32)">
            <summary>
            <para>Reimplemented from
            QAbstractItemView::rowsAboutToBeRemoved().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.OnDragMoveEvent(QtGui.QDragMoveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.OnDragLeaveEvent(QtGui.QDragLeaveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.OnDropEvent(QtGui.QDropEvent)">
            <summary>
            <para>Reimplemented from QWidget::dropEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.StartDrag(QtCore.Qt.DropAction)">
            <summary>
            <para>Reimplemented from QAbstractItemView::startDrag().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.MoveCursor(QtWidgets.QAbstractItemView.CursorAction,QtCore.Qt.KeyboardModifier)">
            <summary>
            <para>Reimplemented from QAbstractItemView::moveCursor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.RectForIndex(QtCore.QModelIndex)">
            <summary>
            <para>Returns the rectangle of the item at position index in the model.
            The rectangle is in contents coordinates.</para>
            <para>See also visualRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.SetPositionForIndex(QtCore.QPoint,QtCore.QModelIndex)">
            <summary>
            <para>Sets the contents position of the item at index in the model to
            the given position. If the list view's movement mode is Static or its view
            mode is ListView, this function will have no effect.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.SetSelection(QtCore.QRect,QtCore.QItemSelectionModel.SelectionFlag)">
            <summary>
            <para>Reimplemented from QAbstractItemView::setSelection().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.VisualRegionForSelection(QtCore.QItemSelection)">
            <summary>
            <para>Reimplemented from
            QAbstractItemView::visualRegionForSelection().</para>
            <para>Since 4.7, the returned region only contains rectangles
            intersecting (or included in) the viewport.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.UpdateGeometries">
            <summary>
            <para>Reimplemented from QAbstractItemView::updateGeometries().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.IsIndexHidden(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemView::isIndexHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.SelectionChanged(QtCore.QItemSelection,QtCore.QItemSelection)">
            <summary>
            <para>Reimplemented from QAbstractItemView::selectionChanged().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListView.CurrentChanged(QtCore.QModelIndex,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemView::currentChanged().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.movement">
            <summary>
            <para>This property holds whether the items can be moved freely, are
            snapped to a grid, or cannot be moved at all.</para>
            <para>This property determines how the user can move the items in the
            view. Static means that the items can't be moved the user. Free means that
            the user can drag and drop the items to any position in the view. Snap
            means that the user can drag and drop the items, but only to the positions
            in a notional grid signified by the gridSize property.</para>
            <para>Setting this property when the view is visible will cause the
            items to be laid out again.</para>
            <para>By default, this property is set to Static.</para>
            <para>See also gridSize, resizeMode, and viewMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.flow">
            <summary>
            <para>This property holds which direction the items layout should
            flow.</para>
            <para>If this property is LeftToRight, the items will be laid out left
            to right. If the isWrapping property is true, the layout will wrap when it
            reaches the right side of the visible area. If this property is
            TopToBottom, the items will be laid out from the top of the visible area,
            wrapping when it reaches the bottom.</para>
            <para>Setting this property when the view is visible will cause the
            items to be laid out again.</para>
            <para>By default, this property is set to TopToBottom.</para>
            <para>See also viewMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.IsWrapping">
            <summary>
            <para>This property holds whether the items layout should wrap.</para>
            <para>This property holds whether the layout should wrap when there is
            no more space in the visible area. The point at which the layout wraps
            depends on the flow property.</para>
            <para>Setting this property when the view is visible will cause the
            items to be laid out again.</para>
            <para>By default, this property is false.</para>
            <para>See also viewMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.resizeMode">
            <summary>
            <para>This property holds whether the items are laid out again when the
            view is resized.</para>
            <para>If this property is Adjust, the items will be laid out again when
            the view is resized. If the value is Fixed, the items will not be laid out
            when the view is resized.</para>
            <para>By default, this property is set to Fixed.</para>
            <para>See also movement, gridSize, and viewMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.layoutMode">
            <summary>
            <para>This property determines whether the layout of items should
            happen immediately or be delayed.</para>
            <para>This property holds the layout mode for the items. When the mode
            is SinglePass (the default), the items are laid out all in one go. When the
            mode is Batched, the items are laid out in batches of batchSize items,
            while processing events. This makes it possible to instantly view and
            interact with the visible items while the rest are being laid out.</para>
            <para>See also viewMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.Spacing">
            <summary>
            <para>This property holds the space around the items in the
            layout.</para>
            <para>This property is the size of the empty space that is padded
            around an item in the layout.</para>
            <para>Setting this property when the view is visible will cause the
            items to be laid out again.</para>
            <para>By default, this property contains a value of 0.</para>
            <para>See also viewMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.BatchSize">
            <summary>
            <para>This property holds the number of items laid out in each batch if
            layoutMode is set to Batched.</para>
            <para>The default value is 100.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.GridSize">
            <summary>
            <para>This property holds the size of the layout grid.</para>
            <para>This property is the size of the grid in which the items are laid
            out. The default is an empty size which means that there is no grid and the
            layout is not done in a grid. Setting this property to a non-empty size
            switches on the grid layout. (When a grid layout is in force the spacing
            property is ignored.)</para>
            <para>Setting this property when the view is visible will cause the
            items to be laid out again.</para>
            <para>See also viewMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.viewMode">
            <summary>
            <para>This property holds the view mode of the QListView.</para>
            <para>This property will change the other unset properties to conform
            with the set view mode. QListView-specific properties that have already
            been set will not be changed, unless clearPropertyFlags() has been
            called.</para>
            <para>Setting the view mode will enable or disable drag and drop based
            on the selected movement. For ListMode, the default movement is Static
            (drag and drop disabled); for IconMode, the default movement is Free (drag
            and drop enabled).</para>
            <para>See also isWrapping, spacing, gridSize, flow, movement, and
            resizeMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.ModelColumn">
            <summary>
            <para>This property holds the column in the model that is
            visible.</para>
            <para>By default, this property contains 0, indicating that the first
            column in the model will be shown.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.UniformItemSizes">
            <summary>
            <para>This property holds whether all items in the listview have the
            same size.</para>
            <para>This property should only be set to true if it is guaranteed that
            all items in the view have the same size. This enables the view to do some
            optimizations for performance purposes.</para>
            <para>By default, this property is false.</para>
            <para>This property was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.WordWrap">
            <summary>
            <para>This property holds the item text word-wrapping policy.</para>
            <para>If this property is true then the item text is wrapped where
            necessary at word-breaks; otherwise it is not wrapped at all. This property
            is false by default.</para>
            <para>Please note that even if wrapping is enabled, the cell will not
            be expanded to make room for the text. It will print ellipsis for text that
            cannot be shown, according to the view's textElideMode.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.SelectionRectVisible">
            <summary>
            <para>This property holds if the selection rectangle should be
            visible.</para>
            <para>If this property is true then the selection rectangle is visible;
            otherwise it will be hidden.</para>
            <para>Note: The selection rectangle will only be visible if the
            selection mode is in a mode where more than one item can be selected; i.e.,
            it will not draw a selection rectangle if the selection mode is
            QAbstractItemView::SingleSelection.</para>
            <para>By default, this property is false.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.RootIndex">
            <summary>
            <para>Returns the model index of the model's root item. The root item
            is the parent item to the view's toplevel items. The root can be
            invalid.</para>
            <para>See also setRootIndex().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.ViewOptions">
            <summary>
            <para>Reimplemented from QAbstractItemView::viewOptions().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.HorizontalOffset">
            <summary>
            <para>Reimplemented from QAbstractItemView::horizontalOffset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.VerticalOffset">
            <summary>
            <para>Reimplemented from QAbstractItemView::verticalOffset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListView.ViewportSizeHint">
            <summary>
            <para>Reimplemented from
            QAbstractScrollArea::viewportSizeHint().</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QListView.Movement.Static">
            <summary>The items cannot be moved by the user.</summary>
        </member>
        <member name="F:QtWidgets.QListView.Movement.Free">
            <summary>The items can be moved freely by the user.</summary>
        </member>
        <member name="F:QtWidgets.QListView.Movement.Snap">
            <summary>The items snap to the specified grid when moved; see setGridSize().</summary>
        </member>
        <member name="F:QtWidgets.QListView.Flow.LeftToRight">
            <summary>The items are laid out in the view from the left to the right.</summary>
        </member>
        <member name="F:QtWidgets.QListView.Flow.TopToBottom">
            <summary>The items are laid out in the view from the top to the bottom.</summary>
        </member>
        <member name="F:QtWidgets.QListView.ResizeMode.Fixed">
            <summary>The items will only be laid out the first time the view is shown.</summary>
        </member>
        <member name="F:QtWidgets.QListView.ResizeMode.Adjust">
            <summary>The items will be laid out every time the view is resized.</summary>
        </member>
        <member name="T:QtWidgets.QListView.LayoutMode">
            <summary>
            <para>See also batchSize.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QListView.LayoutMode.SinglePass">
            <summary>The items are laid out all at once.</summary>
        </member>
        <member name="F:QtWidgets.QListView.LayoutMode.Batched">
            <summary>The items are laid out in batches of batchSize items.</summary>
        </member>
        <member name="F:QtWidgets.QListView.ViewMode.ListMode">
            <summary>The items are laid out using TopToBottom flow, with Small size and Static movement</summary>
        </member>
        <member name="F:QtWidgets.QListView.ViewMode.IconMode">
            <summary>The items are laid out using LeftToRight flow, with Large size and Free movement</summary>
        </member>
        <member name="T:QtWidgets.QListWidgetItem">
            <summary>
            <para>The QListWidgetItem class provides an item for use with the
            QListWidget item view class.</para>
            </summary>
            <remarks>
            <para>A QListWidgetItem represents a single item in a QListWidget. Each
            item can hold several pieces of information, and will display them
            appropriately.</para>
            <para>The item view convenience classes use a classic item-based
            interface rather than a pure model/view approach. For a more flexible list
            view widget, consider using the QListView class with a standard
            model.</para>
            <para>List items can be inserted automatically into a list, when they
            are constructed, by specifying the list widget:</para>
            <para>    new QListWidgetItem(tr(&quot;Hazel&quot;),
            listWidget);</para>
            <para>Alternatively, list items can also be created without a parent
            widget, and later inserted into a list using
            QListWidget::insertItem().</para>
            <para>List items are typically used to display text() and an icon().
            These are set with the setText() and setIcon() functions. The appearance of
            the text can be customized with setFont(), setForeground(), and
            setBackground(). Text in list items can be aligned using the
            setTextAlignment() function. Tooltips, status tips and &quot;What's
            This?&quot; help can be added to list items with setToolTip(),
            setStatusTip(), and setWhatsThis().</para>
            <para>By default, items are enabled, selectable, checkable, and can be
            the source of drag and drop operations.</para>
            <para>Each item's flags can be changed by calling setFlags() with the
            appropriate value (see Qt::ItemFlags). Checkable items can be checked,
            unchecked and partially checked with the setCheckState() function. The
            corresponding checkState() function indicates the item's current check
            state.</para>
            <para>The isHidden() function can be used to determine whether the item
            is hidden. To hide an item, use setHidden().</para>
            <para></para>
            <para>Subclassing</para>
            <para>When subclassing QListWidgetItem to provide custom items, it is
            possible to define new types for them enabling them to be distinguished
            from standard items. For subclasses that require this feature, ensure that
            you call the base class constructor with a new type value equal to or
            greater than UserType, within your constructor.</para>
            <para></para>
            <para>See also QListWidget, Model/View Programming, QTreeWidgetItem,
            and QTableWidgetItem.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QListWidgetItem.#ctor(QtWidgets.QListWidget,System.Int32)">
            <summary>
            <para>Constructs an empty list widget item of the specified type with
            the given parent. If parent is not specified, the item will need to be
            inserted into a list widget with QListWidget::insertItem().</para>
            <para>This constructor inserts the item into the model of the parent
            that is passed to the constructor. If the model is sorted then the behavior
            of the insert is undetermined since the model will call the '&lt;' operator
            method on the item which, at this point, is not yet constructed. To avoid
            the undetermined behavior, we recommend not to specify the parent and use
            QListWidget::insertItem() instead.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidgetItem.#ctor(System.String,QtWidgets.QListWidget,System.Int32)">
            <summary>
            <para>Constructs an empty list widget item of the specified type with
            the given text and parent. If the parent is not specified, the item will
            need to be inserted into a list widget with
            QListWidget::insertItem().</para>
            <para>This constructor inserts the item into the model of the parent
            that is passed to the constructor. If the model is sorted then the behavior
            of the insert is undetermined since the model will call the '&lt;' operator
            method on the item which, at this point, is not yet constructed. To avoid
            the undetermined behavior, we recommend not to specify the parent and use
            QListWidget::insertItem() instead.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidgetItem.#ctor(QtGui.QIcon,System.String,QtWidgets.QListWidget,System.Int32)">
            <summary>
            <para>Constructs an empty list widget item of the specified type with
            the given icon, text and parent. If the parent is not specified, the item
            will need to be inserted into a list widget with
            QListWidget::insertItem().</para>
            <para>This constructor inserts the item into the model of the parent
            that is passed to the constructor. If the model is sorted then the behavior
            of the insert is undetermined since the model will call the '&lt;' operator
            method on the item which, at this point, is not yet constructed. To avoid
            the undetermined behavior, we recommend not to specify the parent and use
            QListWidget::insertItem() instead.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidgetItem.#ctor(QtWidgets.QListWidgetItem)">
            <summary>
            <para>Constructs a copy of other. Note that type() and listWidget() are
            not copied.</para>
            <para>This function is useful when reimplementing clone().</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also data() and flags().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidgetItem.Clone">
            <summary>
            <para>Creates an exact copy of the item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidgetItem.Data(System.Int32)">
            <summary>
            <para>Returns the item's data for a given role. Reimplement this
            function if you need extra roles or special behavior for certain
            roles.</para>
            <para>See also Qt::ItemDataRole and setData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidgetItem.SetData(System.Int32,QtCore.QVariant)">
            <summary>
            <para>Sets the data for a given role to the given value. Reimplement
            this function if you need extra roles or special behavior for certain
            roles.</para>
            <para>See also Qt::ItemDataRole and data().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidgetItem.op_LessThan(QtWidgets.QListWidgetItem,QtWidgets.QListWidgetItem)">
            <summary>
            <para>Returns true if this item's text is less then other item's text;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidgetItem.Read(QtCore.QDataStream)">
            <summary>
            <para>Reads the item from stream in.</para>
            <para>See also write().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidgetItem.Write(QtCore.QDataStream)">
            <summary>
            <para>Writes the item to stream out.</para>
            <para>See also read().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.Selected">
            <summary>
            <para>Returns true if the item is selected; otherwise returns
            false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setSelected().</para>
            <para></para>
            <para>Sets the selected state of the item to select.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also isSelected().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.Hidden">
            <summary>
            <para>Returns true if the item is hidden; otherwise returns
            false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setHidden().</para>
            <para></para>
            <para>Hides the item if hide is true; otherwise shows the item.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also isHidden().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.Flags">
            <summary>
            <para>Returns the item flags for this item (see Qt::ItemFlags).</para>
            <para>See also setFlags().</para>
            <para></para>
            <para>Sets the item flags for the list item to flags.</para>
            <para>See also flags() and Qt::ItemFlags.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.Text">
            <summary>
            <para>Returns the list item's text.</para>
            <para>See also setText().</para>
            <para></para>
            <para>Sets the text for the list widget item's to the given
            text.</para>
            <para>See also text().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.Icon">
            <summary>
            <para>Returns the list item's icon.</para>
            <para>See also setIcon() and iconSize.</para>
            <para></para>
            <para>Sets the icon for the list item to the given icon.</para>
            <para>See also icon(), text(), and iconSize.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.StatusTip">
            <summary>
            <para>Returns the list item's status tip.</para>
            <para>See also setStatusTip().</para>
            <para></para>
            <para>Sets the status tip for the list item to the text specified by
            statusTip. QListWidget mouseTracking needs to be enabled for this feature
            to work.</para>
            <para>See also statusTip(), setToolTip(), setWhatsThis(), and
            QWidget::setMouseTracking().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.ToolTip">
            <summary>
            <para>Returns the list item's tooltip.</para>
            <para>See also setToolTip(), statusTip(), and whatsThis().</para>
            <para></para>
            <para>Sets the tooltip for the list item to the text specified by
            toolTip.</para>
            <para>See also toolTip(), setStatusTip(), and setWhatsThis().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.WhatsThis">
            <summary>
            <para>Returns the list item's &quot;What's This?&quot; help
            text.</para>
            <para>See also setWhatsThis(), statusTip(), and toolTip().</para>
            <para></para>
            <para>Sets the &quot;What's This?&quot; help for the list item to the
            text specified by whatsThis.</para>
            <para>See also whatsThis(), setStatusTip(), and setToolTip().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.Font">
            <summary>
            <para>Returns the font used to display this list item's text.</para>
            <para>See also setFont().</para>
            <para></para>
            <para>Sets the font used when painting the item to the given
            font.</para>
            <para>See also font().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.TextAlignment">
            <summary>
            <para>Returns the text alignment for the list item.</para>
            <para>See also setTextAlignment() and Qt::AlignmentFlag.</para>
            <para></para>
            <para>Sets the list item's text alignment to alignment.</para>
            <para>See also textAlignment() and Qt::AlignmentFlag.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.BackgroundColor">
            <summary>
            <para>This function is deprecated. Use background() instead.</para>
            <para>See also setBackgroundColor().</para>
            <para></para>
            <para>This function is deprecated. Use setBackground() instead.</para>
            <para>See also backgroundColor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.Background">
            <summary>
            <para>Returns the brush used to display the list item's
            background.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setBackground() and foreground().</para>
            <para></para>
            <para>Sets the background brush of the list item to the given
            brush.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also background() and setForeground().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.TextColor">
            <summary>
            <para>Returns the color used to display the list item's text.</para>
            <para>This function is deprecated. Use foreground() instead.</para>
            <para>See also setTextColor().</para>
            <para></para>
            <para>This function is deprecated. Use setForeground() instead.</para>
            <para>See also textColor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.Foreground">
            <summary>
            <para>Returns the brush used to display the list item's foreground
            (e.g. text).</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setForeground() and background().</para>
            <para></para>
            <para>Sets the foreground brush of the list item to the given
            brush.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also foreground() and setBackground().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.CheckState">
            <summary>
            <para>Returns the checked state of the list item (see
            Qt::CheckState).</para>
            <para>See also setCheckState() and flags().</para>
            <para></para>
            <para>Sets the check state of the list item to state.</para>
            <para>See also checkState().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.SizeHint">
            <summary>
            <para>Returns the size hint set for the list item.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setSizeHint().</para>
            <para></para>
            <para>Sets the size hint for the list item to be size. If no size hint
            is set, the item delegate will compute the size hint based on the item
            data.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.ListWidget">
            <summary>
            <para>Returns the list widget containing the item.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidgetItem.Type">
            <summary>
            <para>Returns the type passed to the QListWidgetItem
            constructor.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QListWidgetItem.ItemType">
            <summary>
            <para>This enum describes the types that are used to describe list
            widget items.</para>
            <para>You can define new user types in QListWidgetItem subclasses to
            ensure that custom items are treated specially.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QListWidgetItem.ItemType.Type">
            <summary>The default type for list widget items.</summary>
        </member>
        <member name="F:QtWidgets.QListWidgetItem.ItemType.UserType">
            <summary>The minimum value for custom types. Values below UserType are reserved by Qt.</summary>
        </member>
        <member name="T:QtWidgets.QListWidget">
            <summary>
            <para>The QListWidget class provides an item-based list widget.</para>
            </summary>
            <remarks>
            <para>QListWidget is a convenience class that provides a list view
            similar to the one supplied by QListView, but with a classic item-based
            interface for adding and removing items. QListWidget uses an internal model
            to manage each QListWidgetItem in the list.</para>
            <para>For a more flexible list view widget, use the QListView class
            with a standard model.</para>
            <para>List widgets are constructed in the same way as other
            widgets:</para>
            <para>    QListWidget *listWidget = new QListWidget(this);</para>
            <para>The selectionMode() of a list widget determines how many of the
            items in the list can be selected at the same time, and whether complex
            selections of items can be created. This can be set with the
            setSelectionMode() function.</para>
            <para>There are two ways to add items to the list: they can be
            constructed with the list widget as their parent widget, or they can be
            constructed with no parent widget and added to the list later. If a list
            widget already exists when the items are constructed, the first method is
            easier to use:</para>
            <para>    new QListWidgetItem(tr(&quot;Oak&quot;), listWidget);</para>
            <para>    new QListWidgetItem(tr(&quot;Fir&quot;), listWidget);</para>
            <para>    new QListWidgetItem(tr(&quot;Pine&quot;), listWidget);</para>
            <para>If you need to insert a new item into the list at a particular
            position, then it should be constructed without a parent widget. The
            insertItem() function should then be used to place it within the list. The
            list widget will take ownership of the item.</para>
            <para>    QListWidgetItem *newItem = new QListWidgetItem;</para>
            <para>    newItem-&gt;setText(itemText);</para>
            <para>    listWidget-&gt;insertItem(row, newItem);</para>
            <para>For multiple items, insertItems() can be used instead. The number
            of items in the list is found with the count() function. To remove items
            from the list, use takeItem().</para>
            <para>The current item in the list can be found with currentItem(), and
            changed with setCurrentItem(). The user can also change the current item by
            navigating with the keyboard or clicking on a different item. When the
            current item changes, the currentItemChanged() signal is emitted with the
            new current item and the item that was previously current.</para>
            <para></para>
            <para> 	</para>
            <para>A Windows Vista style list widget.	A Macintosh style list widget.
            A Fusion style list widget.</para>
            <para></para>
            <para></para>
            <para>See also QListWidgetItem, QListView, QTreeView, Model/View
            Programming, and Config Dialog Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QListWidget.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty QListWidget with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.Item(System.Int32)">
            <summary>
            <para>Returns the item that occupies the given row in the list if one
            has been set; otherwise returns 0.</para>
            <para>See also row().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.Row(QtWidgets.QListWidgetItem)">
            <summary>
            <para>Returns the row containing the given item.</para>
            <para>See also item().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.InsertItem(System.Int32,QtWidgets.QListWidgetItem)">
            <summary>
            <para>Inserts the item at the position in the list given by row.</para>
            <para>See also addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.InsertItem(System.Int32,System.String)">
            <summary>
            <para>Inserts an item with the text label in the list widget at the
            position given by row.</para>
            <para>See also addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.InsertItems(System.Int32,QtCore.QStringList)">
            <summary>
            <para>Inserts items from the list of labels into the list, starting at
            the given row.</para>
            <para>See also insertItem() and addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.AddItem(System.String)">
            <summary>
            <para>Inserts an item with the text label at the end of the list
            widget.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.AddItem(QtWidgets.QListWidgetItem)">
            <summary>
            <para>Inserts the item at the end of the list widget.</para>
            <para>Warning: A QListWidgetItem can only be added to a QListWidget
            once. Adding the same QListWidgetItem multiple times to a QListWidget will
            result in undefined behavior.</para>
            <para>See also insertItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.AddItems(QtCore.QStringList)">
            <summary>
            <para>Inserts items with the text labels at the end of the list
            widget.</para>
            <para>See also insertItems().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.TakeItem(System.Int32)">
            <summary>
            <para>Removes and returns the item from the given row in the list
            widget; otherwise returns 0.</para>
            <para>Items removed from a list widget will not be managed by Qt, and
            will need to be deleted manually.</para>
            <para>See also insertItem() and addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.SetCurrentItem(QtWidgets.QListWidgetItem,QtCore.QItemSelectionModel.SelectionFlag)">
            <summary>
            <para>Set the current item to item, using the given command.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.SetCurrentRow(System.Int32,QtCore.QItemSelectionModel.SelectionFlag)">
            <summary>
            <para>This property holds the row of the current item.</para>
            <para>Depending on the current selection mode, the row may also be
            selected.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.ItemAt(QtCore.QPoint)">
            <summary>
            <para>Returns a pointer to the item at the coordinates p. The
            coordinates are relative to the list widget's viewport().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.ItemAt(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a pointer to the item at the coordinates (x, y). The
            coordinates are relative to the list widget's viewport().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.VisualItemRect(QtWidgets.QListWidgetItem)">
            <summary>
            <para>Returns the rectangle on the viewport occupied by the item at
            item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.SortItems(QtCore.Qt.SortOrder)">
            <summary>
            <para>Sorts all the items in the list widget according to the specified
            order.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.EditItem(QtWidgets.QListWidgetItem)">
            <summary>
            <para>Starts editing the item if it is editable.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.OpenPersistentEditor(QtWidgets.QListWidgetItem)">
            <summary>
            <para>Opens an editor for the given item. The editor remains open after
            editing.</para>
            <para>See also closePersistentEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.ClosePersistentEditor(QtWidgets.QListWidgetItem)">
            <summary>
            <para>Closes the persistent editor for the given item.</para>
            <para>See also openPersistentEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.ItemWidget(QtWidgets.QListWidgetItem)">
            <summary>
            <para>Returns the widget displayed in the given item.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setItemWidget() and removeItemWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.SetItemWidget(QtWidgets.QListWidgetItem,QtWidgets.QWidget)">
            <summary>
            <para>Sets the widget to be displayed in the given item.</para>
            <para>This function should only be used to display static content in
            the place of a list widget item. If you want to display custom dynamic
            content or implement a custom editor widget, use QListView and subclass
            QItemDelegate instead.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also itemWidget(), removeItemWidget(), and Delegate
            Classes.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.RemoveItemWidget(QtWidgets.QListWidgetItem)">
            <summary>
            <para>Removes the widget set on the given item.</para>
            <para>To remove an item (row) from the list entirely, either delete the
            item or use takeItem().</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also itemWidget() and setItemWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.IsItemSelected(QtWidgets.QListWidgetItem)">
            <summary>
            <para>Returns true if item is selected; otherwise returns false.</para>
            <para>This function is deprecated. Use QListWidgetItem::isSelected()
            instead.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.SetItemSelected(QtWidgets.QListWidgetItem,System.Boolean)">
            <summary>
            <para>Selects or deselects the given item depending on whether select
            is true of false.</para>
            <para>This function is deprecated. Use QListWidgetItem::setSelected()
            instead.</para>
            <para>See also isItemSelected().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.IsItemHidden(QtWidgets.QListWidgetItem)">
            <summary>
            <para>Returns true if the item is explicitly hidden; otherwise returns
            false.</para>
            <para>This function is deprecated. Use QListWidgetItem::isHidden()
            instead.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.SetItemHidden(QtWidgets.QListWidgetItem,System.Boolean)">
            <summary>
            <para>If hide is true, the item will be hidden; otherwise it will be
            shown.</para>
            <para>This function is deprecated. Use QListWidgetItem::setHidden()
            instead.</para>
            <para>See also isItemHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.OnDropEvent(QtGui.QDropEvent)">
            <summary>
            <para>Reimplemented from QWidget::dropEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.ScrollToItem(QtWidgets.QListWidgetItem,QtWidgets.QAbstractItemView.ScrollHint)">
            <summary>
            <para>Scrolls the view if necessary to ensure that the item is
            visible.</para>
            <para>hint specifies where the item should be located after the
            operation.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.Clear">
            <summary>
            <para>Removes all items and selections in the view.</para>
            <para>Warning: All items will be permanently deleted.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.DropMimeData(System.Int32,QtCore.QMimeData,QtCore.Qt.DropAction)">
            <summary>
            <para>Handles data supplied by an external drag and drop operation that
            ended with the given action in the given index. Returns true if data and
            action can be handled by the model; otherwise returns false.</para>
            <para>See also supportedDropActions().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.IndexFromItem(QtWidgets.QListWidgetItem)">
            <summary>
            <para>Returns the QModelIndex assocated with the given item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QListWidget.ItemFromIndex(QtCore.QModelIndex)">
            <summary>
            <para>Returns a pointer to the QListWidgetItem assocated with the given
            index.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QListWidget.ItemPressed">
            <summary>
            <para>This signal is emitted with the specified item when a mouse button is pressed on an item in the widget.</para>
            <para>See also itemClicked() and itemDoubleClicked().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QListWidget.ItemClicked">
            <summary>
            <para>This signal is emitted with the specified item when a mouse button is clicked on an item in the widget.</para>
            <para>See also itemPressed() and itemDoubleClicked().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QListWidget.ItemDoubleClicked">
            <summary>
            <para>This signal is emitted with the specified item when a mouse button is double clicked on an item in the widget.</para>
            <para>See also itemClicked() and itemPressed().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QListWidget.ItemActivated">
            <summary>
            <para>This signal is emitted when the item is activated. The item is activated when the user clicks or double clicks on it, depending on the system configuration. It is also activated when the user presses the activation key (on Windows and X11 this is the Return key, on Mac OS X it is Ctrl+0).</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QListWidget.ItemEntered">
            <summary>
            <para>This signal is emitted when the mouse cursor enters an item. The item is the item entered. This signal is only emitted when mouseTracking is turned on, or when a mouse button is pressed while moving into an item.</para>
            <para>See also QWidget::setMouseTracking().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QListWidget.ItemChanged">
            <summary>
            <para>This signal is emitted whenever the data of item has changed.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QListWidget.CurrentItemChanged">
            <summary>
            <para>This signal is emitted whenever the current item changes.</para>
            <para>previous is the item that previously had the focus; current is the new current item.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QListWidget.CurrentTextChanged">
            <summary>
            <para>This signal is emitted whenever the current item changes.</para>
            <para>currentText is the text data in the current item. If there is no current item, the currentText is invalid.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QListWidget.CurrentRowChanged">
            <summary>
            <para>This property holds the row of the current item.</para>
            <para>Depending on the current selection mode, the row may also be selected.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	currentRow() const</para>
            <para> void 	setCurrentRow(int row)</para>
            <para> void 	setCurrentRow(int row, QItemSelectionModel::SelectionFlags command)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	currentRowChanged(int currentRow)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QListWidget.ItemSelectionChanged">
            <summary>
            <para>This signal is emitted whenever the selection changes.</para>
            <para>See also selectedItems(), QListWidgetItem::isSelected(), and currentItemChanged().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidget.CurrentItem">
            <summary>
            <para>Returns the current item.</para>
            <para>See also setCurrentItem().</para>
            <para></para>
            <para>Sets the current item to item.</para>
            <para>Unless the selection mode is NoSelection, the item is also
            selected.</para>
            <para>See also currentItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidget.CurrentRow">
            <summary>
            <para>This property holds the row of the current item.</para>
            <para>Depending on the current selection mode, the row may also be
            selected.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidget.SortingEnabled">
            <summary>
            <para>This property holds whether sorting is enabled.</para>
            <para>If this property is true, sorting is enabled for the list; if the
            property is false, sorting is not enabled.</para>
            <para>The default value is false.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidget.Model">
            <summary>
            <para>Returns the model that this view is presenting.</para>
            <para>See also setModel().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidget.Count">
            <summary>
            <para>This property holds the number of items in the list including any
            hidden items.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidget.MimeTypes">
            <summary>
            <para>Returns a list of MIME types that can be used to describe a list
            of listwidget items.</para>
            <para>See also mimeData().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QListWidget.SupportedDropActions">
            <summary>
            <para>Returns the drop actions supported by this view.</para>
            <para>See also Qt::DropActions.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyledItemDelegate">
            <summary>
            <para>The QStyledItemDelegate class provides display and editing
            facilities for data items from a model.</para>
            </summary>
            <remarks>
            <para>When displaying data from models in Qt item views, e.g., a
            QTableView, the individual items are drawn by a delegate. Also, when an
            item is edited, it provides an editor widget, which is placed on top of the
            item view while editing takes place. QStyledItemDelegate is the default
            delegate for all Qt item views, and is installed upon them when they are
            created.</para>
            <para>The QStyledItemDelegate class is one of the Model/View Classes
            and is part of Qt's model/view framework. The delegate allows the display
            and editing of items to be developed independently from the model and
            view.</para>
            <para>The data of items in models are assigned an ItemDataRole; each
            item can store a QVariant for each role. QStyledItemDelegate implements
            display and editing for the most common datatypes expected by users,
            including booleans, integers, and strings.</para>
            <para>The data will be drawn differently depending on which role they
            have in the model. The following table describes the roles and the data
            types the delegate can handle for each of them. It is often sufficient to
            ensure that the model returns appropriate data for each of the roles to
            determine the appearance of items in views.</para>
            <para></para>
            <para> RoleAccepted Types</para>
            <para>Qt::BackgroundRole	QBrush</para>
            <para>Qt::BackgroundColorRole	QColor (obsolete; use Qt::BackgroundRole
            instead)</para>
            <para>Qt::CheckStateRole	Qt::CheckState</para>
            <para>Qt::DecorationRole	QIcon, QPixmap, QImage and QColor</para>
            <para>Qt::DisplayRole	QString and types with a string
            representation</para>
            <para>Qt::EditRole	See QItemEditorFactory for details</para>
            <para>Qt::FontRole	QFont</para>
            <para>Qt::SizeHintRole	QSize</para>
            <para>Qt::TextAlignmentRole	Qt::Alignment</para>
            <para>Qt::ForegroundRole	QBrush</para>
            <para>Qt::TextColorRole	QColor (obsolete; use Qt::ForegroundRole
            instead)</para>
            <para></para>
            <para>Editors are created with a QItemEditorFactory; a default static
            instance provided by QItemEditorFactory is installed on all item delegates.
            You can set a custom factory using setItemEditorFactory() or set a new
            default factory with QItemEditorFactory::setDefaultFactory(). It is the
            data stored in the item model with the EditRole that is edited. See the
            QItemEditorFactory class for a more high-level introduction to item editor
            factories. The Color Editor Factory example shows how to create custom
            editors with a factory.</para>
            <para></para>
            <para>Subclassing QStyledItemDelegate</para>
            <para>If the delegate does not support painting of the data types you
            need or you want to customize the drawing of items, you need to subclass
            QStyledItemDelegate, and reimplement paint() and possibly sizeHint(). The
            paint() function is called individually for each item, and with sizeHint(),
            you can specify the hint for each of them.</para>
            <para>When reimplementing paint(), one would typically handle the
            datatypes one would like to draw and use the superclass implementation for
            other types.</para>
            <para>The painting of check box indicators are performed by the current
            style. The style also specifies the size and the bounding rectangles in
            which to draw the data for the different data roles. The bounding rectangle
            of the item itself is also calculated by the style. When drawing already
            supported datatypes, it is therefore a good idea to ask the style for these
            bounding rectangles. The QStyle class description describes this in more
            detail.</para>
            <para>If you wish to change any of the bounding rectangles calculated
            by the style or the painting of check box indicators, you can subclass
            QStyle. Note, however, that the size of the items can also be affected by
            reimplementing sizeHint().</para>
            <para>It is possible for a custom delegate to provide editors without
            the use of an editor item factory. In this case, the following virtual
            functions must be reimplemented:</para>
            <para></para>
            <para>createEditor() returns the widget used to change data from the
            model and can be reimplemented to customize editing behavior.</para>
            <para>setEditorData() provides the widget with data to
            manipulate.</para>
            <para>updateEditorGeometry() ensures that the editor is displayed
            correctly with respect to the item view.</para>
            <para>setModelData() returns updated data to the model.</para>
            <para></para>
            <para>The Star Delegate example creates editors by reimplementing these
            methods.</para>
            <para></para>
            <para>QStyledItemDelegate vs. QItemDelegate</para>
            <para>Since Qt 4.4, there are two delegate classes: QItemDelegate and
            QStyledItemDelegate. However, the default delegate is QStyledItemDelegate.
            These two classes are independent alternatives to painting and providing
            editors for items in views. The difference between them is that
            QStyledItemDelegate uses the current style to paint its items. We therefore
            recommend using QStyledItemDelegate as the base class when implementing
            custom delegates or when working with Qt style sheets. The code required
            for either class should be equal unless the custom delegate needs to use
            the style for drawing.</para>
            <para>If you wish to customize the painting of item views, you should
            implement a custom style. Please see the QStyle class documentation for
            details.</para>
            <para></para>
            <para>See also Delegate Classes, QItemDelegate, QAbstractItemDelegate,
            QStyle, Spin Box Delegate Example, Star Delegate Example, and Color Editor
            Factory Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyledItemDelegate.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an item delegate with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyledItemDelegate.Paint(QtGui.QPainter,QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemDelegate::paint().</para>
            <para>Renders the delegate using the given painter and style option for
            the item specified by index.</para>
            <para>This function paints the item using the view's QStyle.</para>
            <para>When reimplementing paint in a subclass. Use the
            initStyleOption() to set up the option in the same way as the
            QStyledItemDelegate.</para>
            <para>Whenever possible, use the option while painting. Especially its
            rect variable to decide where to draw and its state to determine if it is
            enabled or selected.</para>
            <para>After painting, you should ensure that the painter is returned to
            its the state it was supplied in when this function was called. For
            example, it may be useful to call QPainter::save() before painting and
            QPainter::restore() afterwards.</para>
            <para>See also QItemDelegate::paint(), QStyle::drawControl(), and
            QStyle::CE_ItemViewItem.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyledItemDelegate.SizeHint(QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemDelegate::sizeHint().</para>
            <para>Returns the size needed by the delegate to display the item
            specified by index, taking into account the style information provided by
            option.</para>
            <para>This function uses the view's QStyle to determine the size of the
            item.</para>
            <para>See also QStyle::sizeFromContents() and
            QStyle::CT_ItemViewItem.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyledItemDelegate.CreateEditor(QtWidgets.QWidget,QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemDelegate::createEditor().</para>
            <para>Returns the widget used to edit the item specified by index for
            editing. The parent widget and style option are used to control how the
            editor widget appears.</para>
            <para>See also QAbstractItemDelegate::createEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyledItemDelegate.SetEditorData(QtWidgets.QWidget,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemDelegate::setEditorData().</para>
            <para>Sets the data to be displayed and edited by the editor from the
            data model item specified by the model index.</para>
            <para>The default implementation stores the data in the editor widget's
            user property.</para>
            <para>See also QMetaProperty::isUser().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyledItemDelegate.SetModelData(QtWidgets.QWidget,QtCore.QAbstractItemModel,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemDelegate::setModelData().</para>
            <para>Gets data from the editor widget and stores it in the specified
            model at the item index.</para>
            <para>The default implementation gets the value to be stored in the
            data model from the editor widget's user property.</para>
            <para>See also QMetaProperty::isUser().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyledItemDelegate.UpdateEditorGeometry(QtWidgets.QWidget,QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from
            QAbstractItemDelegate::updateEditorGeometry().</para>
            <para>Updates the editor for the item specified by index according to
            the style option given.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyledItemDelegate.DisplayText(QtCore.QVariant,QtCore.QLocale)">
            <summary>
            <para>This function returns the string that the delegate will use to
            display the Qt::DisplayRole of the model in locale. value is the value of
            the Qt::DisplayRole provided by the model.</para>
            <para>The default implementation uses the QLocale::toString to convert
            value into a QString.</para>
            <para>This function is not called for empty model indices, i.e.,
            indices for which the model returns an invalid QVariant.</para>
            <para>See also QAbstractItemModel::data().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyledItemDelegate.InitStyleOption(QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>Initialize option with the values using the index index. This
            method is useful for subclasses when they need a QStyleOptionViewItem, but
            don't want to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyledItemDelegate.EventFilter(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::eventFilter().</para>
            <para>Returns true if the given editor is a valid QWidget and the given
            event is handled; otherwise returns false. The following key press events
            are handled by default:</para>
            <para></para>
            <para>Tab</para>
            <para>Backtab</para>
            <para>Enter</para>
            <para>Return</para>
            <para>Esc</para>
            <para></para>
            <para>If the editor's type is QTextEdit or QPlainTextEdit then Enter
            and Return keys are not handled.</para>
            <para>In the case of Tab, Backtab, Enter and Return key press events,
            the editor's data is comitted to the model and the editor is closed. If the
            event is a Tab key press the view will open an editor on the next item in
            the view. Likewise, if the event is a Backtab key press the view will open
            an editor on the previous item in the view.</para>
            <para>If the event is a Esc key press event, the editor is closed
            without committing its data.</para>
            <para>See also commitData() and closeEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStyledItemDelegate.EditorEvent(QtCore.QEvent,QtCore.QAbstractItemModel,QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemDelegate::editorEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyledItemDelegate.ItemEditorFactory">
            <summary>
            <para>Returns the editor factory used by the item delegate. If no
            editor factory is set, the function will return null.</para>
            <para>See also setItemEditorFactory().</para>
            <para></para>
            <para>Sets the editor factory to be used by the item delegate to be the
            factory specified. If no editor factory is set, the item delegate will use
            the default editor factory.</para>
            <para>See also itemEditorFactory().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTableView">
            <summary>
            <para>The QTableView class provides a default model/view implementation
            of a table view.</para>
            </summary>
            <remarks>
            <para>A QTableView implements a table view that displays items from a
            model. This class is used to provide standard tables that were previously
            provided by the QTable class, but using the more flexible approach provided
            by Qt's model/view architecture.</para>
            <para>The QTableView class is one of the Model/View Classes and is part
            of Qt's model/view framework.</para>
            <para>QTableView implements the interfaces defined by the
            QAbstractItemView class to allow it to display data provided by models
            derived from the QAbstractItemModel class.</para>
            <para></para>
            <para>Navigation</para>
            <para>You can navigate the cells in the table by clicking on a cell
            with the mouse, or by using the arrow keys. Because QTableView enables
            tabKeyNavigation by default, you can also hit Tab and Backtab to move from
            cell to cell.</para>
            <para></para>
            <para>Visual Appearance</para>
            <para>The table has a vertical header that can be obtained using the
            verticalHeader() function, and a horizontal header that is available
            through the horizontalHeader() function. The height of each row in the
            table can be found by using rowHeight(); similarly, the width of columns
            can be found using columnWidth(). Since both of these are plain widgets,
            you can hide either of them using their hide() functions.</para>
            <para>Rows and columns can be hidden and shown with hideRow(),
            hideColumn(), showRow(), and showColumn(). They can be selected with
            selectRow() and selectColumn(). The table will show a grid depending on the
            showGrid property.</para>
            <para>The items shown in a table view, like those in the other item
            views, are rendered and edited using standard delegates. However, for some
            tasks it is sometimes useful to be able to insert widgets in a table
            instead. Widgets are set for particular indexes with the setIndexWidget()
            function, and later retrieved with indexWidget().</para>
            <para></para>
            <para> 	By default, the cells in a table do not expand to fill the
            available space.You can make the cells fill the available space by
            stretching the last header section. Access the relevant header using
            horizontalHeader() or verticalHeader() and set the header's
            stretchLastSection property.</para>
            <para>To distribute the available space according to the space
            requirement of each column or row, call the view's
            resizeColumnsToContents() or resizeRowsToContents() functions.</para>
            <para></para>
            <para></para>
            <para></para>
            <para>Coordinate Systems</para>
            <para>For some specialized forms of tables it is useful to be able to
            convert between row and column indexes and widget coordinates. The rowAt()
            function provides the y-coordinate within the view of the specified row;
            the row index can be used to obtain a corresponding y-coordinate with
            rowViewportPosition(). The columnAt() and columnViewportPosition()
            functions provide the equivalent conversion operations between
            x-coordinates and column indexes.</para>
            <para></para>
            <para>Styles</para>
            <para>QTableView is styled appropriately for each platform. The
            following images show how it looks on three different platforms. Go to the
            Qt Widget Gallery to see its appearance in other styles.</para>
            <para></para>
            <para> 	</para>
            <para>A Windows Vista style table view.	A Macintosh style table view.	A
            Fusion style table view.</para>
            <para></para>
            <para></para>
            <para>See also QTableWidget, View Classes, QAbstractItemModel,
            QAbstractItemView, Chart Example, Pixelator Example, and Table Model
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QTableView.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a table view with a parent to represent the
            data.</para>
            <para>See also QAbstractItemModel.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.RowViewportPosition(System.Int32)">
            <summary>
            <para>Returns the y-coordinate in contents coordinates of the given
            row.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.RowAt(System.Int32)">
            <summary>
            <para>Returns the row in which the given y-coordinate, y, in contents
            coordinates is located.</para>
            <para>Note: This function returns -1 if the given coordinate is not
            valid (has no row).</para>
            <para>See also columnAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.SetRowHeight(System.Int32,System.Int32)">
            <summary>
            <para>Sets the height of the given row to be height.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also rowHeight().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.RowHeight(System.Int32)">
            <summary>
            <para>Returns the height of the given row.</para>
            <para>See also setRowHeight(), resizeRowToContents(), and
            columnWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.ColumnViewportPosition(System.Int32)">
            <summary>
            <para>Returns the x-coordinate in contents coordinates of the given
            column.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.ColumnAt(System.Int32)">
            <summary>
            <para>Returns the column in which the given x-coordinate, x, in
            contents coordinates is located.</para>
            <para>Note: This function returns -1 if the given coordinate is not
            valid (has no column).</para>
            <para>See also rowAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.SetColumnWidth(System.Int32,System.Int32)">
            <summary>
            <para>Sets the width of the given column to be width.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also columnWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.ColumnWidth(System.Int32)">
            <summary>
            <para>Returns the width of the given column.</para>
            <para>See also setColumnWidth(), resizeColumnToContents(), and
            rowHeight().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.IsRowHidden(System.Int32)">
            <summary>
            <para>Returns true if the given row is hidden; otherwise returns
            false.</para>
            <para>See also isColumnHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.SetRowHidden(System.Int32,System.Boolean)">
            <summary>
            <para>If hide is true row will be hidden, otherwise it will be
            shown.</para>
            <para>See also isRowHidden() and setColumnHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.IsColumnHidden(System.Int32)">
            <summary>
            <para>Returns true if the given column is hidden; otherwise returns
            false.</para>
            <para>See also isRowHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.SetColumnHidden(System.Int32,System.Boolean)">
            <summary>
            <para>If hide is true the given column will be hidden; otherwise it
            will be shown.</para>
            <para>See also isColumnHidden() and setRowHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.IndexAt(QtCore.QPoint)">
            <summary>
            <para>Reimplemented from QAbstractItemView::indexAt().</para>
            <para>Returns the index position of the model item corresponding to the
            table item at position pos in contents coordinates.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.SetSpan(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the span of the table element at (row, column) to the number
            of rows and columns specified by (rowSpanCount, columnSpanCount).</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also rowSpan() and columnSpan().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.RowSpan(System.Int32,System.Int32)">
            <summary>
            <para>Returns the row span of the table element at (row, column). The
            default is 1.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setSpan() and columnSpan().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.ColumnSpan(System.Int32,System.Int32)">
            <summary>
            <para>Returns the column span of the table element at (row, column).
            The default is 1.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setSpan() and rowSpan().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.ClearSpans">
            <summary>
            <para>Removes all row and column spans in the table view.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setSpan().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.SortByColumn(System.Int32,QtCore.Qt.SortOrder)">
            <summary>
            <para>Sorts the model by the values in the given column in the given
            order.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also sortingEnabled.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.SelectRow(System.Int32)">
            <summary>
            <para>Selects the given row in the table view if the current
            SelectionMode and SelectionBehavior allows rows to be selected.</para>
            <para>See also selectColumn().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.SelectColumn(System.Int32)">
            <summary>
            <para>Selects the given column in the table view if the current
            SelectionMode and SelectionBehavior allows columns to be selected.</para>
            <para>See also selectRow().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.HideRow(System.Int32)">
            <summary>
            <para>Hide the given row.</para>
            <para>See also showRow() and hideColumn().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.HideColumn(System.Int32)">
            <summary>
            <para>Hide the given column.</para>
            <para>See also showColumn() and hideRow().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.ShowRow(System.Int32)">
            <summary>
            <para>Show the given row.</para>
            <para>See also hideRow() and showColumn().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.ShowColumn(System.Int32)">
            <summary>
            <para>Show the given column.</para>
            <para>See also hideColumn() and showRow().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.ResizeRowToContents(System.Int32)">
            <summary>
            <para>Resizes the given row based on the size hints of the delegate
            used to render each item in the row.</para>
            <para>See also resizeRowsToContents(), sizeHintForRow(), and
            QHeaderView::resizeContentsPrecision().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.ResizeRowsToContents">
            <summary>
            <para>Resizes all rows based on the size hints of the delegate used to
            render each item in the rows.</para>
            <para>See also resizeRowToContents(), sizeHintForRow(), and
            QHeaderView::resizeContentsPrecision().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.ResizeColumnToContents(System.Int32)">
            <summary>
            <para>Resizes the given column based on the size hints of the delegate
            used to render each item in the column.</para>
            <para>Note: Only visible columns will be resized. Reimplement
            sizeHintForColumn() to resize hidden columns as well.</para>
            <para>See also resizeColumnsToContents(), sizeHintForColumn(), and
            QHeaderView::resizeContentsPrecision().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.ResizeColumnsToContents">
            <summary>
            <para>Resizes all columns based on the size hints of the delegate used
            to render each item in the columns.</para>
            <para>See also resizeColumnToContents(), sizeHintForColumn(), and
            QHeaderView::resizeContentsPrecision().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.SortByColumn(System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sorts the model by the values in the given column.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.RowMoved(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This slot is called to change the index of the given row in the
            table view. The old index is specified by oldIndex, and the new index by
            newIndex.</para>
            <para>See also columnMoved().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.ColumnMoved(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This slot is called to change the index of the given column in
            the table view. The old index is specified by oldIndex, and the new index
            by newIndex.</para>
            <para>See also rowMoved().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.RowResized(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This slot is called to change the height of the given row. The
            old height is specified by oldHeight, and the new height by
            newHeight.</para>
            <para>See also columnResized().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.ColumnResized(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This slot is called to change the width of the given column. The
            old width is specified by oldWidth, and the new width by newWidth.</para>
            <para>See also rowResized().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.RowCountChanged(System.Int32,System.Int32)">
            <summary>
            <para>This slot is called whenever rows are added or deleted. The
            previous number of rows is specified by oldCount, and the new number of
            rows is specified by newCount.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.ColumnCountChanged(System.Int32,System.Int32)">
            <summary>
            <para>This slot is called whenever columns are added or deleted. The
            previous number of columns is specified by oldCount, and the new number of
            columns is specified by newCount.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            <para>Paints the table on receipt of the given paint event
            event.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.MoveCursor(QtWidgets.QAbstractItemView.CursorAction,QtCore.Qt.KeyboardModifier)">
            <summary>
            <para>Reimplemented from QAbstractItemView::moveCursor().</para>
            <para>Moves the cursor in accordance with the given cursorAction, using
            the information provided by the modifiers.</para>
            <para>See also QAbstractItemView::CursorAction.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.SetSelection(QtCore.QRect,QtCore.QItemSelectionModel.SelectionFlag)">
            <summary>
            <para>Reimplemented from QAbstractItemView::setSelection().</para>
            <para>Selects the items within the given rect and in accordance with
            the specified selection flags.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.UpdateGeometries">
            <summary>
            <para>Reimplemented from QAbstractItemView::updateGeometries().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.SizeHintForRow(System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemView::sizeHintForRow().</para>
            <para>Returns the size hint for the given row's height or -1 if there
            is no model.</para>
            <para>If you need to set the height of a given row to a fixed value,
            call QHeaderView::resizeSection() on the table's vertical header.</para>
            <para>If you reimplement this function in a subclass, note that the
            value you return is only used when resizeRowToContents() is called. In that
            case, if a larger row height is required by either the vertical header or
            the item delegate, that width will be used instead.</para>
            <para>See also QWidget::sizeHint, verticalHeader(), and
            QHeaderView::resizeContentsPrecision().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.SizeHintForColumn(System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemView::sizeHintForColumn().</para>
            <para>Returns the size hint for the given column's width or -1 if there
            is no model.</para>
            <para>If you need to set the width of a given column to a fixed value,
            call QHeaderView::resizeSection() on the table's horizontal header.</para>
            <para>If you reimplement this function in a subclass, note that the
            value you return will be used when resizeColumnToContents() or
            QHeaderView::resizeSections() is called. If a larger column width is
            required by either the horizontal header or the item delegate, the larger
            width will be used instead.</para>
            <para>See also QWidget::sizeHint, horizontalHeader(), and
            QHeaderView::resizeContentsPrecision().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.IsIndexHidden(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemView::isIndexHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.SelectionChanged(QtCore.QItemSelection,QtCore.QItemSelection)">
            <summary>
            <para>Reimplemented from QAbstractItemView::selectionChanged().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableView.CurrentChanged(QtCore.QModelIndex,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemView::currentChanged().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableView.Model">
            <summary>
            <para>Returns the model that this view is presenting.</para>
            <para>See also setModel().</para>
            <para></para>
            <para>Sets the model for the view to present.</para>
            <para>This function will create and set a new selection model,
            replacing any model that was previously set with setSelectionModel().
            However, the old selection model will not be deleted as it may be shared
            between several views. We recommend that you delete the old selection model
            if it is no longer required. This is done with the following code:</para>
            <para>QItemSelectionModel *m = view-&gt;selectionModel();</para>
            <para>view-&gt;setModel(new model);</para>
            <para>delete m;</para>
            <para>If both the old model and the old selection model do not have
            parents, or if their parents are long-lived objects, it may be preferable
            to call their deleteLater() functions to explicitly delete them.</para>
            <para>The view does not take ownership of the model unless it is the
            model's parent object because the model may be shared between many
            different views.</para>
            <para>See also model(), selectionModel(), and
            setSelectionModel().</para>
            <para></para>
            <para>Reimplemented from QAbstractItemView::setModel().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableView.RootIndex">
            <summary>
            <para>Returns the model index of the model's root item. The root item
            is the parent item to the view's toplevel items. The root can be
            invalid.</para>
            <para>See also setRootIndex().</para>
            <para></para>
            <para>Sets the root item to the item at the given index.</para>
            <para>See also rootIndex().</para>
            <para></para>
            <para>Reimplemented from QAbstractItemView::setRootIndex().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableView.SelectionModel">
            <summary>
            <para>Returns the current selection model.</para>
            <para>See also setSelectionModel() and selectedIndexes().</para>
            <para></para>
            <para>Sets the current selection model to the given
            selectionModel.</para>
            <para>Note that, if you call setModel() after this function, the given
            selectionModel will be replaced by one created by the view.</para>
            <para>Note: It is up to the application to delete the old selection
            model if it is no longer needed; i.e., if it is not being used by other
            views. This will happen automatically when its parent object is deleted.
            However, if it does not have a parent, or if the parent is a long-lived
            object, it may be preferable to call its deleteLater() function to
            explicitly delete it.</para>
            <para>See also selectionModel(), setModel(), and
            clearSelection().</para>
            <para></para>
            <para>Reimplemented from QAbstractItemView::setSelectionModel().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableView.HorizontalHeader">
            <summary>
            <para>Returns the table view's horizontal header.</para>
            <para>See also setHorizontalHeader(), verticalHeader(), and
            QAbstractItemModel::headerData().</para>
            <para></para>
            <para>Sets the widget to use for the horizontal header to
            header.</para>
            <para>See also horizontalHeader() and setVerticalHeader().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableView.VerticalHeader">
            <summary>
            <para>Returns the table view's vertical header.</para>
            <para>See also setVerticalHeader(), horizontalHeader(), and
            QAbstractItemModel::headerData().</para>
            <para></para>
            <para>Sets the widget to use for the vertical header to header.</para>
            <para>See also verticalHeader() and setHorizontalHeader().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableView.SortingEnabled">
            <summary>
            <para>This property holds whether sorting is enabled.</para>
            <para>If this property is true, sorting is enabled for the table. If
            this property is false, sorting is not enabled. The default value is
            false.</para>
            <para>Note: . Setting the property to true with setSortingEnabled()
            immediately triggers a call to sortByColumn() with the current sort section
            and order.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also sortByColumn().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableView.GridStyle">
            <summary>
            <para>This property holds the pen style used to draw the grid.</para>
            <para>This property holds the style used when drawing the grid (see
            showGrid).</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableView.WordWrap">
            <summary>
            <para>This property holds the item text word-wrapping policy.</para>
            <para>If this property is true then the item text is wrapped where
            necessary at word-breaks; otherwise it is not wrapped at all. This property
            is true by default.</para>
            <para>Note that even of wrapping is enabled, the cell will not be
            expanded to fit all text. Ellipsis will be inserted according to the
            current textElideMode.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableView.CornerButtonEnabled">
            <summary>
            <para>This property holds whether the button in the top-left corner is
            enabled.</para>
            <para>If this property is true then button in the top-left corner of
            the table view is enabled. Clicking on this button will select all the
            cells in the table view.</para>
            <para>This property is true by default.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableView.ShowGrid">
            <summary>
            <para>This property holds whether the grid is shown.</para>
            <para>If this property is true a grid is drawn for the table; if the
            property is false, no grid is drawn. The default value is true.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableView.ViewOptions">
            <summary>
            <para>Reimplemented from QAbstractItemView::viewOptions().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableView.HorizontalOffset">
            <summary>
            <para>Reimplemented from QAbstractItemView::horizontalOffset().</para>
            <para>Returns the horizontal offset of the items in the table
            view.</para>
            <para>Note that the table view uses the horizontal header section
            positions to determine the positions of columns in the view.</para>
            <para>See also verticalOffset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableView.VerticalOffset">
            <summary>
            <para>Reimplemented from QAbstractItemView::verticalOffset().</para>
            <para>Returns the vertical offset of the items in the table
            view.</para>
            <para>Note that the table view uses the vertical header section
            positions to determine the positions of rows in the view.</para>
            <para>See also horizontalOffset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableView.ViewportSizeHint">
            <summary>
            <para>Reimplemented from
            QAbstractScrollArea::viewportSizeHint().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTableWidgetSelectionRange">
            <summary>
            <para>The QTableWidgetSelectionRange class provides a way to interact
            with selection in a model without using model indexes and a selection
            model.</para>
            </summary>
            <remarks>
            <para>The QTableWidgetSelectionRange class stores the top left and
            bottom right rows and columns of a selection range in a table. The
            selections in the table may consist of several selection ranges.</para>
            <para>Note: If the item within the selection range is marked as not
            selectable, e.g., itemFlags() &amp; Qt::ItemIsSelectable == 0 then it will
            not appear in the selection range.</para>
            <para></para>
            <para>See also QTableWidget.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QTableWidgetSelectionRange.#ctor">
            <summary>
            <para>Constructs an table selection range, i.e. a range whose
            rowCount() and columnCount() are 0.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidgetSelectionRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Constructs the table selection range from the given top, left,
            bottom and right table rows and columns.</para>
            <para>See also topRow(), leftColumn(), bottomRow(), and
            rightColumn().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidgetSelectionRange.#ctor(QtWidgets.QTableWidgetSelectionRange)">
            <summary>
            <para>Constructs a the table selection range by copying the given other
            table selection range.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidgetSelectionRange.RightColumn">
            <summary>
            <para>Returns the right column of the range.</para>
            <para>See also leftColumn(), bottomRow(), and columnCount().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetSelectionRange.TopRow">
            <summary>
            <para>Returns the top row of the range.</para>
            <para>See also bottomRow(), leftColumn(), and rowCount().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetSelectionRange.BottomRow">
            <summary>
            <para>Returns the bottom row of the range.</para>
            <para>See also topRow(), rightColumn(), and rowCount().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetSelectionRange.LeftColumn">
            <summary>
            <para>Returns the left column of the range.</para>
            <para>See also rightColumn(), topRow(), and columnCount().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetSelectionRange.RowCount">
            <summary>
            <para>Returns the number of rows in the range.</para>
            <para>This is equivalent to bottomRow() - topRow() + 1.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also columnCount(), topRow(), and bottomRow().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetSelectionRange.ColumnCount">
            <summary>
            <para>Returns the number of columns in the range.</para>
            <para>This is equivalent to rightColumn() - leftColumn() + 1.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also rowCount(), leftColumn(), and rightColumn().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTableWidgetItem">
            <summary>
            <para>The QTableWidgetItem class provides an item for use with the
            QTableWidget class.</para>
            </summary>
            <remarks>
            <para>Table items are used to hold pieces of information for table
            widgets. Items usually contain text, icons, or checkboxes</para>
            <para>The QTableWidgetItem class is a convenience class that replaces
            the QTableItem class in Qt 3. It provides an item for use with the
            QTableWidget class.</para>
            <para>Top-level items are constructed without a parent then inserted at
            the position specified by a pair of row and column numbers:</para>
            <para>    QTableWidgetItem *newItem = new
            QTableWidgetItem(tr(&quot;%1&quot;).arg(</para>
            <para>        pow(row, column+1)));</para>
            <para>    tableWidget-&gt;setItem(row, column, newItem);</para>
            <para>Each item can have its own background brush which is set with the
            setBackground() function. The current background brush can be found with
            background(). The text label for each item can be rendered with its own
            font and brush. These are specified with the setFont() and setForeground()
            functions, and read with font() and foreground().</para>
            <para>By default, items are enabled, editable, selectable, checkable,
            and can be used both as the source of a drag and drop operation and as a
            drop target. Each item's flags can be changed by calling setFlags() with
            the appropriate value (see Qt::ItemFlags). Checkable items can be checked
            and unchecked with the setCheckState() function. The corresponding
            checkState() function indicates whether the item is currently
            checked.</para>
            <para></para>
            <para>Subclassing</para>
            <para>When subclassing QTableWidgetItem to provide custom items, it is
            possible to define new types for them so that they can be distinguished
            from standard items. The constructors for subclasses that require this
            feature need to call the base class constructor with a new type value equal
            to or greater than UserType.</para>
            <para></para>
            <para>See also QTableWidget, Model/View Programming, QListWidgetItem,
            and QTreeWidgetItem.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QTableWidgetItem.#ctor(System.Int32)">
            <summary>
            <para>Constructs a table item of the specified type that does not
            belong to any table.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidgetItem.#ctor(System.String,System.Int32)">
            <summary>
            <para>Constructs a table item with the given text.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidgetItem.#ctor(QtGui.QIcon,System.String,System.Int32)">
            <summary>
            <para>Constructs a table item with the given icon and text.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidgetItem.#ctor(QtWidgets.QTableWidgetItem)">
            <summary>
            <para>Constructs a copy of other. Note that type() and tableWidget()
            are not copied.</para>
            <para>This function is useful when reimplementing clone().</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also data() and flags().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidgetItem.Clone">
            <summary>
            <para>Creates a copy of the item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidgetItem.Data(System.Int32)">
            <summary>
            <para>Returns the item's data for the given role.</para>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidgetItem.SetData(System.Int32,QtCore.QVariant)">
            <summary>
            <para>Sets the item's data for the given role to the specified
            value.</para>
            <para>See also Qt::ItemDataRole and data().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidgetItem.op_LessThan(QtWidgets.QTableWidgetItem,QtWidgets.QTableWidgetItem)">
            <summary>
            <para>Returns true if the item is less than the other item; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidgetItem.Read(QtCore.QDataStream)">
            <summary>
            <para>Reads the item from stream in.</para>
            <para>See also write().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidgetItem.Write(QtCore.QDataStream)">
            <summary>
            <para>Writes the item to stream out.</para>
            <para>See also read().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.Selected">
            <summary>
            <para>Returns true if the item is selected, otherwise returns
            false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setSelected().</para>
            <para></para>
            <para>Sets the selected state of the item to select.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also isSelected().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.Flags">
            <summary>
            <para>Returns the flags used to describe the item. These determine
            whether the item can be checked, edited, and selected.</para>
            <para>See also setFlags().</para>
            <para></para>
            <para>Sets the flags for the item to the given flags. These determine
            whether the item can be selected or modified.</para>
            <para>See also flags().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.Text">
            <summary>
            <para>Returns the item's text.</para>
            <para>See also setText().</para>
            <para></para>
            <para>Sets the item's text to the text specified.</para>
            <para>See also text(), setFont(), and setForeground().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.Icon">
            <summary>
            <para>Returns the item's icon.</para>
            <para>See also setIcon() and iconSize.</para>
            <para></para>
            <para>Sets the item's icon to the icon specified.</para>
            <para>See also icon(), setText(), and iconSize.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.StatusTip">
            <summary>
            <para>Returns the item's status tip.</para>
            <para>See also setStatusTip().</para>
            <para></para>
            <para>Sets the status tip for the table item to the text specified by
            statusTip. QTableWidget mouse tracking needs to be enabled for this feature
            to work.</para>
            <para>See also statusTip(), setToolTip(), and setWhatsThis().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.ToolTip">
            <summary>
            <para>Returns the item's tooltip.</para>
            <para>See also setToolTip().</para>
            <para></para>
            <para>Sets the item's tooltip to the string specified by
            toolTip.</para>
            <para>See also toolTip(), setStatusTip(), and setWhatsThis().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.WhatsThis">
            <summary>
            <para>Returns the item's &quot;What's This?&quot; help.</para>
            <para>See also setWhatsThis().</para>
            <para></para>
            <para>Sets the item's &quot;What's This?&quot; help to the string
            specified by whatsThis.</para>
            <para>See also whatsThis(), setStatusTip(), and setToolTip().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.Font">
            <summary>
            <para>Returns the font used to render the item's text.</para>
            <para>See also setFont().</para>
            <para></para>
            <para>Sets the font used to display the item's text to the given
            font.</para>
            <para>See also font(), setText(), and setForeground().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.TextAlignment">
            <summary>
            <para>Returns the text alignment for the item's text.</para>
            <para>See also setTextAlignment() and Qt::Alignment.</para>
            <para></para>
            <para>Sets the text alignment for the item's text to the alignment
            specified.</para>
            <para>See also textAlignment() and Qt::Alignment.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.BackgroundColor">
            <summary>
            <para>This function is deprecated. Use background() instead.</para>
            <para>See also setBackgroundColor().</para>
            <para></para>
            <para>This function is deprecated. Use setBackground() instead.</para>
            <para>See also backgroundColor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.Background">
            <summary>
            <para>Returns the brush used to render the item's background.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setBackground() and foreground().</para>
            <para></para>
            <para>Sets the item's background brush to the specified brush.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also background() and setForeground().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.TextColor">
            <summary>
            <para>This function is deprecated. Use foreground() instead.</para>
            <para>See also setTextColor().</para>
            <para></para>
            <para>This function is deprecated. Use setForeground() instead.</para>
            <para>See also textColor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.Foreground">
            <summary>
            <para>Returns the brush used to render the item's foreground (e.g.
            text).</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setForeground() and background().</para>
            <para></para>
            <para>Sets the item's foreground brush to the specified brush.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also foreground() and setBackground().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.CheckState">
            <summary>
            <para>Returns the checked state of the table item.</para>
            <para>See also setCheckState() and flags().</para>
            <para></para>
            <para>Sets the check state of the table item to be state.</para>
            <para>See also checkState().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.SizeHint">
            <summary>
            <para>Returns the size hint set for the table item.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setSizeHint().</para>
            <para></para>
            <para>Sets the size hint for the table item to be size. If no size hint
            is set, the item delegate will compute the size hint based on the item
            data.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.TableWidget">
            <summary>
            <para>Returns the table widget that contains the item.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.Row">
            <summary>
            <para>Returns the row of the item in the table. If the item is not in a
            table, this function will return -1.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also column().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.Column">
            <summary>
            <para>Returns the column of the item in the table. If the item is not
            in a table, this function will return -1.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also row().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidgetItem.Type">
            <summary>
            <para>Returns the type passed to the QTableWidgetItem
            constructor.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTableWidgetItem.ItemType">
            <summary>
            <para>This enum describes the types that are used to describe table
            widget items.</para>
            <para>You can define new user types in QTableWidgetItem subclasses to
            ensure that custom items are treated specially.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QTableWidgetItem.ItemType.Type">
            <summary>The default type for table widget items.</summary>
        </member>
        <member name="F:QtWidgets.QTableWidgetItem.ItemType.UserType">
            <summary>The minimum value for custom types. Values below UserType are reserved by Qt.</summary>
        </member>
        <member name="T:QtWidgets.QTableWidget">
            <summary>
            <para>The QTableWidget class provides an item-based table view with a
            default model.</para>
            </summary>
            <remarks>
            <para>Table widgets provide standard table display facilities for
            applications. The items in a QTableWidget are provided by
            QTableWidgetItem.</para>
            <para>If you want a table that uses your own data model you should use
            QTableView rather than this class.</para>
            <para>Table widgets can be constructed with the required numbers of
            rows and columns:</para>
            <para>    tableWidget = new QTableWidget(12, 3, this);</para>
            <para>Alternatively, tables can be constructed without a given size and
            resized later:</para>
            <para>    tableWidget = new QTableWidget(this);</para>
            <para>    tableWidget-&gt;setRowCount(10);</para>
            <para>    tableWidget-&gt;setColumnCount(5);</para>
            <para>Items are created ouside the table (with no parent widget) and
            inserted into the table with setItem():</para>
            <para>    QTableWidgetItem *newItem = new
            QTableWidgetItem(tr(&quot;%1&quot;).arg(</para>
            <para>        (row+1)*(column+1)));</para>
            <para>    tableWidget-&gt;setItem(row, column, newItem);</para>
            <para>If you want to enable sorting in your table widget, do so after
            you have populated it with items, otherwise sorting may interfere with the
            insertion order (see setItem() for details).</para>
            <para>Tables can be given both horizontal and vertical headers. The
            simplest way to create the headers is to supply a list of strings to the
            setHorizontalHeaderLabels() and setVerticalHeaderLabels() functions. These
            will provide simple textual headers for the table's columns and rows. More
            sophisticated headers can be created from existing table items that are
            usually constructed outside the table. For example, we can construct a
            table item with an icon and aligned text, and use it as the header for a
            particular column:</para>
            <para>    QTableWidgetItem *cubesHeaderItem = new
            QTableWidgetItem(tr(&quot;Cubes&quot;));</para>
            <para>
            cubesHeaderItem-&gt;setIcon(QIcon(QPixmap(&quot;:/Images/cubed.png&quot;)))
            ;</para>
            <para>
            cubesHeaderItem-&gt;setTextAlignment(Qt::AlignVCenter);</para>
            <para>The number of rows in the table can be found with rowCount(), and
            the number of columns with columnCount(). The table can be cleared with the
            clear() function.</para>
            <para></para>
            <para> 	</para>
            <para>A Windows Vista style table widget.	A Macintosh style table
            widget.	A Fusion style table widget.</para>
            <para></para>
            <para></para>
            <para>See also QTableWidgetItem, QTableView, and Model/View
            Programming.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QTableWidget.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Creates a new table view with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.#ctor(System.Int32,System.Int32,QtWidgets.QWidget)">
            <summary>
            <para>Creates a new table view with the given rows and columns, and
            with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.Row(QtWidgets.QTableWidgetItem)">
            <summary>
            <para>Returns the row for the item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.Column(QtWidgets.QTableWidgetItem)">
            <summary>
            <para>Returns the column for the item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.Item(System.Int32,System.Int32)">
            <summary>
            <para>Returns the item for the given row and column if one has been
            set; otherwise returns 0.</para>
            <para>See also setItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.SetItem(System.Int32,System.Int32,QtWidgets.QTableWidgetItem)">
            <summary>
            <para>Sets the item for the given row and column to item.</para>
            <para>The table takes ownership of the item.</para>
            <para>Note that if sorting is enabled (see sortingEnabled) and column
            is the current sort column, the row will be moved to the sorted position
            determined by item.</para>
            <para>If you want to set several items of a particular row (say, by
            calling setItem() in a loop), you may want to turn off sorting before doing
            so, and turn it back on afterwards; this will allow you to use the same row
            argument for all items in the same row (i.e. setItem() will not move the
            row).</para>
            <para>See also item() and takeItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.TakeItem(System.Int32,System.Int32)">
            <summary>
            <para>Removes the item at row and column from the table without
            deleting it.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.VerticalHeaderItem(System.Int32)">
            <summary>
            <para>Returns the vertical header item for row row.</para>
            <para>See also setVerticalHeaderItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.SetVerticalHeaderItem(System.Int32,QtWidgets.QTableWidgetItem)">
            <summary>
            <para>Sets the vertical header item for row row to item.</para>
            <para>See also verticalHeaderItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.TakeVerticalHeaderItem(System.Int32)">
            <summary>
            <para>Removes the vertical header item at row from the header without
            deleting it.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.HorizontalHeaderItem(System.Int32)">
            <summary>
            <para>Returns the horizontal header item for column, column, if one has
            been set; otherwise returns 0.</para>
            <para>See also setHorizontalHeaderItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.SetHorizontalHeaderItem(System.Int32,QtWidgets.QTableWidgetItem)">
            <summary>
            <para>Sets the horizontal header item for column column to item.</para>
            <para>See also horizontalHeaderItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.TakeHorizontalHeaderItem(System.Int32)">
            <summary>
            <para>Removes the horizontal header item at column from the header
            without deleting it.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.SetVerticalHeaderLabels(QtCore.QStringList)">
            <summary>
            <para>Sets the vertical header labels using labels.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.SetHorizontalHeaderLabels(QtCore.QStringList)">
            <summary>
            <para>Sets the horizontal header labels using labels.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.SetCurrentItem(QtWidgets.QTableWidgetItem,QtCore.QItemSelectionModel.SelectionFlag)">
            <summary>
            <para>Sets the current item to be item, using the given command.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also currentItem() and setCurrentCell().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.SetCurrentCell(System.Int32,System.Int32)">
            <summary>
            <para>Sets the current cell to be the cell at position (row,
            column).</para>
            <para>Depending on the current selection mode, the cell may also be
            selected.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setCurrentItem(), currentRow(), and
            currentColumn().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.SetCurrentCell(System.Int32,System.Int32,QtCore.QItemSelectionModel.SelectionFlag)">
            <summary>
            <para>Sets the current cell to be the cell at position (row, column),
            using the given command.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setCurrentItem(), currentRow(), and
            currentColumn().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.SortItems(System.Int32,QtCore.Qt.SortOrder)">
            <summary>
            <para>Sorts all the rows in the table widget based on column and
            order.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.EditItem(QtWidgets.QTableWidgetItem)">
            <summary>
            <para>Starts editing the item if it is editable.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.OpenPersistentEditor(QtWidgets.QTableWidgetItem)">
            <summary>
            <para>Opens an editor for the give item. The editor remains open after
            editing.</para>
            <para>See also closePersistentEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.ClosePersistentEditor(QtWidgets.QTableWidgetItem)">
            <summary>
            <para>Closes the persistent editor for item.</para>
            <para>See also openPersistentEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.CellWidget(System.Int32,System.Int32)">
            <summary>
            <para>Returns the widget displayed in the cell in the given row and
            column.</para>
            <para>Note: The table takes ownership of the widget.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setCellWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.SetCellWidget(System.Int32,System.Int32,QtWidgets.QWidget)">
            <summary>
            <para>Sets the given widget to be displayed in the cell in the given
            row and column, passing the ownership of the widget to the table.</para>
            <para>If cell widget A is replaced with cell widget B, cell widget A
            will be deleted. For example, in the code snippet below, the QLineEdit
            object will be deleted.</para>
            <para>setCellWidget(index, new QLineEdit);</para>
            <para>...</para>
            <para>setCellWidget(index, new QTextEdit);</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also cellWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.RemoveCellWidget(System.Int32,System.Int32)">
            <summary>
            <para>Removes the widget set on the cell indicated by row and
            column.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.IsItemSelected(QtWidgets.QTableWidgetItem)">
            <summary>
            <para>Returns true if the item is selected, otherwise returns
            false.</para>
            <para>This function is deprecated. Use QTableWidgetItem::isSelected()
            instead.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.SetItemSelected(QtWidgets.QTableWidgetItem,System.Boolean)">
            <summary>
            <para>Selects or deselects item depending on select.</para>
            <para>This function is deprecated. Use QTableWidgetItem::setSelected()
            instead.</para>
            <para>See also isItemSelected().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.SetRangeSelected(QtWidgets.QTableWidgetSelectionRange,System.Boolean)">
            <summary>
            <para>Selects or deselects the range depending on select.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.VisualRow(System.Int32)">
            <summary>
            <para>Returns the visual row of the given logicalRow.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.VisualColumn(System.Int32)">
            <summary>
            <para>Returns the visual column of the given logicalColumn.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.ItemAt(QtCore.QPoint)">
            <summary>
            <para>Returns a pointer to the item at the given point, or returns 0 if
            point is not covered by an item in the table widget.</para>
            <para>See also item().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.ItemAt(System.Int32,System.Int32)">
            <summary>
            <para>Returns the item at the position equivalent to QPoint(ax, ay) in
            the table widget's coordinate system, or returns 0 if the specified point
            is not covered by an item in the table widget.</para>
            <para>See also item().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.VisualItemRect(QtWidgets.QTableWidgetItem)">
            <summary>
            <para>Returns the rectangle on the viewport occupied by the item at
            item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.ScrollToItem(QtWidgets.QTableWidgetItem,QtWidgets.QAbstractItemView.ScrollHint)">
            <summary>
            <para>Scrolls the view if necessary to ensure that the item is visible.
            The hint parameter specifies more precisely where the item should be
            located after the operation.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.InsertRow(System.Int32)">
            <summary>
            <para>Inserts an empty row into the table at row.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.InsertColumn(System.Int32)">
            <summary>
            <para>Inserts an empty column into the table at column.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.RemoveRow(System.Int32)">
            <summary>
            <para>Removes the row row and all its items from the table.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.RemoveColumn(System.Int32)">
            <summary>
            <para>Removes the column column and all its items from the
            table.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.Clear">
            <summary>
            <para>Removes all items in the view. This will also remove all
            selections and headers. If you don't want to remove the headers, use
            QTableWidget::clearContents(). The table dimensions stay the same.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.ClearContents">
            <summary>
            <para>Removes all items not in the headers from the view. This will
            also remove all selections. The table dimensions stay the same.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.DropMimeData(System.Int32,System.Int32,QtCore.QMimeData,QtCore.Qt.DropAction)">
            <summary>
            <para>Handles the data supplied by a drag and drop operation that ended
            with the given action in the given row and column. Returns true if the data
            and action can be handled by the model; otherwise returns false.</para>
            <para>See also supportedDropActions().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.IndexFromItem(QtWidgets.QTableWidgetItem)">
            <summary>
            <para>Returns the QModelIndex assocated with the given item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.ItemFromIndex(QtCore.QModelIndex)">
            <summary>
            <para>Returns a pointer to the QTableWidgetItem assocated with the
            given index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTableWidget.OnDropEvent(QtGui.QDropEvent)">
            <summary>
            <para>Reimplemented from QWidget::dropEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTableWidget.ItemPressed">
            <summary>
            <para>This signal is emitted whenever an item in the table is pressed. The item specified is the item that was pressed.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTableWidget.ItemClicked">
            <summary>
            <para>This signal is emitted whenever an item in the table is clicked. The item specified is the item that was clicked.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTableWidget.ItemDoubleClicked">
            <summary>
            <para>This signal is emitted whenever an item in the table is double clicked. The item specified is the item that was double clicked.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTableWidget.ItemActivated">
            <summary>
            <para>This signal is emitted when the specified item has been activated</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTableWidget.ItemEntered">
            <summary>
            <para>This signal is emitted when the mouse cursor enters an item. The item is the item entered.</para>
            <para>This signal is only emitted when mouseTracking is turned on, or when a mouse button is pressed while moving into an item.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTableWidget.ItemChanged">
            <summary>
            <para>This signal is emitted whenever the data of item has changed.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTableWidget.CurrentItemChanged">
            <summary>
            <para>This signal is emitted whenever the current item changes. The previous item is the item that previously had the focus, current is the new current item.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTableWidget.ItemSelectionChanged">
            <summary>
            <para>This signal is emitted whenever the selection changes.</para>
            <para>See also selectedItems() and QTableWidgetItem::isSelected().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTableWidget.CellPressed">
            <summary>
            <para>This signal is emitted whenever a cell in the table is pressed. The row and column specified is the cell that was pressed.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTableWidget.CellClicked">
            <summary>
            <para>This signal is emitted whenever a cell in the table is clicked. The row and column specified is the cell that was clicked.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTableWidget.CellDoubleClicked">
            <summary>
            <para>This signal is emitted whenever a cell in the table is double clicked. The row and column specified is the cell that was double clicked.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTableWidget.CellActivated">
            <summary>
            <para>This signal is emitted when the cell specified by row and column has been activated</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTableWidget.CellEntered">
            <summary>
            <para>This signal is emitted when the mouse cursor enters a cell. The cell is specified by row and column.</para>
            <para>This signal is only emitted when mouseTracking is turned on, or when a mouse button is pressed while moving into an item.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTableWidget.CellChanged">
            <summary>
            <para>This signal is emitted whenever the data of the item in the cell specified by row and column has changed.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTableWidget.CurrentCellChanged">
            <summary>
            <para>This signal is emitted whenever the current cell changes. The cell specified by previousRow and previousColumn is the cell that previously had the focus, the cell specified by currentRow and currentColumn is the new current cell.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidget.RowCount">
            <summary>
            <para>This property holds the number of rows in the table.</para>
            <para>By default, for a table constructed without row and column
            counts, this property contains a value of 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidget.ColumnCount">
            <summary>
            <para>This property holds the number of columns in the table.</para>
            <para>By default, for a table constructed without row and column
            counts, this property contains a value of 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidget.CurrentItem">
            <summary>
            <para>Returns the current item.</para>
            <para>See also setCurrentItem().</para>
            <para></para>
            <para>Sets the current item to item.</para>
            <para>Unless the selection mode is NoSelection, the item is also
            selected.</para>
            <para>See also currentItem() and setCurrentCell().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidget.ItemPrototype">
            <summary>
            <para>Returns the item prototype used by the table.</para>
            <para>See also setItemPrototype().</para>
            <para></para>
            <para>Sets the item prototype for the table to the specified
            item.</para>
            <para>The table widget will use the item prototype clone function when
            it needs to create a new table item. For example when the user is editing
            in an empty cell. This is useful when you have a QTableWidgetItem subclass
            and want to make sure that QTableWidget creates instances of your
            subclass.</para>
            <para>The table takes ownership of the prototype.</para>
            <para>See also itemPrototype().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidget.Model">
            <summary>
            <para>Returns the model that this view is presenting.</para>
            <para>See also setModel().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidget.CurrentRow">
            <summary>
            <para>Returns the row of the current item.</para>
            <para>See also currentColumn() and setCurrentCell().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidget.CurrentColumn">
            <summary>
            <para>Returns the column of the current item.</para>
            <para>See also currentRow() and setCurrentCell().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidget.MimeTypes">
            <summary>
            <para>Returns a list of MIME types that can be used to describe a list
            of tablewidget items.</para>
            <para>See also mimeData().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTableWidget.SupportedDropActions">
            <summary>
            <para>Returns the drop actions supported by this view.</para>
            <para>See also Qt::DropActions.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTreeView">
            <summary>
            <para>The QTreeView class provides a default model/view implementation
            of a tree view.</para>
            </summary>
            <remarks>
            <para>A QTreeView implements a tree representation of items from a
            model. This class is used to provide standard hierarchical lists that were
            previously provided by the QListView class, but using the more flexible
            approach provided by Qt's model/view architecture.</para>
            <para>The QTreeView class is one of the Model/View Classes and is part
            of Qt's model/view framework.</para>
            <para>QTreeView implements the interfaces defined by the
            QAbstractItemView class to allow it to display data provided by models
            derived from the QAbstractItemModel class.</para>
            <para>It is simple to construct a tree view displaying data from a
            model. In the following example, the contents of a directory are supplied
            by a QFileSystemModel and displayed as a tree:</para>
            <para>    QFileSystemModel *model = new QFileSystemModel;</para>
            <para>    model-&gt;setRootPath(QDir::currentPath());</para>
            <para>    QTreeView *tree = new QTreeView(splitter);</para>
            <para>    tree-&gt;setModel(model);</para>
            <para>The model/view architecture ensures that the contents of the tree
            view are updated as the model changes.</para>
            <para>Items that have children can be in an expanded (children are
            visible) or collapsed (children are hidden) state. When this state changes
            a collapsed() or expanded() signal is emitted with the model index of the
            relevant item.</para>
            <para>The amount of indentation used to indicate levels of hierarchy is
            controlled by the indentation property.</para>
            <para>Headers in tree views are constructed using the QHeaderView class
            and can be hidden using header()-&gt;hide(). Note that each header is
            configured with its stretchLastSection property set to true, ensuring that
            the view does not waste any of the space assigned to it for its header. If
            this value is set to true, this property will override the resize mode set
            on the last section in the header.</para>
            <para>By default, all columns in a tree view are movable except the
            first. To disable movement of these columns, use QHeaderView's
            setSectionsMovable() function. For more information about rearranging
            sections, see Moving Header Sections.</para>
            <para></para>
            <para>Key Bindings</para>
            <para>QTreeView supports a set of key bindings that enable the user to
            navigate in the view and interact with the contents of items:</para>
            <para></para>
            <para> KeyAction</para>
            <para>Up	Moves the cursor to the item in the same column on the
            previous row. If the parent of the current item has no more rows to
            navigate to, the cursor moves to the relevant item in the last row of the
            sibling that precedes the parent.</para>
            <para>Down	Moves the cursor to the item in the same column on the next
            row. If the parent of the current item has no more rows to navigate to, the
            cursor moves to the relevant item in the first row of the sibling that
            follows the parent.</para>
            <para>Left	Hides the children of the current item (if present) by
            collapsing a branch.</para>
            <para>Minus	Same as LeftArrow.</para>
            <para>Right	Reveals the children of the current item (if present) by
            expanding a branch.</para>
            <para>Plus	Same as RightArrow.</para>
            <para>Asterisk	Expands all children of the current item (if
            present).</para>
            <para>PageUp	Moves the cursor up one page.</para>
            <para>PageDown	Moves the cursor down one page.</para>
            <para>Home	Moves the cursor to an item in the same column of the first
            row of the first top-level item in the model.</para>
            <para>End	Moves the cursor to an item in the same column of the last
            row of the last top-level item in the model.</para>
            <para>F2	In editable models, this opens the current item for editing.
            The Escape key can be used to cancel the editing process and revert any
            changes to the data displayed.</para>
            <para></para>
            <para></para>
            <para> 	</para>
            <para>A Windows Vista style tree view.	A Macintosh style tree view.	A
            Fusion style tree view.</para>
            <para></para>
            <para></para>
            <para>Improving Performance</para>
            <para>It is possible to give the view hints about the data it is
            handling in order to improve its performance when displaying large numbers
            of items. One approach that can be taken for views that are intended to
            display items with equal heights is to set the uniformRowHeights property
            to true.</para>
            <para></para>
            <para>See also QListView, QTreeWidget, View Classes,
            QAbstractItemModel, QAbstractItemView, and Dir View Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QTreeView.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a tree view with a parent to represent a model's data.
            Use setModel() to set the model.</para>
            <para>See also QAbstractItemModel.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.ResetIndentation">
            <summary>
            <para>This property holds indentation of the items in the tree
            view.</para>
            <para>This property holds the indentation measured in pixels of the
            items for each level in the tree view. For top-level items, the indentation
            specifies the horizontal distance from the viewport edge to the items in
            the first column; for child items, it specifies their indentation from
            their parent items.</para>
            <para>By default, the value of this property is style dependent. Thus,
            when the style changes, this property updates from it. Calling
            setIndentation() stops the updates, calling resetIndentation() will restore
            default behavior.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.ColumnViewportPosition(System.Int32)">
            <summary>
            <para>Returns the horizontal position of the column in the
            viewport.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.ColumnWidth(System.Int32)">
            <summary>
            <para>Returns the width of the column.</para>
            <para>See also resizeColumnToContents() and setColumnWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.SetColumnWidth(System.Int32,System.Int32)">
            <summary>
            <para>Sets the width of the given column to the width specified.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also columnWidth() and resizeColumnToContents().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.ColumnAt(System.Int32)">
            <summary>
            <para>Returns the column in the tree view whose header covers the x
            coordinate given.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.IsColumnHidden(System.Int32)">
            <summary>
            <para>Returns true if the column is hidden; otherwise returns
            false.</para>
            <para>See also hideColumn() and isRowHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.SetColumnHidden(System.Int32,System.Boolean)">
            <summary>
            <para>If hide is true the column is hidden, otherwise the column is
            shown.</para>
            <para>See also isColumnHidden(), hideColumn(), and
            setRowHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.IsRowHidden(System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Returns true if the item in the given row of the parent is
            hidden; otherwise returns false.</para>
            <para>See also setRowHidden() and isColumnHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.SetRowHidden(System.Int32,QtCore.QModelIndex,System.Boolean)">
            <summary>
            <para>If hide is true the row with the given parent is hidden,
            otherwise the row is shown.</para>
            <para>See also isRowHidden() and setColumnHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.IsFirstColumnSpanned(System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Returns true if the item in first column in the given row of the
            parent is spanning all the columns; otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setFirstColumnSpanned().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.SetFirstColumnSpanned(System.Int32,QtCore.QModelIndex,System.Boolean)">
            <summary>
            <para>If span is true the item in the first column in the row with the
            given parent is set to span all columns, otherwise all items on the row are
            shown.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also isFirstColumnSpanned().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.IsExpanded(QtCore.QModelIndex)">
            <summary>
            <para>Returns true if the model item index is expanded; otherwise
            returns false.</para>
            <para>See also expand(), expanded(), and setExpanded().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.SetExpanded(QtCore.QModelIndex,System.Boolean)">
            <summary>
            <para>Sets the item referred to by index to either collapse or
            expanded, depending on the value of expanded.</para>
            <para>See also expanded(), expand(), and isExpanded().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.KeyboardSearch(System.String)">
            <summary>
            <para>Reimplemented from QAbstractItemView::keyboardSearch().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.VisualRect(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemView::visualRect().</para>
            <para>Returns the rectangle on the viewport occupied by the item at
            index. If the index is not visible or explicitly hidden, the returned
            rectangle is invalid.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.ScrollTo(QtCore.QModelIndex,QtWidgets.QAbstractItemView.ScrollHint)">
            <summary>
            <para>Reimplemented from QAbstractItemView::scrollTo().</para>
            <para>Scroll the contents of the tree view until the given model item
            index is visible. The hint parameter specifies more precisely where the
            item should be located after the operation. If any of the parents of the
            model item are collapsed, they will be expanded to ensure that the model
            item is visible.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.IndexAt(QtCore.QPoint)">
            <summary>
            <para>Reimplemented from QAbstractItemView::indexAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.IndexAbove(QtCore.QModelIndex)">
            <summary>
            <para>Returns the model index of the item above index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.IndexBelow(QtCore.QModelIndex)">
            <summary>
            <para>Returns the model index of the item below index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.Reset">
            <summary>
            <para>Reimplemented from QAbstractItemView::reset().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.SortByColumn(System.Int32,QtCore.Qt.SortOrder)">
            <summary>
            <para>Sets the model up for sorting by the values in the given column
            and order.</para>
            <para>column may be -1, in which case no sort indicator will be shown
            and the model will return to its natural, unsorted order. Note that not all
            models support this and may even crash in this case.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also sortingEnabled.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.SelectAll">
            <summary>
            <para>Reimplemented from QAbstractItemView::selectAll().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.HideColumn(System.Int32)">
            <summary>
            <para>Hides the column given.</para>
            <para>Note: This function should only be called after the model has
            been initialized, as the view needs to know the number of columns in order
            to hide column.</para>
            <para>See also showColumn() and setColumnHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.ShowColumn(System.Int32)">
            <summary>
            <para>Shows the given column in the tree view.</para>
            <para>See also hideColumn() and setColumnHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.Expand(QtCore.QModelIndex)">
            <summary>
            <para>Expands the model item specified by the index.</para>
            <para>See also expanded().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.Collapse(QtCore.QModelIndex)">
            <summary>
            <para>Collapses the model item specified by the index.</para>
            <para>See also collapsed().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.ResizeColumnToContents(System.Int32)">
            <summary>
            <para>Resizes the column given to the size of its contents.</para>
            <para>See also columnWidth(), setColumnWidth(), sizeHintForColumn(),
            and QHeaderView::resizeContentsPrecision().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.SortByColumn(System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sorts the model by the values in the given column.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.ExpandAll">
            <summary>
            <para>Expands all expandable items.</para>
            <para>Warning: if the model contains a large number of items, this
            function will take some time to execute.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also collapseAll(), expand(), collapse(), and
            setExpanded().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.CollapseAll">
            <summary>
            <para>Collapses all expanded items.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also expandAll(), expand(), collapse(), and
            setExpanded().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.ExpandToDepth(System.Int32)">
            <summary>
            <para>Expands all expandable items to the given depth.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also expandAll(), collapseAll(), expand(), collapse(), and
            setExpanded().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.ColumnResized(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This function is called whenever column's size is changed in the
            header. oldSize and newSize give the previous size and the new size in
            pixels.</para>
            <para>See also setColumnWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.ColumnCountChanged(System.Int32,System.Int32)">
            <summary>
            <para>Informs the tree view that the number of columns in the tree view
            has changed from oldCount to newCount.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.ColumnMoved">
            <summary>
            <para>This slot is called whenever a column has been moved.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.RowsRemoved(QtCore.QModelIndex,System.Int32,System.Int32)">
            <summary>
            <para>Informs the view that the rows from the start row to the end row
            inclusive have been removed from the given parent model item.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.ScrollContentsBy(System.Int32,System.Int32)">
            <summary>
            <para>Reimplemented from
            QAbstractScrollArea::scrollContentsBy().</para>
            <para>Scrolls the contents of the tree view by (dx, dy).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.RowsInserted(QtCore.QModelIndex,System.Int32,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemView::rowsInserted().</para>
            <para>Informs the view that the rows from the start row to the end row
            inclusive have been inserted into the parent model item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.RowsAboutToBeRemoved(QtCore.QModelIndex,System.Int32,System.Int32)">
            <summary>
            <para>Reimplemented from
            QAbstractItemView::rowsAboutToBeRemoved().</para>
            <para>Informs the view that the rows from the start row to the end row
            inclusive are about to removed from the given parent model item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.MoveCursor(QtWidgets.QAbstractItemView.CursorAction,QtCore.Qt.KeyboardModifier)">
            <summary>
            <para>Reimplemented from QAbstractItemView::moveCursor().</para>
            <para>Move the cursor in the way described by cursorAction, using the
            information provided by the button modifiers.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.SetSelection(QtCore.QRect,QtCore.QItemSelectionModel.SelectionFlag)">
            <summary>
            <para>Reimplemented from QAbstractItemView::setSelection().</para>
            <para>Applies the selection command to the items in or touched by the
            rectangle, rect.</para>
            <para>See also selectionCommand().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.VisualRegionForSelection(QtCore.QItemSelection)">
            <summary>
            <para>Reimplemented from
            QAbstractItemView::visualRegionForSelection().</para>
            <para>Returns the rectangle from the viewport of the items in the given
            selection.</para>
            <para>Since 4.7, the returned region only contains rectangles
            intersecting (or included in) the viewport.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.DrawTree(QtGui.QPainter,QtGui.QRegion)">
            <summary>
            <para>Draws the part of the tree intersecting the given region using
            the specified painter.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.DrawRow(QtGui.QPainter,QtWidgets.QStyleOptionViewItem,QtCore.QModelIndex)">
            <summary>
            <para>Draws the row in the tree view that contains the model item
            index, using the painter given. The option controls how the item is
            displayed.</para>
            <para>See also setAlternatingRowColors().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.DrawBranches(QtGui.QPainter,QtCore.QRect,QtCore.QModelIndex)">
            <summary>
            <para>Draws the branches in the tree view on the same row as the model
            item index, using the painter given. The branches are drawn in the
            rectangle specified by rect.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.OnMouseDoubleClickEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseDoubleClickEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.OnDragMoveEvent(QtGui.QDragMoveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.OnViewportEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractScrollArea::viewportEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.UpdateGeometries">
            <summary>
            <para>Reimplemented from QAbstractItemView::updateGeometries().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.SizeHintForColumn(System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemView::sizeHintForColumn().</para>
            <para>Returns the size hint for the column's width or -1 if there is no
            model.</para>
            <para>If you need to set the width of a given column to a fixed value,
            call QHeaderView::resizeSection() on the view's header.</para>
            <para>If you reimplement this function in a subclass, note that the
            value you return is only used when resizeColumnToContents() is called. In
            that case, if a larger column width is required by either the view's header
            or the item delegate, that width will be used instead.</para>
            <para>See also QWidget::sizeHint, header(), and
            QHeaderView::resizeContentsPrecision().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.IndexRowSizeHint(QtCore.QModelIndex)">
            <summary>
            <para>Returns the size hint for the row indicated by index.</para>
            <para>See also sizeHintForColumn() and uniformRowHeights().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.RowHeight(QtCore.QModelIndex)">
            <summary>
            <para>Returns the height of the row indicated by the given
            index.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also indexRowSizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.IsIndexHidden(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemView::isIndexHidden().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.SelectionChanged(QtCore.QItemSelection,QtCore.QItemSelection)">
            <summary>
            <para>Reimplemented from QAbstractItemView::selectionChanged().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeView.CurrentChanged(QtCore.QModelIndex,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemView::currentChanged().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTreeView.Expanded">
            <summary>
            <para>This signal is emitted when the item specified by index is expanded.</para>
            <para>See also setExpanded().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTreeView.Collapsed">
            <summary>
            <para>This signal is emitted when the item specified by index is collapsed.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.Model">
            <summary>
            <para>Returns the model that this view is presenting.</para>
            <para>See also setModel().</para>
            <para></para>
            <para>Sets the model for the view to present.</para>
            <para>This function will create and set a new selection model,
            replacing any model that was previously set with setSelectionModel().
            However, the old selection model will not be deleted as it may be shared
            between several views. We recommend that you delete the old selection model
            if it is no longer required. This is done with the following code:</para>
            <para>QItemSelectionModel *m = view-&gt;selectionModel();</para>
            <para>view-&gt;setModel(new model);</para>
            <para>delete m;</para>
            <para>If both the old model and the old selection model do not have
            parents, or if their parents are long-lived objects, it may be preferable
            to call their deleteLater() functions to explicitly delete them.</para>
            <para>The view does not take ownership of the model unless it is the
            model's parent object because the model may be shared between many
            different views.</para>
            <para>See also model(), selectionModel(), and
            setSelectionModel().</para>
            <para></para>
            <para>Reimplemented from QAbstractItemView::setModel().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.RootIndex">
            <summary>
            <para>Returns the model index of the model's root item. The root item
            is the parent item to the view's toplevel items. The root can be
            invalid.</para>
            <para>See also setRootIndex().</para>
            <para></para>
            <para>Sets the root item to the item at the given index.</para>
            <para>See also rootIndex().</para>
            <para></para>
            <para>Reimplemented from QAbstractItemView::setRootIndex().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.SelectionModel">
            <summary>
            <para>Returns the current selection model.</para>
            <para>See also setSelectionModel() and selectedIndexes().</para>
            <para></para>
            <para>Sets the current selection model to the given
            selectionModel.</para>
            <para>Note that, if you call setModel() after this function, the given
            selectionModel will be replaced by one created by the view.</para>
            <para>Note: It is up to the application to delete the old selection
            model if it is no longer needed; i.e., if it is not being used by other
            views. This will happen automatically when its parent object is deleted.
            However, if it does not have a parent, or if the parent is a long-lived
            object, it may be preferable to call its deleteLater() function to
            explicitly delete it.</para>
            <para>See also selectionModel(), setModel(), and
            clearSelection().</para>
            <para></para>
            <para>Reimplemented from QAbstractItemView::setSelectionModel().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.Header">
            <summary>
            <para>Returns the header for the tree view.</para>
            <para>See also setHeader() and QAbstractItemModel::headerData().</para>
            <para></para>
            <para>Sets the header for the tree view, to the given header.</para>
            <para>The view takes ownership over the given header and deletes it
            when a new header is set.</para>
            <para>See also QAbstractItemModel::headerData().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.AutoExpandDelay">
            <summary>
            <para>This property holds the delay time before items in a tree are
            opened during a drag and drop operation.</para>
            <para>This property holds the amount of time in milliseconds that the
            user must wait over a node before that node will automatically open or
            close. If the time is set to less then 0 then it will not be
            activated.</para>
            <para>By default, this property has a value of -1, meaning that
            auto-expansion is disabled.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.Indentation">
            <summary>
            <para>This property holds indentation of the items in the tree
            view.</para>
            <para>This property holds the indentation measured in pixels of the
            items for each level in the tree view. For top-level items, the indentation
            specifies the horizontal distance from the viewport edge to the items in
            the first column; for child items, it specifies their indentation from
            their parent items.</para>
            <para>By default, the value of this property is style dependent. Thus,
            when the style changes, this property updates from it. Calling
            setIndentation() stops the updates, calling resetIndentation() will restore
            default behavior.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.RootIsDecorated">
            <summary>
            <para>This property holds whether to show controls for expanding and
            collapsing top-level items.</para>
            <para>Items with children are typically shown with controls to expand
            and collapse them, allowing their children to be shown or hidden. If this
            property is false, these controls are not shown for top-level items. This
            can be used to make a single level tree structure appear like a simple list
            of items.</para>
            <para>By default, this property is true.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.UniformRowHeights">
            <summary>
            <para>This property holds whether all items in the treeview have the
            same height.</para>
            <para>This property should only be set to true if it is guaranteed that
            all items in the view has the same height. This enables the view to do some
            optimizations.</para>
            <para>The height is obtained from the first item in the view. It is
            updated when the data changes on that item.</para>
            <para>By default, this property is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.ItemsExpandable">
            <summary>
            <para>This property holds whether the items are expandable by the
            user.</para>
            <para>This property holds whether the user can expand and collapse
            items interactively.</para>
            <para>By default, this property is true.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.ExpandsOnDoubleClick">
            <summary>
            <para>This property holds whether the items can be expanded by
            double-clicking.</para>
            <para>This property holds whether the user can expand and collapse
            items by double-clicking. The default value is true.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also itemsExpandable.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.HeaderHidden">
            <summary>
            <para>This property holds whether the header is shown or not.</para>
            <para>If this property is true, the header is not shown otherwise it
            is. The default value is false.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also header().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.SortingEnabled">
            <summary>
            <para>This property holds whether sorting is enabled.</para>
            <para>If this property is true, sorting is enabled for the tree; if the
            property is false, sorting is not enabled. The default value is
            false.</para>
            <para>Note: In order to avoid performance issues, it is recommended
            that sorting is enabled after inserting the items into the tree.
            Alternatively, you could also insert the items into a list before inserting
            the items into the tree.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also sortByColumn().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.Animated">
            <summary>
            <para>This property holds whether animations are enabled.</para>
            <para>If this property is true the treeview will animate expansion and
            collapsing of branches. If this property is false, the treeview will expand
            or collapse branches immediately without showing the animation.</para>
            <para>By default, this property is false.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.AllColumnsShowFocus">
            <summary>
            <para>This property holds whether items should show keyboard focus
            using all columns.</para>
            <para>If this property is true all columns will show focus, otherwise
            only one column will show focus.</para>
            <para>The default is false.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.WordWrap">
            <summary>
            <para>This property holds the item text word-wrapping policy.</para>
            <para>If this property is true then the item text is wrapped where
            necessary at word-breaks; otherwise it is not wrapped at all. This property
            is false by default.</para>
            <para>Note that even if wrapping is enabled, the cell will not be
            expanded to fit all text. Ellipsis will be inserted according to the
            current textElideMode.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.TreePosition">
            <summary>
            <para>Return the logical index the tree is set on. If the return value
            is -1 then the tree is placed on the visual index 0.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also setTreePosition().</para>
            <para></para>
            <para>This specifies that the tree structure should be placed at
            logical index index. If  set to -1 then the tree will always follow visual
            index 0.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also treePosition(), QHeaderView::swapSections(), and
            QHeaderView::moveSection().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.HorizontalOffset">
            <summary>
            <para>Reimplemented from QAbstractItemView::horizontalOffset().</para>
            <para>Returns the horizontal offset of the items in the
            treeview.</para>
            <para>Note that the tree view uses the horizontal header section
            positions to determine the positions of columns in the view.</para>
            <para>See also verticalOffset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.VerticalOffset">
            <summary>
            <para>Reimplemented from QAbstractItemView::verticalOffset().</para>
            <para>Returns the vertical offset of the items in the tree view.</para>
            <para>See also horizontalOffset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeView.ViewportSizeHint">
            <summary>
            <para>Reimplemented from
            QAbstractScrollArea::viewportSizeHint().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTreeWidgetItemIterator">
            <summary>
            <para>The QTreeWidgetItemIterator class provides a way to iterate over
            the items in a QTreeWidget instance.</para>
            </summary>
            <remarks>
            <para>The iterator will walk the items in a pre-order traversal order,
            thus visiting the parent node before it continues to the child
            nodes.</para>
            <para>For example, the following code examples each item in a tree,
            checking the text in the first column against a user-specified search
            string:</para>
            <para>    QTreeWidgetItemIterator it(treeWidget);</para>
            <para>    while (*it) {</para>
            <para>        if ((*it)-&gt;text(0) == itemText)</para>
            <para>            (*it)-&gt;setSelected(true);</para>
            <para>        ++it;</para>
            <para>    }</para>
            <para>It is also possible to filter out certain types of node by
            passing certain flags to the constructor of QTreeWidgetItemIterator.</para>
            <para></para>
            <para>See also QTreeWidget, Model/View Programming, and
            QTreeWidgetItem.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItemIterator.#ctor(QtWidgets.QTreeWidgetItemIterator)">
            <summary>
            <para>Constructs an iterator for the same QTreeWidget as it. The
            current iterator item is set to point on the current item of it.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItemIterator.#ctor(QtWidgets.QTreeWidget,QtWidgets.QTreeWidgetItemIterator.IteratorFlag)">
            <summary>
            <para>Constructs an iterator for the given widget that uses the
            specified flags to determine which items are found during iteration. The
            iterator is set to point to the first top-level item contained in the
            widget, or the next matching item if the top-level item doesn't match the
            flags.</para>
            <para>See also QTreeWidgetItemIterator::IteratorFlag.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItemIterator.#ctor(QtWidgets.QTreeWidgetItem,QtWidgets.QTreeWidgetItemIterator.IteratorFlag)">
            <summary>
            <para>Constructs an iterator for the given item that uses the specified
            flags to determine which items are found during iteration. The iterator is
            set to point to item, or the next matching item if item doesn't match the
            flags.</para>
            <para>See also QTreeWidgetItemIterator::IteratorFlag.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItemIterator.op_Increment(QtWidgets.QTreeWidgetItemIterator)">
            <summary>
            <para>The prefix ++ operator (++it) advances the iterator to the next
            matching item and returns a reference to the resulting iterator. Sets the
            current pointer to 0 if the current item is the last matching item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItemIterator.op_Decrement(QtWidgets.QTreeWidgetItemIterator)">
            <summary>
            <para>The prefix -- operator (--it) advances the iterator to the
            previous matching item and returns a reference to the resulting iterator.
            Sets the current pointer to 0 if the current item is the first matching
            item.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTreeWidgetItemIterator.IteratorFlag">
            <summary>
            <para>These flags can be passed to a QTreeWidgetItemIterator
            constructor (OR-ed together if more than one is used), so that the iterator
            will only iterate over items that match the given flags.</para>
            <para>The IteratorFlags type is a typedef for
            QFlags&lt;IteratorFlag&gt;. It stores an OR combination of IteratorFlag
            values.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTreeWidgetItem">
            <summary>
            <para>The QTreeWidgetItem class provides an item for use with the
            QTreeWidget convenience class.</para>
            </summary>
            <remarks>
            <para>Tree widget items are used to hold rows of information for tree
            widgets. Rows usually contain several columns of data, each of which can
            contain a text label and an icon.</para>
            <para>The QTreeWidgetItem class is a convenience class that replaces
            the QListViewItem class in Qt 3. It provides an item for use with the
            QTreeWidget class.</para>
            <para>Items are usually constructed with a parent that is either a
            QTreeWidget (for top-level items) or a QTreeWidgetItem (for items on lower
            levels of the tree). For example, the following code constructs a top-level
            item to represent cities of the world, and adds a entry for Oslo as a child
            item:</para>
            <para>    QTreeWidgetItem *cities = new
            QTreeWidgetItem(treeWidget);</para>
            <para>    cities-&gt;setText(0, tr(&quot;Cities&quot;));</para>
            <para>    QTreeWidgetItem *osloItem = new
            QTreeWidgetItem(cities);</para>
            <para>    osloItem-&gt;setText(0, tr(&quot;Oslo&quot;));</para>
            <para>    osloItem-&gt;setText(1, tr(&quot;Yes&quot;));</para>
            <para>Items can be added in a particular order by specifying the item
            they follow when they are constructed:</para>
            <para>    QTreeWidgetItem *planets = new QTreeWidgetItem(treeWidget,
            cities);</para>
            <para>    planets-&gt;setText(0, tr(&quot;Planets&quot;));</para>
            <para>Each column in an item can have its own background brush which is
            set with the setBackground() function. The current background brush can be
            found with background(). The text label for each column can be rendered
            with its own font and brush. These are specified with the setFont() and
            setForeground() functions, and read with font() and foreground().</para>
            <para>The main difference between top-level items and those in lower
            levels of the tree is that a top-level item has no parent(). This
            information can be used to tell the difference between items, and is useful
            to know when inserting and removing items from the tree. Children of an
            item can be removed with takeChild() and inserted at a given index in the
            list of children with the insertChild() function.</para>
            <para>By default, items are enabled, selectable, checkable, and can be
            the source of a drag and drop operation. Each item's flags can be changed
            by calling setFlags() with the appropriate value (see Qt::ItemFlags).
            Checkable items can be checked and unchecked with the setCheckState()
            function. The corresponding checkState() function indicates whether the
            item is currently checked.</para>
            <para></para>
            <para>Subclassing</para>
            <para>When subclassing QTreeWidgetItem to provide custom items, it is
            possible to define new types for them so that they can be distinguished
            from standard items. The constructors for subclasses that require this
            feature need to call the base class constructor with a new type value equal
            to or greater than UserType.</para>
            <para></para>
            <para>See also QTreeWidget, QTreeWidgetItemIterator, Model/View
            Programming, QListWidgetItem, and QTableWidgetItem.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.#ctor(System.Int32)">
            <summary>
            <para>Constructs a tree widget item of the specified type. The item
            must be inserted into a tree widget.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.#ctor(QtCore.QStringList,System.Int32)">
            <summary>
            <para>Constructs a tree widget item of the specified type. The item
            must be inserted into a tree widget. The given list of strings will be set
            as the item text for each column in the item.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.#ctor(QtWidgets.QTreeWidget,System.Int32)">
            <summary>
            <para>Constructs a tree widget item of the specified type and appends
            it to the items in the given parent.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.#ctor(QtWidgets.QTreeWidget,QtCore.QStringList,System.Int32)">
            <summary>
            <para>Constructs a tree widget item of the specified type and appends
            it to the items in the given parent. The given list of strings will be set
            as the item text for each column in the item.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.#ctor(QtWidgets.QTreeWidget,QtWidgets.QTreeWidgetItem,System.Int32)">
            <summary>
            <para>Constructs a tree widget item of the specified type and inserts
            it into the given parent after the preceding item.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.#ctor(QtWidgets.QTreeWidgetItem,System.Int32)">
            <summary>
            <para>Constructs a tree widget item and append it to the given
            parent.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.#ctor(QtWidgets.QTreeWidgetItem,QtCore.QStringList,System.Int32)">
            <summary>
            <para>Constructs a tree widget item and append it to the given parent.
            The given list of strings will be set as the item text for each column in
            the item.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.#ctor(QtWidgets.QTreeWidgetItem,QtWidgets.QTreeWidgetItem,System.Int32)">
            <summary>
            <para>Constructs a tree widget item of the specified type that is
            inserted into the parent after the preceding child item.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.#ctor(QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Constructs a copy of other. Note that type() and treeWidget() are
            not copied.</para>
            <para>This function is useful when reimplementing clone().</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also data() and flags().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.Clone">
            <summary>
            <para>Creates a deep copy of the item and of its children.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.Text(System.Int32)">
            <summary>
            <para>Returns the text in the specified column.</para>
            <para>See also setText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.SetText(System.Int32,System.String)">
            <summary>
            <para>Sets the text to be displayed in the given column to the given
            text.</para>
            <para>See also text(), setFont(), and setForeground().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.Icon(System.Int32)">
            <summary>
            <para>Returns the icon that is displayed in the specified
            column.</para>
            <para>See also setIcon() and iconSize.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.SetIcon(System.Int32,QtGui.QIcon)">
            <summary>
            <para>Sets the icon to be displayed in the given column to icon.</para>
            <para>See also icon(), setText(), and iconSize.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.StatusTip(System.Int32)">
            <summary>
            <para>Returns the status tip for the contents of the given
            column.</para>
            <para>See also setStatusTip().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.SetStatusTip(System.Int32,System.String)">
            <summary>
            <para>Sets the status tip for the given column to the given statusTip.
            QTreeWidget mouse tracking needs to be enabled for this feature to
            work.</para>
            <para>See also statusTip(), setToolTip(), and setWhatsThis().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.ToolTip(System.Int32)">
            <summary>
            <para>Returns the tool tip for the given column.</para>
            <para>See also setToolTip().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.SetToolTip(System.Int32,System.String)">
            <summary>
            <para>Sets the tooltip for the given column to toolTip.</para>
            <para>See also toolTip(), setStatusTip(), and setWhatsThis().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.WhatsThis(System.Int32)">
            <summary>
            <para>Returns the &quot;What's This?&quot; help for the contents of the
            given column.</para>
            <para>See also setWhatsThis().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.SetWhatsThis(System.Int32,System.String)">
            <summary>
            <para>Sets the &quot;What's This?&quot; help for the given column to
            whatsThis.</para>
            <para>See also whatsThis(), setStatusTip(), and setToolTip().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.Font(System.Int32)">
            <summary>
            <para>Returns the font used to render the text in the specified
            column.</para>
            <para>See also setFont().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.SetFont(System.Int32,QtGui.QFont)">
            <summary>
            <para>Sets the font used to display the text in the given column to the
            given font.</para>
            <para>See also font(), setText(), and setForeground().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.TextAlignment(System.Int32)">
            <summary>
            <para>Returns the text alignment for the label in the given column (see
            Qt::AlignmentFlag).</para>
            <para>See also setTextAlignment().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.SetTextAlignment(System.Int32,System.Int32)">
            <summary>
            <para>Sets the text alignment for the label in the given column to the
            alignment specified (see Qt::AlignmentFlag).</para>
            <para>See also textAlignment().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.BackgroundColor(System.Int32)">
            <summary>
            <para>This function is deprecated. Use background() instead.</para>
            <para>See also setBackgroundColor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.SetBackgroundColor(System.Int32,QtGui.QColor)">
            <summary>
            <para>This function is deprecated. Use setBackground() instead.</para>
            <para>See also backgroundColor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.Background(System.Int32)">
            <summary>
            <para>Returns the brush used to render the background of the specified
            column.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setBackground() and foreground().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.SetBackground(System.Int32,QtGui.QBrush)">
            <summary>
            <para>Sets the background brush of the label in the given column to the
            specified brush.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also background() and setForeground().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.TextColor(System.Int32)">
            <summary>
            <para>This function is deprecated. Use foreground() instead.</para>
            <para>See also setTextColor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.SetTextColor(System.Int32,QtGui.QColor)">
            <summary>
            <para>This function is deprecated. Use setForeground() instead.</para>
            <para>See also textColor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.Foreground(System.Int32)">
            <summary>
            <para>Returns the brush used to render the foreground (e.g. text) of
            the specified column.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setForeground() and background().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.SetForeground(System.Int32,QtGui.QBrush)">
            <summary>
            <para>Sets the foreground brush of the label in the given column to the
            specified brush.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also foreground() and setBackground().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.CheckState(System.Int32)">
            <summary>
            <para>Returns the check state of the label in the given column.</para>
            <para>See also setCheckState() and Qt::CheckState.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.SetCheckState(System.Int32,QtCore.Qt.CheckState)">
            <summary>
            <para>Sets the item in the given column check state to be state.</para>
            <para>See also checkState().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.SizeHint(System.Int32)">
            <summary>
            <para>Returns the size hint set for the tree item in the given column
            (see QSize).</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setSizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.SetSizeHint(System.Int32,QtCore.QSize)">
            <summary>
            <para>Sets the size hint for the tree item in the given column to be
            size. If no size hint is set, the item delegate will compute the size hint
            based on the item data.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also sizeHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.Data(System.Int32,System.Int32)">
            <summary>
            <para>Returns the value for the item's column and role.</para>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.SetData(System.Int32,System.Int32,QtCore.QVariant)">
            <summary>
            <para>Sets the value for the item's column and role to the given
            value.</para>
            <para>The role describes the type of data specified by value, and is
            defined by the Qt::ItemDataRole enum.</para>
            <para>See also data().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.op_LessThan(QtWidgets.QTreeWidgetItem,QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Returns true if the text in the item is less than the text in the
            other item, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.Read(QtCore.QDataStream)">
            <summary>
            <para>Reads the item from stream in. This only reads data into a single
            item.</para>
            <para>See also write().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.Write(QtCore.QDataStream)">
            <summary>
            <para>Writes the item to stream out. This only writes data from one
            single item.</para>
            <para>See also read().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.Child(System.Int32)">
            <summary>
            <para>Returns the item at the given index in the list of the item's
            children.</para>
            <para>See also parent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.IndexOfChild(QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Returns the index of the given child in the item's list of
            children.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.AddChild(QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Appends the child item to the list of children.</para>
            <para>See also insertChild() and takeChild().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.InsertChild(System.Int32,QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Inserts the child item at index in the list of children.</para>
            <para>If the child has already been inserted somewhere else it won't be
            inserted again.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.RemoveChild(QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Removes the given item indicated by child. The removed item will
            not be deleted.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.TakeChild(System.Int32)">
            <summary>
            <para>Removes the item at index and returns it, otherwise return
            0.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.SortChildren(System.Int32,QtCore.Qt.SortOrder)">
            <summary>
            <para>Sorts the children of the item using the given order, by the
            values in the given column.</para>
            <para>Note: This function does nothing if the item is not associated
            with a QTreeWidget.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidgetItem.EmitDataChanged">
            <summary>
            <para>Causes the model associated with this item to emit a
            dataChanged() signal for this item.</para>
            <para>You normally only need to call this function if you have
            subclassed QTreeWidgetItem and reimplemented data() and/or
            setData().</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidgetItem.Selected">
            <summary>
            <para>Returns true if the item is selected, otherwise returns
            false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setSelected().</para>
            <para></para>
            <para>Sets the selected state of the item to select.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also isSelected().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidgetItem.Hidden">
            <summary>
            <para>Returns true if the item is hidden, otherwise returns
            false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setHidden().</para>
            <para></para>
            <para>Hides the item if hide is true, otherwise shows the item.</para>
            <para>Note: A call to this function has no effect if the item is not
            currently in a view. In particular, calling setHidden(true) on an item and
            only then adding it to a view will result in a visible item.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also isHidden().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidgetItem.Expanded">
            <summary>
            <para>Returns true if the item is expanded, otherwise returns
            false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setExpanded().</para>
            <para></para>
            <para>Expands the item if expand is true, otherwise collapses the
            item.</para>
            <para>Warning: The QTreeWidgetItem must be added to the QTreeWidget
            before calling this function.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also isExpanded().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidgetItem.FirstColumnSpanned">
            <summary>
            <para>Returns true if the item is spanning all the columns in a row;
            otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setFirstColumnSpanned().</para>
            <para></para>
            <para>Sets the first section to span all columns if span is true;
            otherwise all item sections are shown.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also isFirstColumnSpanned().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidgetItem.Disabled">
            <summary>
            <para>Returns true if the item is disabled; otherwise returns
            false.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setFlags().</para>
            <para></para>
            <para>Disables the item if disabled is true; otherwise enables the
            item.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also isDisabled() and setFlags().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidgetItem.childIndicatorPolicy">
            <summary>
            <para>Returns the item indicator policy. This policy decides when the
            tree branch expand/collapse indicator is shown.</para>
            <para>See also setChildIndicatorPolicy().</para>
            <para></para>
            <para>Sets the item indicator policy. This policy decides when the tree
            branch expand/collapse indicator is shown. The default value is
            ShowForChildren.</para>
            <para>See also childIndicatorPolicy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidgetItem.Flags">
            <summary>
            <para>Returns the flags used to describe the item. These determine
            whether the item can be checked, edited, and selected.</para>
            <para>The default value for flags is Qt::ItemIsSelectable |
            Qt::ItemIsUserCheckable | Qt::ItemIsEnabled | Qt::ItemIsDragEnabled |
            Qt::ItemIsDropEnabled.</para>
            <para>See also setFlags().</para>
            <para></para>
            <para>Sets the flags for the item to the given flags. These determine
            whether the item can be selected or modified. This is often used to disable
            an item.</para>
            <para>See also flags().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidgetItem.TreeWidget">
            <summary>
            <para>Returns the tree widget that contains the item.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidgetItem.Parent">
            <summary>
            <para>Returns the item's parent.</para>
            <para>See also child().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidgetItem.ChildCount">
            <summary>
            <para>Returns the number of child items.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidgetItem.ColumnCount">
            <summary>
            <para>Returns the number of columns in the item.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidgetItem.Type">
            <summary>
            <para>Returns the type passed to the QTreeWidgetItem
            constructor.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTreeWidgetItem.ItemType">
            <summary>
            <para>This enum describes the types that are used to describe tree
            widget items.</para>
            <para>You can define new user types in QTreeWidgetItem subclasses to
            ensure that custom items are treated specially; for example, when items are
            sorted.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QTreeWidgetItem.ItemType.Type">
            <summary>The default type for tree widget items.</summary>
        </member>
        <member name="F:QtWidgets.QTreeWidgetItem.ItemType.UserType">
            <summary>The minimum value for custom types. Values below UserType are reserved by Qt.</summary>
        </member>
        <member name="T:QtWidgets.QTreeWidgetItem.ChildIndicatorPolicy">
            <summary>
            <para>This enum was introduced or modified in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QTreeWidgetItem.ChildIndicatorPolicy.ShowIndicator">
            <summary>The controls for expanding and collapsing will be shown for this item even if there are no children.</summary>
        </member>
        <member name="F:QtWidgets.QTreeWidgetItem.ChildIndicatorPolicy.DontShowIndicator">
            <summary>The controls for expanding and collapsing will never be shown even if there are children. If the node is forced open the user will not be able to expand or collapse the item.</summary>
        </member>
        <member name="F:QtWidgets.QTreeWidgetItem.ChildIndicatorPolicy.DontShowIndicatorWhenChildless">
            <summary>The controls for expanding and collapsing will be shown if the item contains children.</summary>
        </member>
        <member name="T:QtWidgets.QTreeWidget">
            <summary>
            <para>The QTreeWidget class provides a tree view that uses a predefined
            tree model.</para>
            </summary>
            <remarks>
            <para>The QTreeWidget class is a convenience class that provides a
            standard tree widget with a classic item-based interface similar to that
            used by the QListView class in Qt 3. This class is based on Qt's Model/View
            architecture and uses a default model to hold items, each of which is a
            QTreeWidgetItem.</para>
            <para>Developers who do not need the flexibility of the Model/View
            framework can use this class to create simple hierarchical lists very
            easily. A more flexible approach involves combining a QTreeView with a
            standard item model. This allows the storage of data to be separated from
            its representation.</para>
            <para>In its simplest form, a tree widget can be constructed in the
            following way:</para>
            <para>QTreeWidget *treeWidget = new QTreeWidget();</para>
            <para>treeWidget-&gt;setColumnCount(1);</para>
            <para>QList&lt;QTreeWidgetItem *&gt; items;</para>
            <para>for (int i = 0; i &lt; 10; ++i)</para>
            <para>    items.append(new QTreeWidgetItem((QTreeWidget*)0,
            QStringList(QString(&quot;item: %1&quot;).arg(i))));</para>
            <para>treeWidget-&gt;insertTopLevelItems(0, items);</para>
            <para>Before items can be added to the tree widget, the number of
            columns must be set with setColumnCount(). This allows each item to have
            one or more labels or other decorations. The number of columns in use can
            be found with the columnCount() function.</para>
            <para>The tree can have a header that contains a section for each
            column in the widget. It is easiest to set up the labels for each section
            by supplying a list of strings with setHeaderLabels(), but a custom header
            can be constructed with a QTreeWidgetItem and inserted into the tree with
            the setHeaderItem() function.</para>
            <para>The items in the tree can be sorted by column according to a
            predefined sort order. If sorting is enabled, the user can sort the items
            by clicking on a column header. Sorting can be enabled or disabled by
            calling setSortingEnabled(). The isSortingEnabled() function indicates
            whether sorting is enabled.</para>
            <para></para>
            <para> 	</para>
            <para>A Windows Vista style tree widget.	A Macintosh style tree widget.
            A Fusion style tree widget.</para>
            <para></para>
            <para></para>
            <para>See also QTreeWidgetItem, QTreeWidgetItemIterator, QTreeView,
            Model/View Programming, and Settings Editor Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QTreeWidget.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a tree widget with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.TopLevelItem(System.Int32)">
            <summary>
            <para>Returns the top level item at the given index, or 0 if the item
            does not exist.</para>
            <para>See also topLevelItemCount() and insertTopLevelItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.InsertTopLevelItem(System.Int32,QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Inserts the item at index in the top level in the view.</para>
            <para>If the item has already been inserted somewhere else it won't be
            inserted.</para>
            <para>See also addTopLevelItem() and columnCount().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.AddTopLevelItem(QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Appends the item as a top-level item in the widget.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also insertTopLevelItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.TakeTopLevelItem(System.Int32)">
            <summary>
            <para>Removes the top-level item at the given index in the tree and
            returns it, otherwise returns 0;</para>
            <para>See also insertTopLevelItem(), topLevelItem(), and
            topLevelItemCount().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.IndexOfTopLevelItem(QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Returns the index of the given top-level item, or -1 if the item
            cannot be found.</para>
            <para>See also sortItems() and topLevelItemCount().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.SetHeaderLabels(QtCore.QStringList)">
            <summary>
            <para>Adds a column in the header for each item in the labels list, and
            sets the label for each column.</para>
            <para>Note that setHeaderLabels() won't remove existing columns.</para>
            <para>See also setHeaderItem() and setHeaderLabel().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.SetHeaderLabel(System.String)">
            <summary>
            <para>Same as setHeaderLabels(QStringList(label)).</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.SetCurrentItem(QtWidgets.QTreeWidgetItem,System.Int32)">
            <summary>
            <para>Sets the current item in the tree widget and the current column
            to column.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also currentItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.SetCurrentItem(QtWidgets.QTreeWidgetItem,System.Int32,QtCore.QItemSelectionModel.SelectionFlag)">
            <summary>
            <para>Sets the current item in the tree widget and the current column
            to column, using the given command.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also currentItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.ItemAt(QtCore.QPoint)">
            <summary>
            <para>Returns a pointer to the item at the coordinates p. The
            coordinates are relative to the tree widget's viewport().</para>
            <para>See also visualItemRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.ItemAt(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a pointer to the item at the coordinates (x, y). The
            coordinates are relative to the tree widget's viewport().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.VisualItemRect(QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Returns the rectangle on the viewport occupied by the item at
            item.</para>
            <para>See also itemAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.SortItems(System.Int32,QtCore.Qt.SortOrder)">
            <summary>
            <para>Sorts the items in the widget in the specified order by the
            values in the given column.</para>
            <para>See also sortColumn().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.EditItem(QtWidgets.QTreeWidgetItem,System.Int32)">
            <summary>
            <para>Starts editing the item in the given column if it is
            editable.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.OpenPersistentEditor(QtWidgets.QTreeWidgetItem,System.Int32)">
            <summary>
            <para>Opens a persistent editor for the item in the given
            column.</para>
            <para>See also closePersistentEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.ClosePersistentEditor(QtWidgets.QTreeWidgetItem,System.Int32)">
            <summary>
            <para>Closes the persistent editor for the item in the given
            column.</para>
            <para>This function has no effect if no persistent editor is open for
            this combination of item and column.</para>
            <para>See also openPersistentEditor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.ItemWidget(QtWidgets.QTreeWidgetItem,System.Int32)">
            <summary>
            <para>Returns the widget displayed in the cell specified by item and
            the given column.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setItemWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.SetItemWidget(QtWidgets.QTreeWidgetItem,System.Int32,QtWidgets.QWidget)">
            <summary>
            <para>Sets the given widget to be displayed in the cell specified by
            the given item and column.</para>
            <para>The given widget's autoFillBackground property must be set to
            true, otherwise the widget's background will be transparent, showing both
            the model data and the tree widget item.</para>
            <para>This function should only be used to display static content in
            the place of a tree widget item. If you want to display custom dynamic
            content or implement a custom editor widget, use QTreeView and subclass
            QItemDelegate instead.</para>
            <para>This function cannot be called before the item hierarchy has been
            set up, i.e., the QTreeWidgetItem that will hold widget must have been
            added to the view before widget is set.</para>
            <para>Note: The tree takes ownership of the widget.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also itemWidget() and Delegate Classes.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.RemoveItemWidget(QtWidgets.QTreeWidgetItem,System.Int32)">
            <summary>
            <para>Removes the widget set in the given item in the given
            column.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.IsItemSelected(QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Returns true if the item is selected; otherwise returns
            false.</para>
            <para>This function is deprecated. Use QTreeWidgetItem::isSelected()
            instead.</para>
            <para>See also itemSelectionChanged().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.SetItemSelected(QtWidgets.QTreeWidgetItem,System.Boolean)">
            <summary>
            <para>If select is true, the given item is selected; otherwise it is
            deselected.</para>
            <para>This function is deprecated. Use QTreeWidgetItem::setSelected()
            instead.</para>
            <para>See also isItemSelected() and itemSelectionChanged().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.IsItemHidden(QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Returns true if the item is explicitly hidden, otherwise returns
            false.</para>
            <para>This function is deprecated. Use QTreeWidgetItem::isHidden()
            instead.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.SetItemHidden(QtWidgets.QTreeWidgetItem,System.Boolean)">
            <summary>
            <para>Hides the given item if hide is true; otherwise shows the
            item.</para>
            <para>This function is deprecated. Use QTreeWidgetItem::setHidden()
            instead.</para>
            <para>See also isItemHidden() and itemChanged().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.IsItemExpanded(QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Returns true if the given item is open; otherwise returns
            false.</para>
            <para>This function is deprecated. Use QTreeWidgetItem::isExpanded()
            instead.</para>
            <para>See also itemExpanded().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.SetItemExpanded(QtWidgets.QTreeWidgetItem,System.Boolean)">
            <summary>
            <para>Sets the item referred to by item to either closed or opened,
            depending on the value of expand.</para>
            <para>This function is deprecated. Use QTreeWidgetItem::setExpanded()
            instead.</para>
            <para>See also expandItem(), collapseItem(), and itemExpanded().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.IsFirstItemColumnSpanned(QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Returns true if the given item is set to show only one section
            over all columns; otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setFirstItemColumnSpanned().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.SetFirstItemColumnSpanned(QtWidgets.QTreeWidgetItem,System.Boolean)">
            <summary>
            <para>Sets the given item to only show one section for all columns if
            span is true; otherwise the item will show one section per column.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also isFirstItemColumnSpanned().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.ItemAbove(QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Returns the item above the given item.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.ItemBelow(QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Returns the item visually below the given item.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.ScrollToItem(QtWidgets.QTreeWidgetItem,QtWidgets.QAbstractItemView.ScrollHint)">
            <summary>
            <para>Ensures that the item is visible, scrolling the view if necessary
            using the specified hint.</para>
            <para>See also currentItem(), itemAt(), and topLevelItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.ExpandItem(QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Expands the item. This causes the tree containing the item's
            children to be expanded.</para>
            <para>See also collapseItem(), currentItem(), itemAt(), topLevelItem(),
            and itemExpanded().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.CollapseItem(QtWidgets.QTreeWidgetItem)">
            <summary>
            <para>Closes the item. This causes the tree containing the item's
            children to be collapsed.</para>
            <para>See also expandItem(), currentItem(), itemAt(), and
            topLevelItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.Clear">
            <summary>
            <para>Clears the tree widget by removing all of its items and
            selections.</para>
            <para>Note: Since each item is removed from the tree widget before
            being deleted, the return value of QTreeWidgetItem::treeWidget() will be
            invalid when called from an item's destructor.</para>
            <para>See also takeTopLevelItem(), topLevelItemCount(), and
            columnCount().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.DropMimeData(QtWidgets.QTreeWidgetItem,System.Int32,QtCore.QMimeData,QtCore.Qt.DropAction)">
            <summary>
            <para>Handles the data supplied by a drag and drop operation that ended
            with the given action in the index in the given parent item.</para>
            <para>The default implementation returns true if the drop was
            successfully handled by decoding the mime data and inserting it into the
            model; otherwise it returns false.</para>
            <para>See also supportedDropActions().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.IndexFromItem(QtWidgets.QTreeWidgetItem,System.Int32)">
            <summary>
            <para>Returns the QModelIndex assocated with the given item in the
            given column.</para>
            <para>See also itemFromIndex() and topLevelItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.ItemFromIndex(QtCore.QModelIndex)">
            <summary>
            <para>Returns a pointer to the QTreeWidgetItem assocated with the given
            index.</para>
            <para>See also indexFromItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTreeWidget.OnDropEvent(QtGui.QDropEvent)">
            <summary>
            <para>Reimplemented from QWidget::dropEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTreeWidget.ItemPressed">
            <summary>
            <para>This signal is emitted when the user presses a mouse button inside the widget.</para>
            <para>The specified item is the item that was clicked, or 0 if no item was clicked. The column is the item's column that was clicked, or -1 if no item was clicked.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTreeWidget.ItemClicked">
            <summary>
            <para>This signal is emitted when the user clicks inside the widget.</para>
            <para>The specified item is the item that was clicked. The column is the item's column that was clicked. If no item was clicked, no signal will be emitted.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTreeWidget.ItemDoubleClicked">
            <summary>
            <para>This signal is emitted when the user double clicks inside the widget.</para>
            <para>The specified item is the item that was clicked, or 0 if no item was clicked. The column is the item's column that was clicked. If no item was double clicked, no signal will be emitted.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTreeWidget.ItemActivated">
            <summary>
            <para>This signal is emitted when the user activates an item by single- or double-clicking (depending on the platform, i.e. on the QStyle::SH_ItemView_ActivateItemOnSingleClick style hint) or pressing a special key (e.g., Enter).</para>
            <para>The specified item is the item that was clicked, or 0 if no item was clicked. The column is the item's column that was clicked, or -1 if no item was clicked.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTreeWidget.ItemEntered">
            <summary>
            <para>This signal is emitted when the mouse cursor enters an item over the specified column. QTreeWidget mouse tracking needs to be enabled for this feature to work.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTreeWidget.ItemChanged">
            <summary>
            <para>This signal is emitted when the contents of the column in the specified item changes.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTreeWidget.ItemExpanded">
            <summary>
            <para>This signal is emitted when the specified item is expanded so that all of its children are displayed.</para>
            <para>Note: This signal will not be emitted if an item changes its state when expandAll() is invoked.</para>
            <para>See also setItemExpanded(), QTreeWidgetItem::isExpanded(), itemCollapsed(), and expandItem().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTreeWidget.ItemCollapsed">
            <summary>
            <para>This signal is emitted when the specified item is collapsed so that none of its children are displayed.</para>
            <para>Note: This signal will not be emitted if an item changes its state when collapseAll() is invoked.</para>
            <para>See also QTreeWidgetItem::isExpanded(), itemExpanded(), and collapseItem().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTreeWidget.CurrentItemChanged">
            <summary>
            <para>This signal is emitted when the current item changes. The current item is specified by current, and this replaces the previous current item.</para>
            <para>See also setCurrentItem().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTreeWidget.ItemSelectionChanged">
            <summary>
            <para>This signal is emitted when the selection changes in the tree widget. The current selection can be found with selectedItems().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidget.ColumnCount">
            <summary>
            <para>This property holds the number of columns displayed in the tree
            widget.</para>
            <para>By default, this property has a value of 1.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidget.HeaderItem">
            <summary>
            <para>Returns the item used for the tree widget's header.</para>
            <para>See also setHeaderItem().</para>
            <para></para>
            <para>Sets the header item for the tree widget. The label for each
            column in the header is supplied by the corresponding label in the
            item.</para>
            <para>The tree widget takes ownership of the item.</para>
            <para>See also headerItem() and setHeaderLabels().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidget.CurrentItem">
            <summary>
            <para>Returns the current item in the tree widget.</para>
            <para>See also setCurrentItem() and currentItemChanged().</para>
            <para></para>
            <para>Sets the current item in the tree widget.</para>
            <para>Unless the selection mode is NoSelection, the item is also
            selected.</para>
            <para>See also currentItem() and currentItemChanged().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidget.SelectionModel">
            <summary>
            <para>Returns the current selection model.</para>
            <para>See also setSelectionModel() and selectedIndexes().</para>
            <para></para>
            <para>Sets the current selection model to the given
            selectionModel.</para>
            <para>Note that, if you call setModel() after this function, the given
            selectionModel will be replaced by one created by the view.</para>
            <para>Note: It is up to the application to delete the old selection
            model if it is no longer needed; i.e., if it is not being used by other
            views. This will happen automatically when its parent object is deleted.
            However, if it does not have a parent, or if the parent is a long-lived
            object, it may be preferable to call its deleteLater() function to
            explicitly delete it.</para>
            <para>See also selectionModel(), setModel(), and
            clearSelection().</para>
            <para></para>
            <para>Reimplemented from QAbstractItemView::setSelectionModel().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidget.Model">
            <summary>
            <para>Returns the model that this view is presenting.</para>
            <para>See also setModel().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidget.InvisibleRootItem">
            <summary>
            <para>Returns the tree widget's invisible root item.</para>
            <para>The invisible root item provides access to the tree widget's
            top-level items through the QTreeWidgetItem API, making it possible to
            write functions that can treat top-level items and their children in a
            uniform way; for example, recursive functions.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidget.TopLevelItemCount">
            <summary>
            <para>This property holds the number of top-level items.</para>
            <para>By default, this property has a value of 0.</para>
            <para>See also columnCount() and currentItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidget.CurrentColumn">
            <summary>
            <para>Returns the current column in the tree widget.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setCurrentItem() and columnCount().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidget.SortColumn">
            <summary>
            <para>Returns the column used to sort the contents of the
            widget.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also sortItems().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidget.MimeTypes">
            <summary>
            <para>Returns a list of MIME types that can be used to describe a list
            of treewidget items.</para>
            <para>See also mimeData().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTreeWidget.SupportedDropActions">
            <summary>
            <para>Returns the drop actions supported by this view.</para>
            <para>See also Qt::DropActions.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QAction">
            <summary>
            <para>The QAction class provides an abstract user interface action that
            can be inserted into widgets.</para>
            </summary>
            <remarks>
            <para>In applications many common commands can be invoked via menus,
            toolbar buttons, and keyboard shortcuts. Since the user expects each
            command to be performed in the same way, regardless of the user interface
            used, it is useful to represent each command as an action.</para>
            <para>Actions can be added to menus and toolbars, and will
            automatically keep them in sync. For example, in a word processor, if the
            user presses a Bold toolbar button, the Bold menu item will automatically
            be checked.</para>
            <para>Actions can be created as independent objects, but they may also
            be created during the construction of menus; the QMenu class contains
            convenience functions for creating actions suitable for use as menu
            items.</para>
            <para>A QAction may contain an icon, menu text, a shortcut, status
            text, &quot;What's This?&quot; text, and a tooltip. Most of these can be
            set in the constructor. They can also be set independently with setIcon(),
            setText(), setIconText(), setShortcut(), setStatusTip(), setWhatsThis(),
            and setToolTip(). For menu items, it is possible to set an individual font
            with setFont().</para>
            <para>Actions are added to widgets using QWidget::addAction() or
            QGraphicsWidget::addAction(). Note that an action must be added to a widget
            before it can be used; this is also true when the shortcut should be global
            (i.e., Qt::ApplicationShortcut as Qt::ShortcutContext).</para>
            <para>Once a QAction has been created it should be added to the
            relevant menu and toolbar, then connected to the slot which will perform
            the action. For example:</para>
            <para>    openAct = new QAction(QIcon(&quot;:/images/open.png&quot;),
            tr(&quot;&amp;Open...&quot;), this);</para>
            <para>    openAct-&gt;setShortcuts(QKeySequence::Open);</para>
            <para>    openAct-&gt;setStatusTip(tr(&quot;Open an existing
            file&quot;));</para>
            <para>    connect(openAct, SIGNAL(triggered()), this,
            SLOT(open()));</para>
            <para></para>
            <para>    fileMenu-&gt;addAction(openAct);</para>
            <para>    fileToolBar-&gt;addAction(openAct);</para>
            <para>We recommend that actions are created as children of the window
            they are used in. In most cases actions will be children of the
            application's main window.</para>
            <para></para>
            <para>See also QMenu, QToolBar, and Application Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QAction.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an action with parent. If parent is an action group
            the action will be automatically inserted into the group.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAction.#ctor(System.String,QtCore.QObject)">
            <summary>
            <para>Constructs an action with some text and parent. If parent is an
            action group the action will be automatically inserted into the
            group.</para>
            <para>The action uses a stripped version of text (e.g. &quot;&amp;Menu
            Option...&quot; becomes &quot;Menu Option&quot;) as descriptive text for
            tool buttons. You can override this by setting a specific description with
            setText(). The same text will be used for tooltips unless you specify a
            different text using setToolTip().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAction.#ctor(QtGui.QIcon,System.String,QtCore.QObject)">
            <summary>
            <para>Constructs an action with an icon and some text and parent. If
            parent is an action group the action will be automatically inserted into
            the group.</para>
            <para>The action uses a stripped version of text (e.g. &quot;&amp;Menu
            Option...&quot; becomes &quot;Menu Option&quot;) as descriptive text for
            tool buttons. You can override this by setting a specific description with
            setText(). The same text will be used for tooltips unless you specify a
            different text using setToolTip().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAction.SetShortcuts(QtGui.QKeySequence.StandardKey)">
            <summary>
            <para>Sets a platform dependent list of shortcuts based on the key. The
            result of calling this function will depend on the currently running
            platform. Note that more than one shortcut can assigned by this action. If
            only the primary shortcut is required, use setShortcut instead.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also QKeySequence::keyBindings().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAction.Activate(QtWidgets.QAction.ActionEvent)">
            <summary>
            <para>Sends the relevant signals for ActionEvent event.</para>
            <para>Action based widgets use this API to cause the QAction to emit
            signals as well as emitting their own.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAction.ShowStatusText(QtWidgets.QWidget)">
            <summary>
            <para>Updates the relevant status bar for the widget specified by
            sending a QStatusTipEvent to its parent widget. Returns true if an event
            was sent; otherwise returns false.</para>
            <para>If a null widget is specified, the event is sent to the action's
            parent.</para>
            <para>See also statusTip.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAction.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAction.Trigger">
            <summary>
            <para>This is a convenience slot that calls activate(Trigger).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAction.Hover">
            <summary>
            <para>This is a convenience slot that calls activate(Hover).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAction.Toggle">
            <summary>
            <para>This is a convenience function for the checked property. Connect
            to it to change the checked state to its opposite state.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAction.SetDisabled(System.Boolean)">
            <summary>
            <para>This is a convenience function for the enabled property, that is
            useful for signals--slots connections. If b is true the action is disabled;
            otherwise it is enabled.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAction.Changed">
            <summary>
            <para>This property holds the action's tooltip.</para>
            <para>This text is used for the tooltip. If no tooltip is specified, the action's text is used.</para>
            <para>By default, this property contains the action's text.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	toolTip() const</para>
            <para> void 	setToolTip(const QString &amp; tip)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	changed()</para>
            <para></para>
            <para>See also setStatusTip() and setShortcut().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAction.Triggered">
            <summary>
            <para>This signal is emitted when an action is activated by the user; for example, when the user clicks a menu option, toolbar button, or presses an action's shortcut key combination, or when trigger() was called. Notably, it is not emitted when setChecked() or toggle() is called.</para>
            <para>If the action is checkable, checked is true if the action is checked, or false if the action is unchecked.</para>
            <para>See also QAction::activate(), QAction::toggled(), and checked.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAction.Hovered">
            <summary>
            <para>This signal is emitted when an action is highlighted by the user; for example, when the user pauses with the cursor over a menu option, toolbar button, or presses an action's shortcut key combination.</para>
            <para>See also QAction::activate().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAction.Toggled">
            <summary>
            <para>This property holds whether the action is checked.</para>
            <para>Only checkable actions can be checked. By default, this is false (the action is unchecked).</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isChecked() const</para>
            <para> void 	setChecked(bool)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	toggled(bool checked)</para>
            <para></para>
            <para>See also checkable.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.ActionGroup">
            <summary>
            <para>Returns the action group for this action. If no action group
            manages this action then 0 will be returned.</para>
            <para>See also QActionGroup and QAction::setActionGroup().</para>
            <para></para>
            <para>Sets this action group to group. The action will be automatically
            added to the group's list of actions.</para>
            <para>Actions within the group will be mutually exclusive.</para>
            <para>See also QActionGroup and QAction::actionGroup().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.Icon">
            <summary>
            <para>This property holds the action's icon.</para>
            <para>In toolbars, the icon is used as the tool button icon; in menus,
            it is displayed to the left of the menu text. There is no default
            icon.</para>
            <para>If a null icon (QIcon::isNull() is passed into this function, the
            icon of the action is cleared.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.Text">
            <summary>
            <para>This property holds the action's descriptive text.</para>
            <para>If the action is added to a menu, the menu option will consist of
            the icon (if there is one), the text, and the shortcut (if there is one).
            If the text is not explicitly set in the constructor, or by using
            setText(), the action's description icon text will be used as text. There
            is no default text.</para>
            <para>See also iconText.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.IconText">
            <summary>
            <para>This property holds the action's descriptive icon text.</para>
            <para>If QToolBar::toolButtonStyle is set to a value that permits text
            to be displayed, the text defined held in this property appears as a label
            in the relevant tool button.</para>
            <para>It also serves as the default text in menus and tooltips if the
            action has not been defined with setText() or setToolTip(), and will also
            be used in toolbar buttons if no icon has been defined using
            setIcon().</para>
            <para>If the icon text is not explicitly set, the action's normal text
            will be used for the icon text.</para>
            <para>By default, this property contains an empty string.</para>
            <para>See also setToolTip() and setStatusTip().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.ToolTip">
            <summary>
            <para>This property holds the action's tooltip.</para>
            <para>This text is used for the tooltip. If no tooltip is specified,
            the action's text is used.</para>
            <para>By default, this property contains the action's text.</para>
            <para>See also setStatusTip() and setShortcut().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.StatusTip">
            <summary>
            <para>This property holds the action's status tip.</para>
            <para>The status tip is displayed on all status bars provided by the
            action's top-level parent widget.</para>
            <para>By default, this property contains an empty string.</para>
            <para>See also setToolTip() and showStatusText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.WhatsThis">
            <summary>
            <para>This property holds the action's &quot;What's This?&quot; help
            text.</para>
            <para>The &quot;What's This?&quot; text is used to provide a brief
            description of the action. The text may contain rich text. There is no
            default &quot;What's This?&quot; text.</para>
            <para>See also QWhatsThis.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.priority">
            <summary>
            <para>This property holds the actions's priority in the user
            interface.</para>
            <para>This property can be set to indicate how the action should be
            prioritized in the user interface.</para>
            <para>For instance, when toolbars have the Qt::ToolButtonTextBesideIcon
            mode set, then actions with LowPriority will not show the text
            labels.</para>
            <para>This property was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.Menu">
            <summary>
            <para>Returns the menu contained by this action. Actions that contain
            menus can be used to create menu items with submenus, or inserted into
            toolbars to create buttons with popup menus.</para>
            <para>See also setMenu() and QMenu::addAction().</para>
            <para></para>
            <para>Sets the menu contained by this action to the specified
            menu.</para>
            <para>See also menu().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.Separator">
            <summary>
            <para>Returns true if this action is a separator action; otherwise it
            returns false.</para>
            <para>See also QAction::setSeparator().</para>
            <para></para>
            <para>If b is true then this action will be considered a
            separator.</para>
            <para>How a separator is represented depends on the widget it is
            inserted into. Under most circumstances the text, submenu, and icon will be
            ignored for separator actions.</para>
            <para>See also QAction::isSeparator().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.Shortcut">
            <summary>
            <para>This property holds the action's primary shortcut key.</para>
            <para>Valid keycodes for this property can be found in Qt::Key and
            Qt::Modifier. There is no default shortcut key.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.ShortcutContext">
            <summary>
            <para>This property holds the context for the action's shortcut.</para>
            <para>Valid values for this property can be found in
            Qt::ShortcutContext. The default value is Qt::WindowShortcut.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.AutoRepeat">
            <summary>
            <para>This property holds whether the action can auto repeat.</para>
            <para>If true, the action will auto repeat when the keyboard shortcut
            combination is held down, provided that keyboard auto repeat is enabled on
            the system. The default value is true.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.Font">
            <summary>
            <para>This property holds the action's font.</para>
            <para>The font property is used to render the text set on the QAction.
            The font will can be considered a hint as it will not be consulted in all
            cases based upon application and style.</para>
            <para>By default, this property contains the application's default
            font.</para>
            <para>See also QAction::setText() and QStyle.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.Checkable">
            <summary>
            <para>This property holds whether the action is a checkable
            action.</para>
            <para>A checkable action is one which has an on/off state. For example,
            in a word processor, a Bold toolbar button may be either on or off. An
            action which is not a toggle action is a command action; a command action
            is simply executed, e.g. file save. By default, this property is
            false.</para>
            <para>In some situations, the state of one toggle action should depend
            on the state of others. For example, &quot;Left Align&quot;,
            &quot;Center&quot; and &quot;Right Align&quot; toggle actions are mutually
            exclusive. To achieve exclusive toggling, add the relevant toggle actions
            to a QActionGroup with the QActionGroup::exclusive property set to
            true.</para>
            <para>See also QAction::setChecked().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.Data">
            <summary>
            <para>Returns the user data as set in QAction::setData.</para>
            <para>See also setData().</para>
            <para></para>
            <para>Sets the action's internal data to the given userData.</para>
            <para>See also data().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.menuRole">
            <summary>
            <para>This property holds the action's menu role.</para>
            <para>This indicates what role the action serves in the application
            menu on Mac OS X. By default all action have the TextHeuristicRole, which
            means that the action is added based on its text (see QMenuBar for more
            information).</para>
            <para>The menu role can only be changed before the actions are put into
            the menu bar in OS X (usually just before the first application window is
            shown).</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.IconVisibleInMenu">
            <summary>
            <para>This property holds whether or not an action should show an icon
            in a menu.</para>
            <para>In some applications, it may make sense to have actions with
            icons in the toolbar, but not in menus. If true, the icon (if valid) is
            shown in the menu, when it is false, it is not shown.</para>
            <para>The default is to follow whether the Qt::AA_DontShowIconsInMenus
            attribute is set for the application. Explicitly settings this property
            overrides the presence (or abscence) of the attribute.</para>
            <para>For example:</para>
            <para>QApplication app(argc, argv);</para>
            <para>app.setAttribute(Qt::AA_DontShowIconsInMenus);  // Icons are *no
            longer shown* in menus</para>
            <para>// ...</para>
            <para>QAction *myAction = new QAction();</para>
            <para>// ...</para>
            <para>myAction-&gt;setIcon(SomeIcon);</para>
            <para>myAction-&gt;setIconVisibleInMenu(true);   // Icon *will* be
            shown in menus for *this* action.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also QAction::icon and QApplication::setAttribute().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.Checked">
            <summary>
            <para>This property holds whether the action is checked.</para>
            <para>Only checkable actions can be checked. By default, this is false
            (the action is unchecked).</para>
            <para>See also checkable.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.Enabled">
            <summary>
            <para>This property holds whether the action is enabled.</para>
            <para>Disabled actions cannot be chosen by the user. They do not
            disappear from menus or toolbars, but they are displayed in a way which
            indicates that they are unavailable. For example, they might be displayed
            using only shades of gray.</para>
            <para>What's This? help on disabled actions is still available,
            provided that the QAction::whatsThis property is set.</para>
            <para>An action will be disabled when all widgets to which it is added
            (with QWidget::addAction()) are disabled or not visible. When an action is
            disabled, it is not possible to trigger it through its shortcut.</para>
            <para>By default, this property is true (actions are enabled).</para>
            <para>See also text.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.Visible">
            <summary>
            <para>This property holds whether the action can be seen (e.g. in menus
            and toolbars).</para>
            <para>If visible is true the action can be seen (e.g. in menus and
            toolbars) and chosen by the user; if visible is false the action cannot be
            seen or chosen by the user.</para>
            <para>Actions which are not visible are not grayed out; they do not
            appear at all.</para>
            <para>By default, this property is true (actions are visible).</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAction.ParentWidget">
            <summary>
            <para>Returns the parent widget.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QAction.MenuRole">
            <summary>
            <para>This enum describes how an action should be moved into the
            application menu on OS X.</para>
            <para>Setting this value only has effect on items that are in the
            immediate menus of the menubar, not the submenus of those menus. For
            example, if you have File menu in your menubar and the File menu has a
            submenu, setting the MenuRole for the actions in that submenu have no
            effect. They will never be moved.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QAction.MenuRole.NoRole">
            <summary>This action should not be put into the application menu</summary>
        </member>
        <member name="F:QtWidgets.QAction.MenuRole.TextHeuristicRole">
            <summary>This action should be put in the application menu based on the action's text as described in the QMenuBar documentation.</summary>
        </member>
        <member name="F:QtWidgets.QAction.MenuRole.ApplicationSpecificRole">
            <summary>This action should be put in the application menu with an application specific role</summary>
        </member>
        <member name="F:QtWidgets.QAction.MenuRole.AboutQtRole">
            <summary>This action matches handles the "About Qt" menu item.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:QtWidgets.QAction.MenuRole.AboutRole" -->
        <member name="F:QtWidgets.QAction.MenuRole.PreferencesRole">
            <summary>This action should be placed where the "Preferences..." menu item is in the application menu.</summary>
        </member>
        <member name="F:QtWidgets.QAction.MenuRole.QuitRole">
            <summary>This action should be placed where the Quit menu item is in the application menu.</summary>
        </member>
        <member name="T:QtWidgets.QAction.Priority">
            <summary>
            <para>This enum defines priorities for actions in user
            interface.</para>
            <para>This enum was introduced or modified in  Qt 4.6.</para>
            <para>See also priority.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QAction.Priority.LowPriority">
            <summary>The action should not be prioritized in the user interface.</summary>
        </member>
        <member name="F:QtWidgets.QAction.Priority.HighPriority">
            <summary>The action should be prioritized in the user interface.</summary>
        </member>
        <member name="T:QtWidgets.QAction.ActionEvent">
            <summary>
            <para>This enum type is used when calling QAction::activate()</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QAction.ActionEvent.Trigger">
            <summary>this will cause the QAction::triggered() signal to be emitted.</summary>
        </member>
        <member name="F:QtWidgets.QAction.ActionEvent.Hover">
            <summary>this will cause the QAction::hovered() signal to be emitted.</summary>
        </member>
        <member name="T:QtWidgets.QActionGroup">
            <summary>
            <para>The QActionGroup class groups actions together.</para>
            </summary>
            <remarks>
            <para>In some situations it is useful to group QAction objects
            together. For example, if you have a Left Align action, a Right Align
            action, a Justify action, and a Center action, only one of these actions
            should be active at any one time. One simple way of achieving this is to
            group the actions together in an action group.</para>
            <para>Here's a example (from the Menus example):</para>
            <para>    alignmentGroup = new QActionGroup(this);</para>
            <para>    alignmentGroup-&gt;addAction(leftAlignAct);</para>
            <para>    alignmentGroup-&gt;addAction(rightAlignAct);</para>
            <para>    alignmentGroup-&gt;addAction(justifyAct);</para>
            <para>    alignmentGroup-&gt;addAction(centerAct);</para>
            <para>    leftAlignAct-&gt;setChecked(true);</para>
            <para>Here we create a new action group. Since the action group is
            exclusive by default, only one of the actions in the group is checked at
            any one time.</para>
            <para></para>
            <para>A QActionGroup emits an triggered() signal when one of its
            actions is chosen. Each action in an action group emits its triggered()
            signal as usual.</para>
            <para>As stated above, an action group is exclusive by default; it
            ensures that only one checkable action is active at any one time. If you
            want to group checkable actions without making them exclusive, you can turn
            of exclusiveness by calling setExclusive(false).</para>
            <para>Actions can be added to an action group using addAction(), but it
            is usually more convenient to specify a group when creating actions; this
            ensures that actions are automatically created with a parent. Actions can
            be visually separated from each other by adding a separator action to the
            group; create an action and use QAction's setSeparator() function to make
            it considered a separator. Action groups are added to widgets with the
            QWidget::addActions() function.</para>
            <para></para>
            <para>See also QAction.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QActionGroup.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an action group for the parent object.</para>
            <para>The action group is exclusive by default. Call
            setExclusive(false) to make the action group non-exclusive.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QActionGroup.AddAction(QtWidgets.QAction)">
            <summary>
            <para>Adds the action to this group, and returns it.</para>
            <para>Normally an action is added to a group by creating it with the
            group as its parent, so this function is not usually used.</para>
            <para>See also QAction::setActionGroup().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QActionGroup.AddAction(System.String)">
            <summary>
            <para>Creates and returns an action with text. The newly created action
            is a child of this action group.</para>
            <para>Normally an action is added to a group by creating it with the
            group as parent, so this function is not usually used.</para>
            <para>See also QAction::setActionGroup().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QActionGroup.AddAction(QtGui.QIcon,System.String)">
            <summary>
            <para>Creates and returns an action with text and an icon. The newly
            created action is a child of this action group.</para>
            <para>Normally an action is added to a group by creating it with the
            group as its parent, so this function is not usually used.</para>
            <para>See also QAction::setActionGroup().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QActionGroup.RemoveAction(QtWidgets.QAction)">
            <summary>
            <para>Removes the action from this group. The action will have no
            parent as a result.</para>
            <para>See also QAction::setActionGroup().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QActionGroup.SetDisabled(System.Boolean)">
            <summary>
            <para>This is a convenience function for the enabled property, that is
            useful for signals--slots connections. If b is true the action group is
            disabled; otherwise it is enabled.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QActionGroup.Triggered">
            <summary>
            <para>This signal is emitted when the given action in the action group is activated by the user; for example, when the user clicks a menu option, toolbar button, or presses an action's shortcut key combination.</para>
            <para>Connect to this signal for command actions.</para>
            <para>See also QAction::activate().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QActionGroup.Hovered">
            <summary>
            <para>This signal is emitted when the given action in the action group is highlighted by the user; for example, when the user pauses with the cursor over a menu option, toolbar button, or presses an action's shortcut key combination.</para>
            <para>See also QAction::activate().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QActionGroup.Enabled">
            <summary>
            <para>This property holds whether the action group is enabled.</para>
            <para>Each action in the group will be enabled or disabled unless it
            has been explicitly disabled.</para>
            <para>See also QAction::setEnabled().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QActionGroup.Visible">
            <summary>
            <para>This property holds whether the action group is visible.</para>
            <para>Each action in the action group will match the visible state of
            this group unless it has been explicitly hidden.</para>
            <para>See also QAction::setEnabled().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QActionGroup.Exclusive">
            <summary>
            <para>This property holds whether the action group does exclusive
            checking.</para>
            <para>If exclusive is true, only one checkable action in the action
            group can ever be active at any time. If the user chooses another checkable
            action in the group, the one they chose becomes active and the one that was
            active becomes inactive.</para>
            <para>See also QAction::checkable.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QActionGroup.CheckedAction">
            <summary>
            <para>Returns the currently checked action in the group, or 0 if none
            are checked.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QApplication">
            <summary>
            <para>The QApplication class manages the GUI application's control flow
            and main settings.</para>
            </summary>
            <remarks>
            <para>QApplication specializes QGuiApplication with some functionality
            needed for QWidget-based applications. It handles widget specific
            initialization, finalization.</para>
            <para>For any GUI application using Qt, there is precisely one
            QApplication object, no matter whether the application has 0, 1, 2 or more
            windows at any given time. For non-QWidget based Qt applications, use
            QGuiApplication instead, as it does not depend on the QtWidgets
            library.</para>
            <para>Some GUI applications provide a special batch mode ie. provide
            command line arguments for executing tasks without manual intervention. In
            such non-GUI mode, it is often sufficient to instantiate a plain
            QCoreApplication to avoid unnecessarily initializing resources needed for a
            graphical user interface. The following example shows how to dynamically
            create an appropriate type of application instance:</para>
            <para>QCoreApplication* createApplication(int &amp;argc, char
            *argv[])</para>
            <para>{</para>
            <para>    for (int i = 1; i &lt; argc; ++i)</para>
            <para>        if (!qstrcmp(argv[i], &quot;-no-gui&quot;))</para>
            <para>            return new QCoreApplication(argc, argv);</para>
            <para>    return new QApplication(argc, argv);</para>
            <para>}</para>
            <para></para>
            <para>int main(int argc, char* argv[])</para>
            <para>{</para>
            <para>    QScopedPointer&lt;QCoreApplication&gt;
            app(createApplication(argc, argv));</para>
            <para></para>
            <para>    if (qobject_cast&lt;QApplication *&gt;(app.data())) {</para>
            <para>       // start GUI version...</para>
            <para>    } else {</para>
            <para>       // start non-GUI version...</para>
            <para>    }</para>
            <para></para>
            <para>    return app-&gt;exec();</para>
            <para>}</para>
            <para>The QApplication object is accessible through the instance()
            function that returns a pointer equivalent to the global qApp
            pointer.</para>
            <para>QApplication's main areas of responsibility are:</para>
            <para></para>
            <para>It initializes the application with the user's desktop settings
            such as palette(), font() and doubleClickInterval(). It keeps track of
            these properties in case the user changes the desktop globally, for example
            through some kind of control panel.</para>
            <para>It performs event handling, meaning that it receives events from
            the underlying window system and dispatches them to the relevant widgets.
            By using sendEvent() and postEvent() you can send your own events to
            widgets.</para>
            <para>It parses common command line arguments and sets its internal
            state accordingly. See the constructor documentation below for more
            details.</para>
            <para>It defines the application's look and feel, which is encapsulated
            in a QStyle object. This can be changed at runtime with setStyle().</para>
            <para>It specifies how the application is to allocate colors. See
            setColorSpec() for details.</para>
            <para>It provides localization of strings that are visible to the user
            via translate().</para>
            <para>It provides some magical objects like the desktop() and the
            clipboard().</para>
            <para>It knows about the application's windows. You can ask which
            widget is at a certain position using widgetAt(), get a list of
            topLevelWidgets() and closeAllWindows(), etc.</para>
            <para>It manages the application's mouse cursor handling, see
            setOverrideCursor()</para>
            <para></para>
            <para>Since the QApplication object does so much initialization, it
            must be created before any other objects related to the user interface are
            created. QApplication also deals with common command line arguments. Hence,
            it is usually a good idea to create it before any interpretation or
            modification of argv is done in the application itself.</para>
            <para></para>
            <para> Groups of functions</para>
            <para>System settings	desktopSettingsAware(),
            setDesktopSettingsAware(), cursorFlashTime(), setCursorFlashTime(),
            doubleClickInterval(), setDoubleClickInterval(),
            setKeyboardInputInterval(), wheelScrollLines(), setWheelScrollLines(),
            palette(), setPalette(), font(), setFont(), fontMetrics().</para>
            <para>Event handling	exec(), processEvents(), exit(), quit().
            sendEvent(), postEvent(), sendPostedEvents(), removePostedEvents(),
            hasPendingEvents(), notify().</para>
            <para>GUI Styles	style(), setStyle().</para>
            <para>Color usage	colorSpec(), setColorSpec().</para>
            <para>Text handling	installTranslator(), removeTranslator()
            translate().</para>
            <para>Widgets	allWidgets(), topLevelWidgets(), desktop(),
            activePopupWidget(), activeModalWidget(), clipboard(), focusWidget(),
            activeWindow(), widgetAt().</para>
            <para>Advanced cursor handling	overrideCursor(), setOverrideCursor(),
            restoreOverrideCursor().</para>
            <para>Miscellaneous	closeAllWindows(), startingUp(), closingDown(),
            type().</para>
            <para></para>
            <para></para>
            <para>See also QCoreApplication, QAbstractEventDispatcher, QEventLoop,
            and QSettings.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QApplication.#ctor(System.Int32@,System.Char**,System.Int32)">
            <summary>
            <para>Initializes the window system and constructs an application
            object with argc command line arguments in argv.</para>
            <para>Warning: The data referred to by argc and argv must stay valid
            for the entire lifetime of the QApplication object. In addition, argc must
            be greater than zero and argv must contain at least one valid character
            string.</para>
            <para>The global qApp pointer refers to this application object. Only
            one application object should be created.</para>
            <para>This application object must be constructed before any paint
            devices (including widgets, pixmaps, bitmaps etc.).</para>
            <para>Note: argc and argv might be changed as Qt removes command line
            arguments that it recognizes.</para>
            <para>All Qt programs automatically support the following command line
            options:</para>
            <para></para>
            <para>-style= style, sets the application GUI style. Possible values
            depend on your system configuration. If you compiled Qt with additional
            styles or have additional styles as plugins these will be available to the
            -style command line option. You can also set the style for all Qt
            applications by setting the QT_STYLE_OVERRIDE environment variable.</para>
            <para>-style style, is the same as listed above.</para>
            <para>-stylesheet= stylesheet, sets the application styleSheet. The
            value must be a path to a file that contains the Style Sheet.Note: Relative
            URLs in the Style Sheet file are relative to the Style Sheet file's
            path.</para>
            <para>-stylesheet stylesheet, is the same as listed above.</para>
            <para>-widgetcount, prints debug message at the end about number of
            widgets left undestroyed and maximum number of widgets existed at the same
            time</para>
            <para>-reverse, sets the application's layout direction to
            Qt::RightToLeft</para>
            <para>-qmljsdebugger=, activates the QML/JS debugger with a specified
            port. The value must be of format port:1234[,block], where block is
            optional and will make the application wait until a debugger connects to
            it.</para>
            <para></para>
            <para>See also arguments().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.Notify(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QCoreApplication::notify().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.SetStyle(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Requests a QStyle object for style from the QStyleFactory.</para>
            <para>The string must be one of the QStyleFactory::keys(), typically
            one of &quot;windows&quot;, &quot;fusion&quot;, &quot;windowsxp&quot;, or
            &quot;macintosh&quot;. Style names are case insensitive.</para>
            <para>Returns 0 if an unknown style is passed, otherwise the QStyle
            object returned is set as the application's GUI style.</para>
            <para>Warning: To ensure that the application's style is set correctly,
            it is best to call this function before the QApplication constructor, if
            possible.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.palette(QtWidgets.QWidget)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>If a widget is passed, the default palette for the widget's class
            is returned. This may or may not be the application palette. In most cases
            there is no special palette for certain types of widgets, but one notable
            exception is the popup menu under Windows, if the user has defined a
            special background color for menus in the display settings.</para>
            <para>See also setPalette() and QWidget::palette().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.palette(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the palette for widgets of the given className.</para>
            <para>See also setPalette() and QWidget::palette().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.SetPalette(QtGui.QPalette,System.String)">
            <summary>
            <para>Changes the default application palette to palette.</para>
            <para>If className is passed, the change applies only to widgets that
            inherit className (as reported by QObject::inherits()). If className is
            left 0, the change affects all widgets, thus overriding any previously set
            class specific palettes.</para>
            <para>The palette may be changed according to the current GUI style in
            QStyle::polish().</para>
            <para>Warning: Do not use this function in conjunction with Qt Style
            Sheets. When using style sheets, the palette of a widget can be customized
            using the &quot;color&quot;, &quot;background-color&quot;,
            &quot;selection-color&quot;, &quot;selection-background-color&quot; and
            &quot;alternate-background-color&quot;.</para>
            <para>Note: Some styles do not use the palette for all drawing, for
            instance, if they make use of native theme engines. This is the case for
            the Windows XP, Windows Vista, and Mac OS X styles.</para>
            <para>See also QWidget::setPalette(), palette(), and
            QStyle::polish().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.GetFont(QtWidgets.QWidget)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the default font for the widget.</para>
            <para>See also fontMetrics() and QWidget::setFont().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.GetFont(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the font for widgets of the given className.</para>
            <para>See also setFont() and QWidget::font().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.SetFont(QtGui.QFont,System.String)">
            <summary>
            <para>Changes the default application font to font. If className is
            passed, the change applies only to classes that inherit className (as
            reported by QObject::inherits()).</para>
            <para>On application start-up, the default font depends on the window
            system. It can vary depending on both the window system version and the
            locale. This function lets you override the default font; but overriding
            may be a bad idea because, for example, some locales need extra large fonts
            to support their special characters.</para>
            <para>Warning: Do not use this function in conjunction with Qt Style
            Sheets. The font of an application can be customized using the
            &quot;font&quot; style sheet property. To set a bold font for all
            QPushButtons, set the application styleSheet() as &quot;QPushButton { font:
            bold }&quot;</para>
            <para>See also font(), fontMetrics(), and QWidget::setFont().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.FocusWidget">
            <summary>
            <para>Returns the application widget that has the keyboard input focus,
            or 0 if no widget in this application has the focus.</para>
            <para>See also QWidget::setFocus(), QWidget::hasFocus(),
            activeWindow(), and focusChanged().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.WidgetAt(QtCore.QPoint)">
            <summary>
            <para>Returns the widget at global screen position point, or 0 if there
            is no Qt widget there.</para>
            <para>This function can be slow.</para>
            <para>See also QCursor::pos(), QWidget::grabMouse(), and
            QWidget::grabKeyboard().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.WidgetAt(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the widget at global screen position (x, y), or 0 if
            there is no Qt widget there.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.TopLevelAt(QtCore.QPoint)">
            <summary>
            <para>Returns the top-level widget at the given point; returns 0 if
            there is no such widget.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.TopLevelAt(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the top-level widget at the point (x, y); returns 0 if
            there is no such widget.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.Beep">
            <summary>
            <para>Sounds the bell, using the default volume and sound. The function
            is not available in Qt for Embedded Linux.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.Alert(QtWidgets.QWidget,System.Int32)">
            <summary>
            <para>Causes an alert to be shown for widget if the window is not the
            active window. The alert is shown for msec miliseconds. If msec is zero
            (the default), then the alert is shown indefinitely until the window
            becomes active again.</para>
            <para>Currently this function does nothing on Qt for Embedded
            Linux.</para>
            <para>On Mac OS X, this works more at the application level and will
            cause the application icon to bounce in the dock.</para>
            <para>On Windows, this causes the window's taskbar entry to flash for a
            time. If msec is zero, the flashing will stop and the taskbar entry will
            turn a different color (currently orange).</para>
            <para>On X11, this will cause the window to be marked as &quot;demands
            attention&quot;, the window must not be hidden (i.e. not have hide() called
            on it, but be visible in some sort of way) in order for this to
            work.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.IsEffectEnabled(QtCore.Qt.UIEffect)">
            <summary>
            <para>Returns true if effect is enabled; otherwise returns
            false.</para>
            <para>By default, Qt will try to use the desktop settings. To prevent
            this, call setDesktopSettingsAware(false).</para>
            <para>Note: All effects are disabled on screens running at less than
            16-bit color depth.</para>
            <para>See also setEffectEnabled() and Qt::UIEffect.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.SetEffectEnabled(QtCore.Qt.UIEffect,System.Boolean)">
            <summary>
            <para>Enables the UI effect effect if enable is true, otherwise the
            effect will not be used.</para>
            <para>Note: All effects are disabled on screens running at less than
            16-bit color depth.</para>
            <para>See also isEffectEnabled(), Qt::UIEffect, and
            setDesktopSettingsAware().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.Exec">
            <summary>
            <para>Enters the main event loop and waits until exit() is called, then
            returns the value that was set to exit() (which is 0 if exit() is called
            via quit()).</para>
            <para>It is necessary to call this function to start event handling.
            The main event loop receives events from the window system and dispatches
            these to the application widgets.</para>
            <para>Generally, no user interaction can take place before calling
            exec(). As a special case, modal widgets like QMessageBox can be used
            before calling exec(), because modal widgets call exec() to start a local
            event loop.</para>
            <para>To make your application perform idle processing, i.e., executing
            a special function whenever there are no pending events, use a QTimer with
            0 timeout. More advanced idle processing schemes can be achieved using
            processEvents().</para>
            <para>We recommend that you connect clean-up code to the aboutToQuit()
            signal, instead of putting it in your application's main() function. This
            is because, on some platforms the QApplication::exec() call may not return.
            For example, on the Windows platform, when the user logs off, the system
            terminates the process after Qt closes all top-level windows. Hence, there
            is no guarantee that the application will have time to exit its event loop
            and execute code at the end of the main() function, after the
            QApplication::exec() call.</para>
            <para>See also quitOnLastWindowClosed, quit(), exit(), processEvents(),
            and QCoreApplication::exec().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.CloseAllWindows">
            <summary>
            <para>Closes all top-level windows.</para>
            <para>This function is particularly useful for applications with many
            top-level windows. It could, for example, be connected to a Exit entry in
            the File menu:</para>
            <para>    exitAct = new QAction(tr(&quot;E&amp;xit&quot;),
            this);</para>
            <para>    exitAct-&gt;setShortcuts(QKeySequence::Quit);</para>
            <para>    exitAct-&gt;setStatusTip(tr(&quot;Exit the
            application&quot;));</para>
            <para>    connect(exitAct, SIGNAL(triggered()), qApp,
            SLOT(closeAllWindows()));</para>
            <para>The windows are closed in random order, until one window does not
            accept the close event. The application quits when the last window was
            successfully closed; this can be turned off by setting
            quitOnLastWindowClosed to false.</para>
            <para>See also quitOnLastWindowClosed, lastWindowClosed(),
            QWidget::close(), QWidget::closeEvent(), lastWindowClosed(), quit(),
            topLevelWidgets(), and QWidget::isWindow().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QApplication.AboutQt">
            <summary>
            <para>Displays a simple message box about Qt. The message includes the
            version number of Qt being used by the application.</para>
            <para>This is useful for inclusion in the Help menu of an application,
            as shown in the Menus example.</para>
            <para>This function is a convenience slot for
            QMessageBox::aboutQt().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QApplication.FocusChanged">
            <summary>
            <para>This signal is emitted when the widget that has keyboard focus changed from old to now, i.e., because the user pressed the tab-key, clicked into a widget or changed the active window. Both old and now can be the null-pointer.</para>
            <para>The signal is emitted after both widget have been notified about the change through QFocusEvent.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also QWidget::setFocus(), QWidget::clearFocus(), and Qt::FocusReason.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:QtWidgets.QApplication.Style" -->
        <member name="P:QtWidgets.QApplication.colorSpec">
            <summary>
            <para>Returns the color specification.</para>
            <para>See also QApplication::setColorSpec().</para>
            <para></para>
            <para>Sets the color specification for the application to spec.</para>
            <para>The color specification controls how the application allocates
            colors when run on a display with a limited amount of colors, e.g. 8 bit /
            256 color displays.</para>
            <para>The color specification must be set before you create the
            QApplication object.</para>
            <para>The options are:</para>
            <para></para>
            <para>QApplication::NormalColor. This is the default color allocation
            strategy. Use this option if your application uses buttons, menus, texts
            and pixmaps with few colors. With this option, the application uses system
            global colors. This works fine for most applications under X11, but on the
            Windows platform, it may cause dithering of non-standard colors.</para>
            <para>QApplication::CustomColor. Use this option if your application
            needs a small number of custom colors. On X11, this option is the same as
            NormalColor. On Windows, Qt creates a Windows palette, and allocates colors
            to it on demand.</para>
            <para>QApplication::ManyColor. Use this option if your application is
            very color hungry, e.g., it requires thousands of colors. </para>
            <para> Under X11 the effect is:</para>
            <para>For 256-color displays which have at best a 256 color true color
            visual, the default visual is used, and colors are allocated from a color
            cube. The color cube is the 6x6x6 (216 color) &quot;Web palette&quot; (the
            red, green, and blue components always have one of the following values:
            0x00, 0x33, 0x66, 0x99, 0xCC, or 0xFF), but the number of colors can be
            changed by the -ncols option. The user can force the application to use the
            true color visual with the -visual option.</para>
            <para>For 256-color displays which have a true color visual with more
            than 256 colors, use that visual. Silicon Graphics X servers this feature,
            for example. They provide an 8 bit visual by default but can deliver true
            color when asked.</para>
            <para></para>
            <para>On Windows, Qt creates a Windows palette, and fills it with a
            color cube.</para>
            <para></para>
            <para></para>
            <para>Be aware that the CustomColor and ManyColor choices may lead to
            colormap flashing: The foreground application gets (most) of the available
            colors, while the background windows will look less attractive.</para>
            <para>Example:</para>
            <para>int main(int argc, char *argv[])</para>
            <para>{</para>
            <para>    QApplication::setColorSpec(QApplication::ManyColor);</para>
            <para>    QApplication app(argc, argv);</para>
            <para>    ...</para>
            <para>    return app.exec();</para>
            <para>}</para>
            <para>See also colorSpec().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QApplication.WindowIcon">
            <summary>
            <para>This property holds the default window icon.</para>
            <para>See also QWidget::setWindowIcon() and Setting the Application
            Icon.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QApplication.ActiveWindow">
            <summary>
            <para>Returns the application top-level window that has the keyboard
            input focus, or 0 if no application window has the focus. There might be an
            activeWindow() even if there is no focusWidget(), for example if no widget
            in that window accepts key events.</para>
            <para>See also setActiveWindow(), QWidget::setFocus(),
            QWidget::hasFocus(), and focusWidget().</para>
            <para></para>
            <para>Sets the active window to the active widget in response to a
            system event. The function is called from the platform specific event
            handlers.</para>
            <para>Warning: This function does not set the keyboard focus to the
            active widget. Call QWidget::activateWindow() instead.</para>
            <para>It sets the activeWindow() and focusWidget() attributes and sends
            proper WindowActivate/WindowDeactivate and FocusIn/FocusOut events to all
            appropriate widgets. The window will then be painted in active state (e.g.
            cursors in line edits will blink), and it will have tool tips
            enabled.</para>
            <para>See also activeWindow() and QWidget::activateWindow().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QApplication.CursorFlashTime">
            <summary>
            <para>This property holds the text cursor's flash (blink) time in
            milliseconds.</para>
            <para>The flash time is the time required to display, invert and
            restore the caret display. Usually the text cursor is displayed for half
            the cursor flash time, then hidden for the same amount of time, but this
            may vary.</para>
            <para>The default value on X11 is 1000 milliseconds. On Windows, the
            Control Panel value is used and setting this property sets the cursor flash
            time for all applications.</para>
            <para>We recommend that widgets do not cache this value as it may
            change at any time if the user changes the global desktop settings.</para>
            <para>Note: This property may hold a negative value, for instance if
            cursor blinking is disabled.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QApplication.DoubleClickInterval">
            <summary>
            <para>This property holds the time limit in milliseconds that
            distinguishes a double click from two consecutive mouse clicks.</para>
            <para>The default value on X11 is 400 milliseconds. On Windows and Mac
            OS, the operating system's value is used.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QApplication.KeyboardInputInterval">
            <summary>
            <para>This property holds the time limit in milliseconds that
            distinguishes a key press from two consecutive key presses.</para>
            <para>The default value on X11 is 400 milliseconds. On Windows and Mac
            OS, the operating system's value is used.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QApplication.WheelScrollLines">
            <summary>
            <para>This property holds the number of lines to scroll a widget, when
            the mouse wheel is rotated.</para>
            <para>If the value exceeds the widget's number of visible lines, the
            widget should interpret the scroll operation as a single page up or page
            down. If the widget is an item view class, then the result of scrolling one
            line depends on the setting of the widget's scroll mode. Scroll one line
            can mean scroll one item or scroll one pixel.</para>
            <para>By default, this property has a value of 3.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QApplication.GlobalStrut">
            <summary>
            <para>This property holds the minimum size that any GUI element that
            the user can interact with should have.</para>
            <para>For example, no button should be resized to be smaller than the
            global strut size. The strut size should be considered when reimplementing
            GUI controls that may be used on touch-screens or similar I/O
            devices.</para>
            <para>Example:</para>
            <para>QSize MyWidget::sizeHint() const</para>
            <para>{</para>
            <para>    return QSize(80,
            25).expandedTo(QApplication::globalStrut());</para>
            <para>}</para>
            <para>By default, this property contains a QSize object with zero width
            and height.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QApplication.StartDragTime">
            <summary>
            <para>This property holds the time in milliseconds that a mouse button
            must be held down before a drag and drop operation will begin.</para>
            <para>If you support drag and drop in your application, and want to
            start a drag and drop operation after the user has held down a mouse button
            for a certain amount of time, you should use this property's value as the
            delay.</para>
            <para>Qt also uses this delay internally, e.g. in QTextEdit and
            QLineEdit, for starting a drag.</para>
            <para>The default value is 500 ms.</para>
            <para>See also startDragDistance() and Drag and Drop.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QApplication.StartDragDistance">
            <summary>
            <para>If you support drag and drop in your application, and want to
            start a drag and drop operation after the user has moved the cursor a
            certain distance with a button held down, you should use this property's
            value as the minimum distance required.</para>
            <para>For example, if the mouse position of the click is stored in
            startPos and the current position (e.g. in the mouse move event) is
            currentPos, you can find out if a drag should be started with code like
            this:</para>
            <para>int main(int argc, char *argv[])</para>
            <para>{</para>
            <para>    QApplication::setDesktopSettingsAware(false);</para>
            <para>    QApplication app(argc, argv);</para>
            <para>    ...</para>
            <para>    return app.exec();</para>
            <para>}</para>
            <para>Qt uses this value internally, e.g. in QFileDialog.</para>
            <para>The default value (if the platform doesn't provide a different
            default) is 10 pixels.</para>
            <para>See also startDragTime(), QPoint::manhattanLength(), and Drag and
            Drop.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QApplication.StyleSheet">
            <summary>
            <para>This property holds the application style sheet.</para>
            <para>By default, this property returns an empty string unless the user
            specifies the -stylesheet option on the command line when running the
            application.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also QWidget::setStyle() and Qt Style Sheets.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QApplication.AutoSipEnabled">
            <summary>
            <para>This property holds toggles automatic SIP (software input panel)
            visibility.</para>
            <para>Set this property to true to automatically display the SIP when
            entering widgets that accept keyboard input. This property only affects
            widgets with the WA_InputMethodEnabled attribute set, and is typically used
            to launch a virtual keyboard on devices which have very few or no
            keys.</para>
            <para> The property only has an effect on platforms which use software
            input panels, such as Windows CE.</para>
            <para>The default is platform dependent.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QApplication.Font">
            <summary>
            <para>Returns the default application font.</para>
            <para>See also setFont(), fontMetrics(), and QWidget::font().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QApplication.FontMetrics">
            <summary>
            <para>Returns display (screen) font metrics for the application
            font.</para>
            <para>See also font(), setFont(), QWidget::fontMetrics(), and
            QPainter::fontMetrics().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QApplication.Desktop">
            <summary>
            <para>Returns the desktop widget (also called the root window).</para>
            <para>The desktop may be composed of multiple screens, so it would be
            incorrect, for example, to attempt to center some widget in the desktop's
            geometry. QDesktopWidget has various functions for obtaining useful
            geometries upon the desktop, such as QDesktopWidget::screenGeometry() and
            QDesktopWidget::availableGeometry().</para>
            <para>On X11, it is also possible to draw on the desktop.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QApplication.ActivePopupWidget">
            <summary>
            <para>Returns the active popup widget.</para>
            <para>A popup widget is a special top-level widget that sets the
            Qt::WType_Popup widget flag, e.g. the QMenu widget. When the application
            opens a popup widget, all events are sent to the popup. Normal widgets and
            modal widgets cannot be accessed before the popup widget is closed.</para>
            <para>Only other popup widgets may be opened when a popup widget is
            shown. The popup widgets are organized in a stack. This function returns
            the active popup widget at the top of the stack.</para>
            <para>See also activeModalWidget() and topLevelWidgets().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QApplication.ActiveModalWidget">
            <summary>
            <para>Returns the active modal widget.</para>
            <para>A modal widget is a special top-level widget which is a subclass
            of QDialog that specifies the modal parameter of the constructor as true. A
            modal widget must be closed before the user can continue with other parts
            of the program.</para>
            <para>Modal widgets are organized in a stack. This function returns the
            active modal widget at the top of the stack.</para>
            <para>See also activePopupWidget() and topLevelWidgets().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QApplication.ColorSpec">
            <summary>
            <para>See setColorSpec() for full details.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QApplication.ColorSpec.NormalColor">
            <summary>the default color allocation policy</summary>
        </member>
        <member name="F:QtWidgets.QApplication.ColorSpec.CustomColor">
            <summary>the same as NormalColor for X11; allocates colors to a palette on demand under Windows</summary>
        </member>
        <member name="F:QtWidgets.QApplication.ColorSpec.ManyColor">
            <summary>the right choice for applications that use thousands of colors</summary>
        </member>
        <member name="T:QtWidgets.QLayoutItem">
            <summary>
            <para>The QLayoutItem class provides an abstract item that a QLayout
            manipulates.</para>
            </summary>
            <remarks>
            <para>This is used by custom layouts.</para>
            <para>Pure virtual functions are provided to return information about
            the layout, including, sizeHint(), minimumSize(), maximumSize() and
            expanding().</para>
            <para>The layout's geometry can be set and retrieved with setGeometry()
            and geometry(), and its alignment with setAlignment() and
            alignment().</para>
            <para>isEmpty() returns whether the layout item is empty. If the
            concrete item is a QWidget, it can be retrieved using widget(). Similarly
            for layout() and spacerItem().</para>
            <para>Some layouts have width and height interdependencies. These can
            be expressed using hasHeightForWidth(), heightForWidth(), and
            minimumHeightForWidth(). For more explanation see the Qt Quarterly article
            Trading Height for Width.</para>
            <para></para>
            <para>See also QLayout.</para>
            </remarks>
        </member>
        <member name="T:QtWidgets.IQLayoutItem">
            <summary>
            <para>The QLayoutItem class provides an abstract item that a QLayout
            manipulates.</para>
            </summary>
            <remarks>
            <para>This is used by custom layouts.</para>
            <para>Pure virtual functions are provided to return information about
            the layout, including, sizeHint(), minimumSize(), maximumSize() and
            expanding().</para>
            <para>The layout's geometry can be set and retrieved with setGeometry()
            and geometry(), and its alignment with setAlignment() and
            alignment().</para>
            <para>isEmpty() returns whether the layout item is empty. If the
            concrete item is a QWidget, it can be retrieved using widget(). Similarly
            for layout() and spacerItem().</para>
            <para>Some layouts have width and height interdependencies. These can
            be expressed using hasHeightForWidth(), heightForWidth(), and
            minimumHeightForWidth(). For more explanation see the Qt Quarterly article
            Trading Height for Width.</para>
            <para></para>
            <para>See also QLayout.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.IQLayoutItem.HeightForWidth(System.Int32)">
            <summary>
            <para>Returns the preferred height for this layout item, given the
            width w.</para>
            <para>The default implementation returns -1, indicating that the
            preferred height is independent of the width of the item. Using the
            function hasHeightForWidth() will typically be much faster than calling
            this function and testing for -1.</para>
            <para>Reimplement this function in layout managers that support height
            for width. A typical implementation will look like this:</para>
            <para>int MyLayout::heightForWidth(int w) const</para>
            <para>{</para>
            <para>    if (cache_dirty || cached_width != w) {</para>
            <para>        // not all C++ compilers support
            &quot;mutable&quot;</para>
            <para>        MyLayout *that = (MyLayout*)this;</para>
            <para>        int h = calculateHeightForWidth(w);</para>
            <para>        that-&gt;cached_hfw = h;</para>
            <para>        return h;</para>
            <para>    }</para>
            <para>    return cached_hfw;</para>
            <para>}</para>
            <para>Caching is strongly recommended; without it layout will take
            exponential time.</para>
            <para>See also hasHeightForWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQLayoutItem.MinimumHeightForWidth(System.Int32)">
            <summary>
            <para>Returns the minimum height this widget needs for the given width,
            w. The default implementation simply returns heightForWidth(w).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.IQLayoutItem.Invalidate">
            <summary>
            <para>Invalidates any cached information in this layout item.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQLayoutItem.Geometry">
            <summary>
            <para>Returns the rectangle covered by this layout item.</para>
            <para>See also setGeometry().</para>
            <para></para>
            <para>Implemented in subclasses to set this item's geometry to
            r.</para>
            <para>See also geometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQLayoutItem.Alignment">
            <summary>
            <para>Returns the alignment of this item.</para>
            <para>See also setAlignment().</para>
            <para></para>
            <para>Sets the alignment of this item to alignment.</para>
            <para>Note: Item alignment is only supported by QLayoutItem subclasses
            where it would have a visual effect. Except for QSpacerItem, which provides
            blank space for layouts, all public Qt classes that inherit QLayoutItem
            support item alignment.</para>
            <para>See also alignment().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQLayoutItem.SizeHint">
            <summary>
            <para>Implemented in subclasses to return the preferred size of this
            item.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQLayoutItem.MinimumSize">
            <summary>
            <para>Implemented in subclasses to return the minimum size of this
            item.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQLayoutItem.MaximumSize">
            <summary>
            <para>Implemented in subclasses to return the maximum size of this
            item.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQLayoutItem.ExpandingDirections">
            <summary>
            <para>Returns whether this layout item can make use of more space than
            sizeHint(). A value of Qt::Vertical or Qt::Horizontal means that it wants
            to grow in only one dimension, whereas Qt::Vertical | Qt::Horizontal means
            that it wants to grow in both dimensions.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQLayoutItem.IsEmpty">
            <summary>
            <para>Implemented in subclasses to return whether this item is empty,
            i.e. whether it contains any widgets.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQLayoutItem.HasHeightForWidth">
            <summary>
            <para>Returns true if this layout's preferred height depends on its
            width; otherwise returns false. The default implementation returns
            false.</para>
            <para>Reimplement this function in layout managers that support height
            for width.</para>
            <para>See also heightForWidth() and QWidget::heightForWidth().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQLayoutItem.Widget">
            <summary>
            <para>If this item is a QWidget, it is returned as a QWidget; otherwise
            0 is returned. This function provides type-safe casting.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQLayoutItem.Layout">
            <summary>
            <para>If this item is a QLayout, it is returned as a QLayout; otherwise
            0 is returned. This function provides type-safe casting.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQLayoutItem.SpacerItem">
            <summary>
            <para>If this item is a QSpacerItem, it is returned as a QSpacerItem;
            otherwise 0 is returned. This function provides type-safe casting.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.IQLayoutItem.ControlTypes">
            <summary>
            <para>Returns the control type(s) for the layout item. For a
            QWidgetItem, the control type comes from the widget's size policy; for a
            QLayoutItem, the control types is derived from the layout's
            contents.</para>
            <para>See also QSizePolicy::controlType().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayoutItem.#ctor(QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>Constructs a layout item with an alignment. Not all subclasses
            support alignment.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayoutItem.HeightForWidth(System.Int32)">
            <summary>
            <para>Returns the preferred height for this layout item, given the
            width w.</para>
            <para>The default implementation returns -1, indicating that the
            preferred height is independent of the width of the item. Using the
            function hasHeightForWidth() will typically be much faster than calling
            this function and testing for -1.</para>
            <para>Reimplement this function in layout managers that support height
            for width. A typical implementation will look like this:</para>
            <para>int MyLayout::heightForWidth(int w) const</para>
            <para>{</para>
            <para>    if (cache_dirty || cached_width != w) {</para>
            <para>        // not all C++ compilers support
            &quot;mutable&quot;</para>
            <para>        MyLayout *that = (MyLayout*)this;</para>
            <para>        int h = calculateHeightForWidth(w);</para>
            <para>        that-&gt;cached_hfw = h;</para>
            <para>        return h;</para>
            <para>    }</para>
            <para>    return cached_hfw;</para>
            <para>}</para>
            <para>Caching is strongly recommended; without it layout will take
            exponential time.</para>
            <para>See also hasHeightForWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayoutItem.MinimumHeightForWidth(System.Int32)">
            <summary>
            <para>Returns the minimum height this widget needs for the given width,
            w. The default implementation simply returns heightForWidth(w).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayoutItem.Invalidate">
            <summary>
            <para>Invalidates any cached information in this layout item.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayoutItem.Geometry">
            <summary>
            <para>Returns the rectangle covered by this layout item.</para>
            <para>See also setGeometry().</para>
            <para></para>
            <para>Implemented in subclasses to set this item's geometry to
            r.</para>
            <para>See also geometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayoutItem.Alignment">
            <summary>
            <para>Returns the alignment of this item.</para>
            <para>See also setAlignment().</para>
            <para></para>
            <para>Sets the alignment of this item to alignment.</para>
            <para>Note: Item alignment is only supported by QLayoutItem subclasses
            where it would have a visual effect. Except for QSpacerItem, which provides
            blank space for layouts, all public Qt classes that inherit QLayoutItem
            support item alignment.</para>
            <para>See also alignment().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayoutItem.SizeHint">
            <summary>
            <para>Implemented in subclasses to return the preferred size of this
            item.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayoutItem.MinimumSize">
            <summary>
            <para>Implemented in subclasses to return the minimum size of this
            item.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayoutItem.MaximumSize">
            <summary>
            <para>Implemented in subclasses to return the maximum size of this
            item.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayoutItem.ExpandingDirections">
            <summary>
            <para>Returns whether this layout item can make use of more space than
            sizeHint(). A value of Qt::Vertical or Qt::Horizontal means that it wants
            to grow in only one dimension, whereas Qt::Vertical | Qt::Horizontal means
            that it wants to grow in both dimensions.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayoutItem.IsEmpty">
            <summary>
            <para>Implemented in subclasses to return whether this item is empty,
            i.e. whether it contains any widgets.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayoutItem.HasHeightForWidth">
            <summary>
            <para>Returns true if this layout's preferred height depends on its
            width; otherwise returns false. The default implementation returns
            false.</para>
            <para>Reimplement this function in layout managers that support height
            for width.</para>
            <para>See also heightForWidth() and QWidget::heightForWidth().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayoutItem.Widget">
            <summary>
            <para>If this item is a QWidget, it is returned as a QWidget; otherwise
            0 is returned. This function provides type-safe casting.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayoutItem.Layout">
            <summary>
            <para>If this item is a QLayout, it is returned as a QLayout; otherwise
            0 is returned. This function provides type-safe casting.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayoutItem.SpacerItem">
            <summary>
            <para>If this item is a QSpacerItem, it is returned as a QSpacerItem;
            otherwise 0 is returned. This function provides type-safe casting.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayoutItem.ControlTypes">
            <summary>
            <para>Returns the control type(s) for the layout item. For a
            QWidgetItem, the control type comes from the widget's size policy; for a
            QLayoutItem, the control types is derived from the layout's
            contents.</para>
            <para>See also QSizePolicy::controlType().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QSpacerItem">
            <summary>
            <para>The QSpacerItem class provides blank space in a layout.</para>
            </summary>
            <remarks>
            <para>Normally, you don't need to use this class directly. Qt's
            built-in layout managers provide the following functions for manipulating
            empty space in layouts:</para>
            <para></para>
            <para> ClassFunctions</para>
            <para>QHBoxLayout	addSpacing(), addStretch(), insertSpacing(),
            insertStretch()</para>
            <para>QGridLayout	setRowMinimumHeight(), setRowStretch(),
            setColumnMinimumWidth(), setColumnStretch()</para>
            <para></para>
            <para></para>
            <para>See also QLayout, QWidgetItem, and
            QLayoutItem::spacerItem().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QSpacerItem.#ctor(System.Int32,System.Int32,QtWidgets.QSizePolicy.Policy,QtWidgets.QSizePolicy.Policy)">
            <summary>
            <para>Constructs a spacer item with preferred width w, preferred height
            h, horizontal size policy hPolicy and vertical size policy vPolicy.</para>
            <para>The default values provide a gap that is able to stretch if
            nothing else wants the space.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSpacerItem.ChangeSize(System.Int32,System.Int32,QtWidgets.QSizePolicy.Policy,QtWidgets.QSizePolicy.Policy)">
            <summary>
            <para>Changes this spacer item to have preferred width w, preferred
            height h, horizontal size policy hPolicy and vertical size policy
            vPolicy.</para>
            <para>The default values provide a gap that is able to stretch if
            nothing else wants the space.</para>
            <para>Note that if changeSize() is called after the spacer item has
            been added to a layout, it is necessary to invalidate the layout in order
            for the spacer item's new size to take effect.</para>
            <para>See also QSpacerItem::invalidate().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSpacerItem.Geometry">
            <summary>
            <para>Returns the rectangle covered by this layout item.</para>
            <para>See also setGeometry().</para>
            <para></para>
            <para>Implemented in subclasses to set this item's geometry to
            r.</para>
            <para>See also geometry().</para>
            <para></para>
            <para>Reimplemented from QLayoutItem::setGeometry().</para>
            <para>See also geometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSpacerItem.SizeHint">
            <summary>
            <para>Reimplemented from QLayoutItem::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSpacerItem.MinimumSize">
            <summary>
            <para>Reimplemented from QLayoutItem::minimumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSpacerItem.MaximumSize">
            <summary>
            <para>Reimplemented from QLayoutItem::maximumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSpacerItem.ExpandingDirections">
            <summary>
            <para>Reimplemented from QLayoutItem::expandingDirections().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSpacerItem.IsEmpty">
            <summary>
            <para>Reimplemented from QLayoutItem::isEmpty().</para>
            <para>Returns true.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSpacerItem.SpacerItem">
            <summary>
            <para>Reimplemented from QLayoutItem::spacerItem().</para>
            <para>Returns a pointer to this object.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSpacerItem.SizePolicy">
            <summary>
            <para>Returns the size policy of this item.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QWidgetItem">
            <summary>
            <para>The QWidgetItem class is a layout item that represents a
            widget.</para>
            </summary>
            <remarks>
            <para>Normally, you don't need to use this class directly. Qt's
            built-in layout managers provide the following functions for manipulating
            widgets in layouts:</para>
            <para></para>
            <para> ClassFunctions</para>
            <para>QBoxLayout	addWidget(), insertWidget(), setStretchFactor()</para>
            <para>QGridLayout	addWidget()</para>
            <para>QStackedLayout	addWidget(), insertWidget(), currentWidget(),
            setCurrentWidget(), widget()</para>
            <para></para>
            <para></para>
            <para>See also QLayout, QSpacerItem, and QLayoutItem::widget().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QWidgetItem.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Creates an item containing the given widget.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidgetItem.HeightForWidth(System.Int32)">
            <summary>
            <para>Reimplemented from QLayoutItem::heightForWidth().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidgetItem.Geometry">
            <summary>
            <para>Returns the rectangle covered by this layout item.</para>
            <para>See also setGeometry().</para>
            <para></para>
            <para>Implemented in subclasses to set this item's geometry to
            r.</para>
            <para>See also geometry().</para>
            <para></para>
            <para>Reimplemented from QLayoutItem::setGeometry().</para>
            <para>See also geometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidgetItem.SizeHint">
            <summary>
            <para>Reimplemented from QLayoutItem::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidgetItem.MinimumSize">
            <summary>
            <para>Reimplemented from QLayoutItem::minimumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidgetItem.MaximumSize">
            <summary>
            <para>Reimplemented from QLayoutItem::maximumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidgetItem.ExpandingDirections">
            <summary>
            <para>Reimplemented from QLayoutItem::expandingDirections().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidgetItem.IsEmpty">
            <summary>
            <para>Reimplemented from QLayoutItem::isEmpty().</para>
            <para>Returns true if the widget is hidden; otherwise returns
            false.</para>
            <para>See also QWidget::isHidden().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidgetItem.Widget">
            <summary>
            <para>Reimplemented from QLayoutItem::widget().</para>
            <para>Returns the widget managed by this item.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidgetItem.HasHeightForWidth">
            <summary>
            <para>Reimplemented from QLayoutItem::hasHeightForWidth().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidgetItem.ControlTypes">
            <summary>
            <para>Reimplemented from QLayoutItem::controlTypes().</para>
            <para>Returns the control type associated with the widget for which
            this size policy applies.</para>
            <para>See also QSizePolicy::controlType().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QLayout">
            <summary>
            <para>The QLayout class is the base class of geometry managers.</para>
            </summary>
            <remarks>
            <para>This is an abstract base class inherited by the concrete classes
            QBoxLayout, QGridLayout, QFormLayout, and QStackedLayout.</para>
            <para>For users of QLayout subclasses or of QMainWindow there is seldom
            any need to use the basic functions provided by QLayout, such as
            setSizeConstraint() or setMenuBar(). See Layout Management for more
            information.</para>
            <para>To make your own layout manager, implement the functions
            addItem(), sizeHint(), setGeometry(), itemAt() and takeAt(). You should
            also implement minimumSize() to ensure your layout isn't resized to zero
            size if there is too little space. To support children whose heights depend
            on their widths, implement hasHeightForWidth() and heightForWidth(). See
            the Border Layout and Flow Layout examples for more information about
            implementing custom layout managers.</para>
            <para>Geometry management stops when the layout manager is
            deleted.</para>
            <para></para>
            <para>See also QLayoutItem, Layout Management, Basic Layouts Example,
            Border Layout Example, and Flow Layout Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QLayout.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a new top-level QLayout, with parent parent. parent
            may not be 0.</para>
            <para>There can be only one top-level layout for a widget. It is
            returned by QWidget::layout().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.#ctor">
            <summary>
            <para>Constructs a new child QLayout.</para>
            <para>This layout has to be inserted into another layout before
            geometry management will work.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.SetContentsMargins(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the left, top, right, and bottom margins to use around the
            layout.</para>
            <para>By default, QLayout uses the values provided by the style. On
            most platforms, the margin is 11 pixels in all directions.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also contentsMargins(), getContentsMargins(),
            QStyle::pixelMetric(), PM_LayoutLeftMargin, PM_LayoutTopMargin,
            PM_LayoutRightMargin, and PM_LayoutBottomMargin.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.GetContentsMargins(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>Extracts the left, top, right, and bottom margins used around the
            layout, and assigns them to *left, *top, *right, and *bottom (unless they
            are null pointers).</para>
            <para>By default, QLayout uses the values provided by the style. On
            most platforms, the margin is 11 pixels in all directions.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setContentsMargins(), QStyle::pixelMetric(),
            PM_LayoutLeftMargin, PM_LayoutTopMargin, PM_LayoutRightMargin, and
            PM_LayoutBottomMargin.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.SetAlignment(QtWidgets.QWidget,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>Sets the alignment for widget w to alignment and returns true if
            w is found in this layout (not including child layouts); otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.SetAlignment(QtWidgets.QLayout,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the alignment for the layout l to alignment and returns true
            if l is found in this layout (not including child layouts); otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.Invalidate">
            <summary>
            <para>Reimplemented from QLayoutItem::invalidate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.Activate">
            <summary>
            <para>Redoes the layout for parentWidget() if necessary.</para>
            <para>You should generally not need to call this because it is
            automatically called at the most appropriate times. It returns true if the
            layout was redone.</para>
            <para>See also update() and QWidget::updateGeometry().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.Update">
            <summary>
            <para>Updates the layout for parentWidget().</para>
            <para>You should generally not need to call this because it is
            automatically called at the most appropriate times.</para>
            <para>See also activate() and invalidate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.AddWidget(QtWidgets.QWidget)">
            <summary>
            <para>Adds widget w to this layout in a manner specific to the layout.
            This function uses addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.AddItem(QtWidgets.IQLayoutItem)">
            <summary>
            <para>Implemented in subclasses to add an item. How it is added is
            specific to each subclass.</para>
            <para>This function is not usually called in application code. To add a
            widget to a layout, use the addWidget() function; to add a child layout,
            use the addLayout() function provided by the relevant QLayout
            subclass.</para>
            <para>Note: The ownership of item is transferred to the layout, and
            it's the layout's responsibility to delete it.</para>
            <para>See also addWidget(), QBoxLayout::addLayout(), and
            QGridLayout::addLayout().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.RemoveWidget(QtWidgets.QWidget)">
            <summary>
            <para>Removes the widget widget from the layout. After this call, it is
            the caller's responsibility to give the widget a reasonable geometry or to
            put the widget back into a layout.</para>
            <para>Note: The ownership of widget remains the same as when it was
            added.</para>
            <para>See also removeItem(), QWidget::setGeometry(), and
            addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.RemoveItem(QtWidgets.IQLayoutItem)">
            <summary>
            <para>Removes the layout item item from the layout. It is the caller's
            responsibility to delete the item.</para>
            <para>Notice that item can be a layout (since QLayout inherits
            QLayoutItem).</para>
            <para>See also removeWidget() and addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.ItemAt(System.Int32)">
            <summary>
            <para>Must be implemented in subclasses to return the layout item at
            index. If there is no such item, the function must return 0. Items are
            numbered consecutively from 0. If an item is deleted, other items will be
            renumbered.</para>
            <para>This function can be used to iterate over a layout. The following
            code will draw a rectangle for each layout item in the layout structure of
            the widget.</para>
            <para>static void paintLayout(QPainter *painter, QLayoutItem
            *item)</para>
            <para>{</para>
            <para>    QLayout *layout = item-&gt;layout();</para>
            <para>    if (layout) {</para>
            <para>        for (int i = 0; i &lt; layout-&gt;count(); ++i)</para>
            <para>            paintLayout(painter, layout-&gt;itemAt(i));</para>
            <para>    }</para>
            <para>    painter-&gt;drawRect(item-&gt;geometry());</para>
            <para>}</para>
            <para></para>
            <para>void MyWidget::paintEvent(QPaintEvent *)</para>
            <para>{</para>
            <para>    QPainter painter(this);</para>
            <para>    if (layout())</para>
            <para>        paintLayout(&amp;painter, layout());</para>
            <para>}</para>
            <para>See also count() and takeAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.TakeAt(System.Int32)">
            <summary>
            <para>Must be implemented in subclasses to remove the layout item at
            index from the layout, and return the item. If there is no such item, the
            function must do nothing and return 0. Items are numbered consecutively
            from 0. If an item is removed, other items will be renumbered.</para>
            <para>The following code fragment shows a safe way to remove all items
            from a layout:</para>
            <para>QLayoutItem *child;</para>
            <para>while ((child = layout-&gt;takeAt(0)) != 0) {</para>
            <para>    ...</para>
            <para>    delete child;</para>
            <para>}</para>
            <para>See also itemAt() and count().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.IndexOf(QtWidgets.QWidget)">
            <summary>
            <para>Searches for widget widget in this layout (not including child
            layouts).</para>
            <para>Returns the index of widget, or -1 if widget is not found.</para>
            <para>The default implementation iterates over all items using
            itemAt()</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.ReplaceWidget(QtWidgets.QWidget,QtWidgets.QWidget,QtCore.Qt.FindChildOption)">
            <summary>
            <para>Searches for widget from and replaces it with widget to if found.
            Returns the layout item that contains the widget from on success. Otherwise
            0 is returned. If options contains Qt::FindChildrenRecursively (the
            default), sub-layouts are searched for doing the replacement. Any other
            flag in options is ignored.</para>
            <para>Notice that the returned item therefore might not belong to this
            layout, but to a sub-layout.</para>
            <para>The returned layout item is no longer owned by the layout and
            should be either deleted or inserted to another layout. The widget from is
            no longer managed by the layout and may need to be deleted or hidden. The
            parent of widget from is left unchanged.</para>
            <para>This function works for the built-in Qt layouts, but might not
            work for custom layouts.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also indexOf().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.OnChildEvent(QtCore.QChildEvent)">
            <summary>
            <para>Reimplemented from QObject::childEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.AddChildLayout(QtWidgets.QLayout)">
            <summary>
            <para>This function is called from addLayout() or insertLayout()
            functions in subclasses to add layout l as a sub-layout.</para>
            <para>The only scenario in which you need to call it directly is if you
            implement a custom layout that supports nested layouts.</para>
            <para>See also QBoxLayout::addLayout(), QBoxLayout::insertLayout(), and
            QGridLayout::addLayout().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.AddChildWidget(QtWidgets.QWidget)">
            <summary>
            <para>This function is called from addWidget() functions in subclasses
            to add w as a managed widget of a layout.</para>
            <para>If w is already managed by a layout, this function will give a
            warning and remove w from that layout. This function must therefore be
            called before adding w to the layout's data structure.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.AlignmentRect(QtCore.QRect)">
            <summary>
            <para>Returns the rectangle that should be covered when the geometry of
            this layout is set to r, provided that this layout supports
            setAlignment().</para>
            <para>The result is derived from sizeHint() and expanding(). It is
            never larger than r.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.HeightForWidth(System.Int32)">
            <summary>
            <para>Returns the preferred height for this layout item, given the
            width w.</para>
            <para>The default implementation returns -1, indicating that the
            preferred height is independent of the width of the item. Using the
            function hasHeightForWidth() will typically be much faster than calling
            this function and testing for -1.</para>
            <para>Reimplement this function in layout managers that support height
            for width. A typical implementation will look like this:</para>
            <para>int MyLayout::heightForWidth(int w) const</para>
            <para>{</para>
            <para>    if (cache_dirty || cached_width != w) {</para>
            <para>        // not all C++ compilers support
            &quot;mutable&quot;</para>
            <para>        MyLayout *that = (MyLayout*)this;</para>
            <para>        int h = calculateHeightForWidth(w);</para>
            <para>        that-&gt;cached_hfw = h;</para>
            <para>        return h;</para>
            <para>    }</para>
            <para>    return cached_hfw;</para>
            <para>}</para>
            <para>Caching is strongly recommended; without it layout will take
            exponential time.</para>
            <para>See also hasHeightForWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.MinimumHeightForWidth(System.Int32)">
            <summary>
            <para>Returns the minimum height this widget needs for the given width,
            w. The default implementation simply returns heightForWidth(w).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLayout.ClosestAcceptableSize(QtWidgets.QWidget,QtCore.QSize)">
            <summary>
            <para>Returns a size that satisfies all size constraints on widget,
            including heightForWidth() and that is as close as possible to size.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.Margin">
            <summary>
            <para>This property holds the width of the outside border of the
            layout.</para>
            <para>Use setContentsMargins() and getContentsMargins() instead.</para>
            <para>See also contentsRect() and spacing.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.Spacing">
            <summary>
            <para>This property holds the spacing between widgets inside the
            layout.</para>
            <para>If no value is explicitly set, the layout's spacing is inherited
            from the parent layout, or from the style settings for the parent
            widget.</para>
            <para>For QGridLayout and QFormLayout, it is possible to set different
            horizontal and vertical spacings using setHorizontalSpacing() and
            setVerticalSpacing(). In that case, spacing() returns -1.</para>
            <para>See also contentsRect(), getContentsMargins(),
            QStyle::layoutSpacing(), and QStyle::pixelMetric().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.ContentsMargins">
            <summary>
            <para>Returns the margins used around the layout.</para>
            <para>By default, QLayout uses the values provided by the style. On
            most platforms, the margin is 11 pixels in all directions.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setContentsMargins().</para>
            <para></para>
            <para>Sets the margins to use around the layout.</para>
            <para>By default, QLayout uses the values provided by the style. On
            most platforms, the margin is 11 pixels in all directions.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also contentsMargins().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.sizeConstraint">
            <summary>
            <para>This property holds the resize mode of the layout.</para>
            <para>The default mode is SetDefaultConstraint.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.MenuBar">
            <summary>
            <para>Returns the menu bar set for this layout, or 0 if no menu bar is
            set.</para>
            <para>See also setMenuBar().</para>
            <para></para>
            <para>Tells the geometry manager to place the menu bar widget at the
            top of parentWidget(), outside QWidget::contentsMargins(). All child
            widgets are placed below the bottom edge of the menu bar.</para>
            <para>See also menuBar().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.Geometry">
            <summary>
            <para>Returns the rectangle covered by this layout item.</para>
            <para>See also setGeometry().</para>
            <para></para>
            <para>Implemented in subclasses to set this item's geometry to
            r.</para>
            <para>See also geometry().</para>
            <para></para>
            <para>Reimplemented from QLayoutItem::setGeometry().</para>
            <para>See also geometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.Enabled">
            <summary>
            <para>Returns true if the layout is enabled; otherwise returns
            false.</para>
            <para>See also setEnabled().</para>
            <para></para>
            <para>Enables this layout if enable is true, otherwise disables
            it.</para>
            <para>An enabled layout adjusts dynamically to changes; a disabled
            layout acts as if it did not exist.</para>
            <para>By default all layouts are enabled.</para>
            <para>See also isEnabled().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.Alignment">
            <summary>
            <para>Returns the alignment of this item.</para>
            <para>See also setAlignment().</para>
            <para></para>
            <para>Sets the alignment of this item to alignment.</para>
            <para>Note: Item alignment is only supported by QLayoutItem subclasses
            where it would have a visual effect. Except for QSpacerItem, which provides
            blank space for layouts, all public Qt classes that inherit QLayoutItem
            support item alignment.</para>
            <para>See also alignment().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.ExpandingDirections">
            <summary>
            <para>Reimplemented from QLayoutItem::expandingDirections().</para>
            <para>Returns whether this layout can make use of more space than
            sizeHint(). A value of Qt::Vertical or Qt::Horizontal means that it wants
            to grow in only one dimension, whereas Qt::Vertical | Qt::Horizontal means
            that it wants to grow in both dimensions.</para>
            <para>The default implementation returns Qt::Horizontal | Qt::Vertical.
            Subclasses reimplement it to return a meaningful value based on their child
            widgets's size policies.</para>
            <para>See also sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.MinimumSize">
            <summary>
            <para>Reimplemented from QLayoutItem::minimumSize().</para>
            <para>Returns the minimum size of this layout. This is the smallest
            size that the layout can have while still respecting the
            specifications.</para>
            <para>The returned value doesn't include the space required by
            QWidget::setContentsMargins() or menuBar().</para>
            <para>The default implementation allows unlimited resizing.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.MaximumSize">
            <summary>
            <para>Reimplemented from QLayoutItem::maximumSize().</para>
            <para>Returns the maximum size of this layout. This is the largest size
            that the layout can have while still respecting the specifications.</para>
            <para>The returned value doesn't include the space required by
            QWidget::setContentsMargins() or menuBar().</para>
            <para>The default implementation allows unlimited resizing.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.IsEmpty">
            <summary>
            <para>Reimplemented from QLayoutItem::isEmpty().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.ControlTypes">
            <summary>
            <para>Reimplemented from QLayoutItem::controlTypes().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.Layout">
            <summary>
            <para>Reimplemented from QLayoutItem::layout().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.SizeHint">
            <summary>
            <para>Implemented in subclasses to return the preferred size of this
            item.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.HasHeightForWidth">
            <summary>
            <para>Returns true if this layout's preferred height depends on its
            width; otherwise returns false. The default implementation returns
            false.</para>
            <para>Reimplement this function in layout managers that support height
            for width.</para>
            <para>See also heightForWidth() and QWidget::heightForWidth().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.Widget">
            <summary>
            <para>If this item is a QWidget, it is returned as a QWidget; otherwise
            0 is returned. This function provides type-safe casting.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.SpacerItem">
            <summary>
            <para>If this item is a QSpacerItem, it is returned as a QSpacerItem;
            otherwise 0 is returned. This function provides type-safe casting.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.ContentsRect">
            <summary>
            <para>Returns the layout's geometry() rectangle, but taking into
            account the contents margins.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setContentsMargins() and getContentsMargins().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.ParentWidget">
            <summary>
            <para>Returns the parent widget of this layout, or 0 if this layout is
            not installed on any widget.</para>
            <para>If the layout is a sub-layout, this function returns the parent
            widget of the parent layout.</para>
            <para>See also parent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLayout.Count">
            <summary>
            <para>Must be implemented in subclasses to return the number of items
            in the layout.</para>
            <para>See also itemAt().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QLayout.SizeConstraint">
            <summary>
            <para>The possible values are:</para>
            <para>See also setSizeConstraint().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QLayout.SizeConstraint.SetDefaultConstraint">
            <summary>The main widget's minimum size is set to minimumSize(), unless the widget already has a minimum size.</summary>
        </member>
        <member name="F:QtWidgets.QLayout.SizeConstraint.SetNoConstraint">
            <summary>The widget is not constrained.</summary>
        </member>
        <member name="F:QtWidgets.QLayout.SizeConstraint.SetMinimumSize">
            <summary>The main widget's minimum size is set to minimumSize(); it cannot be smaller.</summary>
        </member>
        <member name="F:QtWidgets.QLayout.SizeConstraint.SetFixedSize">
            <summary>The main widget's size is set to sizeHint(); it cannot be resized at all.</summary>
        </member>
        <member name="F:QtWidgets.QLayout.SizeConstraint.SetMaximumSize">
            <summary>The main widget's maximum size is set to maximumSize(); it cannot be larger.</summary>
        </member>
        <member name="F:QtWidgets.QLayout.SizeConstraint.SetMinAndMaxSize">
            <summary>The main widget's minimum size is set to minimumSize() and its maximum size is set to maximumSize().</summary>
        </member>
        <member name="T:QtWidgets.QBoxLayout">
            <summary>
            <para>The QBoxLayout class lines up child widgets horizontally or
            vertically.</para>
            </summary>
            <remarks>
            <para>QBoxLayout takes the space it gets (from its parent layout or
            from the parentWidget()), divides it up into a row of boxes, and makes each
            managed widget fill one box.</para>
            <para></para>
            <para>If the QBoxLayout's orientation is Qt::Horizontal the boxes are
            placed in a row, with suitable sizes. Each widget (or other box) will get
            at least its minimum size and at most its maximum size. Any excess space is
            shared according to the stretch factors (more about that below).</para>
            <para></para>
            <para>If the QBoxLayout's orientation is Qt::Vertical, the boxes are
            placed in a column, again with suitable sizes.</para>
            <para>The easiest way to create a QBoxLayout is to use one of the
            convenience classes, e.g. QHBoxLayout (for Qt::Horizontal boxes) or
            QVBoxLayout (for Qt::Vertical boxes). You can also use the QBoxLayout
            constructor directly, specifying its direction as LeftToRight, RightToLeft,
            TopToBottom, or BottomToTop.</para>
            <para>If the QBoxLayout is not the top-level layout (i.e. it is not
            managing all of the widget's area and children), you must add it to its
            parent layout before you can do anything with it. The normal way to add a
            layout is by calling parentLayout-&gt;addLayout().</para>
            <para>Once you have done this, you can add boxes to the QBoxLayout
            using one of four functions:</para>
            <para></para>
            <para>addWidget() to add a widget to the QBoxLayout and set the
            widget's stretch factor. (The stretch factor is along the row of
            boxes.)</para>
            <para>addSpacing() to create an empty box; this is one of the functions
            you use to create nice and spacious dialogs. See below for ways to set
            margins.</para>
            <para>addStretch() to create an empty, stretchable box.</para>
            <para>addLayout() to add a box containing another QLayout to the row
            and set that layout's stretch factor.</para>
            <para></para>
            <para>Use insertWidget(), insertSpacing(), insertStretch() or
            insertLayout() to insert a box at a specified position in the
            layout.</para>
            <para>QBoxLayout also includes two margin widths:</para>
            <para></para>
            <para>setContentsMargins() sets the width of the outer border on each
            side of the widget. This is the width of the reserved space along each of
            the QBoxLayout's four sides.</para>
            <para>setSpacing() sets the width between neighboring boxes. (You can
            use addSpacing() to get more space at a particular spot.)</para>
            <para></para>
            <para>The margin default is provided by the style. The default margin
            most Qt styles specify is 9 for child widgets and 11 for windows. The
            spacing defaults to the same as the margin width for a top-level layout, or
            to the same as the parent layout.</para>
            <para>To remove a widget from a layout, call removeWidget(). Calling
            QWidget::hide() on a widget also effectively removes the widget from the
            layout until QWidget::show() is called.</para>
            <para>You will almost always want to use QVBoxLayout and QHBoxLayout
            rather than QBoxLayout because of their convenient constructors.</para>
            <para></para>
            <para>See also QGridLayout, QStackedLayout, and Layout
            Management.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QBoxLayout.#ctor(QtWidgets.QBoxLayout.Direction,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a new QBoxLayout with direction dir and parent widget
            parent.</para>
            <para>See also direction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.AddSpacing(System.Int32)">
            <summary>
            <para>Adds a non-stretchable space (a QSpacerItem) with size size to
            the end of this box layout. QBoxLayout provides default margin and spacing.
            This function adds additional space.</para>
            <para>See also insertSpacing(), addItem(), and QSpacerItem.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.AddStretch(System.Int32)">
            <summary>
            <para>Adds a stretchable space (a QSpacerItem) with zero minimum size
            and stretch factor stretch to the end of this box layout.</para>
            <para>See also insertStretch(), addItem(), and QSpacerItem.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.AddSpacerItem(QtWidgets.QSpacerItem)">
            <summary>
            <para>Adds spacerItem to the end of this box layout.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also addSpacing() and addStretch().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.AddWidget(QtWidgets.QWidget,System.Int32,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>Adds widget to the end of this box layout, with a stretch factor
            of stretch and alignment alignment.</para>
            <para>The stretch factor applies only in the direction of the
            QBoxLayout, and is relative to the other boxes and widgets in this
            QBoxLayout. Widgets and boxes with higher stretch factors grow more.</para>
            <para>If the stretch factor is 0 and nothing else in the QBoxLayout has
            a stretch factor greater than zero, the space is distributed according to
            the QWidget:sizePolicy() of each widget that's involved.</para>
            <para>The alignment is specified by alignment. The default alignment is
            0, which means that the widget fills the entire cell.</para>
            <para>See also insertWidget(), addItem(), addLayout(), addStretch(),
            addSpacing(), and addStrut().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.AddLayout(QtWidgets.QLayout,System.Int32)">
            <summary>
            <para>Adds layout to the end of the box, with serial stretch factor
            stretch.</para>
            <para>See also insertLayout(), addItem(), and addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.AddStrut(System.Int32)">
            <summary>
            <para>Limits the perpendicular dimension of the box (e.g. height if the
            box is LeftToRight) to a minimum of size. Other constraints may increase
            the limit.</para>
            <para>See also addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.AddItem(QtWidgets.IQLayoutItem)">
            <summary>
            <para>Reimplemented from QLayout::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.InsertSpacing(System.Int32,System.Int32)">
            <summary>
            <para>Inserts a non-stretchable space (a QSpacerItem) at position
            index, with size size. If index is negative the space is added at the
            end.</para>
            <para>The box layout has default margin and spacing. This function adds
            additional space.</para>
            <para>See also addSpacing(), insertItem(), and QSpacerItem.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.InsertStretch(System.Int32,System.Int32)">
            <summary>
            <para>Inserts a stretchable space (a QSpacerItem) at position index,
            with zero minimum size and stretch factor stretch. If index is negative the
            space is added at the end.</para>
            <para>See also addStretch(), insertItem(), and QSpacerItem.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.InsertSpacerItem(System.Int32,QtWidgets.QSpacerItem)">
            <summary>
            <para>Inserts spacerItem at position index, with zero minimum size and
            stretch factor. If index is negative the space is added at the end.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also addSpacerItem(), insertStretch(), and
            insertSpacing().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.InsertWidget(System.Int32,QtWidgets.QWidget,System.Int32,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>Inserts widget at position index, with stretch factor stretch and
            alignment alignment. If index is negative, the widget is added at the
            end.</para>
            <para>The stretch factor applies only in the direction of the
            QBoxLayout, and is relative to the other boxes and widgets in this
            QBoxLayout. Widgets and boxes with higher stretch factors grow more.</para>
            <para>If the stretch factor is 0 and nothing else in the QBoxLayout has
            a stretch factor greater than zero, the space is distributed according to
            the QWidget:sizePolicy() of each widget that's involved.</para>
            <para>The alignment is specified by alignment. The default alignment is
            0, which means that the widget fills the entire cell.</para>
            <para>See also addWidget() and insertItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.InsertLayout(System.Int32,QtWidgets.QLayout,System.Int32)">
            <summary>
            <para>Inserts layout at position index, with stretch factor stretch. If
            index is negative, the layout is added at the end.</para>
            <para>layout becomes a child of the box layout.</para>
            <para>See also addLayout() and insertItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.InsertItem(System.Int32,QtWidgets.IQLayoutItem)">
            <summary>
            <para>Inserts item into this box layout at position index. If index is
            negative, the item is added at the end.</para>
            <para>See also addItem(), insertWidget(), insertLayout(),
            insertStretch(), and insertSpacing().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.SetStretchFactor(QtWidgets.QWidget,System.Int32)">
            <summary>
            <para>Sets the stretch factor for widget to stretch and returns true if
            widget is found in this layout (not including child layouts); otherwise
            returns false.</para>
            <para>See also setAlignment().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.SetStretchFactor(QtWidgets.QLayout,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the stretch factor for the layout layout to stretch and
            returns true if layout is found in this layout (not including child
            layouts); otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.SetStretch(System.Int32,System.Int32)">
            <summary>
            <para>Sets the stretch factor at position index. to stretch.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also stretch().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.Stretch(System.Int32)">
            <summary>
            <para>Returns the stretch factor at position index.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setStretch().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.HeightForWidth(System.Int32)">
            <summary>
            <para>Reimplemented from QLayoutItem::heightForWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.MinimumHeightForWidth(System.Int32)">
            <summary>
            <para>Reimplemented from QLayoutItem::minimumHeightForWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.Invalidate">
            <summary>
            <para>Reimplemented from QLayoutItem::invalidate().</para>
            <para>Resets cached information.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.ItemAt(System.Int32)">
            <summary>
            <para>Reimplemented from QLayout::itemAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QBoxLayout.TakeAt(System.Int32)">
            <summary>
            <para>Reimplemented from QLayout::takeAt().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QBoxLayout.direction">
            <summary>
            <para>Returns the direction of the box. addWidget() and addSpacing()
            work in this direction; the stretch stretches in this direction.</para>
            <para>See also setDirection(), QBoxLayout::Direction, addWidget(), and
            addSpacing().</para>
            <para></para>
            <para>Sets the direction of this layout to direction.</para>
            <para>See also direction().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QBoxLayout.Spacing">
            <summary>
            <para>Reimplements QLayout::spacing(). If the spacing property is
            valid, that value is returned. Otherwise, a value for the spacing property
            is computed and returned. Since layout spacing in a widget is style
            dependent, if the parent is a widget, it queries the style for the
            (horizontal or vertical) spacing of the layout. Otherwise, the parent is a
            layout, and it queries the parent layout for the spacing().</para>
            <para>See also QLayout::spacing() and setSpacing().</para>
            <para></para>
            <para>Reimplements QLayout::setSpacing(). Sets the spacing property to
            spacing.</para>
            <para>See also QLayout::setSpacing() and spacing().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QBoxLayout.Geometry">
            <summary>
            <para>Returns the rectangle covered by this layout item.</para>
            <para>See also setGeometry().</para>
            <para></para>
            <para>Implemented in subclasses to set this item's geometry to
            r.</para>
            <para>See also geometry().</para>
            <para></para>
            <para>Reimplemented from QLayoutItem::setGeometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QBoxLayout.SizeHint">
            <summary>
            <para>Reimplemented from QLayoutItem::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QBoxLayout.MinimumSize">
            <summary>
            <para>Reimplemented from QLayoutItem::minimumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QBoxLayout.MaximumSize">
            <summary>
            <para>Reimplemented from QLayoutItem::maximumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QBoxLayout.HasHeightForWidth">
            <summary>
            <para>Reimplemented from QLayoutItem::hasHeightForWidth().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QBoxLayout.ExpandingDirections">
            <summary>
            <para>Reimplemented from QLayoutItem::expandingDirections().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QBoxLayout.Count">
            <summary>
            <para>Reimplemented from QLayout::count().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QBoxLayout.Direction">
            <summary>
            <para>This type is used to determine the direction of a box
            layout.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QBoxLayout.Direction.LeftToRight">
            <summary>Horizontal from left to right.</summary>
        </member>
        <member name="F:QtWidgets.QBoxLayout.Direction.RightToLeft">
            <summary>Horizontal from right to left.</summary>
        </member>
        <member name="F:QtWidgets.QBoxLayout.Direction.TopToBottom">
            <summary>Vertical from top to bottom.</summary>
        </member>
        <member name="F:QtWidgets.QBoxLayout.Direction.BottomToTop">
            <summary>Vertical from bottom to top.</summary>
        </member>
        <member name="T:QtWidgets.QHBoxLayout">
            <summary>
            <para>The QHBoxLayout class lines up widgets horizontally.</para>
            </summary>
            <remarks>
            <para>This class is used to construct horizontal box layout objects.
            See QBoxLayout for details.</para>
            <para>The simplest use of the class is like this:</para>
            <para>    QWidget *window = new QWidget;</para>
            <para>    QPushButton *button1 = new
            QPushButton(&quot;One&quot;);</para>
            <para>    QPushButton *button2 = new
            QPushButton(&quot;Two&quot;);</para>
            <para>    QPushButton *button3 = new
            QPushButton(&quot;Three&quot;);</para>
            <para>    QPushButton *button4 = new
            QPushButton(&quot;Four&quot;);</para>
            <para>    QPushButton *button5 = new
            QPushButton(&quot;Five&quot;);</para>
            <para></para>
            <para>    QHBoxLayout *layout = new QHBoxLayout;</para>
            <para>    layout-&gt;addWidget(button1);</para>
            <para>    layout-&gt;addWidget(button2);</para>
            <para>    layout-&gt;addWidget(button3);</para>
            <para>    layout-&gt;addWidget(button4);</para>
            <para>    layout-&gt;addWidget(button5);</para>
            <para></para>
            <para>    window-&gt;setLayout(layout);</para>
            <para>    window-&gt;show();</para>
            <para>First, we create the widgets we want in the layout. Then, we
            create the QHBoxLayout object and add the widgets into the layout. Finally,
            we call QWidget::setLayout() to install the QHBoxLayout object onto the
            widget. At that point, the widgets in the layout are reparented to have
            window as their parent.</para>
            <para></para>
            <para></para>
            <para>See also QVBoxLayout, QGridLayout, QStackedLayout, Layout
            Management, and Basic Layouts Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QHBoxLayout.#ctor">
            <summary>
            <para>Constructs a new horizontal box. You must add it to another
            layout.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QHBoxLayout.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a new top-level horizontal box with parent
            parent.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QVBoxLayout">
            <summary>
            <para>The QVBoxLayout class lines up widgets vertically.</para>
            </summary>
            <remarks>
            <para>This class is used to construct vertical box layout objects. See
            QBoxLayout for details.</para>
            <para>The simplest use of the class is like this:</para>
            <para>    QWidget *window = new QWidget;</para>
            <para>    QPushButton *button1 = new
            QPushButton(&quot;One&quot;);</para>
            <para>    QPushButton *button2 = new
            QPushButton(&quot;Two&quot;);</para>
            <para>    QPushButton *button3 = new
            QPushButton(&quot;Three&quot;);</para>
            <para>    QPushButton *button4 = new
            QPushButton(&quot;Four&quot;);</para>
            <para>    QPushButton *button5 = new
            QPushButton(&quot;Five&quot;);</para>
            <para></para>
            <para>    QVBoxLayout *layout = new QVBoxLayout;</para>
            <para>    layout-&gt;addWidget(button1);</para>
            <para>    layout-&gt;addWidget(button2);</para>
            <para>    layout-&gt;addWidget(button3);</para>
            <para>    layout-&gt;addWidget(button4);</para>
            <para>    layout-&gt;addWidget(button5);</para>
            <para></para>
            <para>    window-&gt;setLayout(layout);</para>
            <para>    window-&gt;show();</para>
            <para>First, we create the widgets we want in the layout. Then, we
            create the QVBoxLayout object and add the widgets into the layout. Finally,
            we call QWidget::setLayout() to install the QVBoxLayout object onto the
            widget. At that point, the widgets in the layout are reparented to have
            window as their parent.</para>
            <para></para>
            <para></para>
            <para>See also QHBoxLayout, QGridLayout, QStackedLayout, Layout
            Management, and Basic Layouts Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QVBoxLayout.#ctor">
            <summary>
            <para>Constructs a new vertical box. You must add it to another
            layout.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QVBoxLayout.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a new top-level vertical box with parent
            parent.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGridLayout">
            <summary>
            <para>The QGridLayout class lays out widgets in a grid.</para>
            </summary>
            <remarks>
            <para>QGridLayout takes the space made available to it (by its parent
            layout or by the parentWidget()), divides it up into rows and columns, and
            puts each widget it manages into the correct cell.</para>
            <para>Columns and rows behave identically; we will discuss columns, but
            there are equivalent functions for rows.</para>
            <para>Each column has a minimum width and a stretch factor. The minimum
            width is the greatest of that set using setColumnMinimumWidth() and the
            minimum width of each widget in that column. The stretch factor is set
            using setColumnStretch() and determines how much of the available space the
            column will get over and above its necessary minimum.</para>
            <para>Normally, each managed widget or layout is put into a cell of its
            own using addWidget(). It is also possible for a widget to occupy multiple
            cells using the row and column spanning overloads of addItem() and
            addWidget(). If you do this, QGridLayout will guess how to distribute the
            size over the columns/rows (based on the stretch factors).</para>
            <para>To remove a widget from a layout, call removeWidget(). Calling
            QWidget::hide() on a widget also effectively removes the widget from the
            layout until QWidget::show() is called.</para>
            <para>This illustration shows a fragment of a dialog with a
            five-column, three-row grid (the grid is shown overlaid in magenta):</para>
            <para></para>
            <para>Columns 0, 2 and 4 in this dialog fragment are made up of a
            QLabel, a QLineEdit, and a QListBox. Columns 1 and 3 are placeholders made
            with setColumnMinimumWidth(). Row 0 consists of three QLabel objects, row 1
            of three QLineEdit objects and row 2 of three QListBox objects. We used
            placeholder columns (1 and 3) to get the right amount of space between the
            columns.</para>
            <para>Note that the columns and rows are not equally wide or tall. If
            you want two columns to have the same width, you must set their minimum
            widths and stretch factors to be the same yourself. You do this using
            setColumnMinimumWidth() and setColumnStretch().</para>
            <para>If the QGridLayout is not the top-level layout (i.e. does not
            manage all of the widget's area and children), you must add it to its
            parent layout when you create it, but before you do anything with it. The
            normal way to add a layout is by calling addLayout() on the parent
            layout.</para>
            <para>Once you have added your layout you can start putting widgets and
            other layouts into the cells of your grid layout using addWidget(),
            addItem(), and addLayout().</para>
            <para>QGridLayout also includes two margin widths: the contents margin
            and the spacing(). The contents margin is the width of the reserved space
            along each of the QGridLayout's four sides. The spacing() is the width of
            the automatically allocated spacing between neighboring boxes.</para>
            <para>The default contents margin values are provided by the style. The
            default value Qt styles specify is 9 for child widgets and 11 for windows.
            The spacing defaults to the same as the margin width for a top-level
            layout, or to the same as the parent layout.</para>
            <para></para>
            <para>See also QBoxLayout, QStackedLayout, Layout Management, and Basic
            Layouts Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGridLayout.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a new QGridLayout with parent widget, parent. The
            layout has one row and one column initially, and will expand when new items
            are inserted.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.#ctor">
            <summary>
            <para>Constructs a new grid layout.</para>
            <para>You must insert this grid into another layout. You can insert
            widgets and layouts into this layout at any time, but laying out will not
            be performed before this is inserted into another layout.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.SetRowStretch(System.Int32,System.Int32)">
            <summary>
            <para>Sets the stretch factor of row row to stretch. The first row is
            number 0.</para>
            <para>The stretch factor is relative to the other rows in this grid.
            Rows with a higher stretch factor take more of the available space.</para>
            <para>The default stretch factor is 0. If the stretch factor is 0 and
            no other row in this table can grow at all, the row may still grow.</para>
            <para>See also rowStretch(), setRowMinimumHeight(), and
            setColumnStretch().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.SetColumnStretch(System.Int32,System.Int32)">
            <summary>
            <para>Sets the stretch factor of column column to stretch. The first
            column is number 0.</para>
            <para>The stretch factor is relative to the other columns in this grid.
            Columns with a higher stretch factor take more of the available
            space.</para>
            <para>The default stretch factor is 0. If the stretch factor is 0 and
            no other column in this table can grow at all, the column may still
            grow.</para>
            <para>An alternative approach is to add spacing using addItem() with a
            QSpacerItem.</para>
            <para>See also columnStretch() and setRowStretch().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.RowStretch(System.Int32)">
            <summary>
            <para>Returns the stretch factor for row row.</para>
            <para>See also setRowStretch().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.ColumnStretch(System.Int32)">
            <summary>
            <para>Returns the stretch factor for column column.</para>
            <para>See also setColumnStretch().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.SetRowMinimumHeight(System.Int32,System.Int32)">
            <summary>
            <para>Sets the minimum height of row row to minSize pixels.</para>
            <para>See also rowMinimumHeight() and setColumnMinimumWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.SetColumnMinimumWidth(System.Int32,System.Int32)">
            <summary>
            <para>Sets the minimum width of column column to minSize pixels.</para>
            <para>See also columnMinimumWidth() and setRowMinimumHeight().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.RowMinimumHeight(System.Int32)">
            <summary>
            <para>Returns the minimum width set for row row.</para>
            <para>See also setRowMinimumHeight().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.ColumnMinimumWidth(System.Int32)">
            <summary>
            <para>Returns the column spacing for column column.</para>
            <para>See also setColumnMinimumWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.CellRect(System.Int32,System.Int32)">
            <summary>
            <para>Returns the geometry of the cell with row row and column column
            in the grid. Returns an invalid rectangle if row or column is outside the
            grid.</para>
            <para>Warning: in the current version of Qt this function does not
            return valid results until setGeometry() has been called, i.e. after the
            parentWidget() is visible.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.HeightForWidth(System.Int32)">
            <summary>
            <para>Reimplemented from QLayoutItem::heightForWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.MinimumHeightForWidth(System.Int32)">
            <summary>
            <para>Reimplemented from QLayoutItem::minimumHeightForWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.Invalidate">
            <summary>
            <para>Reimplemented from QLayoutItem::invalidate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.AddWidget(QtWidgets.QWidget,System.Int32,System.Int32,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>Adds the given widget to the cell grid at row, column. The
            top-left position is (0, 0) by default.</para>
            <para>The alignment is specified by alignment. The default alignment is
            0, which means that the widget fills the entire cell.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.AddWidget(QtWidgets.QWidget,System.Int32,System.Int32,System.Int32,System.Int32,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This version adds the given widget to the cell grid, spanning
            multiple rows/columns. The cell will start at fromRow, fromColumn spanning
            rowSpan rows and columnSpan columns. The widget will have the given
            alignment.</para>
            <para>If rowSpan and/or columnSpan is -1, then the widget will extend
            to the bottom and/or right edge, respectively.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.AddLayout(QtWidgets.QLayout,System.Int32,System.Int32,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>Places the layout at position (row, column) in the grid. The
            top-left position is (0, 0).</para>
            <para>The alignment is specified by alignment. The default alignment is
            0, which means that the widget fills the entire cell.</para>
            <para>A non-zero alignment indicates that the layout should not grow to
            fill the available space but should be sized according to
            sizeHint().</para>
            <para>layout becomes a child of the grid layout.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.AddLayout(QtWidgets.QLayout,System.Int32,System.Int32,System.Int32,System.Int32,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This version adds the layout layout to the cell grid, spanning
            multiple rows/columns. The cell will start at row, column spanning rowSpan
            rows and columnSpan columns.</para>
            <para>If rowSpan and/or columnSpan is -1, then the layout will extend
            to the bottom and/or right edge, respectively.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.ItemAt(System.Int32)">
            <summary>
            <para>Reimplemented from QLayout::itemAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.ItemAtPosition(System.Int32,System.Int32)">
            <summary>
            <para>Returns the layout item that occupies cell (row, column), or 0 if
            the cell is empty.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also getItemPosition() and indexOf().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.TakeAt(System.Int32)">
            <summary>
            <para>Reimplemented from QLayout::takeAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.AddItem(QtWidgets.IQLayoutItem,System.Int32,System.Int32,System.Int32,System.Int32,QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>Adds item at position row, column, spanning rowSpan rows and
            columnSpan columns, and aligns it according to alignment. If rowSpan and/or
            columnSpan is -1, then the item will extend to the bottom and/or right
            edge, respectively. The layout takes ownership of the item.</para>
            <para>Warning: Do not use this function to add child layouts or child
            widget items. Use addLayout() or addWidget() instead.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.GetItemPosition(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>Returns the position information of the item with the given
            index.</para>
            <para>The variables passed as row and column are updated with the
            position of the item in the layout, and the rowSpan and columnSpan
            variables are updated with the vertical and horizontal spans of the
            item.</para>
            <para>See also itemAtPosition() and itemAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGridLayout.AddItem(QtWidgets.IQLayoutItem)">
            <summary>
            <para>Reimplemented from QLayout::addItem().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGridLayout.HorizontalSpacing">
            <summary>
            <para>This property holds the spacing between widgets that are laid out
            side by side.</para>
            <para>If no value is explicitly set, the layout's horizontal spacing is
            inherited from the parent layout, or from the style settings for the parent
            widget.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            <para>See also verticalSpacing, QStyle::pixelMetric(), and
            PM_LayoutHorizontalSpacing.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGridLayout.VerticalSpacing">
            <summary>
            <para>This property holds the spacing between widgets that are laid out
            on top of each other.</para>
            <para>If no value is explicitly set, the layout's vertical spacing is
            inherited from the parent layout, or from the style settings for the parent
            widget.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            <para>See also horizontalSpacing, QStyle::pixelMetric(), and
            PM_LayoutHorizontalSpacing.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGridLayout.Spacing">
            <summary>
            <para>If the vertical spacing is equal to the horizontal spacing, this
            function returns that value; otherwise it return -1.</para>
            <para>See also setSpacing(), verticalSpacing(), and
            horizontalSpacing().</para>
            <para></para>
            <para>This function sets both the vertical and horizontal spacing to
            spacing.</para>
            <para>See also spacing(), setVerticalSpacing(), and
            setHorizontalSpacing().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGridLayout.OriginCorner">
            <summary>
            <para>Returns the corner that's used for the grid's origin, i.e. for
            position (0, 0).</para>
            <para>See also setOriginCorner().</para>
            <para></para>
            <para>Sets the grid's origin corner, i.e. position (0, 0), to
            corner.</para>
            <para>See also originCorner().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGridLayout.Geometry">
            <summary>
            <para>Returns the rectangle covered by this layout item.</para>
            <para>See also setGeometry().</para>
            <para></para>
            <para>Implemented in subclasses to set this item's geometry to
            r.</para>
            <para>See also geometry().</para>
            <para></para>
            <para>Reimplemented from QLayoutItem::setGeometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGridLayout.SizeHint">
            <summary>
            <para>Reimplemented from QLayoutItem::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGridLayout.MinimumSize">
            <summary>
            <para>Reimplemented from QLayoutItem::minimumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGridLayout.MaximumSize">
            <summary>
            <para>Reimplemented from QLayoutItem::maximumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGridLayout.HasHeightForWidth">
            <summary>
            <para>Reimplemented from QLayoutItem::hasHeightForWidth().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGridLayout.ExpandingDirections">
            <summary>
            <para>Reimplemented from QLayoutItem::expandingDirections().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGridLayout.Count">
            <summary>
            <para>Reimplemented from QLayout::count().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGridLayout.ColumnCount">
            <summary>
            <para>Returns the number of columns in this grid.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGridLayout.RowCount">
            <summary>
            <para>Returns the number of rows in this grid.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QDesktopWidget">
            <summary>
            <para>The QDesktopWidget class provides access to screen information on
            multi-head systems.</para>
            </summary>
            <remarks>
            <para>Systems with more than one graphics card and monitor can manage
            the physical screen space available either as multiple desktops, or as a
            large virtual desktop.</para>
            <para>This class provides information about the user's desktop, such as
            its total size, number of screens, the geometry of each screen, and whether
            they are configured as separate desktops or a single virtual
            desktop.</para>
            <para>Widgets provided by Qt use this class to place tooltips, menus
            and dialog boxes on the correct screen for their parent or application
            widgets. Applications can use this class to obtain information that can be
            used to save window positions, or to place child widgets and dialogs on one
            particular screen.</para>
            <para></para>
            <para>Obtaining a Desktop Widget</para>
            <para>The QApplication::desktop() function is used to get an instance
            of QDesktopWidget.</para>
            <para>The widget's screenGeometry() function provides information about
            the geometry of the available screens with. The number of screens available
            is returned by screenCount, and the screenCountChanged() signal is emitted
            when screens are added or removed. The screen number that a particular
            point or widget is located in is returned by screenNumber().</para>
            <para></para>
            <para>Screen Geometry</para>
            <para>To obtain the dimensions of a particular screen, call the
            screenGeometry() function. On some desktop environments, not all of the
            screen is available for applications to use; for example, an application
            dock or menu bar may take up some space. Use the availableGeometry()
            function to obtain the available area for applications.</para>
            <para>QDesktopWidget also inherits the QWidget properties, width() and
            height(), which specify the size of the desktop. However, for desktops with
            multiple screens, the size of the desktop is the union of all the screen
            sizes, so width() and height() should not be used for computing the size of
            a widget to be placed on one of the screens.</para>
            <para>On systems that are configured to use the available screens as a
            single, large virtual desktop, the virtualDesktop property will be set to
            true. In this case, the widget's size is usually the size of the bounding
            rectangle of all the screens.</para>
            <para></para>
            <para>Use of the Primary Screen</para>
            <para>For an application, the screen where the main widget resides is
            the primary screen. This is stored in the primaryScreen property. All
            windows opened in the context of the application should be constrained to
            the boundaries of the primary screen; for example, it would be inconvenient
            if a dialog box popped up on a different screen, or split over two
            screens.</para>
            <para></para>
            <para>In the illustration above, Application One's primary screen is
            screen 0, and App Two's primary screen is screen 1.</para>
            <para></para>
            <para>See also QApplication and QApplication::desktop().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QDesktopWidget.ScreenNumber(QtWidgets.QWidget)">
            <summary>
            <para>Returns the index of the screen that contains the largest part of
            widget, or -1 if the widget not on a screen.</para>
            <para>See also primaryScreen.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDesktopWidget.ScreenNumber(QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the index of the screen that contains the point, or the
            screen which is the shortest distance from the point.</para>
            <para>See also primaryScreen.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDesktopWidget.Screen(System.Int32)">
            <summary>
            <para>Returns a widget that represents the screen with index screen (a
            value of -1 means the default screen).</para>
            <para>If the system uses a virtual desktop, the returned widget will
            have the geometry of the entire virtual desktop; i.e., bounding every
            screen.</para>
            <para>See also primaryScreen, screenCount, and virtualDesktop.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDesktopWidget.ScreenGeometry(System.Int32)">
            <summary>
            <para>Returns the geometry of the screen with index screen. The default
            screen is used if screen is -1.</para>
            <para>See also screenNumber().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDesktopWidget.ScreenGeometry(QtWidgets.QWidget)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the geometry of the screen which contains widget.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDesktopWidget.ScreenGeometry(QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the geometry of the screen which contains p.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDesktopWidget.AvailableGeometry(System.Int32)">
            <summary>
            <para>Returns the available geometry of the screen with index screen.
            What is available will be subrect of screenGeometry() based on what the
            platform decides is available (for example excludes the dock and menu bar
            on Mac OS X, or the task bar on Windows). The default screen is used if
            screen is -1.</para>
            <para>See also screenNumber() and screenGeometry().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDesktopWidget.AvailableGeometry(QtWidgets.QWidget)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the available geometry of the screen which contains
            widget.</para>
            <para>See also screenGeometry().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDesktopWidget.AvailableGeometry(QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the available geometry of the screen which contains
            p.</para>
            <para>See also screenGeometry().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDesktopWidget.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDesktopWidget.Resized">
            <summary>
            <para>This signal is emitted when the size of screen changes.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDesktopWidget.WorkAreaResized">
            <summary>
            <para>This signal is emitted when the work area available on screen changes.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDesktopWidget.ScreenCountChanged">
            <summary>
            <para>This property holds the number of screens currently available on the system.</para>
            <para>Note that on some platforms, screenCount will be zero if there are actually no screens connected. Applications which were running at the time the screenCount went to zero will stop rendering graphics until one or more screens are restored.</para>
            <para>This property was introduced in  Qt 4.6.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	screenCount() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	screenCountChanged(int newCount)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDesktopWidget.IsVirtualDesktop">
            <summary>
            <para>This property holds if the system manages the available screens
            in a virtual desktop.</para>
            <para>For virtual desktops, screen() will always return the same
            widget. The size of the virtual desktop is the size of this desktop
            widget.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isVirtualDesktop() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDesktopWidget.NumScreens">
            <summary>
            <para>Returns the number of available screens.</para>
            <para>This function is deprecated. Use screenCount instead.</para>
            <para>See also primaryScreen.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDesktopWidget.ScreenCount">
            <summary>
            <para>This property holds the number of screens currently available on
            the system.</para>
            <para>Note that on some platforms, screenCount will be zero if there
            are actually no screens connected. Applications which were running at the
            time the screenCount went to zero will stop rendering graphics until one or
            more screens are restored.</para>
            <para>This property was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDesktopWidget.PrimaryScreen">
            <summary>
            <para>This property holds the index of the screen that is configured to
            be the primary screen on the system.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QFormLayout">
             <summary>
             <para>The QFormLayout class manages forms of input widgets and their
             associated labels.</para>
             </summary>
             <remarks>
             <para>QFormLayout is a convenience layout class that lays out its
             children in a two-column form. The left column consists of labels and the
             right column consists of &quot;field&quot; widgets (line editors, spin
             boxes, etc.).</para>
             <para>Traditionally, such two-column form layouts were achieved using
             QGridLayout. QFormLayout is a higher-level alternative that provides the
             following advantages:</para>
             <para></para>
             <para>Adherence to the different platform's look and feel
             guidelines.For example, the Mac OS X Aqua and KDE guidelines specify that
             the labels should be right-aligned, whereas Windows and GNOME applications
             normally use left-alignment.</para>
             <para></para>
             <para>Support for wrapping long rows.For devices with small displays,
             QFormLayout can be set to wrap long rows, or even to wrap all rows.</para>
             <para></para>
             <para>Convenient API for creating label--field pairs.The addRow()
             overload that takes a QString and a QWidget * creates a QLabel behind the
             scenes and automatically set up its buddy. We can then write code like
             this:</para>
             <para>QFormLayout *formLayout = new QFormLayout;</para>
             <para>formLayout-&gt;addRow(tr(&quot;&amp;Name:&quot;),
             nameLineEdit);</para>
             <para>formLayout-&gt;addRow(tr(&quot;&amp;Email:&quot;),
             emailLineEdit);</para>
             <para>formLayout-&gt;addRow(tr(&quot;&amp;Age:&quot;),
             ageSpinBox);</para>
             <para>setLayout(formLayout);</para>
             <para>Compare this with the following code, written using
             QGridLayout:</para>
             <para>nameLabel = new QLabel(tr(&quot;&amp;Name:&quot;));</para>
             <para>nameLabel-&gt;setBuddy(nameLineEdit);</para>
             <para></para>
             <para>emailLabel = new QLabel(tr(&quot;&amp;Name:&quot;));</para>
             <para>emailLabel-&gt;setBuddy(emailLineEdit);</para>
             <para></para>
             <para>ageLabel = new QLabel(tr(&quot;&amp;Name:&quot;));</para>
             <para>ageLabel-&gt;setBuddy(ageSpinBox);</para>
             <para></para>
             <para>QGridLayout *gridLayout = new QGridLayout;</para>
             <para>gridLayout-&gt;addWidget(nameLabel, 0, 0);</para>
             <para>gridLayout-&gt;addWidget(nameLineEdit, 0, 1);</para>
             <para>gridLayout-&gt;addWidget(emailLabel, 1, 0);</para>
             <para>gridLayout-&gt;addWidget(emailLineEdit, 1, 1);</para>
             <para>gridLayout-&gt;addWidget(ageLabel, 2, 0);</para>
             <para>gridLayout-&gt;addWidget(ageSpinBox, 2, 1);</para>
             <para>setLayout(gridLayout);</para>
             <para></para>
             <para></para>
             <para>The table below shows the default appearance in different
             styles.</para>
             <para></para>
             <para> QCommonStyle derived styles (except
             QPlastiqueStyle)QMacStyleQPlastiqueStyleQt Extended styles</para>
             <para>	</para>
             <para>Traditional style used for Windows, GNOME, and earlier versions
             of KDE. Labels are left aligned, and expanding fields grow to fill the
             available space. (This normally corresponds to what we would get using a
             two-column QGridLayout.)	Style based on the Mac OS X Aqua guidelines.
             Labels are right-aligned, the fields don't grow beyond their size hint, and
             the form is horizontally centered.	Recommended style for KDE applications.
             Similar to MacStyle, except that the form is left-aligned and all fields
             grow to fill the available space.	Default style for Qt Extended styles.
             Labels are right-aligned, expanding fields grow to fill the available
             space, and row wrapping is enabled for long lines.</para>
             <para></para>
             <para>The form styles can be also be overridden individually by calling
             setLabelAlignment(), setFormAlignment(), setFieldGrowthPolicy(), and
             setRowWrapPolicy(). For example, to simulate the form layout appearance of
             QMacStyle on all platforms, but with left-aligned labels, you could
             write:</para>
            
             <para>formLayout-&gt;setRowWrapPolicy(QFormLayout::DontWrapRows);</para>
            
             <para>formLayout-&gt;setFieldGrowthPolicy(QFormLayout::FieldsStayAtSizeHint
             );</para>
             <para>formLayout-&gt;setFormAlignment(Qt::AlignHCenter |
             Qt::AlignTop);</para>
             <para>formLayout-&gt;setLabelAlignment(Qt::AlignLeft);</para>
             <para></para>
             <para>See also QGridLayout, QBoxLayout, and QStackedLayout.</para>
             </remarks>
        </member>
        <member name="M:QtWidgets.QFormLayout.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a new form layout with the given parent widget.</para>
            <para>See also QWidget::setLayout().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.AddRow(QtWidgets.QWidget,QtWidgets.QWidget)">
            <summary>
            <para>Adds a new row to the bottom of this form layout, with the given
            label and field.</para>
            <para>See also insertRow().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.AddRow(QtWidgets.QWidget,QtWidgets.QLayout)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.AddRow(System.String,QtWidgets.QWidget)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This overload automatically creates a QLabel behind the scenes
            with labelText as its text. The field is set as the new QLabel's
            buddy.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.AddRow(System.String,QtWidgets.QLayout)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This overload automatically creates a QLabel behind the scenes
            with labelText as its text.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.AddRow(QtWidgets.QWidget)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Adds the specified widget at the end of this form layout. The
            widget spans both columns.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.AddRow(QtWidgets.QLayout)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Adds the specified layout at the end of this form layout. The
            layout spans both columns.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.InsertRow(System.Int32,QtWidgets.QWidget,QtWidgets.QWidget)">
            <summary>
            <para>Inserts a new row at position row in this form layout, with the
            given label and field. If row is out of bounds, the new row is added at the
            end.</para>
            <para>See also addRow().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.InsertRow(System.Int32,QtWidgets.QWidget,QtWidgets.QLayout)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.InsertRow(System.Int32,System.String,QtWidgets.QWidget)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This overload automatically creates a QLabel behind the scenes
            with labelText as its text. The field is set as the new QLabel's
            buddy.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.InsertRow(System.Int32,System.String,QtWidgets.QLayout)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This overload automatically creates a QLabel behind the scenes
            with labelText as its text.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.InsertRow(System.Int32,QtWidgets.QWidget)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts the specified widget at position row in this form layout.
            The widget spans both columns. If row is out of bounds, the widget is added
            at the end.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.InsertRow(System.Int32,QtWidgets.QLayout)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts the specified layout at position row in this form layout.
            The layout spans both columns. If row is out of bounds, the widget is added
            at the end.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.SetItem(System.Int32,QtWidgets.QFormLayout.ItemRole,QtWidgets.IQLayoutItem)">
            <summary>
            <para>Sets the item in the given row for the given role to item,
            extending the layout with empty rows if necessary.</para>
            <para>If the cell is already occupied, the item is not inserted and an
            error message is sent to the console. The item spans both columns.</para>
            <para>Warning: Do not use this function to add child layouts or child
            widget items. Use setLayout() or setWidget() instead.</para>
            <para>See also setLayout().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.SetWidget(System.Int32,QtWidgets.QFormLayout.ItemRole,QtWidgets.QWidget)">
            <summary>
            <para>Sets the widget in the given row for the given role to widget,
            extending the layout with empty rows if necessary.</para>
            <para>If the cell is already occupied, the widget is not inserted and
            an error message is sent to the console.</para>
            <para>Note: For most applications, addRow() or insertRow() should be
            used instead of setWidget().</para>
            <para>See also setLayout().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.SetLayout(System.Int32,QtWidgets.QFormLayout.ItemRole,QtWidgets.QLayout)">
            <summary>
            <para>Sets the sub-layout in the given row for the given role to
            layout, extending the form layout with empty rows if necessary.</para>
            <para>If the cell is already occupied, the layout is not inserted and
            an error message is sent to the console.</para>
            <para>Note: For most applications, addRow() or insertRow() should be
            used instead of setLayout().</para>
            <para>See also setWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.ItemAt(System.Int32,QtWidgets.QFormLayout.ItemRole)">
            <summary>
            <para>Returns the layout item in the given row with the specified role
            (column). Returns 0 if there is no such item.</para>
            <para>See also QLayout::itemAt() and setItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.GetItemPosition(System.Int32,System.Int32@,QtWidgets.QFormLayout.ItemRole*)">
            <summary>
            <para>Retrieves the row and role (column) of the item at the specified
            index. If index is out of bounds, *rowPtr is set to -1; otherwise the row
            is stored in *rowPtr and the role is stored in *rolePtr.</para>
            <para>See also itemAt(), count(), getLayoutPosition(), and
            getWidgetPosition().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.GetWidgetPosition(QtWidgets.QWidget,System.Int32@,QtWidgets.QFormLayout.ItemRole*)">
            <summary>
            <para>Retrieves the row and role (column) of the specified widget in
            the layout. If widget is not in the layout, *rowPtr is set to -1; otherwise
            the row is stored in *rowPtr and the role is stored in *rolePtr.</para>
            <para>See also getItemPosition() and itemAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.GetLayoutPosition(QtWidgets.QLayout,System.Int32@,QtWidgets.QFormLayout.ItemRole*)">
            <summary>
            <para>Retrieves the row and role (column) of the specified child
            layout. If layout is not in the form layout, *rowPtr is set to -1;
            otherwise the row is stored in *rowPtr and the role is stored in
            *rolePtr.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.LabelForField(QtWidgets.QWidget)">
            <summary>
            <para>Returns the label associated with the given field.</para>
            <para>See also itemAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.LabelForField(QtWidgets.QLayout)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.AddItem(QtWidgets.IQLayoutItem)">
            <summary>
            <para>Reimplemented from QLayout::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.ItemAt(System.Int32)">
            <summary>
            <para>Reimplemented from QLayout::itemAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.TakeAt(System.Int32)">
            <summary>
            <para>Reimplemented from QLayout::takeAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.Invalidate">
            <summary>
            <para>Reimplemented from QLayoutItem::invalidate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFormLayout.HeightForWidth(System.Int32)">
            <summary>
            <para>Reimplemented from QLayoutItem::heightForWidth().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFormLayout.fieldGrowthPolicy">
            <summary>
            <para>This property holds the way in which the form's fields
            grow.</para>
            <para>The default value depends on the widget or application style. For
            QMacStyle, the default is FieldsStayAtSizeHint; for QCommonStyle derived
            styles (like Plastique and Windows), the default is ExpandingFieldsGrow;
            for Qt Extended styles, the default is AllNonFixedFieldsGrow.</para>
            <para>If none of the fields can grow and the form is resized, extra
            space is distributed according to the current form alignment.</para>
            <para>See also formAlignment and rowWrapPolicy.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFormLayout.rowWrapPolicy">
            <summary>
            <para>This property holds the way in which the form's rows wrap.</para>
            <para>The default value depends on the widget or application style. For
            Qt Extended styles, the default is WrapLongRows; for the other styles, the
            default is DontWrapRows.</para>
            <para>If you want to display each label above its associated field
            (instead of next to it), set this property to WrapAllRows.</para>
            <para>See also fieldGrowthPolicy.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFormLayout.LabelAlignment">
            <summary>
            <para>This property holds the horizontal alignment of the
            labels.</para>
            <para>The default value depends on the widget or application style. For
            QCommonStyle derived styles, except for QPlastiqueStyle, the default is
            Qt::AlignLeft; for the other styles, the default is Qt::AlignRight.</para>
            <para>See also formAlignment.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFormLayout.FormAlignment">
            <summary>
            <para>This property holds the alignment of the form layout's contents
            within the layout's geometry.</para>
            <para>The default value depends on the widget or application style. For
            QMacStyle, the default is Qt::AlignHCenter | Qt::AlignTop; for the other
            styles, the default is Qt::AlignLeft | Qt::AlignTop.</para>
            <para>See also labelAlignment and rowWrapPolicy.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFormLayout.HorizontalSpacing">
            <summary>
            <para>This property holds the spacing between widgets that are laid out
            side by side.</para>
            <para>By default, if no value is explicitly set, the layout's
            horizontal spacing is inherited from the parent layout, or from the style
            settings for the parent widget.</para>
            <para>See also verticalSpacing, QStyle::pixelMetric(), and
            PM_LayoutHorizontalSpacing.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFormLayout.VerticalSpacing">
            <summary>
            <para>This property holds the spacing between widgets that are laid out
            vertically.</para>
            <para>By default, if no value is explicitly set, the layout's vertical
            spacing is inherited from the parent layout, or from the style settings for
            the parent widget.</para>
            <para>See also horizontalSpacing, QStyle::pixelMetric(), and
            PM_LayoutHorizontalSpacing.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFormLayout.Spacing">
            <summary>
            <para>If the vertical spacing is equal to the horizontal spacing, this
            function returns that value; otherwise it returns -1.</para>
            <para>See also setSpacing(), verticalSpacing(), and
            horizontalSpacing().</para>
            <para></para>
            <para>This function sets both the vertical and horizontal spacing to
            spacing.</para>
            <para>See also spacing(), setVerticalSpacing(), and
            setHorizontalSpacing().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFormLayout.Geometry">
            <summary>
            <para>Returns the rectangle covered by this layout item.</para>
            <para>See also setGeometry().</para>
            <para></para>
            <para>Implemented in subclasses to set this item's geometry to
            r.</para>
            <para>See also geometry().</para>
            <para></para>
            <para>Reimplemented from QLayoutItem::setGeometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFormLayout.MinimumSize">
            <summary>
            <para>Reimplemented from QLayoutItem::minimumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFormLayout.SizeHint">
            <summary>
            <para>Reimplemented from QLayoutItem::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFormLayout.HasHeightForWidth">
            <summary>
            <para>Reimplemented from QLayoutItem::hasHeightForWidth().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFormLayout.ExpandingDirections">
            <summary>
            <para>Reimplemented from QLayoutItem::expandingDirections().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFormLayout.Count">
            <summary>
            <para>Reimplemented from QLayout::count().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFormLayout.RowCount">
            <summary>
            <para>Returns the number of rows in the form.</para>
            <para>See also QLayout::count().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QFormLayout.FieldGrowthPolicy">
            <summary>
            <para>This enum specifies the different policies that can be used to
            control the way in which the form's fields grow.</para>
            <para>See also fieldGrowthPolicy.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QFormLayout.FieldGrowthPolicy.FieldsStayAtSizeHint">
            <summary>The fields never grow beyond their effective size hint. This is the default for QMacStyle.</summary>
        </member>
        <member name="F:QtWidgets.QFormLayout.FieldGrowthPolicy.ExpandingFieldsGrow">
            <summary>Fields with an horizontal size policy of Expanding or MinimumExpanding will grow to fill the available space. The other fields will not grow beyond their effective size hint. This is the default policy for Plastique.</summary>
        </member>
        <member name="F:QtWidgets.QFormLayout.FieldGrowthPolicy.AllNonFixedFieldsGrow">
            <summary>All fields with a size policy that allows them to grow will grow to fill the available space. This is the default policy for most styles.</summary>
        </member>
        <member name="T:QtWidgets.QFormLayout.RowWrapPolicy">
            <summary>
            <para>This enum specifies the different policies that can be used to
            control the way in which the form's rows wrap.</para>
            <para>See also rowWrapPolicy.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QFormLayout.RowWrapPolicy.DontWrapRows">
            <summary>Fields are always laid out next to their label. This is the default policy for all styles except Qt Extended styles.</summary>
        </member>
        <member name="F:QtWidgets.QFormLayout.RowWrapPolicy.WrapLongRows">
            <summary>Labels are given enough horizontal space to fit the widest label, and the rest of the space is given to the fields. If the minimum size of a field pair is wider than the available space, the field is wrapped to the next line. This is the default policy for Qt Extended styles.</summary>
        </member>
        <member name="F:QtWidgets.QFormLayout.RowWrapPolicy.WrapAllRows">
            <summary>Fields are always laid out below their label.</summary>
        </member>
        <member name="T:QtWidgets.QFormLayout.ItemRole">
            <summary>
            <para>This enum specifies the types of widgets (or other layout items)
            that may appear in a row.</para>
            <para>See also itemAt() and getItemPosition().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QFormLayout.ItemRole.LabelRole">
            <summary>A label widget.</summary>
        </member>
        <member name="F:QtWidgets.QFormLayout.ItemRole.FieldRole">
            <summary>A field widget.</summary>
        </member>
        <member name="F:QtWidgets.QFormLayout.ItemRole.SpanningRole">
            <summary>A widget that spans label and field columns.</summary>
        </member>
        <member name="T:QtWidgets.QGesture">
            <summary>
            <para>The QGesture class represents a gesture, containing properties
            that describe the corresponding user input.</para>
            </summary>
            <remarks>
            <para>Gesture objects are not constructed directly by developers. They
            are created by the QGestureRecognizer object that is registered with the
            application; see QGestureRecognizer::registerRecognizer().</para>
            <para>For an overview of gesture handling in Qt and information on
            using gestures in your applications, see the Gestures in Widgets and
            Graphics View document.</para>
            <para></para>
            <para>Gesture Properties</para>
            <para>The class has a list of properties that can be queried by the
            user to get some gesture-specific arguments. For example, the pinch gesture
            has a scale factor that is exposed as a property.</para>
            <para>Developers of custom gesture recognizers can add additional
            properties in order to provide additional information about a gesture. This
            can be done by adding new dynamic properties to a QGesture object, or by
            subclassing the QGesture class (or one of its subclasses).</para>
            <para></para>
            <para>Lifecycle of a Gesture Object</para>
            <para>A QGesture instance is implicitly created when needed and is
            owned by Qt. Developers should never destroy them or store them for later
            use as Qt may destroy particular instances of them and create new ones to
            replace them.</para>
            <para>The registered gesture recognizer monitors the input events for
            the target object via its recognize() function, updating the properties of
            the gesture object as required.</para>
            <para>The gesture object may be delivered to the target object in a
            QGestureEvent if the corresponding gesture is active or has just been
            canceled. Each event that is delivered contains a list of gesture objects,
            since support for more than one gesture may be enabled for the target
            object. Due to the way events are handled in Qt, gesture events may be
            filtered by other objects.</para>
            <para></para>
            <para>See also QGestureEvent and QGestureRecognizer.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGesture.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new gesture object with the given parent.</para>
            <para>QGesture objects are created by gesture recognizers in the
            QGestureRecognizer::create() function.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGesture.UnsetHotSpot">
            <summary>
            <para>This property holds the point that is used to find the receiver
            for the gesture event.</para>
            <para>The hot-spot is a point in the global coordinate system, use
            QWidget::mapFromGlobal() or QGestureEvent::mapToGraphicsScene() to get a
            local hot-spot.</para>
            <para>The hot-spot should be set by the gesture recognizer to allow
            gesture event delivery to a QGraphicsObject.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGesture.HotSpot">
            <summary>
            <para>This property holds the point that is used to find the receiver
            for the gesture event.</para>
            <para>The hot-spot is a point in the global coordinate system, use
            QWidget::mapFromGlobal() or QGestureEvent::mapToGraphicsScene() to get a
            local hot-spot.</para>
            <para>The hot-spot should be set by the gesture recognizer to allow
            gesture event delivery to a QGraphicsObject.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGesture.gestureCancelPolicy">
            <summary>
            <para>This property holds the policy for deciding what happens on
            accepting a gesture.</para>
            <para>On accepting one gesture Qt can automatically cancel other
            gestures that belong to other targets. The policy is normally set to not
            cancel any other gestures and can be set to cancel all active gestures in
            the context. For example for all child widgets.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGesture.GestureType">
            <summary>
            <para>This property holds the type of the gesture.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGesture.State">
            <summary>
            <para>This property holds the current state of the gesture.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGesture.HasHotSpot">
            <summary>
            <para>This property holds whether the gesture has a hot-spot.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGesture.GestureCancelPolicy">
            <summary>
            <para>This enum describes how accepting a gesture can cancel other
            gestures automatically.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGesture.GestureCancelPolicy.CancelNone">
            <summary>On accepting this gesture no other gestures will be affected.</summary>
        </member>
        <member name="F:QtWidgets.QGesture.GestureCancelPolicy.CancelAllInContext">
            <summary>On accepting this gesture all gestures that are active in the context (respecting the Qt::GestureFlag that were specified when subscribed to the gesture) will be cancelled.</summary>
        </member>
        <member name="T:QtWidgets.QPanGesture">
            <summary>
            <para>The QPanGesture class describes a panning gesture made by the
            user.</para>
            </summary>
            <remarks>
            <para></para>
            <para>For an overview of gesture handling in Qt and information on
            using gestures in your applications, see the Gestures in Widgets and
            Graphics View document.</para>
            <para></para>
            <para>See also QPinchGesture and QSwipeGesture.</para>
            </remarks>
        </member>
        <member name="P:QtWidgets.QPanGesture.LastOffset">
            <summary>
            <para>This property holds the last offset recorded for this
            gesture.</para>
            <para>The last offset contains the change in position of the user's
            input as reported in the offset property when a previous gesture event was
            delivered for this gesture.</para>
            <para>If no previous event was delivered with information about this
            gesture (i.e., this gesture object contains information about the first
            movement in the gesture) then this property contains a zero size.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPanGesture.Offset">
            <summary>
            <para>This property holds the total offset from the first input
            position to the current input position.</para>
            <para>The offset measures the total change in position of the user's
            input covered by the gesture on the input device.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPanGesture.Acceleration">
            <summary>
            <para>This property holds the acceleration in the motion of the touch
            point for this gesture.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPanGesture.Delta">
            <summary>
            <para>This property holds the offset from the previous input position
            to the current input.</para>
            <para>This is essentially the same as the difference between offset()
            and lastOffset().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QPinchGesture">
            <summary>
            <para>The QPinchGesture class describes a pinch gesture made by the
            user.</para>
            </summary>
            <remarks>
            <para>A pinch gesture is a form of touch user input in which the user
            typically touches two points on the input device with a thumb and finger,
            before moving them closer together or further apart to change the scale
            factor, zoom, or level of detail of the user interface.</para>
            <para>For an overview of gesture handling in Qt and information on
            using gestures in your applications, see the Gestures in Widgets and
            Graphics View document.</para>
            <para></para>
            <para>Instead of repeatedly applying the same pinching gesture, the
            user may continue to touch the input device in one place, and apply a
            second touch to a new point, continuing the gesture. When this occurs,
            gesture events will continue to be delivered to the target object,
            containing an instance of QPinchGesture in the Qt::GestureUpdated
            state.</para>
            <para></para>
            <para>See also QPanGesture and QSwipeGesture.</para>
            </remarks>
        </member>
        <member name="P:QtWidgets.QPinchGesture.TotalChangeFlags">
            <summary>
            <para>This property holds the property of the gesture that has
            change.</para>
            <para>This property indicates which of the other properties has changed
            since the gesture has started. You can use this information to determine
            which aspect of your user interface needs to be updated.</para>
            <para>See also changeFlags, scaleFactor, rotationAngle, and
            centerPoint.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPinchGesture.ChangeFlags">
            <summary>
            <para>This property holds the property of the gesture that has changed
            in the current step.</para>
            <para>This property indicates which of the other properties has changed
            since the previous gesture event included information about this gesture.
            You can use this information to determine which aspect of your user
            interface needs to be updated.</para>
            <para>See also totalChangeFlags, scaleFactor, rotationAngle, and
            centerPoint.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPinchGesture.StartCenterPoint">
            <summary>
            <para>This property holds the starting position of the center
            point.</para>
            <para>See also centerPoint and lastCenterPoint.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPinchGesture.LastCenterPoint">
            <summary>
            <para>This property holds the last position of the center point
            recorded for this gesture.</para>
            <para>See also centerPoint and startCenterPoint.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPinchGesture.CenterPoint">
            <summary>
            <para>This property holds the current center point.</para>
            <para>The center point is the midpoint between the two input points in
            the gesture.</para>
            <para>See also startCenterPoint and lastCenterPoint.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPinchGesture.TotalScaleFactor">
            <summary>
            <para>This property holds the total scale factor.</para>
            <para>The total scale factor measures the total change in scale factor
            from the original value to the current scale factor.</para>
            <para>See also scaleFactor and lastScaleFactor.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPinchGesture.LastScaleFactor">
            <summary>
            <para>This property holds the last scale factor recorded for this
            gesture.</para>
            <para>The last scale factor contains the scale factor reported in the
            scaleFactor property when a previous gesture event included information
            about this gesture.</para>
            <para>If no previous event was delivered with information about this
            gesture (i.e., this gesture object contains information about the first
            movement in the gesture) then this property contains zero.</para>
            <para>See also scaleFactor and totalScaleFactor.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPinchGesture.ScaleFactor">
            <summary>
            <para>This property holds the current scale factor.</para>
            <para>The scale factor measures the scale factor associated with the
            distance between two of the user's inputs on a touch device.</para>
            <para>See also totalScaleFactor and lastScaleFactor.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPinchGesture.TotalRotationAngle">
            <summary>
            <para>This property holds the total angle covered by the
            gesture.</para>
            <para>This total angle measures the complete angle covered by the
            gesture. Usually, this is equal to the value held by the rotationAngle
            property, except in the case where the user performs multiple rotations by
            removing and repositioning one of the touch points, as described above. In
            this case, the total angle will be the sum of the rotation angles for the
            multiple stages of the gesture.</para>
            <para>See also rotationAngle and lastRotationAngle.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPinchGesture.LastRotationAngle">
            <summary>
            <para>This property holds the last reported angle covered by the
            gesture motion.</para>
            <para>The last rotation angle is the angle as reported in the
            rotationAngle property when a previous gesture event was delivered for this
            gesture.</para>
            <para>See also rotationAngle and totalRotationAngle.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPinchGesture.RotationAngle">
            <summary>
            <para>This property holds the angle covered by the gesture
            motion.</para>
            <para>See also totalRotationAngle and lastRotationAngle.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QPinchGesture.ChangeFlag">
            <summary>
            <para>This enum describes the changes that can occur to the properties
            of the gesture object.</para>
            <para>The ChangeFlags type is a typedef for QFlags&lt;ChangeFlag&gt;.
            It stores an OR combination of ChangeFlag values.</para>
            <para>See also changeFlags and totalChangeFlags.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QPinchGesture.ChangeFlag.ScaleFactorChanged">
            <summary>The scale factor held by scaleFactor changed.</summary>
        </member>
        <member name="F:QtWidgets.QPinchGesture.ChangeFlag.RotationAngleChanged">
            <summary>The rotation angle held by rotationAngle changed.</summary>
        </member>
        <member name="F:QtWidgets.QPinchGesture.ChangeFlag.CenterPointChanged">
            <summary>The center point held by centerPoint changed.</summary>
        </member>
        <member name="T:QtWidgets.QSwipeGesture">
            <summary>
            <para>The QSwipeGesture class describes a swipe gesture made by the
            user.</para>
            </summary>
            <remarks>
            <para></para>
            <para>For an overview of gesture handling in Qt and information on
            using gestures in your applications, see the Gestures in Widgets and
            Graphics View document.</para>
            <para></para>
            <para>See also QPanGesture and QPinchGesture.</para>
            </remarks>
        </member>
        <member name="P:QtWidgets.QSwipeGesture.SwipeAngle">
            <summary>
            <para>This property holds the angle of the motion associated with the
            gesture.</para>
            <para>If the gesture has either a horizontal or vertical component, the
            swipe angle describes the angle between the direction of motion and the
            x-axis as defined using the standard widget coordinate system.</para>
            <para>See also horizontalDirection and verticalDirection.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSwipeGesture.HorizontalDirection">
            <summary>
            <para>This property holds the horizontal direction of the
            gesture.</para>
            <para>If the gesture has a horizontal component, the horizontal
            direction is either Left or Right; otherwise, it is NoDirection.</para>
            <para>See also verticalDirection and swipeAngle.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSwipeGesture.VerticalDirection">
            <summary>
            <para>This property holds the vertical direction of the gesture.</para>
            <para>If the gesture has a vertical component, the vertical direction
            is either Up or Down; otherwise, it is NoDirection.</para>
            <para>See also horizontalDirection and swipeAngle.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QSwipeGesture.SwipeDirection">
            <summary>
            <para>This enum describes the possible directions for the gesture's
            motion along the horizontal and vertical axes.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QSwipeGesture.SwipeDirection.NoDirection">
            <summary>The gesture had no motion associated with it on a particular axis.</summary>
        </member>
        <member name="F:QtWidgets.QSwipeGesture.SwipeDirection.Left">
            <summary>The gesture involved a horizontal motion to the left.</summary>
        </member>
        <member name="F:QtWidgets.QSwipeGesture.SwipeDirection.Right">
            <summary>The gesture involved a horizontal motion to the right.</summary>
        </member>
        <member name="F:QtWidgets.QSwipeGesture.SwipeDirection.Up">
            <summary>The gesture involved an upward vertical motion.</summary>
        </member>
        <member name="F:QtWidgets.QSwipeGesture.SwipeDirection.Down">
            <summary>The gesture involved a downward vertical motion.</summary>
        </member>
        <member name="T:QtWidgets.QTapGesture">
            <summary>
            <para>The QTapGesture class describes a tap gesture made by the
            user.</para>
            </summary>
            <remarks>
            <para>For an overview of gesture handling in Qt and information on
            using gestures in your applications, see the Gestures in Widgets and
            Graphics View document.</para>
            <para></para>
            <para>See also QPanGesture and QPinchGesture.</para>
            </remarks>
        </member>
        <member name="P:QtWidgets.QTapGesture.Position">
            <summary>
            <para>This property holds the position of the tap.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTapAndHoldGesture">
            <summary>
            <para>The QTapAndHoldGesture class describes a tap-and-hold (aka
            LongTap) gesture made by the user.</para>
            </summary>
            <remarks>
            <para>For an overview of gesture handling in Qt and information on
            using gestures in your applications, see the Gestures in Widgets and
            Graphics View document.</para>
            <para></para>
            <para>See also QPanGesture and QPinchGesture.</para>
            </remarks>
        </member>
        <member name="P:QtWidgets.QTapAndHoldGesture.Position">
            <summary>
            <para>This property holds the position of the tap.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTapAndHoldGesture.Timeout">
            <summary>
            <para>Gets the timeout, in milliseconds, before the gesture
            triggers.</para>
            <para>The recognizer will detect a touch down and if timeout() later
            the touch is still down, it will trigger the QTapAndHoldGesture. The
            default value is 700 milliseconds.</para>
            <para>See also setTimeout().</para>
            <para></para>
            <para>Set the timeout, in milliseconds, before the gesture
            triggers.</para>
            <para>The recognizer will detect a touch down and if msecs later the
            touch is still down, it will trigger the QTapAndHoldGesture. The default
            value is 700 milliseconds.</para>
            <para>See also timeout().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGestureEvent">
            <summary>
            <para>The QGestureEvent class provides the description of triggered
            gestures.</para>
            </summary>
            <remarks>
            <para>The QGestureEvent class contains a list of gestures, which can be
            obtained using the gestures() function.</para>
            <para>The gestures are either active or canceled. A list of those that
            are currently being executed can be obtained using the activeGestures()
            function. A list of those which were previously active and have been
            canceled can be accessed using the canceledGestures() function. A gesture
            might be canceled if the current window loses focus, for example, or
            because of a timeout, or for other reasons.</para>
            <para>If the event handler does not accept the event by calling the
            generic QEvent::accept() function, all individual QGesture object that were
            not accepted and in the Qt::GestureStarted state will be propagated up the
            parent widget chain until a widget accepts them individually, by calling
            QGestureEvent::accept() for each of them, or an event filter consumes the
            event.</para>
            <para></para>
            <para>Further Reading</para>
            <para>For an overview of gesture handling in Qt and information on
            using gestures in your applications, see the Gestures in Widgets and
            Graphics View document.</para>
            <para></para>
            <para>See also QGesture, QGestureRecognizer, QWidget::grabGesture(),
            and QGraphicsObject::grabGesture().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGestureEvent.Gesture(QtCore.Qt.GestureType)">
            <summary>
            <para>Returns a gesture object by type.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGestureEvent.SetAccepted(QtWidgets.QGesture,System.Boolean)">
            <summary>
            <para>Sets the accept flag of the given gesture object to the specified
            value.</para>
            <para>Setting the accept flag indicates that the event receiver wants
            the gesture. Unwanted gestures may be propagated to the parent
            widget.</para>
            <para>By default, gestures in events of type QEvent::Gesture are
            accepted, and gestures in QEvent::GestureOverride events are
            ignored.</para>
            <para>For convenience, the accept flag can also be set with
            accept(gesture), and cleared with ignore(gesture).</para>
            <para>See also isAccepted().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGestureEvent.Accept(QtWidgets.QGesture)">
            <summary>
            <para>Sets the accept flag of the given gesture object, the equivalent
            of calling setAccepted(gesture, true).</para>
            <para>Setting the accept flag indicates that the event receiver wants
            the gesture. Unwanted gestures may be propagated to the parent
            widget.</para>
            <para>See also QGestureEvent::ignore().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGestureEvent.Ignore(QtWidgets.QGesture)">
            <summary>
            <para>Clears the accept flag parameter of the given gesture object, the
            equivalent of calling setAccepted(gesture, false).</para>
            <para>Clearing the accept flag indicates that the event receiver does
            not want the gesture. Unwanted gestures may be propagated to the parent
            widget.</para>
            <para>See also QGestureEvent::accept().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGestureEvent.IsAccepted(QtWidgets.QGesture)">
            <summary>
            <para>Returns true if the gesture is accepted; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGestureEvent.SetAccepted(QtCore.Qt.GestureType,System.Boolean)">
            <summary>
            <para>Sets the accept flag of the given gestureType object to the
            specified value.</para>
            <para>Setting the accept flag indicates that the event receiver wants
            to receive gestures of the specified type, gestureType. Unwanted gestures
            may be propagated to the parent widget.</para>
            <para>By default, gestures in events of type QEvent::Gesture are
            accepted, and gestures in QEvent::GestureOverride events are
            ignored.</para>
            <para>For convenience, the accept flag can also be set with
            accept(gestureType), and cleared with ignore(gestureType).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGestureEvent.Accept(QtCore.Qt.GestureType)">
            <summary>
            <para>Sets the accept flag of the given gestureType, the equivalent of
            calling setAccepted(gestureType, true).</para>
            <para>Setting the accept flag indicates that the event receiver wants
            the gesture. Unwanted gestures may be propagated to the parent
            widget.</para>
            <para>See also QGestureEvent::ignore().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGestureEvent.Ignore(QtCore.Qt.GestureType)">
            <summary>
            <para>Clears the accept flag parameter of the given gestureType, the
            equivalent of calling setAccepted(gesture, false).</para>
            <para>Clearing the accept flag indicates that the event receiver does
            not want the gesture. Unwanted gestures may be propgated to the parent
            widget.</para>
            <para>See also QGestureEvent::accept().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGestureEvent.IsAccepted(QtCore.Qt.GestureType)">
            <summary>
            <para>Returns true if the gesture of type gestureType is accepted;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGestureEvent.MapToGraphicsScene(QtCore.QPointF)">
            <summary>
            <para>Returns the scene-local coordinates if the gesturePoint is inside
            a graphics view.</para>
            <para>This functional might be useful when the gesture event is
            delivered to a QGraphicsObject to translate a point in screen coordinates
            to scene-local coordinates.</para>
            <para>See also QPointF::isNull().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGestureEvent.Widget">
            <summary>
            <para>Returns the widget on which the event occurred.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGestureRecognizer">
            <summary>
            <para>The QGestureRecognizer class provides the infrastructure for
            gesture recognition.</para>
            </summary>
            <remarks>
            <para>Gesture recognizers are responsible for creating and managing
            QGesture objects and monitoring input events sent to QWidget and
            QGraphicsObject subclasses. QGestureRecognizer is the base class for
            implementing custom gestures.</para>
            <para>Developers that only need to provide gesture recognition for
            standard gestures do not need to use this class directly. Instances will be
            created behind the scenes by the framework.</para>
            <para>For an overview of gesture handling in Qt and information on
            using gestures in your applications, see the Gestures in Widgets and
            Graphics View document.</para>
            <para></para>
            <para>Recognizing Gestures</para>
            <para>The process of recognizing gestures involves filtering input
            events sent to specific objects, and modifying the associated QGesture
            objects to include relevant information about the user's input.</para>
            <para>Gestures are created when the framework calls create() to handle
            user input for a particular instance of a QWidget or QGraphicsObject
            subclass. A QGesture object is created for each widget or item that is
            configured to use gestures.</para>
            <para>Once a QGesture has been created for a target object, the gesture
            recognizer will receive events for it in its recognize() handler
            function.</para>
            <para>When a gesture is canceled, the reset() function is called,
            giving the recognizer the chance to update the appropriate properties in
            the corresponding QGesture object.</para>
            <para></para>
            <para>Supporting New Gestures</para>
            <para>To add support for new gestures, you need to derive from
            QGestureRecognizer to create a custom recognizer class, construct an
            instance of this class, and register it with the application by calling
            QGestureRecognizer::registerRecognizer(). You can also subclass QGesture to
            create a custom gesture class, or rely on dynamic properties to express
            specific details of the gesture you want to handle.</para>
            <para>Your custom QGestureRecognizer subclass needs to reimplement the
            recognize() function to handle and filter the incoming input events for
            QWidget and QGraphicsObject subclasses. Although the logic for gesture
            recognition is implemented in this function, you can store persistent
            information about the state of the recognition process in the QGesture
            object supplied. The recognize() function must return a value of
            QGestureRecognizer::Result that indicates the state of recognition for a
            given gesture and target object. This determines whether or not a gesture
            event will be delivered to a target object.</para>
            <para>If you choose to represent a gesture by a custom QGesture
            subclass, you will need to reimplement the create() function to construct
            instances of your gesture class. Similarly, you may need to reimplement the
            reset() function if your custom gesture objects need to be specially
            handled when a gesture is canceled.</para>
            <para></para>
            <para>See also QGesture.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGestureRecognizer.#ctor">
            <summary>
            <para>Constructs a new gesture recognizer object.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGestureRecognizer.Create(QtCore.QObject)">
            <summary>
            <para>This function is called by Qt to create a new QGesture object for
            the given target (QWidget or QGraphicsObject).</para>
            <para>Reimplement this function to create a custom QGesture-derived
            gesture object if necessary.</para>
            <para>The application takes ownership of the created gesture
            object.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGestureRecognizer.Recognize(QtWidgets.QGesture,QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Handles the given event for the watched object, updating the
            state of the gesture object as required, and returns a suitable result for
            the current recognition step.</para>
            <para>This function is called by the framework to allow the recognizer
            to filter input events dispatched to QWidget or QGraphicsObject instances
            that it is monitoring.</para>
            <para>The result reflects how much of the gesture has been recognized.
            The state of the gesture object is set depending on the result.</para>
            <para>See also QGestureRecognizer::Result.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGestureRecognizer.Reset(QtWidgets.QGesture)">
            <summary>
            <para>This function is called by the framework to reset a given
            gesture.</para>
            <para>Reimplement this function to implement additional requirements
            for custom QGesture objects. This may be necessary if you implement a
            custom QGesture whose properties need special handling when the gesture is
            reset.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGestureRecognizer.RegisterRecognizer(QtWidgets.QGestureRecognizer)">
            <summary>
            <para>Registers the given recognizer in the gesture framework and
            returns a gesture ID for it.</para>
            <para>The application takes ownership of the recognizer and returns the
            gesture type ID associated with it. For gesture recognizers which handle
            custom QGesture objects (i.e., those which return Qt::CustomGesture in a
            QGesture::gestureType() function) the return value is a generated gesture
            ID with the Qt::CustomGesture flag set.</para>
            <para>See also unregisterRecognizer(), QGestureRecognizer::create(),
            and QGesture.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGestureRecognizer.UnregisterRecognizer(QtCore.Qt.GestureType)">
            <summary>
            <para>Unregisters all gesture recognizers of the specified type.</para>
            <para>See also registerRecognizer().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QGestureRecognizer.ResultFlag">
            <summary>
            <para>This enum describes the result of the current event filtering
            step in a gesture recognizer state machine.</para>
            <para>The result consists of a state value (one of Ignore,
            MayBeGesture, TriggerGesture, FinishGesture, CancelGesture) and an optional
            hint (ConsumeEventHint).</para>
            <para>The Result type is a typedef for QFlags&lt;ResultFlag&gt;. It
            stores an OR combination of ResultFlag values.</para>
            <para>See also QGestureRecognizer::recognize().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QGestureRecognizer.ResultFlag.Ignore">
            <summary>The event does not change the state of the recognizer.</summary>
        </member>
        <member name="F:QtWidgets.QGestureRecognizer.ResultFlag.MayBeGesture">
            <summary>The event changed the internal state of the recognizer, but it isn't clear yet if it is a gesture or not. The recognizer needs to filter more events to decide. Gesture recognizers in the MayBeGesture state may be reset automatically if they take too long to recognize gestures.</summary>
        </member>
        <member name="F:QtWidgets.QGestureRecognizer.ResultFlag.TriggerGesture">
            <summary>The gesture has been triggered and the appropriate QGesture object will be delivered to the target as a part of a QGestureEvent.</summary>
        </member>
        <member name="F:QtWidgets.QGestureRecognizer.ResultFlag.FinishGesture">
            <summary>The gesture has been finished successfully and the appropriate QGesture object will be delivered to the target as a part of a QGestureEvent.</summary>
        </member>
        <member name="F:QtWidgets.QGestureRecognizer.ResultFlag.CancelGesture">
            <summary>The event made it clear that it is not a gesture. If the gesture recognizer was in GestureTriggered state before, then the gesture is canceled and the appropriate QGesture object will be delivered to the target as a part of a QGestureEvent.</summary>
        </member>
        <member name="F:QtWidgets.QGestureRecognizer.ResultFlag.ConsumeEventHint">
            <summary>This hint specifies that the gesture framework should consume the filtered event and not deliver it to the receiver.</summary>
        </member>
        <member name="T:QtWidgets.QOpenGLWidget">
            <summary>
            <para>The QOpenGLWidget class is a widget for rendering OpenGL
            graphics.</para>
            </summary>
            <remarks>
            <para>QOpenGLWidget provides functionality for displaying OpenGL
            graphics integrated into a Qt application. It is very simple to use: Make
            your class inherit from it and use the subclass like any other QWidget,
            except that you have the choice between using QPainter and standard OpenGL
            rendering commands.</para>
            <para>QOpenGLWidget provides three convenient virtual functions that
            you can reimplement in your subclass to perform the typical OpenGL
            tasks:</para>
            <para></para>
            <para>paintGL() - Renders the OpenGL scene. Gets called whenever the
            widget needs to be updated.</para>
            <para>resizeGL() - Sets up the OpenGL viewport, projection, etc. Gets
            called whenever the widget has been resized (and also when it is shown for
            the first time because all newly created widgets get a resize event
            automatically).</para>
            <para>initializeGL() - Sets up the OpenGL resources and state. Gets
            called once before the first time resizeGL() or paintGL() is called.</para>
            <para></para>
            <para>If you need to trigger a repaint from places other than paintGL()
            (a typical example is when using timers to animate scenes), you should call
            the widget's update() function to schedule an update.</para>
            <para>Your widget's OpenGL rendering context is made current when
            paintGL(), resizeGL(), or initializeGL() is called. If you need to call the
            standard OpenGL API functions from other places (e.g. in your widget's
            constructor or in your own paint functions), you must call makeCurrent()
            first.</para>
            <para>All rendering happens into an OpenGL framebuffer object.
            makeCurrent() ensure that it is bound in the context. Keep this in mind
            when creating and binding additional framebuffer objects in the rendering
            code in paintGL(). Never re-bind the framebuffer with ID 0. Instead, call
            defaultFramebufferObject() to get the ID that should be bound.</para>
            <para>QOpenGLWidget allows using different OpenGL versions and profiles
            when the platform supports it. Just set the requested format via
            setFormat(). Keep in mind however that having multiple QOpenGLWidget
            instances in the same window requires that they all use the same format, or
            at least formats that do not make the contexts non-sharable. To overcome
            this issue, prefer using QSurfaceFormat::setDefaultFormat() instead of
            setFormat().</para>
            <para>Note: Calling QSurfaceFormat::setDefaultFormat() before
            constructing the QApplication instance is mandatory on some platforms (for
            example, OS X) when an OpenGL core profile context is requested. This is to
            ensure that resource sharing between contexts stays functional as all
            internal contexts are created using the correct version and profile.</para>
            <para></para>
            <para>Painting Techniques</para>
            <para>As described above, subclass QOpenGLWidget to render pure 3D
            content in the following way:</para>
            <para></para>
            <para>Reimplement the initializeGL() and resizeGL() functions to set up
            the OpenGL state and provide a perspective transformation.</para>
            <para>Reimplement paintGL() to paint the 3D scene, calling only OpenGL
            functions.</para>
            <para></para>
            <para>It is also possible to draw 2D graphics onto a QOpenGLWidget
            subclass using QPainter:</para>
            <para></para>
            <para>In paintGL(), instead of issuing OpenGL commands, construct a
            QPainter object for use on the widget.</para>
            <para>Draw primitives using QPainter's member functions.</para>
            <para>Direct OpenGL commands can still be issued. However, you must
            make sure these are enclosed by a call to the painter's
            beginNativePainting() and endNativePainting().</para>
            <para></para>
            <para>When performing drawing using QPainter only, it is also possible
            to perform the painting like it is done for ordinary widgets: by
            reimplementing paintEvent().</para>
            <para></para>
            <para>Reimplement the paintEvent() function.</para>
            <para>Construct a QPainter object targeting the widget. Either pass the
            widget to the constructor or the QPainter::begin() function.</para>
            <para>Draw primitives using QPainter's member functions.</para>
            <para>Painting finishes then the QPainter instance is destroyed.
            Alternatively, call QPainter::end() explicitly.</para>
            <para></para>
            <para></para>
            <para>OpenGL Function Calls, Headers and QOpenGLFunctions</para>
            <para>When making OpenGL function calls, it is strongly recommended to
            avoid calling the functions directly. Instead, prefer using
            QOpenGLFunctions (when making portable applications) or the versioned
            variants (for example, QOpenGLFunctions_3_2_Core and similar, when
            targeting modern, desktop-only OpenGL). This way the application will work
            correctly in all Qt build configurations, including the ones that perform
            dynamic OpenGL implementation loading which means applications are not
            directly linking to an GL implementation and thus direct function calls are
            not feasible.</para>
            <para>In paintGL() the current context is always accessible by caling
            QOpenGLContext::currentContext(). From this context an already initialized,
            ready-to-be-used QOpenGLFunctions instance is retrievable by calling
            QOpenGLContext::functions(). An alternative to prefixing every GL call is
            to inherit from QOpenGLFunctions and call
            QOpenGLFunctions::initializeOpenGLFunctions() in initializeGL().</para>
            <para>As for the OpenGL headers, note that in most cases there will be
            no need to directly include any headers like GL.h. The OpenGL-related Qt
            headers will include qopengl.h which will in turn include an appropriate
            header for the system. This might be an OpenGL ES 3.x or 2.0 header, the
            highest version that is available, or a system-provided gl.h. In addition,
            a copy of the extension headers (called glext.h on some systems) is
            provided as part of Qt both for OpenGL and OpenGL ES. These will get
            included automatically on platforms where feasible. This means that
            constants and function pointer typedefs from ARB, EXT, OES extensions are
            automatically available.</para>
            <para></para>
            <para>Code Examples</para>
            <para>To get started, the simplest QOpenGLWidget subclass could like
            like the following:</para>
            <para>class MyGLWidget : public QOpenGLWidget</para>
            <para>{</para>
            <para>public:</para>
            <para>    MyGLWidget(QWidget *parent) : QOpenGLWidget(parent) {
            }</para>
            <para></para>
            <para>protected:</para>
            <para>    void initializeGL()</para>
            <para>    {</para>
            <para>        // Set up the rendering context, load shaders and other
            resources, etc.:</para>
            <para>        QOpenGLFunctions *f =
            QOpenGLContext::currentContext()-&gt;functions();</para>
            <para>        f-&gt;glClearColor(1.0f, 1.0f, 1.0f, 1.0f);</para>
            <para>        ...</para>
            <para>    }</para>
            <para></para>
            <para>    void resizeGL(int w, int h)</para>
            <para>    {</para>
            <para>        // Update projection matrix and other size related
            settings:</para>
            <para>        m_projection.setToIdentity();</para>
            <para>        m_projection.perspective(45.0f, w / float(h), 0.01f,
            100.0f);</para>
            <para>        ...</para>
            <para>    }</para>
            <para></para>
            <para>    void paintGL()</para>
            <para>    {</para>
            <para>        // Draw the scene:</para>
            <para>        QOpenGLFunctions *f =
            QOpenGLContext::currentContext()-&gt;functions();</para>
            <para>        f-&gt;glClear(GL_COLOR_BUFFER_BIT);</para>
            <para>        ...</para>
            <para>    }</para>
            <para></para>
            <para>};</para>
            <para>Alternatively, the prefixing of each and every OpenGL call can be
            avoided by deriving from QOpenGLFunctions instead:</para>
            <para>class MyGLWidget : public QOpenGLWidget, protected
            QOpenGLFunctions</para>
            <para>{</para>
            <para>    ...</para>
            <para>    void initializeGL()</para>
            <para>    {</para>
            <para>        initializeOpenGLFunctions();</para>
            <para>        glClearColor(...);</para>
            <para>        ...</para>
            <para>    }</para>
            <para>    ...</para>
            <para>};</para>
            <para>To get a context compatible with a given OpenGL version or
            profile, or to request depth and stencil buffers, call setFormat():</para>
            <para>QOpenGLWidget *widget = new QOpenGLWidget(parent);</para>
            <para>QSurfaceFormat format;</para>
            <para>format.setDepthBufferSize(24);</para>
            <para>format.setStencilBufferSize(8);</para>
            <para>format.setVersion(3, 2);</para>
            <para>format.setProfile(QSurfaceFormat::CoreProfile);</para>
            <para>widget-&gt;setFormat(format); // must be called before the widget
            or its parent window gets shown</para>
            <para>With OpenGL 3.0+ contexts, when portability is not important, the
            versioned QOpenGLFunctions variants give easy access to all the modern
            OpenGL functions available in a given version:</para>
            <para>    ...</para>
            <para>    void paintGL()</para>
            <para>    {</para>
            <para>        QOpenGLFunctions_3_2_Core *f =
            QOpenGLContext::currentContext()-&gt;versionFunctions&lt;QOpenGLFunctions_3
            _2_Core&gt;();</para>
            <para>        ...</para>
            <para>        f-&gt;glDrawArraysInstanced(...);</para>
            <para>        ...</para>
            <para>    }</para>
            <para>    ...</para>
            <para>As described above, it is simpler and more robust to set the
            requested format globally so that it applies to all windows and contexts
            during the lifetime of the application. Below is an example of this:</para>
            <para>int main(int argc, char **argv)</para>
            <para>{</para>
            <para>    QApplication app(argc, argv);</para>
            <para></para>
            <para>    QSurfaceFormat format;</para>
            <para>    format.setDepthBufferSize(24);</para>
            <para>    format.setStencilBufferSize(8);</para>
            <para>    format.setVersion(3, 2);</para>
            <para>    format.setProfile(QSurfaceFormat::CoreProfile);</para>
            <para>    QSurfaceFormat::setDefaultFormat(format);</para>
            <para></para>
            <para>    MyWidget widget;</para>
            <para>    widget.show();</para>
            <para></para>
            <para>    return app.exec();</para>
            <para>}</para>
            <para></para>
            <para>Relation to QGLWidget</para>
            <para>The legacy QtOpenGL module (classes prefixed with QGL) provides a
            widget called QGLWidget. QOpenGLWidget is intended to be a modern
            replacement for it. Therefore, especially in new applications, the general
            recommendation is to use QOpenGLWidget.</para>
            <para>While the API is very similar, there is an important difference
            between the two: QOpenGLWidget always renders offscreen, using framebuffer
            objects. QGLWidget on the other hand uses a native window and surface. The
            latter causes issues when using it in complex user interfaces since,
            depending on the platform, such native child widgets may have various
            limitations, regarding stacking orders for example. QOpenGLWidget avoids
            this by not creating a separate native window.</para>
            <para>Due to being backed by a framebuffer object, the behavior of
            QOpenGLWidget is very similar to QOpenGLWindow with the update behavior set
            to PartialUpdateBlit or PartialUpdateBlend. This means that the contents
            are preserved between paintGL() calls so that incremental rendering is
            possible. With QGLWidget (and naturally QOpenGLWindow with the default
            update behavior) this is usually not the case because swapping the buffers
            leaves the back buffer with undefined contents.</para>
            <para>Note: Most applications do not need incremental rendering because
            they will render everything in the view on every paint call. In this case
            it is important to call glClear() as early as possible in paintGL(). This
            helps mobile GPUs that use a tile-based architecture to recognize that the
            tile buffer does not need to be reloaded with the framebuffer's previous
            contents. Omitting the clear call can lead to significant performance drops
            on such systems.</para>
            <para>Note: Avoid calling winId() on a QOpenGLWidget. This function
            triggers the creation of a native window, resulting in reduced performance
            and possibly rendering glitches.</para>
            <para></para>
            <para>Differences to QGLWidget</para>
            <para>Besides the main conceptual difference of being backed by a
            framebuffer object, there are a number of smaller, internal differences
            between QOpenGLWidget and the older QGLWidget:</para>
            <para></para>
            <para>OpenGL state when invoking paintGL(). QOpenGLWidget sets up the
            viewport via glViewport(). It does not perform any clearing.</para>
            <para>Clearing when starting to paint via QPainter. Unlike regular
            widgets, QGLWidget defaulted to a value of true for autoFillBackground. It
            then performed clearing to the palette's background color every time
            QPainter::begin() was used. QOpenGLWidget does not follow this:
            autoFillBackground defaults to false, like for any other widget. The only
            exception is when being used as a viewport for other widgets like
            QGraphicsView. In such a case autoFillBackground will be automatically set
            to true to ensure compatibility with QGLWidget-based viewports.</para>
            <para></para>
            <para></para>
            <para>Multisampling</para>
            <para>To enable multisampling, set the number of requested samples on
            the QSurfaceFormat that is passed to setFormat(). On systems that do not
            support it the request may get ignored.</para>
            <para>Multisampling support requires support for multisampled
            renderbuffers and framebuffer blits. On OpenGL ES 2.0 implementations it is
            likely that these will not be present. This means that multisampling will
            not be available. With modern OpenGL versions and OpenGL ES 3.0 and up this
            is usually not a problem anymore.</para>
            <para></para>
            <para>Threading</para>
            <para>Performing offscreen rendering on worker threads, for example to
            generate textures that are then used in the GUI/main thread in paintGL(),
            are supported by exposing the widget's QOpenGLContext so that additional
            contexts sharing with it can be created on each thread.</para>
            <para>Drawing directly to the QOpenGLWidget's framebuffer outside the
            GUI/main thread is possible by reimplementing paintEvent() to do nothing.
            The context's thread affinity has to be changed via
            QObject::moveToThread(). After that, makeCurrent() and doneCurrent() are
            usable on the worker thread. Be careful to move the context back to the
            GUI/main thread afterwards.</para>
            <para>Unlike QGLWidget, triggering a buffer swap just for the
            QOpenGLWidget is not possible since there is no real, onscreen native
            surface for it. Instead, it is up to the widget stack to manage composition
            and buffer swaps on the gui thread. When a thread is done updating the
            framebuffer, call update() on the GUI/main thread to schedule
            composition.</para>
            <para>Extra care has to be taken to avoid using the framebuffer when
            the GUI/main thread is performing compositing. The signals aboutToCompose()
            and frameSwapped() will be emitted when the composition is starting and
            ending. They are emitted on the GUI/main thread. This means that by using a
            direct connection aboutToCompose() can block the GUI/main thread until the
            worker thread has finished its rendering. After that, the worker thread
            must perform no further rendering until the frameSwapped() signal is
            emitted. If this is not acceptable, the worker thread has to implement a
            double buffering mechanism. This involves drawing using an alternative
            render target, that is fully controlled by the thread, e.g. an additional
            framebuffer object, and blitting to the QOpenGLWidget's framebuffer at a
            suitable time.</para>
            <para></para>
            <para>Context Sharing</para>
            <para>When multiple QOpenGLWidgets are added as children to the same
            top-level widget, their contexts will share with each other. This does not
            apply for QOpenGLWidget instances that belong to different windows.</para>
            <para>This means that all QOpenGLWidgets in the same window can access
            each other's sharable resources, like textures, and there is no need for an
            extra &quot;global share&quot; context, as was the case with
            QGLWidget.</para>
            <para>To set up sharing between QOpenGLWidget instances belonging to
            different windows, set the Qt::AA_ShareOpenGLContexts application attribute
            before instantiating QApplication. This will trigger sharing between all
            QOpenGLWidget instances without any further steps.</para>
            <para>Creating extra QOpenGLContext instances that share resources like
            textures with the QOpenGLWidget's context is also possible. Simply pass the
            pointer returned from context() to QOpenGLContext::setShareContext() before
            calling QOpenGLContext::create(). The resulting context can also be used on
            a different thread, allowing threaded generation of textures and
            asynchronous texture uploads.</para>
            <para>Note that QOpenGLWidget expects a standard conformant
            implementation of resource sharing when it comes to the underlying graphics
            drivers. For example, some drivers, in particular for mobile and embedded
            hardware, have issues with setting up sharing between an existing context
            and others that are created later. Some other drivers may behave in
            unexpected ways when trying to utilize shared resources between different
            threads.</para>
            <para></para>
            <para>Resource Initialization and Cleanup</para>
            <para>The QOpenGLWidget's associated OpenGL context is guaranteed to be
            current whenever initializeGL() and paintGL() are invoked. Do not attempt
            to create OpenGL resources before initializeGL() is called. For example,
            attempting to compile shaders, initialize vertex buffer objects or upload
            texture data will fail when done in a subclass's constructor. These
            operations must be deferred to initializeGL(). Some of Qt's OpenGL helper
            classes, like QOpenGLBuffer or QOpenGLVertexArrayObject, have a matching
            deferred behavior: they can be instantiated without a context, but all
            initialization is deferred until a create(), or similar, call. This means
            that they can be used as normal (non-pointer) member variables in a
            QOpenGLWidget subclass, but the create() or similar function can only be
            called from initializeGL(). Be aware however that not all classes are
            designed like this. When in doubt, make the member variable a pointer and
            create and destroy the instance dynamically in initializeGL() and the
            destructor, respectively.</para>
            <para>Releasing the resources also needs the context to be current.
            Therefore destructors that perform such cleanup are expected to call
            makeCurrent() before moving on to destroy any OpenGL resources or wrappers.
            Avoid deferred deletion via deleteLater() or the parenting mechanism of
            QObject. There is no guarantee the correct context will be current at the
            time the instance in question is really destroyed.</para>
            <para>A typical subclass will therefore often look like the following
            when it comes to resource initialization and destruction:</para>
            <para>class MyGLWidget : public QOpenGLWidget</para>
            <para>{</para>
            <para>    ...</para>
            <para></para>
            <para>private:</para>
            <para>    QOpenGLVertexArrayObject m_vao;</para>
            <para>    QOpenGLBuffer m_vbo;</para>
            <para>    QOpenGLShaderProgram *m_program;</para>
            <para>    QOpenGLShader *m_shader;</para>
            <para>    QOpenGLTexture *m_texture;</para>
            <para>};</para>
            <para></para>
            <para>MyGLWidget::MyGLWidget()</para>
            <para>    : m_program(0), m_shader(0), m_texture(0)</para>
            <para>{</para>
            <para>    // No OpenGL resource initialization is done here.</para>
            <para>}</para>
            <para></para>
            <para>MyGLWidget::~MyGLWidget()</para>
            <para>{</para>
            <para>    // Make sure the context is current and then
            explicitly</para>
            <para>    // destroy all underlying OpenGL resources.</para>
            <para>    makeCurrent();</para>
            <para></para>
            <para>    delete m_texture;</para>
            <para>    delete m_shader;</para>
            <para>    delete m_program;</para>
            <para></para>
            <para>    m_vbo.destroy();</para>
            <para>    m_vao.destroy();</para>
            <para></para>
            <para>    doneCurrent();</para>
            <para>}</para>
            <para></para>
            <para>void MyGLWidget::initializeGL()</para>
            <para>{</para>
            <para>    m_vao.create();</para>
            <para>    if (m_vao.isCreated())</para>
            <para>        m_vao.bind();</para>
            <para></para>
            <para>    m_vbo.create();</para>
            <para>    m_vbo.bind();</para>
            <para>    m_vbo.allocate(...);</para>
            <para></para>
            <para>    m_texture = new QOpenGLTexture(QImage(...));</para>
            <para></para>
            <para>    m_shader = new QOpenGLShader(...);</para>
            <para>    m_program = new QOpenGLShaderProgram(...);</para>
            <para></para>
            <para>    ...</para>
            <para>}</para>
            <para>This is naturally not the only possible solution. One alternative
            is to use the aboutToBeDestroyed() signal of QOpenGLContext. By connecting
            a slot, using direct connection, to this signal, it is possible to perform
            cleanup whenever the the underlying native context handle, or the entire
            QOpenGLContext instance, is going to be released. The following snippet is
            in principal equivalent to the previous one:</para>
            <para>void MyGLWidget::initializeGL()</para>
            <para>{</para>
            <para>    // context() and QOpenGLContext::currentContext() are
            equivalent when called from initializeGL or paintGL.</para>
            <para>    connect(context(), &amp;QOpenGLContext::aboutToBeDestroyed,
            this, &amp;MyGLWidget::cleanup);</para>
            <para>}</para>
            <para></para>
            <para>void MyGLWidget::cleanup()</para>
            <para>{</para>
            <para>    makeCurrent();</para>
            <para>    delete m_texture;</para>
            <para>    m_texture = 0;</para>
            <para>    ...</para>
            <para>    doneCurrent();</para>
            <para>}</para>
            <para>Note: For widgets that change their associated top-level window
            multiple times during their lifetime, a combined approach is essential.
            Whenever the widget or a parent of it gets reparented so that the top-level
            window becomes different, the widget's associated context is destroyed and
            a new one is created. This is then followed by a call to initializeGL()
            where all OpenGL resources must get reinitialized. Due to this the only
            option to perform proper cleanup is to connect to the context's
            aboutToBeDestroyed() signal. Note that the context in question may not be
            the current one when the signal gets emitted. Therefore it is good practice
            to call makeCurrent() in the connected slot. Additionally, the same cleanup
            steps must be performed from the derived class' destructor, since the slot
            connected to the signal will not get invoked when the widget is being
            destroyed.</para>
            <para>Note: When Qt::AA_ShareOpenGLContexts is set, the widget's
            context never changes, not even when reparenting because the widget's
            associated texture is guaranteed to be accessible also from the new
            top-level's context.</para>
            <para>Proper cleanup is especially important due to context sharing.
            Even though each QOpenGLWidget's associated context is destroyed together
            with the QOpenGLWidget, the sharable resources in that context, like
            textures, will stay valid until the top-level window, in which the
            QOpenGLWidget lived, is destroyed. Additionally, settings like
            Qt::AA_ShareOpenGLContexts and some Qt modules may trigger an even wider
            scope for sharing contexts, potentially leading to keeping the resources in
            question alive for the entire lifetime of the application. Therefore the
            safest and most robust is always to perform explicit cleanup for all
            resources and resource wrappers used in the QOpenGLWidget.</para>
            <para></para>
            <para>Limitations</para>
            <para>Putting other widgets underneath and making the QOpenGLWidget
            transparent will not lead to the expected results: The widgets underneath
            will not be visible. This is because in practice the QOpenGLWidget is drawn
            before all other regular, non-OpenGL widgets, and so see-through type of
            solutions are not feasible. Other type of layouts, like having widgets on
            top of the QOpenGLWidget, will function as expected.</para>
            <para>When absolutely necessary, this limitation can be overcome by
            setting the Qt::WA_AlwaysStackOnTop attribute on the QOpenGLWidget. Be
            aware however that this breaks stacking order, for example it will not be
            possible to have other widgets on top of the QOpenGLWidget, so it should
            only be used in situations where a semi-transparent QOpenGLWidget with
            other widgets visible underneath is required.</para>
            <para>Note that this does not apply when there are no other widgets
            underneath and the intention is to have a semi-transparent window. In that
            case the traditional approach of setting Qt::WA_TranslucentBackground is
            sufficient.</para>
            <para>QOpenGLWidget supports multiple update behaviors, just like
            QOpenGLWindow. In preserved mode the rendered content from the previous
            paintGL() call is available in the next one, allowing incremental
            rendering. In non-preserved mode the content is lost and paintGL()
            implementations are expected to redraw everything in the view.</para>
            <para>Before Qt 5.5 the default behavior of QOpenGLWidget was to
            preserve the rendered contents between paintGL() calls. Since Qt 5.5 the
            default behavior is non-preserved because this provides better performance
            and the majority of applications have no need for the previous content.
            This also resembles the semantics of an OpenGL-based QWindow and matches
            the default behavior of QOpenGLWindow in that the color and ancillary
            buffers are invalidated for each frame. To restore the preserved behavior,
            call setUpdateBehavior() with PartialUpdate.</para>
            <para></para>
            <para>Alternatives</para>
            <para>Adding a QOpenGLWidget into a window turns on OpenGL-based
            compositing for the entire window. In some special cases this may not be
            ideal, and the old QGLWidget-style behavior with a separate, native child
            window is desired. Desktop applications that understand the limitations of
            this approach (for example when it comes to overlaps, transparency, scroll
            views and MDI areas), can use QOpenGLWindow with
            QWidget::createWindowContainer(). This is a modern alternative to QGLWidget
            and is faster than QOpenGLWidget due to the lack of the additional
            composition step. It is strongly recommended to limit the usage of this
            approach to cases where there is no other choice. Note that this option is
            not suitable for most embedded and mobile platforms, and it is known to
            have issues on certain desktop platforms (e.g. OS X) too. The stable,
            cross-platform solution is always QOpenGLWidget.</para>
            <para>OpenGL is a trademark of Silicon Graphics, Inc. in the United
            States and other countries.</para>
            <para></para>
            <para>See also QOpenGLFunctions, QOpenGLWindow,
            Qt::AA_ShareOpenGLContexts, and UpdateBehavior.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QOpenGLWidget.#ctor(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a widget which is a child of parent, with widget flags
            set to f.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QOpenGLWidget.MakeCurrent">
            <summary>
            <para>Prepares for rendering OpenGL content for this widget by making
            the corresponding context current and binding the framebuffer object in
            that context.</para>
            <para>It is not necessary to call this function in most cases, because
            it is called automatically before invoking paintGL().</para>
            <para>See also context(), paintGL(), and doneCurrent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QOpenGLWidget.DoneCurrent">
            <summary>
            <para>Releases the context.</para>
            <para>It is not necessary to call this function in most cases, since
            the widget will make sure the context is bound and released properly when
            invoking paintGL().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QOpenGLWidget.InitializeGL">
            <summary>
            <para>This virtual function is called once before the first call to
            paintGL() or resizeGL(). Reimplement it in a subclass.</para>
            <para>This function should set up any required OpenGL resources and
            state.</para>
            <para>There is no need to call makeCurrent() because this has already
            been done when this function is called. Note however that the framebuffer
            is not yet available at this stage, so avoid issuing draw calls from here.
            Defer such calls to paintGL() instead.</para>
            <para>See also paintGL() and resizeGL().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QOpenGLWidget.ResizeGL(System.Int32,System.Int32)">
            <summary>
            <para>This virtual function is called whenever the widget has been
            resized. Reimplement it in a subclass. The new size is passed in w and
            h.</para>
            <para>There is no need to call makeCurrent() because this has already
            been done when this function is called. Additionally, the framebuffer is
            also bound.</para>
            <para>See also initializeGL() and paintGL().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QOpenGLWidget.PaintGL">
            <summary>
            <para>This virtual function is called whenever the widget needs to be
            painted. Reimplement it in a subclass.</para>
            <para>There is no need to call makeCurrent() because this has already
            been done when this function is called.</para>
            <para>Before invoking this function, the context and the framebuffer
            are bound, and the viewport is set up by a call to glViewport(). No other
            state is set and no clearing or drawing is performed by the
            framework.</para>
            <para>See also initializeGL() and resizeGL().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QOpenGLWidget.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            <para>Handles paint events.</para>
            <para>Calling QWidget::update() will lead to sending a paint event e,
            and thus invoking this function. (NB this is asynchronous and will happen
            at some point after returning from update()). This function will then,
            after some preparation, call the virtual paintGL() to update the contents
            of the QOpenGLWidget's framebuffer. The widget's top-level window will then
            composite the framebuffer's texture with the rest of the window.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QOpenGLWidget.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            <para>Handles resize events that are passed in the e event parameter.
            Calls the virtual function resizeGL().</para>
            <para>Note: Avoid overriding this function in derived classes. If that
            is not feasible, make sure that QOpenGLWidget's implementation is invoked
            too. Otherwise the underlying framebuffer object and related resources will
            not get resized properly and will lead to incorrect rendering.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QOpenGLWidget.AboutToCompose">
            <summary>
            <para>This signal is emitted when the widget's top-level window is about to begin composing the textures of its QOpenGLWidget children and the other widgets.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QOpenGLWidget.FrameSwapped">
            <summary>
            <para>This signal is emitted after the widget's top-level window has finished composition and returned from its potentially blocking QOpenGLContext::swapBuffers() call.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QOpenGLWidget.AboutToResize">
            <summary>
            <para>This signal is emitted when the widget's size is changed and therefore the framebuffer object is going to be recreated.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QOpenGLWidget.Resized">
            <summary>
            <para>This signal is emitted right after the framebuffer object has been recreated due to resizing the widget.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QOpenGLWidget.updateBehavior">
            <summary>
            <para>Returns the update behavior of the widget.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also setUpdateBehavior().</para>
            <para></para>
            <para>Sets this widget's update behavior to updateBehavior.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also updateBehavior().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QOpenGLWidget.Format">
            <summary>
            <para>Returns the context and surface format used by this widget and
            its toplevel window.</para>
            <para>After the widget and its toplevel have both been created, resized
            and shown, this function will return the actual format of the context. This
            may differ from the requested format if the request could not be fulfilled
            by the platform. It is also possible to get larger color buffer sizes than
            requested.</para>
            <para>When the widget's window and the related OpenGL resources are not
            yet initialized, the return value is the format that has been set via
            setFormat().</para>
            <para>See also setFormat() and context().</para>
            <para></para>
            <para>Sets the requested surface format.</para>
            <para>When the format is not explicitly set via this function, the
            format returned by QSurfaceFormat::defaultFormat() will be used. This means
            that when having multiple OpenGL widgets, individual calls to this function
            can be replaced by one single call to QSurfaceFormat::setDefaultFormat()
            before creating the first widget.</para>
            <para>Note: Requesting an alpha buffer via this function, or by setting
            Qt::WA_TranslucentBackground, will not lead to the desired results when the
            intention is to make other widgets beneath visible. Instead, use
            Qt::WA_AlwaysStackOnTop to enable semi-transparent QOpenGLWidget instances
            with other widgets visible underneath. Keep in mind however that this
            breaks the stacking order, so it will no longer be possible to have other
            widgets on top of the QOpenGLWidget. When the intention is to have a
            semi-transparent top-level window, Qt::WA_TranslucentBackground is
            sufficient.</para>
            <para>See also format(), Qt::WA_AlwaysStackOnTop, and
            QSurfaceFormat::setDefaultFormat().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QOpenGLWidget.IsValid">
            <summary>
            <para>Returns true if the widget and OpenGL resources, like the
            context, have been successfully initialized. Note that the return value is
            always false until the widget is shown.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QOpenGLWidget.Context">
            <summary>
            <para>Returns The QOpenGLContext used by this widget or 0 if not yet
            initialized.</para>
            <para>Note: The context and the framebuffer object used by the widget
            changes when reparenting the widget via setParent().</para>
            <para>See also QOpenGLContext::setShareContext() and
            defaultFramebufferObject().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QOpenGLWidget.DefaultFramebufferObject">
            <summary>
            <para>Returns The framebuffer object handle or 0 if not yet
            initialized.</para>
            <para>Note: The framebuffer object belongs to the context returned by
            context() and may not be accessible from other contexts.</para>
            <para>Note: The context and the framebuffer object used by the widget
            changes when reparenting the widget via setParent(). In addition, the
            framebuffer object changes on each resize.</para>
            <para>See also context().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QOpenGLWidget.GrabFramebuffer">
            <summary>
            <para>Renders and returns a 32-bit RGB image of the framebuffer.</para>
            <para>Note: This is a potentially expensive operation because it relies
            on glReadPixels() to read back the pixels. This may be slow and can stall
            the GPU pipeline.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QOpenGLWidget.UpdateBehavior">
            <summary>
            <para>This enum describes the update semantics of QOpenGLWidget.</para>
            <para>This enum was introduced or modified in  Qt 5.5.</para>
            <para>See also updateBehavior() and setUpdateBehavior().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QOpenGLWidget.UpdateBehavior.NoPartialUpdate">
            <summary>QOpenGLWidget will discard the contents of the color buffer and the ancillary buffers after the QOpenGLWidget is rendered to screen. This is the same behavior that can be expected by calling QOpenGLContext::swapBuffers with a default opengl enabled QWindow as the argument. NoPartialUpdate can have some performance benefits on certain hardware architectures common in the mobile and embedded space when a framebuffer object is used as the rendering target. The framebuffer object is invalidated between frames with glDiscardFramebufferEXT if supported or a glClear. Please see the documentation of EXT_discard_framebuffer for more information: https://www.khronos.org/registry/gles/extensions/EXT/EXT_discard_framebuffer.txt</summary>
        </member>
        <member name="F:QtWidgets.QOpenGLWidget.UpdateBehavior.PartialUpdate">
            <summary>The framebuffer objects color buffer and ancillary buffers are not invalidated between frames.</summary>
        </member>
        <member name="T:QtWidgets.QShortcut">
            <summary>
            <para>The QShortcut class is used to create keyboard shortcuts.</para>
            </summary>
            <remarks>
            <para>The QShortcut class provides a way of connecting keyboard
            shortcuts to Qt's signals and slots mechanism, so that objects can be
            informed when a shortcut is executed. The shortcut can be set up to contain
            all the key presses necessary to describe a keyboard shortcut, including
            the states of modifier keys such as Shift, Ctrl, and Alt.</para>
            <para></para>
            <para>On certain widgets, using '&amp;' in front of a character will
            automatically create a mnemonic (a shortcut) for that character, e.g.
            &quot;E&amp;xit&quot; will create the shortcut Alt+X (use '&amp;&amp;' to
            display an actual ampersand). The widget might consume and perform an
            action on a given shortcut. On X11 the ampersand will not be shown and the
            character will be underlined. On Windows, shortcuts are normally not
            displayed until the user presses the Alt key, but this is a setting the
            user can change. On Mac, shortcuts are disabled by default. Call
            qt_set_sequence_auto_mnemonic() to enable them. However, because mnemonic
            shortcuts do not fit in with Aqua's guidelines, Qt will not show the
            shortcut character underlined.</para>
            <para>For applications that use menus, it may be more convenient to use
            the convenience functions provided in the QMenu class to assign keyboard
            shortcuts to menu items as they are created. Alternatively, shortcuts may
            be associated with other types of actions in the QAction class.</para>
            <para>The simplest way to create a shortcut for a particular widget is
            to construct the shortcut with a key sequence. For example:</para>
            <para>shortcut = new QShortcut(QKeySequence(tr(&quot;Ctrl+O&quot;,
            &quot;File|Open&quot;)),</para>
            <para>                         parent);</para>
            <para>When the user types the key sequence for a given shortcut, the
            shortcut's activated() signal is emitted. (In the case of ambiguity, the
            activatedAmbiguously() signal is emitted.) A shortcut is &quot;listened
            for&quot; by Qt's event loop when the shortcut's parent widget is receiving
            events.</para>
            <para>A shortcut's key sequence can be set with setKey() and retrieved
            with key(). A shortcut can be enabled or disabled with setEnabled(), and
            can have &quot;What's This?&quot; help text set with setWhatsThis().</para>
            <para></para>
            <para>See also QShortcutEvent, QKeySequence, and QAction.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QShortcut.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a QShortcut object for the parent widget. Since no
            shortcut key sequence is specified, the shortcut will not emit any
            signals.</para>
            <para>See also setKey().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QShortcut.#ctor(QtGui.QKeySequence,QtWidgets.QWidget,System.String,System.String,QtCore.Qt.ShortcutContext)">
            <summary>
            <para>Constructs a QShortcut object for the parent widget. The shortcut
            operates on its parent, listening for QShortcutEvents that match the key
            sequence. Depending on the ambiguity of the event, the shortcut will call
            the member function, or the ambiguousMember function, if the key press was
            in the shortcut's context.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QShortcut.Activated">
            <summary>
            <para>This signal is emitted when the user types the shortcut's key sequence.</para>
            <para>See also activatedAmbiguously().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QShortcut.ActivatedAmbiguously">
            <summary>
            <para>When a key sequence is being typed at the keyboard, it is said to be ambiguous as long as it matches the start of more than one shortcut.</para>
            <para>When a shortcut's key sequence is completed, activatedAmbiguously() is emitted if the key sequence is still ambiguous (i.e., it is the start of one or more other shortcuts). The activated() signal is not emitted in this case.</para>
            <para>See also activated().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QShortcut.Key">
            <summary>
            <para>This property holds the shortcut's key sequence.</para>
            <para>This is a key sequence with an optional combination of Shift,
            Ctrl, and Alt. The key sequence may be supplied in a number of ways:</para>
            <para>setKey(0);                  // no signal emitted</para>
            <para>setKey(QKeySequence());     // no signal emitted</para>
            <para>setKey(0x3b1);              // Greek letter alpha</para>
            <para>setKey(Qt::Key_D);              // 'd', e.g. to delete</para>
            <para>setKey('q');                // 'q', e.g. to quit</para>
            <para>setKey(Qt::CTRL + Qt::Key_P);       // Ctrl+P, e.g. to print
            document</para>
            <para>setKey(&quot;Ctrl+P&quot;);           // Ctrl+P, e.g. to print
            document</para>
            <para>By default, this property contains an empty key sequence.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QShortcut.Enabled">
            <summary>
            <para>This property holds whether the shortcut is enabled.</para>
            <para>An enabled shortcut emits the activated() or
            activatedAmbiguously() signal when a QShortcutEvent occurs that matches the
            shortcut's key() sequence.</para>
            <para>If the application is in WhatsThis mode the shortcut will not
            emit the signals, but will show the &quot;What's This?&quot; text
            instead.</para>
            <para>By default, this property is true.</para>
            <para>See also whatsThis.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QShortcut.Context">
            <summary>
            <para>This property holds the context in which the shortcut is
            valid.</para>
            <para>A shortcut's context decides in which circumstances a shortcut is
            allowed to be triggered. The normal context is Qt::WindowShortcut, which
            allows the shortcut to trigger if the parent (the widget containing the
            shortcut) is a subwidget of the active top-level window.</para>
            <para>By default, this property is set to Qt::WindowShortcut.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QShortcut.WhatsThis">
            <summary>
            <para>This property holds the shortcut's &quot;What's This?&quot; help
            text.</para>
            <para>The text will be shown when the application is in &quot;What's
            This?&quot; mode and the user types the shortcut key() sequence.</para>
            <para>To set &quot;What's This?&quot; help on a menu item (with or
            without a shortcut key), set the help on the item's action.</para>
            <para>By default, this property contains an empty string.</para>
            <para>See also QWhatsThis::inWhatsThisMode() and
            QAction::setWhatsThis().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QShortcut.AutoRepeat">
            <summary>
            <para>This property holds whether the shortcut can auto repeat.</para>
            <para>If true, the shortcut will auto repeat when the keyboard shortcut
            combination is held down, provided that keyboard auto repeat is enabled on
            the system. The default value is true.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QShortcut.Id">
            <summary>
            <para>Returns the shortcut's ID.</para>
            <para>See also QShortcutEvent::shortcutId().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QShortcut.ParentWidget">
            <summary>
            <para>Returns the shortcut's parent widget.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStackedLayout">
            <summary>
            <para>The QStackedLayout class provides a stack of widgets where only
            one widget is visible at a time.</para>
            </summary>
            <remarks>
            <para>QStackedLayout can be used to create a user interface similar to
            the one provided by QTabWidget. There is also a convenience QStackedWidget
            class built on top of QStackedLayout.</para>
            <para>A QStackedLayout can be populated with a number of child widgets
            (&quot;pages&quot;). For example:</para>
            <para>    QWidget *firstPageWidget = new QWidget;</para>
            <para>    QWidget *secondPageWidget = new QWidget;</para>
            <para>    QWidget *thirdPageWidget = new QWidget;</para>
            <para></para>
            <para>    QStackedLayout *stackedLayout = new QStackedLayout;</para>
            <para>    stackedLayout-&gt;addWidget(firstPageWidget);</para>
            <para>    stackedLayout-&gt;addWidget(secondPageWidget);</para>
            <para>    stackedLayout-&gt;addWidget(thirdPageWidget);</para>
            <para></para>
            <para>    QVBoxLayout *mainLayout = new QVBoxLayout;</para>
            <para>    mainLayout-&gt;addLayout(stackedLayout);</para>
            <para>    setLayout(mainLayout);</para>
            <para>QStackedLayout provides no intrinsic means for the user to switch
            page. This is typically done through a QComboBox or a QListWidget that
            stores the titles of the QStackedLayout's pages. For example:</para>
            <para>    QComboBox *pageComboBox = new QComboBox;</para>
            <para>    pageComboBox-&gt;addItem(tr(&quot;Page 1&quot;));</para>
            <para>    pageComboBox-&gt;addItem(tr(&quot;Page 2&quot;));</para>
            <para>    pageComboBox-&gt;addItem(tr(&quot;Page 3&quot;));</para>
            <para>    connect(pageComboBox, SIGNAL(activated(int)),</para>
            <para>            stackedLayout, SLOT(setCurrentIndex(int)));</para>
            <para>When populating a layout, the widgets are added to an internal
            list. The indexOf() function returns the index of a widget in that list.
            The widgets can either be added to the end of the list using the
            addWidget() function, or inserted at a given index using the insertWidget()
            function. The removeWidget() function removes the widget at the given index
            from the layout. The number of widgets contained in the layout, can be
            obtained using the count() function.</para>
            <para>The widget() function returns the widget at a given index
            position. The index of the widget that is shown on screen is given by
            currentIndex() and can be changed using setCurrentIndex(). In a similar
            manner, the currently shown widget can be retrieved using the
            currentWidget() function, and altered using the setCurrentWidget()
            function.</para>
            <para>Whenever the current widget in the layout changes or a widget is
            removed from the layout, the currentChanged() and widgetRemoved() signals
            are emitted respectively.</para>
            <para></para>
            <para>See also QStackedWidget and QTabWidget.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStackedLayout.#ctor">
            <summary>
            <para>Constructs a QStackedLayout with no parent.</para>
            <para>This QStackedLayout must be installed on a widget later on to
            become effective.</para>
            <para>See also addWidget() and insertWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStackedLayout.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a new QStackedLayout with the given parent.</para>
            <para>This layout will install itself on the parent widget and manage
            the geometry of its children.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStackedLayout.#ctor(QtWidgets.QLayout)">
            <summary>
            <para>Constructs a new QStackedLayout and inserts it into the given
            parentLayout.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStackedLayout.AddWidget(QtWidgets.QWidget)">
            <summary>
            <para>Adds the given widget to the end of this layout and returns the
            index position of the widget.</para>
            <para>If the QStackedLayout is empty before this function is called,
            the given widget becomes the current widget.</para>
            <para>See also insertWidget(), removeWidget(), and
            setCurrentWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStackedLayout.InsertWidget(System.Int32,QtWidgets.QWidget)">
            <summary>
            <para>Inserts the given widget at the given index in this
            QStackedLayout. If index is out of range, the widget is appended (in which
            case it is the actual index of the widget that is returned).</para>
            <para>If the QStackedLayout is empty before this function is called,
            the given widget becomes the current widget.</para>
            <para>Inserting a new widget at an index less than or equal to the
            current index will increment the current index, but keep the current
            widget.</para>
            <para>See also addWidget(), removeWidget(), and
            setCurrentWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStackedLayout.widget(System.Int32)">
            <summary>
            <para>Returns the widget at the given index, or 0 if there is no widget
            at the given position.</para>
            <para>See also currentWidget() and indexOf().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStackedLayout.AddItem(QtWidgets.IQLayoutItem)">
            <summary>
            <para>Reimplemented from QLayout::addItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStackedLayout.ItemAt(System.Int32)">
            <summary>
            <para>Reimplemented from QLayout::itemAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStackedLayout.TakeAt(System.Int32)">
            <summary>
            <para>Reimplemented from QLayout::takeAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStackedLayout.HeightForWidth(System.Int32)">
            <summary>
            <para>Reimplemented from QLayoutItem::heightForWidth().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QStackedLayout.WidgetRemoved">
            <summary>
            <para>This signal is emitted whenever a widget is removed from the layout. The widget's index is passed as parameter.</para>
            <para>See also removeWidget().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QStackedLayout.CurrentChanged">
            <summary>
            <para>This property holds the index position of the widget that is visible.</para>
            <para>The current index is -1 if there is no current widget.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	currentIndex() const</para>
            <para> void 	setCurrentIndex(int index)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	currentChanged(int index)</para>
            <para></para>
            <para>See also currentWidget() and indexOf().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStackedLayout.stackingMode">
            <summary>
            <para>This property determines the way visibility of child widgets are
            handled.</para>
            <para>The default value is StackOne. Setting the property to StackAll
            allows you to make use of the layout for overlay widgets that do additional
            drawing on top of other widgets, for example, graphical editors.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStackedLayout.Geometry">
            <summary>
            <para>Returns the rectangle covered by this layout item.</para>
            <para>See also setGeometry().</para>
            <para></para>
            <para>Implemented in subclasses to set this item's geometry to
            r.</para>
            <para>See also geometry().</para>
            <para></para>
            <para>Reimplemented from QLayoutItem::setGeometry().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStackedLayout.CurrentIndex">
            <summary>
            <para>This property holds the index position of the widget that is
            visible.</para>
            <para>The current index is -1 if there is no current widget.</para>
            <para>See also currentWidget() and indexOf().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStackedLayout.CurrentWidget">
            <summary>
            <para>Returns the current widget, or 0 if there are no widgets in this
            layout.</para>
            <para>See also currentIndex() and setCurrentWidget().</para>
            <para></para>
            <para>Sets the current widget to be the specified widget. The new
            current widget must already be contained in this stacked layout.</para>
            <para>See also setCurrentIndex() and currentWidget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStackedLayout.Count">
            <summary>
            <para>This property holds the number of widgets contained in the
            layout.</para>
            <para>See also currentIndex() and widget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStackedLayout.SizeHint">
            <summary>
            <para>Reimplemented from QLayoutItem::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStackedLayout.MinimumSize">
            <summary>
            <para>Reimplemented from QLayoutItem::minimumSize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStackedLayout.HasHeightForWidth">
            <summary>
            <para>Reimplemented from QLayoutItem::hasHeightForWidth().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStackedLayout.StackingMode">
            <summary>
            <para>This enum specifies how the layout handles its child widgets
            regarding their visibility.</para>
            <para>This enum was introduced or modified in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QStackedLayout.StackingMode.StackOne">
            <summary>Only the current widget is visible. This is the default.</summary>
        </member>
        <member name="F:QtWidgets.QStackedLayout.StackingMode.StackAll">
            <summary>All widgets are visible. The current widget is merely raised.</summary>
        </member>
        <member name="T:QtWidgets.QToolTip">
            <summary>
            <para>The QToolTip class provides tool tips (balloon help) for any
            widget.</para>
            </summary>
            <remarks>
            <para>The tip is a short piece of text reminding the user of the
            widget's function. It is drawn immediately below the given position in a
            distinctive black-on-yellow color combination. The tip can be any rich text
            formatted string.</para>
            <para>Rich text displayed in a tool tip is implicitly word-wrapped
            unless specified differently with &lt;p style='white-space:pre'&gt;.</para>
            <para>The simplest and most common way to set a widget's tool tip is by
            calling its QWidget::setToolTip() function.</para>
            <para>It is also possible to show different tool tips for different
            regions of a widget, by using a QHelpEvent of type QEvent::ToolTip.
            Intercept the help event in your widget's event() function and call
            QToolTip::showText() with the text you want to display. The Tooltips
            example illustrates this technique.</para>
            <para>If you are calling QToolTip::hideText(), or QToolTip::showText()
            with an empty string, as a result of a ToolTip-event you should also call
            ignore() on the event, to signal that you don't want to start any tooltip
            specific modes.</para>
            <para>Note that, if you want to show tooltips in an item view, the
            model/view architecture provides functionality to set an item's tool tip;
            e.g., the QTableWidgetItem::setToolTip() function. However, if you want to
            provide custom tool tips in an item view, you must intercept the help event
            in the QAbstractItemView::viewportEvent() function and handle it
            yourself.</para>
            <para>The default tool tip color and font can be customized with
            setPalette() and setFont(). When a tooltip is currently on display,
            isVisible() returns true and text() the currently visible text.</para>
            <para>Note: Tool tips use the inactive color group of QPalette, because
            tool tips are not active windows.</para>
            <para></para>
            <para>See also QWidget::toolTip, QAction::toolTip, and Tool Tips
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QToolTip.ShowText(QtCore.QPoint,System.String,QtWidgets.QWidget)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This is analogous to calling QToolTip::showText(pos, text, w,
            QRect())</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolTip.ShowText(QtCore.QPoint,System.String,QtWidgets.QWidget,QtCore.QRect)">
            <summary>
            <para>Shows text as a tool tip, with the global position pos as the
            point of interest. The tool tip will be shown with a platform specific
            offset from this point of interest.</para>
            <para>If you specify a non-empty rect the tip will be hidden as soon as
            you move your cursor out of this area.</para>
            <para>The rect is in the coordinates of the widget you specify with w.
            If the rect is not empty you must specify a widget. Otherwise this argument
            can be 0 but it is used to determine the appropriate screen on multi-head
            systems.</para>
            <para>If text is empty the tool tip is hidden. If the text is the same
            as the currently shown tooltip, the tip will not move. You can force moving
            by first hiding the tip with an empty text, and then showing the new tip at
            the new position.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolTip.ShowText(QtCore.QPoint,System.String,QtWidgets.QWidget,QtCore.QRect,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This is similar to QToolTip::showText(pos, text, w, rect) but
            with an extra parameter msecDisplayTime that specifies how long the tool
            tip will be displayed, in milliseconds.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolTip.HideText">
            <summary>
            <para>Hides the tool tip. This is the same as calling showText() with
            an empty string.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also showText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolTip.Palette">
            <summary>
            <para>Returns the palette used to render tooltips.</para>
            <para>Note: Tool tips use the inactive color group of QPalette, because
            tool tips are not active windows.</para>
            <para>See also setPalette().</para>
            <para></para>
            <para>Sets the palette used to render tooltips.</para>
            <para>Note: Tool tips use the inactive color group of QPalette, because
            tool tips are not active windows.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also palette().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolTip.Font">
            <summary>
            <para>Returns the font used to render tooltips.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setFont().</para>
            <para></para>
            <para>Sets the font used to render tooltips.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also font().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolTip.IsVisible">
            <summary>
            <para>Returns true if this tooltip is currently shown.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also showText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolTip.Text">
            <summary>
            <para>Returns the tooltip text, if a tooltip is visible, or an empty
            string if a tooltip is not visible.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QWhatsThis">
            <summary>
            <para>The QWhatsThis class provides a simple description of any widget,
            i.e. answering the question &quot;What's This?&quot;.</para>
            </summary>
            <remarks>
            <para>&quot;What's This?&quot; help is part of an application's online
            help system, and provides users with information about the functionality
            and usage of a particular widget. &quot;What's This?&quot; help texts are
            typically longer and more detailed than tooltips, but generally provide
            less information than that supplied by separate help windows.</para>
            <para>QWhatsThis provides a single window with an explanatory text that
            pops up when the user asks &quot;What's This?&quot;. The default way for
            users to ask the question is to move the focus to the relevant widget and
            press Shift+F1. The help text appears immediately; it goes away as soon as
            the user does something else. (Note that if there is a shortcut for
            Shift+F1, this mechanism will not work.) Some dialogs provide a
            &quot;?&quot; button that users can click to enter &quot;What's This?&quot;
            mode; they then click the relevant widget to pop up the &quot;What's
            This?&quot; window. It is also possible to provide a a menu option or
            toolbar button to switch into &quot;What's This?&quot; mode.</para>
            <para>To add &quot;What's This?&quot; text to a widget or an action,
            you simply call QWidget::setWhatsThis() or QAction::setWhatsThis().</para>
            <para>The text can be either rich text or plain text. If you specify a
            rich text formatted string, it will be rendered using the default
            stylesheet, making it possible to embed images in the displayed text. To be
            as fast as possible, the default stylesheet uses a simple method to
            determine whether the text can be rendered as plain text. See
            Qt::mightBeRichText() for details.</para>
            <para>    newAct = new QAction(tr(&quot;&amp;New&quot;), this);</para>
            <para>    newAct-&gt;setShortcut(tr(&quot;Ctrl+N&quot;));</para>
            <para>    newAct-&gt;setStatusTip(tr(&quot;Create a new
            file&quot;));</para>
            <para>    newAct-&gt;setWhatsThis(tr(&quot;Click this option to create
            a new file.&quot;));</para>
            <para>An alternative way to enter &quot;What's This?&quot; mode is to
            call createAction(), and add the returned QAction to either a menu or a
            tool bar. By invoking this context help action (in the picture below, the
            button with the arrow and question mark icon) the user switches into
            &quot;What's This?&quot; mode. If they now click on a widget the
            appropriate help text is shown. The mode is left when help is given or when
            the user presses Esc.</para>
            <para></para>
            <para>You can enter &quot;What's This?&quot; mode programmatically with
            enterWhatsThisMode(), check the mode with inWhatsThisMode(), and return to
            normal mode with leaveWhatsThisMode().</para>
            <para>If you want to control the &quot;What's This?&quot; behavior of a
            widget manually see Qt::WA_CustomWhatsThis.</para>
            <para>It is also possible to show different help texts for different
            regions of a widget, by using a QHelpEvent of type QEvent::WhatsThis.
            Intercept the help event in your widget's QWidget::event() function and
            call QWhatsThis::showText() with the text you want to display for the
            position specified in QHelpEvent::pos(). If the text is rich text and the
            user clicks on a link, the widget also receives a QWhatsThisClickedEvent
            with the link's reference as QWhatsThisClickedEvent::href(). If a
            QWhatsThisClickedEvent is handled (i.e. QWidget::event() returns true), the
            help window remains visible. Call QWhatsThis::hideText() to hide it
            explicitly.</para>
            <para></para>
            <para>See also QToolTip.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QWhatsThis.EnterWhatsThisMode">
            <summary>
            <para>This function switches the user interface into &quot;What's
            This?&quot; mode. The user interface can be switched back into normal mode
            by the user (e.g. by them clicking or pressing Esc), or programmatically by
            calling leaveWhatsThisMode().</para>
            <para>When entering &quot;What's This?&quot; mode, a QEvent of type
            Qt::EnterWhatsThisMode is sent to all toplevel widgets.</para>
            <para>See also inWhatsThisMode() and leaveWhatsThisMode().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWhatsThis.LeaveWhatsThisMode">
            <summary>
            <para>If the user interface is in &quot;What's This?&quot; mode, this
            function switches back to normal mode; otherwise it does nothing.</para>
            <para>When leaving &quot;What's This?&quot; mode, a QEvent of type
            Qt::LeaveWhatsThisMode is sent to all toplevel widgets.</para>
            <para>See also enterWhatsThisMode() and inWhatsThisMode().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWhatsThis.ShowText(QtCore.QPoint,System.String,QtWidgets.QWidget)">
            <summary>
            <para>Shows text as a &quot;What's This?&quot; window, at global
            position pos. The optional widget argument, w, is used to determine the
            appropriate screen on multi-head systems.</para>
            <para>See also hideText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWhatsThis.HideText">
            <summary>
            <para>If a &quot;What's This?&quot; window is showing, this destroys
            it.</para>
            <para>See also showText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWhatsThis.CreateAction(QtCore.QObject)">
            <summary>
            <para>Returns a ready-made QAction, used to invoke &quot;What's
            This?&quot; context help, with the given parent.</para>
            <para>The returned QAction provides a convenient way to let users enter
            &quot;What's This?&quot; mode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWhatsThis.InWhatsThisMode">
            <summary>
            <para>Returns true if the user interface is in &quot;What's This?&quot;
            mode; otherwise returns false.</para>
            <para>See also enterWhatsThisMode().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QWidgetAction">
            <summary>
            <para>The QWidgetAction class extends QAction by an interface for
            inserting custom widgets into action based containers, such as
            toolbars.</para>
            </summary>
            <remarks>
            <para>Most actions in an application are represented as items in menus
            or buttons in toolbars. However sometimes more complex widgets are
            necessary. For example a zoom action in a word processor may be realized
            using a QComboBox in a QToolBar, presenting a range of different zoom
            levels. QToolBar provides QToolBar::insertWidget() as convenience function
            for inserting a single widget. However if you want to implement an action
            that uses custom widgets for visualization in multiple containers then you
            have to subclass QWidgetAction.</para>
            <para>If a QWidgetAction is added for example to a QToolBar then
            QWidgetAction::createWidget() is called. Reimplementations of that function
            should create a new custom widget with the specified parent.</para>
            <para>If the action is removed from a container widget then
            QWidgetAction::deleteWidget() is called with the previously created custom
            widget as argument. The default implementation hides the widget and deletes
            it using QObject::deleteLater().</para>
            <para>If you have only one single custom widget then you can set it as
            default widget using setDefaultWidget(). That widget will then be used if
            the action is added to a QToolBar, or in general to an action container
            that supports QWidgetAction. If a QWidgetAction with only a default widget
            is added to two toolbars at the same time then the default widget is shown
            only in the first toolbar the action was added to. QWidgetAction takes over
            ownership of the default widget.</para>
            <para>Note that it is up to the widget to activate the action, for
            example by reimplementing mouse event handlers and calling
            QAction::trigger().</para>
            <para>Mac OS X: If you add a widget to a menu in the application's menu
            bar on Mac OS X, the widget will be added and it will function but with
            some limitations:</para>
            <para></para>
            <para>The widget is reparented away from the QMenu to the native menu
            view. If you show the menu in some other place (e.g. as a popup menu), the
            widget will not be there.</para>
            <para>Focus/Keyboard handling of the widget is not possible.</para>
            <para>Due to Apple's design, mouse tracking on the widget currently
            does not work.</para>
            <para>Connecting the triggered() signal to a slot that opens a modal
            dialog will cause a crash in Mac OS X 10.4 (known bug acknowledged by
            Apple), a workaround is to use a QueuedConnection instead of a
            DirectConnection.</para>
            <para></para>
            <para></para>
            <para>See also QAction, QActionGroup, and QWidget.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QWidgetAction.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an action with parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidgetAction.RequestWidget(QtWidgets.QWidget)">
            <summary>
            <para>Returns a widget that represents the action, with the given
            parent.</para>
            <para>Container widgets that support actions can call this function to
            request a widget as visual representation of the action.</para>
            <para>See also releaseWidget(), createWidget(), and
            defaultWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidgetAction.ReleaseWidget(QtWidgets.QWidget)">
            <summary>
            <para>Releases the specified widget.</para>
            <para>Container widgets that support actions call this function when a
            widget action is removed.</para>
            <para>See also requestWidget(), deleteWidget(), and
            defaultWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidgetAction.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidgetAction.EventFilter(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::eventFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidgetAction.CreateWidget(QtWidgets.QWidget)">
            <summary>
            <para>This function is called whenever the action is added to a
            container widget that supports custom widgets. If you don't want a custom
            widget to be used as representation of the action in the specified parent
            widget then 0 should be returned.</para>
            <para>See also deleteWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QWidgetAction.DeleteWidget(QtWidgets.QWidget)">
            <summary>
            <para>This function is called whenever the action is removed from a
            container widget that displays the action using a custom widget previously
            created using createWidget(). The default implementation hides the widget
            and schedules it for deletion using QObject::deleteLater().</para>
            <para>See also createWidget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QWidgetAction.DefaultWidget">
            <summary>
            <para>Returns the default widget.</para>
            <para>See also setDefaultWidget().</para>
            <para></para>
            <para>Sets widget to be the default widget. The ownership is
            transferred to QWidgetAction. Unless createWidget() is reimplemented by a
            subclass to return a new widget the default widget is used when a container
            widget requests a widget through requestWidget().</para>
            <para>See also defaultWidget().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QKeyEventTransition">
            <summary>
            <para>The QKeyEventTransition class provides a transition for key
            events.</para>
            </summary>
            <remarks>
            <para>QKeyEventTransition is part of The State Machine
            Framework.</para>
            <para></para>
            <para>See also QState::addTransition().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QKeyEventTransition.#ctor(QtCore.QState)">
            <summary>
            <para>Constructs a new key event transition with the given
            sourceState.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QKeyEventTransition.#ctor(QtCore.QObject,QtCore.QEvent.Type,System.Int32,QtCore.QState)">
            <summary>
            <para>Constructs a new key event transition for events of the given
            type for the given object, with the given key and sourceState.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QKeyEventTransition.OnTransition(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractTransition::onTransition().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QKeyEventTransition.EventTest(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractTransition::eventTest().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QKeyEventTransition.Key">
            <summary>
            <para>This property holds the key that this key event transition is
            associated with.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QKeyEventTransition.ModifierMask">
            <summary>
            <para>This property holds the keyboard modifier mask that this key
            event transition checks for.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QMouseEventTransition">
            <summary>
            <para>The QMouseEventTransition class provides a transition for mouse
            events.</para>
            </summary>
            <remarks>
            <para>QMouseEventTransition is part of The State Machine
            Framework.</para>
            <para></para>
            <para>See also QState::addTransition().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QMouseEventTransition.#ctor(QtCore.QState)">
            <summary>
            <para>Constructs a new mouse event transition with the given
            sourceState.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMouseEventTransition.#ctor(QtCore.QObject,QtCore.QEvent.Type,QtCore.Qt.MouseButton,QtCore.QState)">
            <summary>
            <para>Constructs a new mouse event transition for events of the given
            type for the given object, with the given button and sourceState.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMouseEventTransition.OnTransition(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractTransition::onTransition().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMouseEventTransition.EventTest(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractTransition::eventTest().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMouseEventTransition.Button">
            <summary>
            <para>This property holds the button that this mouse event transition
            is associated with.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMouseEventTransition.ModifierMask">
            <summary>
            <para>This property holds the keyboard modifier mask that this mouse
            event transition checks for.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMouseEventTransition.HitTestPath">
            <summary>
            <para>Returns the hit test path for this mouse event transition.</para>
            <para>See also setHitTestPath().</para>
            <para></para>
            <para>Sets the hit test path for this mouse event transition to path.
            If a valid path has been set, the transition will only trigger if the mouse
            event position (QMouseEvent::pos()) is inside the path.</para>
            <para>See also hitTestPath() and QPainterPath::contains().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QCommonStyle">
            <summary>
            <para>The QCommonStyle class encapsulates the common Look and Feel of a
            GUI.</para>
            </summary>
            <remarks>
            <para>This abstract class implements some of the widget's look and feel
            that is common to all GUI styles provided and shipped as part of Qt.</para>
            <para>Since QCommonStyle inherits QStyle, all of its functions are
            fully documented in the QStyle documentation.</para>
            <para></para>
            <para>See also QStyle and QProxyStyle.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QCommonStyle.#ctor">
            <summary>
            <para>Constructs a QCommonStyle.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.DrawPrimitive(QtWidgets.QStyle.PrimitiveElement,QtWidgets.QStyleOption,QtGui.QPainter,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::drawPrimitive().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.DrawControl(QtWidgets.QStyle.ControlElement,QtWidgets.QStyleOption,QtGui.QPainter,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::drawControl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.SubElementRect(QtWidgets.QStyle.SubElement,QtWidgets.QStyleOption,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::subElementRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.DrawComplexControl(QtWidgets.QStyle.ComplexControl,QtWidgets.QStyleOptionComplex,QtGui.QPainter,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::drawComplexControl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.HitTestComplexControl(QtWidgets.QStyle.ComplexControl,QtWidgets.QStyleOptionComplex,QtCore.QPoint,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::hitTestComplexControl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.SubControlRect(QtWidgets.QStyle.ComplexControl,QtWidgets.QStyleOptionComplex,QtWidgets.QStyle.SubControl,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::subControlRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.SizeFromContents(QtWidgets.QStyle.ContentsType,QtWidgets.QStyleOption,QtCore.QSize,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::sizeFromContents().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.pixelMetric(QtWidgets.QStyle.PixelMetric,QtWidgets.QStyleOption,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::pixelMetric().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.styleHint(QtWidgets.QStyle.StyleHint,QtWidgets.QStyleOption,QtWidgets.QWidget,QtWidgets.QStyleHintReturn)">
            <summary>
            <para>Reimplemented from QStyle::styleHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.standardPixmap(QtWidgets.QStyle.StandardPixmap,QtWidgets.QStyleOption,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::standardPixmap().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.GeneratedIconPixmap(QtGui.QIcon.Mode,QtGui.QPixmap,QtWidgets.QStyleOption)">
            <summary>
            <para>Reimplemented from QStyle::generatedIconPixmap().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.LayoutSpacing(QtWidgets.QSizePolicy.ControlType,QtWidgets.QSizePolicy.ControlType,QtCore.Qt.Orientation,QtWidgets.QStyleOption,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::layoutSpacing().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.Polish(QtGui.QPalette)">
            <summary>
            <para>Reimplemented from QStyle::polish().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.Polish(QtWidgets.QApplication)">
            <summary>
            <para>Reimplemented from QStyle::polish().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.Polish(QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::polish().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.Unpolish(QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::unpolish().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommonStyle.Unpolish(QtWidgets.QApplication)">
            <summary>
            <para>Reimplemented from QStyle::unpolish().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTileRules">
            <summary>
            <para>The QTileRules class provides the rules used to draw a pixmap or
            image split into nine segments.</para>
            </summary>
            <remarks>
            <para>Spliiting is similar to CSS3 border-images.</para>
            <para></para>
            <para>See also Qt::TileRule and QMargins.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QTileRules.#ctor(QtCore.Qt.TileRule,QtCore.Qt.TileRule)">
            <summary>
            <para>Constructs a QTileRules with the given horizontalRule and
            verticalRule.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTileRules.#ctor(QtCore.Qt.TileRule)">
            <summary>
            <para>Constructs a QTileRules with the given rule used for both the
            horizontal rule and the vertical rule.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.qdrawutil.QDrawShadeLine(QtGui.QPainter,System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QPalette,System.Boolean,System.Int32,System.Int32)">
            <summary>
            <para>Draws a horizontal (y1 == y2) or vertical (x1 == x2) shaded line
            using the given painter. Note that nothing is drawn if y1 != y2 and x1 !=
            x2 (i.e. the line is neither horizontal nor vertical).</para>
            <para>The provided palette specifies the shading colors (light, dark
            and middle colors). The given lineWidth specifies the line width for each
            of the lines; it is not the total line width. The given midLineWidth
            specifies the width of a middle line drawn in the QPalette::mid()
            color.</para>
            <para>The line appears sunken if sunken is true, otherwise
            raised.</para>
            <para>Warning: This function does not look at QWidget::style() or
            QApplication::style(). Use the drawing functions in QStyle to make widgets
            that follow the current GUI style.</para>
            <para>Alternatively you can use a QFrame widget and apply the
            QFrame::setFrameStyle() function to display a shaded line:</para>
            <para>QFrame frame:</para>
            <para>frame.setFrameStyle(QFrame::HLine | QFrame::Sunken);</para>
            <para>See also qDrawShadeRect(), qDrawShadePanel(), and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.qdrawutil.QDrawShadeLine(QtGui.QPainter,QtCore.QPoint,QtCore.QPoint,QtGui.QPalette,System.Boolean,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws a horizontal or vertical shaded line between p1 and p2
            using the given painter. Note that nothing is drawn if the line between the
            points would be neither horizontal nor vertical.</para>
            <para>The provided palette specifies the shading colors (light, dark
            and middle colors). The given lineWidth specifies the line width for each
            of the lines; it is not the total line width. The given midLineWidth
            specifies the width of a middle line drawn in the QPalette::mid()
            color.</para>
            <para>The line appears sunken if sunken is true, otherwise
            raised.</para>
            <para>Warning: This function does not look at QWidget::style() or
            QApplication::style(). Use the drawing functions in QStyle to make widgets
            that follow the current GUI style.</para>
            <para>Alternatively you can use a QFrame widget and apply the
            QFrame::setFrameStyle() function to display a shaded line:</para>
            <para>QFrame frame:</para>
            <para>frame.setFrameStyle(QFrame::HLine | QFrame::Sunken);</para>
            <para>See also qDrawShadeRect(), qDrawShadePanel(), and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.qdrawutil.QDrawShadeRect(QtGui.QPainter,System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QPalette,System.Boolean,System.Int32,System.Int32,QtGui.QBrush)">
            <summary>
            <para>Draws the shaded rectangle beginning at (x, y) with the given
            width and height using the provided painter.</para>
            <para>The provide palette specifies the shading colors (light, dark and
            middle colors. The given lineWidth specifies the line width for each of the
            lines; it is not the total line width. The midLineWidth specifies the width
            of a middle line drawn in the QPalette::mid() color. The rectangle's
            interior is filled with the fill brush unless fill is 0.</para>
            <para>The rectangle appears sunken if sunken is true, otherwise
            raised.</para>
            <para>Warning: This function does not look at QWidget::style() or
            QApplication::style(). Use the drawing functions in QStyle to make widgets
            that follow the current GUI style.</para>
            <para>Alternatively you can use a QFrame widget and apply the
            QFrame::setFrameStyle() function to display a shaded rectangle:</para>
            <para>QFrame frame:</para>
            <para>frame.setFrameStyle(QFrame::Box | QFrame::Raised);</para>
            <para>See also qDrawShadeLine(), qDrawShadePanel(), qDrawPlainRect(),
            and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.qdrawutil.QDrawShadeRect(QtGui.QPainter,QtCore.QRect,QtGui.QPalette,System.Boolean,System.Int32,System.Int32,QtGui.QBrush)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the shaded rectangle specified by rect using the given
            painter.</para>
            <para>The provide palette specifies the shading colors (light, dark and
            middle colors. The given lineWidth specifies the line width for each of the
            lines; it is not the total line width. The midLineWidth specifies the width
            of a middle line drawn in the QPalette::mid() color. The rectangle's
            interior is filled with the fill brush unless fill is 0.</para>
            <para>The rectangle appears sunken if sunken is true, otherwise
            raised.</para>
            <para>Warning: This function does not look at QWidget::style() or
            QApplication::style(). Use the drawing functions in QStyle to make widgets
            that follow the current GUI style.</para>
            <para>Alternatively you can use a QFrame widget and apply the
            QFrame::setFrameStyle() function to display a shaded rectangle:</para>
            <para>QFrame frame:</para>
            <para>frame.setFrameStyle(QFrame::Box | QFrame::Raised);</para>
            <para>See also qDrawShadeLine(), qDrawShadePanel(), qDrawPlainRect(),
            and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.qdrawutil.QDrawShadePanel(QtGui.QPainter,System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QPalette,System.Boolean,System.Int32,QtGui.QBrush)">
            <summary>
            <para>Draws the shaded panel beginning at (x, y) with the given width
            and height using the provided painter and the given lineWidth.</para>
            <para>The given palette specifies the shading colors (light, dark and
            middle colors). The panel's interior is filled with the fill brush unless
            fill is 0.</para>
            <para>The panel appears sunken if sunken is true, otherwise
            raised.</para>
            <para>Warning: This function does not look at QWidget::style() or
            QApplication::style(). Use the drawing functions in QStyle to make widgets
            that follow the current GUI style.</para>
            <para>Alternatively you can use a QFrame widget and apply the
            QFrame::setFrameStyle() function to display a shaded panel:</para>
            <para>QFrame frame:</para>
            <para>frame.setFrameStyle( QFrame::Panel | QFrame::Sunken);</para>
            <para>See also qDrawWinPanel(), qDrawShadeLine(), qDrawShadeRect(), and
            QStyle.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.qdrawutil.QDrawShadePanel(QtGui.QPainter,QtCore.QRect,QtGui.QPalette,System.Boolean,System.Int32,QtGui.QBrush)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the shaded panel at the rectangle specified by rect using
            the given painter and the given lineWidth.</para>
            <para>The given palette specifies the shading colors (light, dark and
            middle colors). The panel's interior is filled with the fill brush unless
            fill is 0.</para>
            <para>The panel appears sunken if sunken is true, otherwise
            raised.</para>
            <para>Warning: This function does not look at QWidget::style() or
            QApplication::style(). Use the drawing functions in QStyle to make widgets
            that follow the current GUI style.</para>
            <para>Alternatively you can use a QFrame widget and apply the
            QFrame::setFrameStyle() function to display a shaded panel:</para>
            <para>QFrame frame:</para>
            <para>frame.setFrameStyle( QFrame::Panel | QFrame::Sunken);</para>
            <para>See also qDrawWinPanel(), qDrawShadeLine(), qDrawShadeRect(), and
            QStyle.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.qdrawutil.QDrawWinButton(QtGui.QPainter,System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QPalette,System.Boolean,QtGui.QBrush)">
            <summary>
            <para>Draws the Windows-style button specified by the given point (x,
            y}, width and height using the provided painter with a line width of 2
            pixels. The button's interior is filled with the fill brush unless fill is
            0.</para>
            <para>The given palette specifies the shading colors (light, dark and
            middle colors).</para>
            <para>The button appears sunken if sunken is true, otherwise
            raised.</para>
            <para>Warning: This function does not look at QWidget::style() or
            QApplication::style()-&gt; Use the drawing functions in QStyle to make
            widgets that follow the current GUI style.</para>
            <para>See also qDrawWinPanel() and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.qdrawutil.QDrawWinButton(QtGui.QPainter,QtCore.QRect,QtGui.QPalette,System.Boolean,QtGui.QBrush)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the Windows-style button at the rectangle specified by rect
            using the given painter with a line width of 2 pixels. The button's
            interior is filled with the fill brush unless fill is 0.</para>
            <para>The given palette specifies the shading colors (light, dark and
            middle colors).</para>
            <para>The button appears sunken if sunken is true, otherwise
            raised.</para>
            <para>Warning: This function does not look at QWidget::style() or
            QApplication::style()-&gt; Use the drawing functions in QStyle to make
            widgets that follow the current GUI style.</para>
            <para>See also qDrawWinPanel() and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.qdrawutil.QDrawWinPanel(QtGui.QPainter,System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QPalette,System.Boolean,QtGui.QBrush)">
            <summary>
            <para>Draws the Windows-style panel specified by the given point(x, y),
            width and height using the provided painter with a line width of 2 pixels.
            The button's interior is filled with the fill brush unless fill is
            0.</para>
            <para>The given palette specifies the shading colors. The panel appears
            sunken if sunken is true, otherwise raised.</para>
            <para>Warning: This function does not look at QWidget::style() or
            QApplication::style(). Use the drawing functions in QStyle to make widgets
            that follow the current GUI style.</para>
            <para>Alternatively you can use a QFrame widget and apply the
            QFrame::setFrameStyle() function to display a shaded panel:</para>
            <para>QFrame frame:</para>
            <para>frame.setFrameStyle(QFrame::WinPanel | QFrame::Raised);</para>
            <para>See also qDrawShadePanel(), qDrawWinButton(), and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.qdrawutil.QDrawPlainRect(QtGui.QPainter,System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QColor,System.Int32,QtGui.QBrush)">
            <summary>
            <para>Draws the plain rectangle beginning at (x, y) with the given
            width and height, using the specified painter, lineColor and lineWidth. The
            rectangle's interior is filled with the fill brush unless fill is 0.</para>
            <para>Warning: This function does not look at QWidget::style() or
            QApplication::style(). Use the drawing functions in QStyle to make widgets
            that follow the current GUI style.</para>
            <para>Alternatively you can use a QFrame widget and apply the
            QFrame::setFrameStyle() function to display a plain rectangle:</para>
            <para>QFrame frame:</para>
            <para>frame.setFrameStyle(QFrame::Box | QFrame::Plain);</para>
            <para>See also qDrawShadeRect() and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.qdrawutil.QDrawPlainRect(QtGui.QPainter,QtCore.QRect,QtGui.QColor,System.Int32,QtGui.QBrush)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the plain rectangle specified by rect using the given
            painter, lineColor and lineWidth. The rectangle's interior is filled with
            the fill brush unless fill is 0.</para>
            <para>Warning: This function does not look at QWidget::style() or
            QApplication::style(). Use the drawing functions in QStyle to make widgets
            that follow the current GUI style.</para>
            <para>Alternatively you can use a QFrame widget and apply the
            QFrame::setFrameStyle() function to display a plain rectangle:</para>
            <para>QFrame frame:</para>
            <para>frame.setFrameStyle(QFrame::Box | QFrame::Plain);</para>
            <para>See also qDrawShadeRect() and QStyle.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.qdrawutil.QDrawBorderPixmap(QtGui.QPainter,QtCore.QRect,QtCore.QMargins,QtGui.QPixmap)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>The qDrawBorderPixmap function is for drawing a pixmap into the
            margins of a rectangle.</para>
            <para>Draws the given pixmap into the given target rectangle, using the
            given painter. The pixmap will be split into nine segments and drawn
            according to the margins structure.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QProxyStyle">
            <summary>
            <para>The QProxyStyle class is a convenience class that simplifies
            dynamically overriding QStyle elements.</para>
            </summary>
            <remarks>
            <para>A QProxyStyle wraps a QStyle (usually the default system style)
            for the purpose of dynamically overriding painting or other specific style
            behavior.</para>
            <para>The following example shows how to override the shortcut
            underline behavior on any platform:</para>
            <para>#include &quot;textedit.h&quot;</para>
            <para>#include &lt;QApplication&gt;</para>
            <para>#include &lt;QProxyStyle&gt;</para>
            <para></para>
            <para>class MyProxyStyle : public QProxyStyle</para>
            <para>{</para>
            <para>  public:</para>
            <para>    int styleHint(StyleHint hint, const QStyleOption *option =
            0,</para>
            <para>                  const QWidget *widget = 0, QStyleHintReturn
            *returnData = 0) const</para>
            <para>    {</para>
            <para>        if (hint == QStyle::SH_UnderlineShortcut)</para>
            <para>            return 0;</para>
            <para>        return QProxyStyle::styleHint(hint, option, widget,
            returnData);</para>
            <para>    }</para>
            <para>};</para>
            <para></para>
            <para>int main(int argc, char **argv)</para>
            <para>{</para>
            <para>    Q_INIT_RESOURCE(textedit);</para>
            <para></para>
            <para>    QApplication a(argc, argv);</para>
            <para>    a.setStyle(new MyProxyStyle);</para>
            <para>    TextEdit mw;</para>
            <para>    mw.resize(700, 800);</para>
            <para>    mw.show();</para>
            <para>    //...</para>
            <para>}</para>
            <para>Warning: The common styles provided by Qt will respect this hint,
            because they call QStyle::proxy(), but there is no guarantee that
            QStyle::proxy() will be called for user defined or system controlled
            styles. It would not work on a Mac, for example, where menus are handled by
            the operating system.</para>
            <para></para>
            <para>See also QStyle.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QProxyStyle.#ctor(QtWidgets.QStyle)">
            <summary>
            <para>Constructs a QProxyStyle object for overriding behavior in the
            specified style, or in the default native style if style is not
            specified.</para>
            <para>Ownership of style is transferred to QProxyStyle.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.#ctor(System.String)">
            <summary>
            <para>Constructs a QProxyStyle object for overriding behavior in the
            base style specified by style key, or in the current application style if
            the specified style key is unrecognized.</para>
            <para>See also QStyleFactory::create().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.DrawPrimitive(QtWidgets.QStyle.PrimitiveElement,QtWidgets.QStyleOption,QtGui.QPainter,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::drawPrimitive().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.DrawControl(QtWidgets.QStyle.ControlElement,QtWidgets.QStyleOption,QtGui.QPainter,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::drawControl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.DrawComplexControl(QtWidgets.QStyle.ComplexControl,QtWidgets.QStyleOptionComplex,QtGui.QPainter,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::drawComplexControl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.DrawItemText(QtGui.QPainter,QtCore.QRect,System.Int32,QtGui.QPalette,System.Boolean,System.String,QtGui.QPalette.ColorRole)">
            <summary>
            <para>Reimplemented from QStyle::drawItemText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.DrawItemPixmap(QtGui.QPainter,QtCore.QRect,System.Int32,QtGui.QPixmap)">
            <summary>
            <para>Reimplemented from QStyle::drawItemPixmap().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.SizeFromContents(QtWidgets.QStyle.ContentsType,QtWidgets.QStyleOption,QtCore.QSize,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::sizeFromContents().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.SubElementRect(QtWidgets.QStyle.SubElement,QtWidgets.QStyleOption,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::subElementRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.SubControlRect(QtWidgets.QStyle.ComplexControl,QtWidgets.QStyleOptionComplex,QtWidgets.QStyle.SubControl,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::subControlRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.ItemTextRect(QtGui.QFontMetrics,QtCore.QRect,System.Int32,System.Boolean,System.String)">
            <summary>
            <para>Reimplemented from QStyle::itemTextRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.ItemPixmapRect(QtCore.QRect,System.Int32,QtGui.QPixmap)">
            <summary>
            <para>Reimplemented from QStyle::itemPixmapRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.HitTestComplexControl(QtWidgets.QStyle.ComplexControl,QtWidgets.QStyleOptionComplex,QtCore.QPoint,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::hitTestComplexControl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.styleHint(QtWidgets.QStyle.StyleHint,QtWidgets.QStyleOption,QtWidgets.QWidget,QtWidgets.QStyleHintReturn)">
            <summary>
            <para>Reimplemented from QStyle::styleHint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.pixelMetric(QtWidgets.QStyle.PixelMetric,QtWidgets.QStyleOption,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::pixelMetric().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.LayoutSpacing(QtWidgets.QSizePolicy.ControlType,QtWidgets.QSizePolicy.ControlType,QtCore.Qt.Orientation,QtWidgets.QStyleOption,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::layoutSpacing().</para>
            <para>This slot is called by layoutSpacing() to determine the spacing
            that should be used between control1 and control2 in a layout. orientation
            specifies whether the controls are laid out side by side or stacked
            vertically. The option parameter can be used to pass extra information
            about the parent widget. The widget parameter is optional and can also be
            used if option is 0.</para>
            <para>The default implementation returns -1.</para>
            <para>See also combinedLayoutSpacing().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.StandardIcon(QtWidgets.QStyle.StandardPixmap,QtWidgets.QStyleOption,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::standardIcon().</para>
            <para>Returns an icon for the given standardIcon.</para>
            <para>Reimplement this slot to provide your own icons in a QStyle
            subclass. The option argument can be used to pass extra information
            required to find the appropriate icon. The widget argument is optional and
            can also be used to help find the icon.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.standardPixmap(QtWidgets.QStyle.StandardPixmap,QtWidgets.QStyleOption,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::standardPixmap().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.GeneratedIconPixmap(QtGui.QIcon.Mode,QtGui.QPixmap,QtWidgets.QStyleOption)">
            <summary>
            <para>Reimplemented from QStyle::generatedIconPixmap().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.Polish(QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::polish().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.Polish(QtGui.QPalette)">
            <summary>
            <para>Reimplemented from QStyle::polish().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.Polish(QtWidgets.QApplication)">
            <summary>
            <para>Reimplemented from QStyle::polish().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.Unpolish(QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QStyle::unpolish().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.Unpolish(QtWidgets.QApplication)">
            <summary>
            <para>Reimplemented from QStyle::unpolish().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProxyStyle.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProxyStyle.BaseStyle">
            <summary>
            <para>Returns the proxy base style object. If no base style is set on
            the proxy style, QProxyStyle will create an instance of the application
            style instead.</para>
            <para>See also setBaseStyle() and QStyle.</para>
            <para></para>
            <para>Sets the base style that should be proxied.</para>
            <para>Ownership of style is transferred to QProxyStyle.</para>
            <para>If style is zero, a desktop-dependant style will be assigned
            automatically.</para>
            <para>See also baseStyle().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProxyStyle.StandardPalette">
            <summary>
            <para>Reimplemented from QStyle::standardPalette().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStyleFactory">
            <summary>
            <para>The QStyleFactory class creates QStyle objects.</para>
            </summary>
            <remarks>
            <para>The QStyle class is an abstract base class that encapsulates the
            look and feel of a GUI. QStyleFactory creates a QStyle object using the
            create() function and a key identifying the style. The styles are either
            built-in or dynamically loaded from a style plugin (see
            QStylePlugin).</para>
            <para>The valid keys can be retrieved using the keys() function.
            Typically they include &quot;windows&quot; and &quot;fusion&quot;.
            Depending on the platform, &quot;windowsxp&quot;, &quot;windowsvista&quot;,
            &quot;gtk&quot; and &quot;macintosh&quot; may be available. Note that keys
            are case insensitive.</para>
            <para></para>
            <para>See also QStyle.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStyleFactory.Create(System.String)">
            <summary>
            <para>Creates and returns a QStyle object that matches the given key,
            or returns 0 if no matching style is found.</para>
            <para>Both built-in styles and styles from style plugins are queried
            for a matching style.</para>
            <para>Note: The keys used are case insensitive.</para>
            <para>See also keys().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStyleFactory.Keys">
            <summary>
            <para>Returns the list of valid keys, i.e. the keys this factory can
            create styles for.</para>
            <para>See also create().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStylePainter">
            <summary>
            <para>The QStylePainter class is a convenience class for drawing QStyle
            elements inside a widget.</para>
            </summary>
            <remarks>
            <para>QStylePainter extends QPainter with a set of high-level draw...()
            functions implemented on top of QStyle's API. The advantage of using
            QStylePainter is that the parameter lists get considerably shorter. Whereas
            a QStyle object must be able to draw on any widget using any painter
            (because the application normally has one QStyle object shared by all
            widget), a QStylePainter is initialized with a widget, eliminating the need
            to specify the QWidget, the QPainter, and the QStyle for every function
            call.</para>
            <para>Example using QStyle directly:</para>
            <para>void MyWidget::paintEvent(QPaintEvent * /* event */)</para>
            <para>{</para>
            <para>    QPainter painter(this);</para>
            <para></para>
            <para>    QStyleOptionFocusRect option;</para>
            <para>    option.initFrom(this);</para>
            <para>    option.backgroundColor =
            palette().color(QPalette::Background);</para>
            <para></para>
            <para>    style()-&gt;drawPrimitive(QStyle::PE_FrameFocusRect,
            &amp;option, &amp;painter, this);</para>
            <para>}</para>
            <para>Example using QStylePainter:</para>
            <para>void MyWidget::paintEvent(QPaintEvent * /* event */)</para>
            <para>{</para>
            <para>    QStylePainter painter(this);</para>
            <para></para>
            <para>    QStyleOptionFocusRect option;</para>
            <para>    option.initFrom(this);</para>
            <para>    option.backgroundColor =
            palette().color(QPalette::Background);</para>
            <para></para>
            <para>    painter.drawPrimitive(QStyle::PE_FrameFocusRect,
            option);</para>
            <para>}</para>
            <para></para>
            <para>See also QStyle and QStyleOption.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStylePainter.#ctor">
            <summary>
            <para>Constructs a QStylePainter.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStylePainter.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Construct a QStylePainter using widget widget for its paint
            device.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStylePainter.#ctor(QtGui.IQPaintDevice,QtWidgets.QWidget)">
            <summary>
            <para>Construct a QStylePainter using pd for its paint device, and
            attributes from widget.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStylePainter.Begin(QtWidgets.QWidget)">
            <summary>
            <para>Begin painting operations on the specified widget. Returns true
            if the painter is ready to use; otherwise returns false.</para>
            <para>This is automatically called by the constructor that takes a
            QWidget.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStylePainter.Begin(QtGui.IQPaintDevice,QtWidgets.QWidget)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Begin painting operations on paint device pd as if it was
            widget.</para>
            <para>This is automatically called by the constructor that takes a
            QPaintDevice and a QWidget.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStylePainter.DrawPrimitive(QtWidgets.QStyle.PrimitiveElement,QtWidgets.QStyleOption)">
            <summary>
            <para>Use the widget's style to draw a primitive element pe specified
            by QStyleOption option.</para>
            <para>See also QStyle::drawPrimitive().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStylePainter.DrawControl(QtWidgets.QStyle.ControlElement,QtWidgets.QStyleOption)">
            <summary>
            <para>Use the widget's style to draw a control element ce specified by
            QStyleOption option.</para>
            <para>See also QStyle::drawControl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStylePainter.DrawComplexControl(QtWidgets.QStyle.ComplexControl,QtWidgets.QStyleOptionComplex)">
            <summary>
            <para>Use the widget's style to draw a complex control cc specified by
            the QStyleOptionComplex option.</para>
            <para>See also QStyle::drawComplexControl().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStylePainter.DrawItemText(QtCore.QRect,System.Int32,QtGui.QPalette,System.Boolean,System.String,QtGui.QPalette.ColorRole)">
            <summary>
            <para>Draws the text in rectangle rect and palette pal. The text is
            aligned and wrapped according to flags.</para>
            <para>The pen color is specified with textRole. The enabled bool
            indicates whether or not the item is enabled; when reimplementing this bool
            should influence how the item is drawn.</para>
            <para>See also QStyle::drawItemText() and Qt::Alignment.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStylePainter.DrawItemPixmap(QtCore.QRect,System.Int32,QtGui.QPixmap)">
            <summary>
            <para>Draws the pixmap in rectangle rect. The pixmap is aligned
            according to flags.</para>
            <para>See also QStyle::drawItemPixmap() and Qt::Alignment.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStylePainter.Style">
            <summary>
            <para>Return the current style used by the QStylePainter.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStylePlugin">
            <summary>
            <para>The QStylePlugin class provides an abstract base for custom
            QStyle plugins.</para>
            </summary>
            <remarks>
            <para>QStylePlugin is a simple plugin interface that makes it easy to
            create custom styles that can be loaded dynamically into applications using
            the QStyleFactory class.</para>
            <para>Writing a style plugin is achieved by subclassing this base
            class, reimplementing the pure virtual create() function, and exporting the
            class using the Q_PLUGIN_METADATA() macro.</para>
            <para>class MyStylePlugin : public QStylePlugin</para>
            <para>{</para>
            <para>    Q_OBJECT</para>
            <para>    Q_PLUGIN_METADATA(IID
            &quot;org.qt-project.Qt.QStyleFactoryInterface&quot; FILE
            &quot;mystyleplugin.json&quot;)</para>
            <para>public:</para>
            <para>    MyStylePlugin(QObject *parent = 0);</para>
            <para></para>
            <para>    QStyle *create(const QString &amp;key);</para>
            <para>};</para>
            <para>The json metadata file mystyleplugin.json for the plugin needs to
            contain information about the names of the styles the plugins supports as
            follows:</para>
            <para>{ &quot;Keys&quot;: [ &quot;Rocket&quot;, &quot;Starbuster&quot;
            ] }</para>
            <para>See How to Create Qt Plugins for details.</para>
            <para></para>
            <para>See also QStyleFactory and QStyle.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStylePlugin.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a style plugin with the given parent.</para>
            <para>Note that this constructor is invoked automatically by the moc
            generated code that exports the plugin, so there is no need for calling it
            explicitly.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStylePlugin.Create(System.String)">
            <summary>
            <para>Creates and returns a QStyle object for the given style key. If a
            plugin cannot create a style, it should return 0 instead.</para>
            <para>The style key is usually the class name of the required style.
            Note that the keys are case insensitive. For example:</para>
            <para>QStyle *MyStylePlugin::create(const QString &amp;key)</para>
            <para>{</para>
            <para>    QString lcKey = key.toLower();</para>
            <para>    if (lcKey == &quot;rocket&quot;) {</para>
            <para>        return new RocketStyle;</para>
            <para>    } else if (lcKey == &quot;starbuster&quot;) {</para>
            <para>        return new StarBusterStyle;</para>
            <para>    }</para>
            <para>    return 0;</para>
            <para>}</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QColormap">
            <summary>
            <para>The QColormap class maps device independent QColors to device
            dependent pixel values.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColormap.#ctor(QtWidgets.QColormap)">
            <summary>
            <para>Constructs a copy of another colormap.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColormap.Pixel(QtGui.QColor)">
            <summary>
            <para>Returns a device dependent pixel value for the color.</para>
            <para>See also colorAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColormap.ColorAt(System.UInt32)">
            <summary>
            <para>Returns a QColor for the pixel.</para>
            <para>See also pixel().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QColormap.Instance(System.Int32)">
            <summary>
            <para>Returns the colormap for the specified screen. If screen is -1,
            this function returns the colormap for the default screen.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QColormap.mode">
            <summary>
            <para>Returns the mode of this colormap.</para>
            <para>See also QColormap::Mode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QColormap.Depth">
            <summary>
            <para>Returns the depth of the device.</para>
            <para>See also size().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QColormap.Size">
            <summary>
            <para>Returns the size of the colormap for Indexed and Gray modes;
            Returns -1 for Direct mode.</para>
            <para>See also colormap().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QColormap.Mode">
            <summary>
            <para>This enum describes how QColormap maps device independent RGB
            values to device dependent pixel values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QColormap.Mode.Direct">
            <summary>Pixel values are derived directly from the RGB values, also known as "True Color."</summary>
        </member>
        <member name="F:QtWidgets.QColormap.Mode.Indexed">
            <summary>Pixel values represent indexes into a vector of available colors, i.e. QColormap uses the index of the color that most closely matches an RGB value.</summary>
        </member>
        <member name="F:QtWidgets.QColormap.Mode.Gray">
            <summary>Similar to Indexed, pixel values represent a vector of available gray tones. QColormap uses the index of the gray tone that most closely matches the computed gray tone of an RGB value.</summary>
        </member>
        <member name="T:QtWidgets.QCompleter">
            <summary>
            <para>The QCompleter class provides completions based on an item
            model.</para>
            </summary>
            <remarks>
            <para>You can use QCompleter to provide auto completions in any Qt
            widget, such as QLineEdit and QComboBox. When the user starts typing a
            word, QCompleter suggests possible ways of completing the word, based on a
            word list. The word list is provided as a QAbstractItemModel. (For simple
            applications, where the word list is static, you can pass a QStringList to
            QCompleter's constructor.)</para>
            <para></para>
            <para>Basic Usage</para>
            <para>A QCompleter is used typically with a QLineEdit or QComboBox. For
            example, here's how to provide auto completions from a simple word list in
            a QLineEdit:</para>
            <para>QStringList wordList;</para>
            <para>wordList &lt;&lt; &quot;alpha&quot; &lt;&lt; &quot;omega&quot;
            &lt;&lt; &quot;omicron&quot; &lt;&lt; &quot;zeta&quot;;</para>
            <para></para>
            <para>QLineEdit *lineEdit = new QLineEdit(this);</para>
            <para></para>
            <para>QCompleter *completer = new QCompleter(wordList, this);</para>
            <para>completer-&gt;setCaseSensitivity(Qt::CaseInsensitive);</para>
            <para>lineEdit-&gt;setCompleter(completer);</para>
            <para>A QFileSystemModel can be used to provide auto completion of file
            names. For example:</para>
            <para>QCompleter *completer = new QCompleter(this);</para>
            <para>completer-&gt;setModel(new QDirModel(completer));</para>
            <para>lineEdit-&gt;setCompleter(completer);</para>
            <para>To set the model on which QCompleter should operate, call
            setModel(). By default, QCompleter will attempt to match the completion
            prefix (i.e., the word that the user has started typing) against the
            Qt::EditRole data stored in column 0 in the model case sensitively. This
            can be changed using setCompletionRole(), setCompletionColumn(), and
            setCaseSensitivity().</para>
            <para>If the model is sorted on the column and role that are used for
            completion, you can call setModelSorting() with either
            QCompleter::CaseSensitivelySortedModel or
            QCompleter::CaseInsensitivelySortedModel as the argument. On large models,
            this can lead to significant performance improvements, because QCompleter
            can then use binary search instead of linear search. The binary search only
            works when the filterMode is Qt::MatchStartsWith.</para>
            <para>The model can be a list model, a table model, or a tree model.
            Completion on tree models is slightly more involved and is covered in the
            Handling Tree Models section below.</para>
            <para>The completionMode() determines the mode used to provide
            completions to the user.</para>
            <para></para>
            <para>Iterating Through Completions</para>
            <para>To retrieve a single candidate string, call setCompletionPrefix()
            with the text that needs to be completed and call currentCompletion(). You
            can iterate through the list of completions as below:</para>
            <para>for (int i = 0; completer-&gt;setCurrentRow(i); i++)</para>
            <para>    qDebug() &lt;&lt; completer-&gt;currentCompletion() &lt;&lt;
            &quot; is match number &quot; &lt;&lt; i;</para>
            <para>completionCount() returns the total number of completions for the
            current prefix. completionCount() should be avoided when possible, since it
            requires a scan of the entire model.</para>
            <para></para>
            <para>The Completion Model</para>
            <para>completionModel() return a list model that contains all possible
            completions for the current completion prefix, in the order in which they
            appear in the model. This model can be used to display the current
            completions in a custom view. Calling setCompletionPrefix() automatically
            refreshes the completion model.</para>
            <para></para>
            <para>Handling Tree Models</para>
            <para>QCompleter can look for completions in tree models, assuming that
            any item (or sub-item or sub-sub-item) can be unambiguously represented as
            a string by specifying the path to the item. The completion is then
            performed one level at a time.</para>
            <para>Let's take the example of a user typing in a file system path.
            The model is a (hierarchical) QFileSystemModel. The completion occurs for
            every element in the path. For example, if the current text is C:\Wind,
            QCompleter might suggest Windows to complete the current path element.
            Similarly, if the current text is C:\Windows\Sy, QCompleter might suggest
            System.</para>
            <para>For this kind of completion to work, QCompleter needs to be able
            to split the path into a list of strings that are matched at each level.
            For C:\Windows\Sy, it needs to be split as &quot;C:&quot;,
            &quot;Windows&quot; and &quot;Sy&quot;. The default implementation of
            splitPath(), splits the completionPrefix using QDir::separator() if the
            model is a QFileSystemModel.</para>
            <para>To provide completions, QCompleter needs to know the path from an
            index. This is provided by pathFromIndex(). The default implementation of
            pathFromIndex(), returns the data for the edit role for list models and the
            absolute file path if the mode is a QFileSystemModel.</para>
            <para></para>
            <para>See also QAbstractItemModel, QLineEdit, QComboBox, and Completer
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QCompleter.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a completer object with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCompleter.#ctor(QtCore.QAbstractItemModel,QtCore.QObject)">
            <summary>
            <para>Constructs a completer object with the given parent that provides
            completions from the specified model.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCompleter.#ctor(QtCore.QStringList,QtCore.QObject)">
            <summary>
            <para>Constructs a QCompleter object with the given parent that uses
            the specified list as a source of possible completions.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCompleter.SetCurrentRow(System.Int32)">
            <summary>
            <para>Sets the current row to the row specified. Returns true if
            successful; otherwise returns false.</para>
            <para>This function may be used along with currentCompletion() to
            iterate through all the possible completions.</para>
            <para>See also currentRow(), currentCompletion(), and
            completionCount().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCompleter.Complete(QtCore.QRect)">
            <summary>
            <para>For QCompleter::PopupCompletion and
            QCompletion::UnfilteredPopupCompletion modes, calling this function
            displays the popup displaying the current completions. By default, if rect
            is not specified, the popup is displayed on the bottom of the widget(). If
            rect is specified the popup is displayed on the left edge of the
            rectangle.</para>
            <para>For QCompleter::InlineCompletion mode, the highlighted() signal
            is fired with the current completion.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCompleter.PathFromIndex(QtCore.QModelIndex)">
            <summary>
            <para>Returns the path for the given index. The completer object uses
            this to obtain the completion text from the underlying model.</para>
            <para>The default implementation returns the edit role of the item for
            list models. It returns the absolute file path if the model is a
            QFileSystemModel.</para>
            <para>See also splitPath().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCompleter.SplitPath(System.String)">
            <summary>
            <para>Splits the given path into strings that are used to match at each
            level in the model().</para>
            <para>The default implementation of splitPath() splits a file system
            path based on QDir::separator() when the sourceModel() is a
            QFileSystemModel.</para>
            <para>When used with list models, the first item in the returned list
            is used for matching.</para>
            <para>See also pathFromIndex() and Handling Tree Models.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCompleter.EventFilter(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::eventFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCompleter.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QCompleter.Activated">
            <summary>
            <para>This signal is sent when an item in the popup() is activated by the user (by clicking or pressing return). The item's text is given.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QCompleter.ActivatedIndex">
            <summary>
            <para>This signal is sent when an item in the popup() is activated by the user. (by clicking or pressing return). The item's index in the completionModel() is given.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QCompleter.Highlighted">
            <summary>
            <para>This signal is sent when an item in the popup() is highlighted by the user. It is also sent if complete() is called with the completionMode() set to QCompleter::InlineCompletion. The item's text is given.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QCompleter.HighlightedIndex">
            <summary>
            <para>This signal is sent when an item in the popup() is highlighted by the user. It is also sent if complete() is called with the completionMode() set to QCompleter::InlineCompletion. The item's index in the completionModel() is given.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.Widget">
            <summary>
            <para>Returns the widget for which the completer object is providing
            completions.</para>
            <para>See also setWidget().</para>
            <para></para>
            <para>Sets the widget for which completion are provided for to widget.
            This function is automatically called when a QCompleter is set on a
            QLineEdit using QLineEdit::setCompleter() or on a QComboBox using
            QComboBox::setCompleter(). The widget needs to be set explicitly when
            providing completions for custom widgets.</para>
            <para>See also widget(), setModel(), and setPopup().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.Model">
            <summary>
            <para>Returns the model that provides completion strings.</para>
            <para>See also setModel() and completionModel().</para>
            <para></para>
            <para>Sets the model which provides completions to model. The model can
            be list model or a tree model. If a model has been already previously set
            and it has the QCompleter as its parent, it is deleted.</para>
            <para>For convenience, if model is a QFileSystemModel, QCompleter
            switches its caseSensitivity to Qt::CaseInsensitive on Windows and
            Qt::CaseSensitive on other platforms.</para>
            <para>See also completionModel(), modelSorting, and Handling Tree
            Models.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.completionMode">
            <summary>
            <para>This property holds how the completions are provided to the
            user.</para>
            <para>The default value is QCompleter::PopupCompletion.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.FilterMode">
            <summary>
            <para>This property holds how the filtering is performed.</para>
            <para>If filterMode is set to Qt::MatchStartsWith, only those entries
            that start with the typed characters will be displayed. Qt::MatchContains
            will display the entries that contain the typed characters, and
            Qt::MatchEndsWith the ones that end with the typed characters.</para>
            <para>Currently, only these three modes are implemented. Setting
            filterMode to any other Qt::MatchFlag will issue a warning, and no action
            will be performed.</para>
            <para>The default mode is Qt::MatchStartsWith.</para>
            <para>This property was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.Popup">
            <summary>
            <para>Returns the popup used to display completions.</para>
            <para>See also setPopup().</para>
            <para></para>
            <para>Sets the popup used to display completions to popup. QCompleter
            takes ownership of the view.</para>
            <para>A QListView is automatically created when the completionMode() is
            set to QCompleter::PopupCompletion or
            QCompleter::UnfilteredPopupCompletion. The default popup displays the
            completionColumn().</para>
            <para>Ensure that this function is called before the view settings are
            modified. This is required since view's properties may require that a model
            has been set on the view (for example, hiding columns in the view requires
            a model to be set on the view).</para>
            <para>See also popup().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.CaseSensitivity">
            <summary>
            <para>This property holds the case sensitivity of the matching.</para>
            <para>The default is Qt::CaseSensitive.</para>
            <para>See also completionColumn, completionRole, and
            modelSorting.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.modelSorting">
            <summary>
            <para>This property holds the way the model is sorted.</para>
            <para>By default, no assumptions are made about the order of the items
            in the model that provides the completions.</para>
            <para>If the model's data for the completionColumn() and
            completionRole() is sorted in ascending order, you can set this property to
            CaseSensitivelySortedModel or CaseInsensitivelySortedModel. On large
            models, this can lead to significant performance improvements because the
            completer object can then use a binary search algorithm instead of linear
            search algorithm.</para>
            <para>The sort order (i.e ascending or descending order) of the model
            is determined dynamically by inspecting the contents of the model.</para>
            <para>Note: The performance improvements described above cannot take
            place when the completer's caseSensitivity is different to the case
            sensitivity used by the model's when sorting.</para>
            <para>See also setCaseSensitivity() and
            QCompleter::ModelSorting.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.CompletionColumn">
            <summary>
            <para>This property holds the column in the model in which completions
            are searched for.</para>
            <para>If the popup() is a QListView, it is automatically setup to
            display this column.</para>
            <para>By default, the match column is 0.</para>
            <para>See also completionRole and caseSensitivity.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.CompletionRole">
            <summary>
            <para>This property holds the item role to be used to query the
            contents of items for matching.</para>
            <para>The default role is Qt::EditRole.</para>
            <para>See also completionColumn and caseSensitivity.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.MaxVisibleItems">
            <summary>
            <para>This property holds the maximum allowed size on screen of the
            completer, measured in items.</para>
            <para>By default, this property has a value of 7.</para>
            <para>This property was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.CompletionPrefix">
            <summary>
            <para>This property holds the completion prefix used to provide
            completions.</para>
            <para>The completionModel() is updated to reflect the list of possible
            matches for prefix.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.WrapAround">
            <summary>
            <para>This property holds the completions wrap around when navigating
            through items.</para>
            <para>The default is true.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.CompletionCount">
            <summary>
            <para>Returns the number of completions for the current prefix. For an
            unsorted model with a large number of items this can be expensive. Use
            setCurrentRow() and currentCompletion() to iterate through all the
            completions.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.CurrentRow">
            <summary>
            <para>Returns the current row.</para>
            <para>See also setCurrentRow().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.CurrentIndex">
            <summary>
            <para>Returns the model index of the current completion in the
            completionModel().</para>
            <para>See also setCurrentRow(), currentCompletion(), and
            model().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.CurrentCompletion">
            <summary>
            <para>Returns the current completion string. This includes the
            completionPrefix. When used alongside setCurrentRow(), it can be used to
            iterate through all the matches.</para>
            <para>See also setCurrentRow() and currentIndex().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCompleter.CompletionModel">
            <summary>
            <para>Returns the completion model. The completion model is a read-only
            list model that contains all the possible matches for the current
            completion prefix. The completion model is auto-updated to reflect the
            current completions.</para>
            <para>Note: The return value of this function is defined to be an
            QAbstractItemModel purely for generality. This actual kind of model
            returned is an instance of an QAbstractProxyModel subclass.</para>
            <para>See also completionPrefix and model().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QCompleter.CompletionMode">
            <summary>
            <para>This enum specifies how completions are provided to the
            user.</para>
            <para>See also setCompletionMode().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QCompleter.CompletionMode.PopupCompletion">
            <summary>Current completions are displayed in a popup window.</summary>
        </member>
        <member name="F:QtWidgets.QCompleter.CompletionMode.UnfilteredPopupCompletion">
            <summary>All possible completions are displayed in a popup window with the most likely suggestion indicated as current.</summary>
        </member>
        <member name="F:QtWidgets.QCompleter.CompletionMode.InlineCompletion">
            <summary>Completions appear inline (as selected text).</summary>
        </member>
        <member name="T:QtWidgets.QCompleter.ModelSorting">
            <summary>
            <para>This enum specifies how the items in the model are sorted.</para>
            <para>See also setModelSorting().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QCompleter.ModelSorting.UnsortedModel">
            <summary>The model is unsorted.</summary>
        </member>
        <member name="F:QtWidgets.QCompleter.ModelSorting.CaseSensitivelySortedModel">
            <summary>The model is sorted case sensitively.</summary>
        </member>
        <member name="F:QtWidgets.QCompleter.ModelSorting.CaseInsensitivelySortedModel">
            <summary>The model is sorted case insensitively.</summary>
        </member>
        <member name="T:QtWidgets.QScrollerProperties">
            <summary>
            <para>The QScrollerProperties class stores the settings for a
            QScroller.</para>
            </summary>
            <remarks>
            <para>The QScrollerProperties class stores the parameters used by
            QScroller.</para>
            <para>The default settings are platform dependent so that Qt emulates
            the platform behaviour for kinetic scrolling.</para>
            <para>As a convention the QScrollerProperties are in physical units
            (meter, seconds) and are converted by QScroller using the current
            DPI.</para>
            <para></para>
            <para>See also QScroller.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QScrollerProperties.#ctor">
            <summary>
            <para>Constructs new scroller properties.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollerProperties.#ctor(QtWidgets.QScrollerProperties)">
            <summary>
            <para>Constructs a copy of sp.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollerProperties.op_Equality(QtWidgets.QScrollerProperties,QtWidgets.QScrollerProperties)">
            <summary>
            <para>Returns true if these scroller properties are equal to sp;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollerProperties.op_Inequality(QtWidgets.QScrollerProperties,QtWidgets.QScrollerProperties)">
            <summary>
            <para>Returns true if these scroller properties are different from sp;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollerProperties.scrollMetric(QtWidgets.QScrollerProperties.ScrollMetric)">
            <summary>
            <para>Query the metric value of the scroller properties.</para>
            <para>See also setScrollMetric() and ScrollMetric.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollerProperties.SetScrollMetric(QtWidgets.QScrollerProperties.ScrollMetric,QtCore.QVariant)">
            <summary>
            <para>Set a specific value of the metric ScrollerMetric to
            value.</para>
            <para>See also scrollMetric() and ScrollMetric.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollerProperties.SetDefaultScrollerProperties(QtWidgets.QScrollerProperties)">
            <summary>
            <para>Sets the scroller properties for all new QScrollerProperties
            objects to sp.</para>
            <para>Use this function to override the platform default properties
            returned by the default constructor. If you only want to change the
            scroller properties of a single scroller, use
            QScroller::setScrollerProperties()</para>
            <para>Note: Calling this function will not change the content of
            already existing QScrollerProperties objects.</para>
            <para>See also unsetDefaultScrollerProperties().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollerProperties.UnsetDefaultScrollerProperties">
            <summary>
            <para>Sets the scroller properties returned by the default constructor
            back to the platform default properties.</para>
            <para>See also setDefaultScrollerProperties().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QScrollerProperties.OvershootPolicy">
            <summary>
            <para>This enum describes the various modes of overshooting.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.OvershootPolicy.OvershootWhenScrollable">
            <summary>Overshooting is possible when the content is scrollable. This is the default.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.OvershootPolicy.OvershootAlwaysOff">
            <summary>Overshooting is never enabled, even when the content is scrollable.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.OvershootPolicy.OvershootAlwaysOn">
            <summary>Overshooting is always enabled, even when the content is not scrollable.</summary>
        </member>
        <member name="T:QtWidgets.QScrollerProperties.FrameRates">
            <summary>
            <para>This enum describes the available frame rates used while dragging
            or scrolling.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.FrameRates.Standard">
            <summary>the default value is 60 frames per second (which corresponds to QAbstractAnimation).</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.FrameRates.Fps60">
            <summary>60 frames per second</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.FrameRates.Fps30">
            <summary>30 frames per second</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.FrameRates.Fps20">
            <summary>20 frames per second</summary>
        </member>
        <member name="T:QtWidgets.QScrollerProperties.ScrollMetric">
            <summary>
            <para>This enum contains the different scroll metric types. When not
            indicated otherwise the setScrollMetric function expects a QVariant of type
            qreal.</para>
            <para>See the QScroller documentation for further details of the
            concepts behind the different values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.MousePressEventDelay">
            <summary>This is the time a mouse press event is delayed when starting a flick gesture in [s]. If the gesture is triggered within that time, no mouse press or release is sent to the scrolled object. If it triggers after that delay the delayed mouse press plus a faked release event at global position QPoint(-QWIDGETSIZE_MAX, -QWIDGETSIZE_MAX) is sent. If the gesture is canceled, then both the delayed mouse press plus the real release event are delivered.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.DragStartDistance">
            <summary>This is the minimum distance the touch or mouse point needs to be moved before the flick gesture is triggered in m.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.DragVelocitySmoothingFactor">
            <summary>A value that describes to which extent new drag velocities are included in the final scrolling velocity. This value should be in the range between 0 and 1. The lower the value, the more smoothing is applied to the dragging velocity.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.AxisLockThreshold">
            <summary>Restricts the movement to one axis if the movement is inside an angle around the axis. The threshold must be in the range 0 to 1.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.ScrollingCurve">
            <summary>The QEasingCurve used when decelerating the scrolling velocity after an user initiated flick. Please note that this is the easing curve for the positions, not the velocity: the default is QEasingCurve::OutQuad, which results in a linear decrease in velocity (1st derivative) and a constant deceleration (2nd derivative).</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.DecelerationFactor">
            <summary>This factor influences how long it takes the scroller to decelerate to 0 velocity. The actual value depends on the chosen ScrollingCurve. For most types the value should be in the range from 0.1 to 2.0</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.MinimumVelocity">
            <summary>The minimum velocity that is needed after ending the touch or releasing the mouse to start scrolling in m/s.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.MaximumVelocity">
            <summary>This is the maximum velocity that can be reached in m/s.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.MaximumClickThroughVelocity">
            <summary>This is the maximum allowed scroll speed for a click-through in m/s. This means that a click on a currently (slowly) scrolling object will not only stop the scrolling but the click event will also be delivered to the UI control. This is useful when using exponential-type scrolling curves.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.AcceleratingFlickMaximumTime">
            <summary>This is the maximum time in seconds that a flick gesture can take to be recognized as an accelerating flick. If set to zero no such gesture is detected. An "accelerating flick" is a flick gesture executed on an already scrolling object. In such cases the scrolling speed is multiplied by AcceleratingFlickSpeedupFactor in order to accelerate it.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.AcceleratingFlickSpeedupFactor">
            <summary>The current speed is multiplied by this number if an accelerating flick is detected. Should be >= 1.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.SnapPositionRatio">
            <summary>This is the distance that the user must drag the area beween two snap points in order to snap it to the next position. 0.33 means that the scroll must only reach one third of the distance between two snap points to snap to the next one. The ratio must be between 0 and 1.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.SnapTime">
            <summary>This is the time factor for the scrolling curve. A lower value means that the scrolling will take longer. The scrolling distance is independet of this value.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.OvershootDragResistanceFactor">
            <summary>This value is the factor between the mouse dragging and the actual scroll area movement (during overshoot). The factor must be between 0 and 1.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.OvershootDragDistanceFactor">
            <summary>This is the maximum distance for overshoot movements while dragging. The actual overshoot distance is calculated by multiplying this value with the viewport size of the scrolled object. The factor must be between 0 and 1.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.OvershootScrollDistanceFactor">
            <summary>This is the maximum distance for overshoot movements while scrolling. The actual overshoot distance is calculated by multiplying this value with the viewport size of the scrolled object. The factor must be between 0 and 1.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.OvershootScrollTime">
            <summary>This is the time in seconds that is used to play the complete overshoot animation.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.HorizontalOvershootPolicy">
            <summary>This is the horizontal overshooting policy (see OvershootPolicy).</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.VerticalOvershootPolicy">
            <summary>This is the horizontal overshooting policy (see OvershootPolicy).</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.FrameRate">
            <summary>This is the frame rate which should be used while dragging or scrolling. QScroller uses a QAbstractAnimation timer internally to sync all scrolling operations to other animations that might be active at the same time. If the standard value of 60 frames per second is too fast, it can be lowered with this setting, while still being in-sync with QAbstractAnimation. Please note that only the values of the FrameRates enum are allowed here.</summary>
        </member>
        <member name="F:QtWidgets.QScrollerProperties.ScrollMetric.ScrollMetricCount">
            <summary>This is always the last entry.</summary>
        </member>
        <member name="T:QtWidgets.QScroller">
            <summary>
            <para>The QScroller class enables kinetic scrolling for any scrolling
            widget or graphics item.</para>
            </summary>
            <remarks>
            <para>With kinetic scrolling, the user can push the widget in a given
            direction and it will continue to scroll in this direction until it is
            stopped either by the user or by friction. Aspects of inertia, friction and
            other physical concepts can be changed in order to fine-tune an intuitive
            user experience.</para>
            <para>The QScroller object is the object that stores the current
            position and scrolling speed and takes care of updates. QScroller can be
            triggered by a flick gesture</para>
            <para>QWidget *w = ...;</para>
            <para>QScroller::grabGesture(w,
            QScroller::LeftMouseButtonGesture);</para>
            <para>or directly like this:</para>
            <para>QWidget *w = ...;</para>
            <para>QScroller *scroller = QScroller::scroller(w);</para>
            <para>scroller-&gt;scrollTo(QPointF(100, 100));</para>
            <para>The scrolled QObjects receive a QScrollPrepareEvent whenever the
            scroller needs to update its geometry information and a QScrollEvent
            whenever the content of the object should actually be scrolled.</para>
            <para>The scroller uses the global QAbstractAnimation timer to generate
            its QScrollEvents. This can be changed with QScrollerProperties::FrameRate
            on a per-QScroller basis.</para>
            <para>Several examples in the scroller examples directory show how
            QScroller, QScrollEvent and the scroller gesture can be used.</para>
            <para>Even though this kinetic scroller has a large number of settings
            available via QScrollerProperties, we recommend that you leave them all at
            their default, platform optimized values. Before changing them you can
            experiment with the plot example in the scroller examples directory.</para>
            <para></para>
            <para>See also QScrollEvent, QScrollPrepareEvent, and
            QScrollerProperties.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QScroller.HandleInput(QtWidgets.QScroller.Input,QtCore.QPointF,System.Int64)">
            <summary>
            <para>This function is used by gesture recognizers to inform the
            scroller about a new input event. The scroller changes its internal state()
            according to the input event and its attached scroller properties. The
            scroller doesn't distinguish between the kind of input device the event
            came from. Therefore the event needs to be split into the input type, a
            position and a milli-second timestamp. The position needs to be in the
            target's coordinate system.</para>
            <para>The return value is true if the event should be consumed by the
            calling filter or false if the event should be forwarded to the
            control.</para>
            <para>Note: Using grabGesture() should be sufficient for most use
            cases.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScroller.Stop">
            <summary>
            <para>Stops the scroller and resets its state back to Inactive.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScroller.SetSnapPositionsX(System.Double,System.Double)">
            <summary>
            <para>Set the snap positions for the horizontal axis to regular spaced
            intervals. The first snap position is at first. The next at first +
            interval. This can be used to implement a list header. This overwrites all
            previously set snap positions and also a previously set snapping interval.
            Snapping can be deactivated by setting an interval of 0.0</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScroller.SetSnapPositionsY(System.Double,System.Double)">
            <summary>
            <para>Set the snap positions for the vertical axis to regular spaced
            intervals. The first snap position is at first. The next at first +
            interval. This overwrites all previously set snap positions and also a
            previously set snapping interval. Snapping can be deactivated by setting an
            interval of 0.0</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScroller.ScrollTo(QtCore.QPointF)">
            <summary>
            <para>Starts scrolling the widget so that point pos is at the top-left
            position in the viewport.</para>
            <para>The behaviour when scrolling outside the valid scroll area is
            undefined. In this case the scroller might or might not overshoot.</para>
            <para>The scrolling speed will be calculated so that the given position
            will be reached after a platform-defined time span.</para>
            <para>pos is given in viewport coordinates.</para>
            <para>See also ensureVisible().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScroller.ScrollTo(QtCore.QPointF,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This version will reach its destination position in scrollTime
            milliseconds.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScroller.EnsureVisible(QtCore.QRectF,System.Double,System.Double)">
            <summary>
            <para>Starts scrolling so that the rectangle rect is visible inside the
            viewport with additional margins specified in pixels by xmargin and ymargin
            around the rect.</para>
            <para>In cases where it is not possible to fit the rect plus margins
            inside the viewport the contents are scrolled so that as much as possible
            is visible from rect.</para>
            <para>The scrolling speed is calculated so that the given position is
            reached after a platform-defined time span.</para>
            <para>This function performs the actual scrolling by calling
            scrollTo().</para>
            <para>See also scrollTo().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScroller.EnsureVisible(QtCore.QRectF,System.Double,System.Double,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This version will reach its destination position in scrollTime
            milliseconds.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScroller.ResendPrepareEvent">
            <summary>
            <para>This function resends the QScrollPrepareEvent. Calling
            resendPrepareEvent triggers a QScrollPrepareEvent from the scroller. This
            allows the receiver to re-set content position and content size while
            scrolling. Calling this function while in the Inactive state is useless as
            the prepare event is sent again before scrolling starts.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScroller.HasScroller(QtCore.QObject)">
            <summary>
            <para>Returns true if a QScroller object was already created for
            target; false otherwise.</para>
            <para>See also scroller().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScroller.Scroller(QtCore.QObject)">
            <summary>
            <para>Returns the scroller for the given target. As long as the object
            exists this function will always return the same QScroller instance. If no
            QScroller exists for the target, one will implicitly be created. At no
            point more than one QScroller will be active on an object.</para>
            <para>See also hasScroller() and target().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScroller.Scroller1(QtCore.QObject)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This is the const version of scroller().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScroller.GrabGesture(QtCore.QObject,QtWidgets.QScroller.ScrollerGestureType)">
            <summary>
            <para>Registers a custom scroll gesture recognizer, grabs it for the
            target and returns the resulting gesture type. If scrollGestureType is set
            to TouchGesture the gesture triggers on touch events. If it is set to one
            of LeftMouseButtonGesture, RightMouseButtonGesture or
            MiddleMouseButtonGesture it triggers on mouse events of the corresponding
            button.</para>
            <para>Only one scroll gesture can be active on a single object at the
            same time. If you call this function twice on the same object, it will
            ungrab the existing gesture before grabbing the new one.</para>
            <para>Note: To avoid unwanted side-effects, mouse events are consumed
            while the gesture is triggered. Since the initial mouse press event is not
            consumed, the gesture sends a fake mouse release event at the global
            position (INT_MIN, INT_MIN). This ensures that internal states of the
            widget that received the original mouse press are consistent.</para>
            <para>See also ungrabGesture() and grabbedGesture().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScroller.GrabbedGesture(QtCore.QObject)">
            <summary>
            <para>Returns the gesture type currently grabbed for the target or 0 if
            no gesture is grabbed.</para>
            <para>See also grabGesture() and ungrabGesture().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScroller.UngrabGesture(QtCore.QObject)">
            <summary>
            <para>Ungrabs the gesture for the target. Does nothing if no gesture is
            grabbed.</para>
            <para>See also grabGesture() and grabbedGesture().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QScroller.StateChanged">
            <summary>
            <para>This property holds the state of the scroller.</para>
            <para>Access functions:</para>
            <para></para>
            <para> State 	state() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	stateChanged(QScroller::State newState)</para>
            <para></para>
            <para>See also QScroller::State.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QScroller.ScrollerPropertiesChanged">
            <summary>
            <para>This property holds the scroller properties of this scroller. The properties are used by the QScroller to determine its scrolling behavior.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QScrollerProperties 	scrollerProperties() const</para>
            <para> void 	setScrollerProperties(const QScrollerProperties &amp; prop)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	scrollerPropertiesChanged(const QScrollerProperties &amp; newProperties)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QScroller.ScrollerProperties">
            <summary>
            <para>This property holds the scroller properties of this scroller. The
            properties are used by the QScroller to determine its scrolling
            behavior.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QScroller.Target">
            <summary>
            <para>Returns the target object of this scroller.</para>
            <para>See also hasScroller() and scroller().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QScroller.state">
            <summary>
            <para>This property holds the state of the scroller.</para>
            <para>See also QScroller::State.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QScroller.Velocity">
            <summary>
            <para>Returns the current scrolling velocity in meter per second when
            the state is Scrolling or Dragging. Returns a zero velocity
            otherwise.</para>
            <para>The velocity is reported for both the x and y axis separately by
            using a QPointF.</para>
            <para>See also pixelPerMeter().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QScroller.FinalPosition">
            <summary>
            <para>Returns the estimated final position for the current scroll
            movement. Returns the current position if the scroller state is not
            Scrolling. The result is undefined when the scroller state is
            Inactive.</para>
            <para>The target position is in pixel.</para>
            <para>See also pixelPerMeter() and scrollTo().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QScroller.PixelPerMeter">
            <summary>
            <para>Returns the pixel per meter metric for the scrolled
            widget.</para>
            <para>The value is reported for both the x and y axis separately by
            using a QPointF.</para>
            <para>Note: Please note that this value should be physically correct.
            The actual DPI settings that Qt returns for the display may be reported
            wrongly on purpose by the underlying windowing system, for example on Mac
            OS X.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QScroller.State">
            <summary>
            <para>This enum contains the different QScroller states.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QScroller.State.Inactive">
            <summary>The scroller is not scrolling and nothing is pressed.</summary>
        </member>
        <member name="F:QtWidgets.QScroller.State.Pressed">
            <summary>A touch event was received or the mouse button was pressed but the scroll area is currently not dragged.</summary>
        </member>
        <member name="F:QtWidgets.QScroller.State.Dragging">
            <summary>The scroll area is currently following the touch point or mouse.</summary>
        </member>
        <member name="F:QtWidgets.QScroller.State.Scrolling">
            <summary>The scroll area is moving on it's own.</summary>
        </member>
        <member name="T:QtWidgets.QScroller.ScrollerGestureType">
            <summary>
            <para>This enum contains the different gesture types that are supported
            by the QScroller gesture recognizer.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QScroller.ScrollerGestureType.TouchGesture">
            <summary>The gesture recognizer will only trigger on touch events. Specifically it will react on single touch points when using a touch screen and dual touch points when using a touchpad.</summary>
        </member>
        <member name="F:QtWidgets.QScroller.ScrollerGestureType.LeftMouseButtonGesture">
            <summary>The gesture recognizer will only trigger on left mouse button events.</summary>
        </member>
        <member name="F:QtWidgets.QScroller.ScrollerGestureType.RightMouseButtonGesture">
            <summary>The gesture recognizer will only trigger on right mouse button events.</summary>
        </member>
        <member name="F:QtWidgets.QScroller.ScrollerGestureType.MiddleMouseButtonGesture">
            <summary>The gesture recognizer will only trigger on middle mouse button events.</summary>
        </member>
        <member name="T:QtWidgets.QScroller.Input">
            <summary>
            <para>This enum contains an input device agnostic view of input events
            that are relevant for QScroller.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QScroller.Input.InputPress">
            <summary>The user pressed the input device (e.g. QEvent::MouseButtonPress, QEvent::GraphicsSceneMousePress, QEvent::TouchBegin)</summary>
        </member>
        <member name="F:QtWidgets.QScroller.Input.InputMove">
            <summary>The user moved the input device (e.g. QEvent::MouseMove, QEvent::GraphicsSceneMouseMove, QEvent::TouchUpdate)</summary>
        </member>
        <member name="F:QtWidgets.QScroller.Input.InputRelease">
            <summary>The user released the input device (e.g. QEvent::MouseButtonRelease, QEvent::GraphicsSceneMouseRelease, QEvent::TouchEnd)</summary>
        </member>
        <member name="T:QtWidgets.QSystemTrayIcon">
            <summary>
            <para>The QSystemTrayIcon class provides an icon for an application in
            the system tray.</para>
            </summary>
            <remarks>
            <para>Modern operating systems usually provide a special area on the
            desktop, called the system tray or notification area, where long-running
            applications can display icons and short messages.</para>
            <para></para>
            <para>The QSystemTrayIcon class can be used on the following
            platforms:</para>
            <para></para>
            <para>All supported versions of Windows.</para>
            <para>All window managers and independent tray implementations for X11
            that implement the
            http://standards.freedesktop.org/systemtray-spec/systemtray-spec-0.2.html
            freedesktop.org XEmbed system tray specification.</para>
            <para>All X11 desktop environments that implement the D-Bus
            http://www.freedesktop.org/wiki/Specifications/StatusNotifierItem/
            StatusNotifierItem specification, including recent versions of KDE and
            Unity.</para>
            <para>All supported versions of Mac OS X. Note that the Growl
            notification system must be installed for QSystemTrayIcon::showMessage() to
            display messages on Mac OS X prior to 10.8 (Mountain Lion).</para>
            <para></para>
            <para>To check whether a system tray is present on the user's desktop,
            call the QSystemTrayIcon::isSystemTrayAvailable() static function.</para>
            <para>To add a system tray entry, create a QSystemTrayIcon object, call
            setContextMenu() to provide a context menu for the icon, and call show() to
            make it visible in the system tray. Status notification messages
            (&quot;balloon messages&quot;) can be displayed at any time using
            showMessage().</para>
            <para>If the system tray is unavailable when a system tray icon is
            constructed, but becomes available later, QSystemTrayIcon will
            automatically add an entry for the application in the system tray if the
            icon is visible.</para>
            <para>The activated() signal is emitted when the user activates the
            icon.</para>
            <para>Only on X11, when a tooltip is requested, the QSystemTrayIcon
            receives a QHelpEvent of type QEvent::ToolTip. Additionally, the
            QSystemTrayIcon receives wheel events of type QEvent::Wheel. These are not
            supported on any other platform.</para>
            <para></para>
            <para>See also QDesktopServices, QDesktopWidget, Desktop Integration,
            and System Tray Icon Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QSystemTrayIcon.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QSystemTrayIcon object with the given parent.</para>
            <para>The icon is initially invisible.</para>
            <para>See also visible.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSystemTrayIcon.#ctor(QtGui.QIcon,QtCore.QObject)">
            <summary>
            <para>Constructs a QSystemTrayIcon object with the given icon and
            parent.</para>
            <para>The icon is initially invisible.</para>
            <para>See also visible.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSystemTrayIcon.Show">
            <summary>
            <para>Shows the icon in the system tray.</para>
            <para>See also hide() and visible.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSystemTrayIcon.Hide">
            <summary>
            <para>Hides the system tray entry.</para>
            <para>See also show() and visible.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSystemTrayIcon.ShowMessage(System.String,System.String,QtWidgets.QSystemTrayIcon.MessageIcon,System.Int32)">
            <summary>
            <para>Shows a balloon message for the entry with the given title,
            message and icon for the time specified in millisecondsTimeoutHint. title
            and message must be plain text strings.</para>
            <para>Message can be clicked by the user; the messageClicked() signal
            will emitted when this occurs.</para>
            <para>Note that display of messages are dependent on the system
            configuration and user preferences, and that messages may not appear at
            all. Hence, it should not be relied upon as the sole means for providing
            critical information.</para>
            <para>On Windows, the millisecondsTimeoutHint is usually ignored by the
            system when the application has focus.</para>
            <para>On Mac OS X, the Growl notification system must be installed for
            this function to display messages.</para>
            <para>Has been turned into a slot in Qt 5.2.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also show() and supportsMessages().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSystemTrayIcon.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QSystemTrayIcon.Activated">
            <summary>
            <para>This signal is emitted when the user activates the system tray icon. reason specifies the reason for activation. QSystemTrayIcon::ActivationReason enumerates the various reasons.</para>
            <para>See also QSystemTrayIcon::ActivationReason.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QSystemTrayIcon.MessageClicked">
            <summary>
            <para>This signal is emitted when the message displayed using showMessage() was clicked by the user.</para>
            <para>Currently this signal is not sent on Mac OS X.</para>
            <para>Note: We follow Microsoft Windows XP/Vista behavior, so the signal is also emitted when the user clicks on a tray icon with a balloon message displayed.</para>
            <para>See also activated().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSystemTrayIcon.ContextMenu">
            <summary>
            <para>Returns the current context menu for the system tray
            entry.</para>
            <para>See also setContextMenu().</para>
            <para></para>
            <para>Sets the specified menu to be the context menu for the system
            tray icon.</para>
            <para>The menu will pop up when the user requests the context menu for
            the system tray icon by clicking the mouse button.</para>
            <para>On Mac OS X, this is currenly converted to a NSMenu, so the
            aboutToHide() signal is not emitted.</para>
            <para>Note: The system tray icon does not take ownership of the menu.
            You must ensure that it is deleted at the appropriate time by, for example,
            creating the menu with a suitable parent object.</para>
            <para>See also contextMenu().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSystemTrayIcon.Icon">
            <summary>
            <para>This property holds the system tray icon.</para>
            <para>On Windows, the system tray icon size is 16x16; on X11, the
            preferred size is 22x22. The icon will be scaled to the appropriate size as
            necessary.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSystemTrayIcon.ToolTip">
            <summary>
            <para>This property holds the tooltip for the system tray entry.</para>
            <para>On some systems, the tooltip's length is limited. The tooltip
            will be truncated if necessary.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSystemTrayIcon.Visible">
            <summary>
            <para>This property holds whether the system tray entry is
            visible.</para>
            <para>Setting this property to true or calling show() makes the system
            tray icon visible; setting this property to false or calling hide() hides
            it.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSystemTrayIcon.IsSystemTrayAvailable">
            <summary>
            <para>Returns true if the system tray is available; otherwise returns
            false.</para>
            <para>If the system tray is currently unavailable but becomes available
            later, QSystemTrayIcon will automatically add an entry in the system tray
            if it is visible.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSystemTrayIcon.SupportsMessages">
            <summary>
            <para>Returns true if the system tray supports balloon messages;
            otherwise returns false.</para>
            <para>See also showMessage().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSystemTrayIcon.Geometry">
            <summary>
            <para>Returns the geometry of the system tray icon in screen
            coordinates.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also visible.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QSystemTrayIcon.ActivationReason">
            <summary>
            <para>This enum describes the reason the system tray was
            activated.</para>
            <para>See also activated().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QSystemTrayIcon.ActivationReason.Unknown">
            <summary>Unknown reason</summary>
        </member>
        <member name="F:QtWidgets.QSystemTrayIcon.ActivationReason.Context">
            <summary>The context menu for the system tray entry was requested</summary>
        </member>
        <member name="F:QtWidgets.QSystemTrayIcon.ActivationReason.DoubleClick">
            <summary>The system tray entry was double clicked</summary>
        </member>
        <member name="F:QtWidgets.QSystemTrayIcon.ActivationReason.Trigger">
            <summary>The system tray entry was clicked</summary>
        </member>
        <member name="F:QtWidgets.QSystemTrayIcon.ActivationReason.MiddleClick">
            <summary>The system tray entry was clicked with the middle mouse button</summary>
        </member>
        <member name="T:QtWidgets.QSystemTrayIcon.MessageIcon">
            <summary>
            <para>This enum describes the icon that is shown when a balloon message
            is displayed.</para>
            <para>See also QMessageBox.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QSystemTrayIcon.MessageIcon.NoIcon">
            <summary>No icon is shown.</summary>
        </member>
        <member name="F:QtWidgets.QSystemTrayIcon.MessageIcon.Information">
            <summary>An information icon is shown.</summary>
        </member>
        <member name="F:QtWidgets.QSystemTrayIcon.MessageIcon.Warning">
            <summary>A standard warning icon is shown.</summary>
        </member>
        <member name="F:QtWidgets.QSystemTrayIcon.MessageIcon.Critical">
            <summary>A critical warning icon is shown.</summary>
        </member>
        <member name="T:QtWidgets.QUndoGroup">
            <summary>
            <para>The QUndoGroup class is a group of QUndoStack objects.</para>
            </summary>
            <remarks>
            <para>For an overview of the Qt's undo framework, see the
            overview.</para>
            <para>An application often has multiple undo stacks, one for each
            opened document. At the same time, an application usually has one undo
            action and one redo action, which triggers undo or redo in the active
            document.</para>
            <para>QUndoGroup is a group of QUndoStack objects, one of which may be
            active. It has an undo() and redo() slot, which calls QUndoStack::undo()
            and QUndoStack::redo() for the active stack. It also has the functions
            createUndoAction() and createRedoAction(). The actions returned by these
            functions behave in the same way as those returned by
            QUndoStack::createUndoAction() and QUndoStack::createRedoAction() of the
            active stack.</para>
            <para>Stacks are added to a group with addStack() and removed with
            removeStack(). A stack is implicitly added to a group when it is created
            with the group as its parent QObject.</para>
            <para>It is the programmer's responsibility to specify which stack is
            active by calling QUndoStack::setActive(), usually when the associated
            document window receives focus. The active stack may also be set with
            setActiveStack(), and is returned by activeStack().</para>
            <para>When a stack is added to a group using addStack(), the group does
            not take ownership of the stack. This means the stack has to be deleted
            separately from the group. When a stack is deleted, it is automatically
            removed from a group. A stack may belong to only one group. Adding it to
            another group will cause it to be removed from the previous group.</para>
            <para>A QUndoGroup is also useful in conjunction with QUndoView. If a
            QUndoView is set to watch a group using QUndoView::setGroup(), it will
            update itself to display the active stack.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QUndoGroup.#ctor(QtCore.QObject)">
            <summary>
            <para>Creates an empty QUndoGroup object with parent parent.</para>
            <para>See also addStack().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoGroup.AddStack(QtWidgets.QUndoStack)">
            <summary>
            <para>Adds stack to this group. The group does not take ownership of
            the stack. Another way of adding a stack to a group is by specifying the
            group as the stack's parent QObject in QUndoStack::QUndoStack(). In this
            case, the stack is deleted when the group is deleted, in the usual manner
            of QObjects.</para>
            <para>See also removeStack(), stacks(), and
            QUndoStack::QUndoStack().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoGroup.RemoveStack(QtWidgets.QUndoStack)">
            <summary>
            <para>Removes stack from this group. If the stack was the active stack
            in the group, the active stack becomes 0.</para>
            <para>See also addStack(), stacks(), and
            QUndoStack::~QUndoStack().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoGroup.CreateUndoAction(QtCore.QObject,System.String)">
            <summary>
            <para>Creates an undo QAction object with parent parent.</para>
            <para>Triggering this action will cause a call to QUndoStack::undo() on
            the active stack. The text of this action will always be the text of the
            command which will be undone in the next call to undo(), prefixed by
            prefix. If there is no command available for undo, if the group is empty or
            if none of the stacks are active, this action will be disabled.</para>
            <para>If prefix is empty, the default template &quot;Undo %1&quot; is
            used instead of prefix. Before Qt 4.8, the prefix &quot;Undo&quot; was used
            by default.</para>
            <para>See also createRedoAction(), canUndo(), and
            QUndoCommand::text().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoGroup.CreateRedoAction(QtCore.QObject,System.String)">
            <summary>
            <para>Creates an redo QAction object with parent parent.</para>
            <para>Triggering this action will cause a call to QUndoStack::redo() on
            the active stack. The text of this action will always be the text of the
            command which will be redone in the next call to redo(), prefixed by
            prefix. If there is no command available for redo, if the group is empty or
            if none of the stacks are active, this action will be disabled.</para>
            <para>If prefix is empty, the default template &quot;Redo %1&quot; is
            used instead of prefix. Before Qt 4.8, the prefix &quot;Redo&quot; was used
            by default.</para>
            <para>See also createUndoAction(), canRedo(), and
            QUndoCommand::text().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoGroup.CanUndo">
            <summary>
            <para>Returns the value of the active stack's
            QUndoStack::canUndo().</para>
            <para>If none of the stacks are active, or if the group is empty, this
            function returns false.</para>
            <para>See also canRedo() and setActiveStack().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoGroup.CanRedo">
            <summary>
            <para>Returns the value of the active stack's
            QUndoStack::canRedo().</para>
            <para>If none of the stacks are active, or if the group is empty, this
            function returns false.</para>
            <para>See also canUndo() and setActiveStack().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoGroup.UndoText">
            <summary>
            <para>Returns the value of the active stack's
            QUndoStack::undoText().</para>
            <para>If none of the stacks are active, or if the group is empty, this
            function returns an empty string.</para>
            <para>See also redoText() and setActiveStack().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoGroup.RedoText">
            <summary>
            <para>Returns the value of the active stack's
            QUndoStack::redoText().</para>
            <para>If none of the stacks are active, or if the group is empty, this
            function returns an empty string.</para>
            <para>See also undoText() and setActiveStack().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoGroup.Undo">
            <summary>
            <para>Calls QUndoStack::undo() on the active stack.</para>
            <para>If none of the stacks are active, or if the group is empty, this
            function does nothing.</para>
            <para>See also redo(), canUndo(), and setActiveStack().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoGroup.Redo">
            <summary>
            <para>Calls QUndoStack::redo() on the active stack.</para>
            <para>If none of the stacks are active, or if the group is empty, this
            function does nothing.</para>
            <para>See also undo(), canRedo(), and setActiveStack().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QUndoGroup.ActiveStackChanged">
            <summary>
            <para>This signal is emitted whenever the active stack of the group changes. This can happen when setActiveStack() or QUndoStack::setActive() is called, or when the active stack is removed form the group. stack is the new active stack. If no stack is active, stack is 0.</para>
            <para>See also setActiveStack() and QUndoStack::setActive().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QUndoGroup.IndexChanged">
            <summary>
            <para>This signal is emitted whenever the active stack emits QUndoStack::indexChanged() or the active stack changes.</para>
            <para>idx is the new current index, or 0 if the active stack is 0.</para>
            <para>See also QUndoStack::indexChanged() and setActiveStack().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QUndoGroup.CleanChanged">
            <summary>
            <para>This signal is emitted whenever the active stack emits QUndoStack::cleanChanged() or the active stack changes.</para>
            <para>clean is the new state, or true if the active stack is 0.</para>
            <para>See also QUndoStack::cleanChanged() and setActiveStack().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QUndoGroup.CanUndoChanged">
            <summary>
            <para>This signal is emitted whenever the active stack emits QUndoStack::canUndoChanged() or the active stack changes.</para>
            <para>canUndo is the new state, or false if the active stack is 0.</para>
            <para>See also QUndoStack::canUndoChanged() and setActiveStack().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QUndoGroup.CanRedoChanged">
            <summary>
            <para>This signal is emitted whenever the active stack emits QUndoStack::canRedoChanged() or the active stack changes.</para>
            <para>canRedo is the new state, or false if the active stack is 0.</para>
            <para>See also QUndoStack::canRedoChanged() and setActiveStack().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QUndoGroup.UndoTextChanged">
            <summary>
            <para>This signal is emitted whenever the active stack emits QUndoStack::undoTextChanged() or the active stack changes.</para>
            <para>undoText is the new state, or an empty string if the active stack is 0.</para>
            <para>See also QUndoStack::undoTextChanged() and setActiveStack().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QUndoGroup.RedoTextChanged">
            <summary>
            <para>This signal is emitted whenever the active stack emits QUndoStack::redoTextChanged() or the active stack changes.</para>
            <para>redoText is the new state, or an empty string if the active stack is 0.</para>
            <para>See also QUndoStack::redoTextChanged() and setActiveStack().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QUndoGroup.ActiveStack">
            <summary>
            <para>Returns the active stack of this group.</para>
            <para>If none of the stacks are active, or if the group is empty, this
            function returns 0.</para>
            <para>See also setActiveStack() and QUndoStack::setActive().</para>
            <para></para>
            <para>Sets the active stack of this group to stack.</para>
            <para>If the stack is not a member of this group, this function does
            nothing.</para>
            <para>Synonymous with calling QUndoStack::setActive() on stack.</para>
            <para>The actions returned by createUndoAction() and createRedoAction()
            will now behave in the same way as those returned by stack's
            QUndoStack::createUndoAction() and QUndoStack::createRedoAction().</para>
            <para>See also QUndoStack::setActive() and activeStack().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QUndoGroup.IsClean">
            <summary>
            <para>Returns the value of the active stack's
            QUndoStack::isClean().</para>
            <para>If none of the stacks are active, or if the group is empty, this
            function returns true.</para>
            <para>See also setActiveStack().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QUndoCommand">
            <summary>
            <para>The QUndoCommand class is the base class of all commands stored
            on a QUndoStack.</para>
            </summary>
            <remarks>
            <para>For an overview of Qt's Undo Framework, see the overview
            document.</para>
            <para>A QUndoCommand represents a single editing action on a document;
            for example, inserting or deleting a block of text in a text editor.
            QUndoCommand can apply a change to the document with redo() and undo the
            change with undo(). The implementations for these functions must be
            provided in a derived class.</para>
            <para>class AppendText : public QUndoCommand</para>
            <para>{</para>
            <para>public:</para>
            <para>    AppendText(QString *doc, const QString &amp;text)</para>
            <para>        : m_document(doc), m_text(text) { setText(&quot;append
            text&quot;); }</para>
            <para>    virtual void undo()</para>
            <para>        { m_document-&gt;chop(m_text.length()); }</para>
            <para>    virtual void redo()</para>
            <para>        { m_document-&gt;append(m_text); }</para>
            <para>private:</para>
            <para>    QString *m_document;</para>
            <para>    QString m_text;</para>
            <para>};</para>
            <para>A QUndoCommand has an associated text(). This is a short string
            describing what the command does. It is used to update the text properties
            of the stack's undo and redo actions; see QUndoStack::createUndoAction()
            and QUndoStack::createRedoAction().</para>
            <para>QUndoCommand objects are owned by the stack they were pushed on.
            QUndoStack deletes a command if it has been undone and a new command is
            pushed. For example:</para>
            <para>MyCommand *command1 = new MyCommand();</para>
            <para>stack-&gt;push(command1);</para>
            <para>MyCommand *command2 = new MyCommand();</para>
            <para>stack-&gt;push(command2);</para>
            <para></para>
            <para>stack-&gt;undo();</para>
            <para></para>
            <para>MyCommand *command3 = new MyCommand();</para>
            <para>stack-&gt;push(command3); // command2 gets deleted</para>
            <para>In effect, when a command is pushed, it becomes the top-most
            command on the stack.</para>
            <para>To support command compression, QUndoCommand has an id() and the
            virtual function mergeWith(). These functions are used by
            QUndoStack::push().</para>
            <para>To support command macros, a QUndoCommand object can have any
            number of child commands. Undoing or redoing the parent command will cause
            the child commands to be undone or redone. A command can be assigned to a
            parent explicitly in the constructor. In this case, the command will be
            owned by the parent.</para>
            <para>The parent in this case is usually an empty command, in that it
            doesn't provide its own implementation of undo() and redo(). Instead, it
            uses the base implementations of these functions, which simply call undo()
            or redo() on all its children. The parent should, however, have a
            meaningful text().</para>
            <para>QUndoCommand *insertRed = new QUndoCommand(); // an empty
            command</para>
            <para>insertRed-&gt;setText(&quot;insert red text&quot;);</para>
            <para></para>
            <para>new InsertText(document, idx, text, insertRed); // becomes child
            of insertRed</para>
            <para>new SetColor(document, idx, text.length(), Qt::red,
            insertRed);</para>
            <para></para>
            <para>stack.push(insertRed);</para>
            <para>Another way to create macros is to use the convenience functions
            QUndoStack::beginMacro() and QUndoStack::endMacro().</para>
            <para></para>
            <para>See also QUndoStack.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QUndoCommand.#ctor(QtWidgets.QUndoCommand)">
            <summary>
            <para>Constructs a QUndoCommand object with parent parent.</para>
            <para>If parent is not 0, this command is appended to parent's child
            list. The parent command then owns this command and will delete it in its
            destructor.</para>
            <para>See also ~QUndoCommand().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoCommand.#ctor(System.String,QtWidgets.QUndoCommand)">
            <summary>
            <para>Constructs a QUndoCommand object with the given parent and
            text.</para>
            <para>If parent is not 0, this command is appended to parent's child
            list. The parent command then owns this command and will delete it in its
            destructor.</para>
            <para>See also ~QUndoCommand().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoCommand.Undo">
            <summary>
            <para>Reverts a change to the document. After undo() is called, the
            state of the document should be the same as before redo() was called. This
            function must be implemented in the derived class. Calling
            QUndoStack::push(), QUndoStack::undo() or QUndoStack::redo() from this
            function leads to undefined beahavior.</para>
            <para>The default implementation calls undo() on all child commands in
            reverse order.</para>
            <para>See also redo().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoCommand.Redo">
            <summary>
            <para>Applies a change to the document. This function must be
            implemented in the derived class. Calling QUndoStack::push(),
            QUndoStack::undo() or QUndoStack::redo() from this function leads to
            undefined beahavior.</para>
            <para>The default implementation calls redo() on all child
            commands.</para>
            <para>See also undo().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoCommand.MergeWith(QtWidgets.QUndoCommand)">
            <summary>
            <para>Attempts to merge this command with command. Returns true on
            success; otherwise returns false.</para>
            <para>If this function returns true, calling this command's redo() must
            have the same effect as redoing both this command and command. Similarly,
            calling this command's undo() must have the same effect as undoing command
            and this command.</para>
            <para>QUndoStack will only try to merge two commands if they have the
            same id, and the id is not -1.</para>
            <para>The default implementation returns false.</para>
            <para>bool AppendText::mergeWith(const QUndoCommand *other)</para>
            <para>{</para>
            <para>    if (other-&gt;id() != id()) // make sure other is also an
            AppendText command</para>
            <para>        return false;</para>
            <para>    m_text += static_cast&lt;const
            AppendText*&gt;(other)-&gt;m_text;</para>
            <para>    return true;</para>
            <para>}</para>
            <para>See also id() and QUndoStack::push().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoCommand.Child(System.Int32)">
            <summary>
            <para>Returns the child command at index.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also childCount() and QUndoStack::command().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QUndoCommand.Text">
            <summary>
            <para>Returns a short text string describing what this command does;
            for example, &quot;insert text&quot;.</para>
            <para>The text is used for names of items in QUndoView.</para>
            <para>See also actionText(), setText(), QUndoStack::createUndoAction(),
            and QUndoStack::createRedoAction().</para>
            <para></para>
            <para>Sets the command's text to be the text specified.</para>
            <para>The specified text should be a short user-readable string
            describing what this command does.</para>
            <para>If you need to have two different strings for text() and
            actionText(), separate them with &quot;\n&quot; and pass into this
            function. Even if you do not use this feature for English strings during
            development, you can still let translators use two different strings in
            order to match specific languages' needs. The described feature and the
            function actionText() are available since Qt 4.8.</para>
            <para>See also text(), actionText(), QUndoStack::createUndoAction(),
            and QUndoStack::createRedoAction().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QUndoCommand.ActionText">
            <summary>
            <para>Returns a short text string describing what this command does;
            for example, &quot;insert text&quot;.</para>
            <para>The text is used when the text properties of the stack's undo and
            redo actions are updated.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also text(), setText(), QUndoStack::createUndoAction(), and
            QUndoStack::createRedoAction().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QUndoCommand.Id">
            <summary>
            <para>Returns the ID of this command.</para>
            <para>A command ID is used in command compression. It must be an
            integer unique to this command's class, or -1 if the command doesn't
            support compression.</para>
            <para>If the command supports compression this function must be
            overridden in the derived class to return the correct ID. The base
            implementation returns -1.</para>
            <para>QUndoStack::push() will only try to merge two commands if they
            have the same ID, and the ID is not -1.</para>
            <para>See also mergeWith() and QUndoStack::push().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QUndoCommand.ChildCount">
            <summary>
            <para>Returns the number of child commands in this command.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also child().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QUndoStack">
            <summary>
            <para>The QUndoStack class is a stack of QUndoCommand objects.</para>
            </summary>
            <remarks>
            <para>For an overview of Qt's Undo Framework, see the overview
            document.</para>
            <para>An undo stack maintains a stack of commands that have been
            applied to a document.</para>
            <para>New commands are pushed on the stack using push(). Commands can
            be undone and redone using undo() and redo(), or by triggering the actions
            returned by createUndoAction() and createRedoAction().</para>
            <para>QUndoStack keeps track of the current command. This is the
            command which will be executed by the next call to redo(). The index of
            this command is returned by index(). The state of the edited object can be
            rolled forward or back using setIndex(). If the top-most command on the
            stack has already been redone, index() is equal to count().</para>
            <para>QUndoStack provides support for undo and redo actions, command
            compression, command macros, and supports the concept of a clean
            state.</para>
            <para></para>
            <para>Undo and Redo Actions</para>
            <para>QUndoStack provides convenient undo and redo QAction objects,
            which can be inserted into a menu or a toolbar. When commands are undone or
            redone, QUndoStack updates the text properties of these actions to reflect
            what change they will trigger. The actions are also disabled when no
            command is available for undo or redo. These actions are returned by
            QUndoStack::createUndoAction() and QUndoStack::createRedoAction().</para>
            <para></para>
            <para>Command Compression and Macros</para>
            <para>Command compression is useful when several commands can be
            compressed into a single command that can be undone and redone in a single
            operation. For example, when a user types a character in a text editor, a
            new command is created. This command inserts the character into the
            document at the cursor position. However, it is more convenient for the
            user to be able to undo or redo typing of whole words, sentences, or
            paragraphs. Command compression allows these single-character commands to
            be merged into a single command which inserts or deletes sections of text.
            For more information, see QUndoCommand::mergeWith() and push().</para>
            <para>A command macro is a sequence of commands, all of which are
            undone and redone in one go. Command macros are created by giving a command
            a list of child commands. Undoing or redoing the parent command will cause
            the child commands to be undone or redone. Command macros may be created
            explicitly by specifying a parent in the QUndoCommand constructor, or by
            using the convenience functions beginMacro() and endMacro().</para>
            <para>Although command compression and macros appear to have the same
            effect to the user, they often have different uses in an application.
            Commands that perform small changes to a document may be usefully
            compressed if there is no need to individually record them, and if only
            larger changes are relevant to the user. However, for commands that need to
            be recorded individually, or those that cannot be compressed, it is useful
            to use macros to provide a more convenient user experience while
            maintaining a record of each command.</para>
            <para></para>
            <para>Clean State</para>
            <para>QUndoStack supports the concept of a clean state. When the
            document is saved to disk, the stack can be marked as clean using
            setClean(). Whenever the stack returns to this state through undoing and
            redoing commands, it emits the signal cleanChanged(). This signal is also
            emitted when the stack leaves the clean state. This signal is usually used
            to enable and disable the save actions in the application, and to update
            the document's title to reflect that it contains unsaved changes.</para>
            <para></para>
            <para>See also QUndoCommand and QUndoView.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QUndoStack.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an empty undo stack with the parent parent. The stack
            will initially be in the clean state. If parent is a QUndoGroup object, the
            stack is automatically added to the group.</para>
            <para>See also push().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoStack.Clear">
            <summary>
            <para>Clears the command stack by deleting all commands on it, and
            returns the stack to the clean state.</para>
            <para>Commands are not undone or redone; the state of the edited object
            remains unchanged.</para>
            <para>This function is usually used when the contents of the document
            are abandoned.</para>
            <para>See also QUndoStack().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoStack.Push(QtWidgets.QUndoCommand)">
            <summary>
            <para>Pushes cmd on the stack or merges it with the most recently
            executed command. In either case, executes cmd by calling its redo()
            function.</para>
            <para>If cmd's id is not -1, and if the id is the same as that of the
            most recently executed command, QUndoStack will attempt to merge the two
            commands by calling QUndoCommand::mergeWith() on the most recently executed
            command. If QUndoCommand::mergeWith() returns true, cmd is deleted.</para>
            <para>In all other cases cmd is simply pushed on the stack.</para>
            <para>If commands were undone before cmd was pushed, the current
            command and all commands above it are deleted. Hence cmd always ends up
            being the top-most on the stack.</para>
            <para>Once a command is pushed, the stack takes ownership of it. There
            are no getters to return the command, since modifying it after it has been
            executed will almost always lead to corruption of the document's
            state.</para>
            <para>See also QUndoCommand::id() and QUndoCommand::mergeWith().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoStack.CanUndo">
            <summary>
            <para>Returns true if there is a command available for undo; otherwise
            returns false.</para>
            <para>This function returns false if the stack is empty, or if the
            bottom command on the stack has already been undone.</para>
            <para>Synonymous with index() == 0.</para>
            <para>See also index() and canRedo().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoStack.CanRedo">
            <summary>
            <para>Returns true if there is a command available for redo; otherwise
            returns false.</para>
            <para>This function returns false if the stack is empty or if the top
            command on the stack has already been redone.</para>
            <para>Synonymous with index() == count().</para>
            <para>See also index() and canUndo().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoStack.UndoText">
            <summary>
            <para>Returns the text of the command which will be undone in the next
            call to undo().</para>
            <para>See also QUndoCommand::actionText() and redoText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoStack.RedoText">
            <summary>
            <para>Returns the text of the command which will be redone in the next
            call to redo().</para>
            <para>See also QUndoCommand::actionText() and undoText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoStack.Text(System.Int32)">
            <summary>
            <para>Returns the text of the command at index idx.</para>
            <para>See also beginMacro().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoStack.CreateUndoAction(QtCore.QObject,System.String)">
            <summary>
            <para>Creates an undo QAction object with the given parent.</para>
            <para>Triggering this action will cause a call to undo(). The text of
            this action is the text of the command which will be undone in the next
            call to undo(), prefixed by the specified prefix. If there is no command
            available for undo, this action will be disabled.</para>
            <para>If prefix is empty, the default template &quot;Undo %1&quot; is
            used instead of prefix. Before Qt 4.8, the prefix &quot;Undo&quot; was used
            by default.</para>
            <para>See also createRedoAction(), canUndo(), and
            QUndoCommand::text().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoStack.CreateRedoAction(QtCore.QObject,System.String)">
            <summary>
            <para>Creates an redo QAction object with the given parent.</para>
            <para>Triggering this action will cause a call to redo(). The text of
            this action is the text of the command which will be redone in the next
            call to redo(), prefixed by the specified prefix. If there is no command
            available for redo, this action will be disabled.</para>
            <para>If prefix is empty, the default template &quot;Redo %1&quot; is
            used instead of prefix. Before Qt 4.8, the prefix &quot;Redo&quot; was used
            by default.</para>
            <para>See also createUndoAction(), canRedo(), and
            QUndoCommand::text().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoStack.BeginMacro(System.String)">
            <summary>
            <para>Begins composition of a macro command with the given text
            description.</para>
            <para>An empty command described by the specified text is pushed on the
            stack. Any subsequent commands pushed on the stack will be appended to the
            empty command's children until endMacro() is called.</para>
            <para>Calls to beginMacro() and endMacro() may be nested, but every
            call to beginMacro() must have a matching call to endMacro().</para>
            <para>While a macro is composed, the stack is disabled. This means
            that:</para>
            <para></para>
            <para>indexChanged() and cleanChanged() are not emitted,</para>
            <para>canUndo() and canRedo() return false,</para>
            <para>calling undo() or redo() has no effect,</para>
            <para>the undo/redo actions are disabled.</para>
            <para></para>
            <para>The stack becomes enabled and appropriate signals are emitted
            when endMacro() is called for the outermost macro.</para>
            <para>stack.beginMacro(&quot;insert red text&quot;);</para>
            <para>stack.push(new InsertText(document, idx, text));</para>
            <para>stack.push(new SetColor(document, idx, text.length(),
            Qt::red));</para>
            <para>stack.endMacro(); // indexChanged() is emitted</para>
            <para>This code is equivalent to:</para>
            <para>QUndoCommand *insertRed = new QUndoCommand(); // an empty
            command</para>
            <para>insertRed-&gt;setText(&quot;insert red text&quot;);</para>
            <para></para>
            <para>new InsertText(document, idx, text, insertRed); // becomes child
            of insertRed</para>
            <para>new SetColor(document, idx, text.length(), Qt::red,
            insertRed);</para>
            <para></para>
            <para>stack.push(insertRed);</para>
            <para>See also endMacro().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoStack.EndMacro">
            <summary>
            <para>Ends composition of a macro command.</para>
            <para>If this is the outermost macro in a set nested macros, this
            function emits indexChanged() once for the entire macro command.</para>
            <para>See also beginMacro().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoStack.Command(System.Int32)">
            <summary>
            <para>Returns a const pointer to the command at index.</para>
            <para>This function returns a const pointer, because modifying a
            command, once it has been pushed onto the stack and executed, almost always
            causes corruption of the state of the document, if the command is later
            undone or redone.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QUndoCommand::child().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoStack.SetClean">
            <summary>
            <para>Marks the stack as clean and emits cleanChanged() if the stack
            was not already clean.</para>
            <para>Whenever the stack returns to this state through the use of
            undo/redo commands, it emits the signal cleanChanged(). This signal is also
            emitted when the stack leaves the clean state.</para>
            <para>See also isClean() and cleanIndex().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoStack.Undo">
            <summary>
            <para>Undoes the command below the current command by calling
            QUndoCommand::undo(). Decrements the current command index.</para>
            <para>If the stack is empty, or if the bottom command on the stack has
            already been undone, this function does nothing.</para>
            <para>See also redo() and index().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoStack.Redo">
            <summary>
            <para>Redoes the current command by calling QUndoCommand::redo().
            Increments the current command index.</para>
            <para>If the stack is empty, or if the top command on the stack has
            already been redone, this function does nothing.</para>
            <para>See also undo() and index().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QUndoStack.IndexChanged">
            <summary>
            <para>This signal is emitted whenever a command modifies the state of the document. This happens when a command is undone or redone. When a macro command is undone or redone, or setIndex() is called, this signal is emitted only once.</para>
            <para>idx specifies the index of the current command, ie. the command which will be executed on the next call to redo().</para>
            <para>See also index() and setIndex().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QUndoStack.CleanChanged">
            <summary>
            <para>This signal is emitted whenever the stack enters or leaves the clean state. If clean is true, the stack is in a clean state; otherwise this signal indicates that it has left the clean state.</para>
            <para>See also isClean() and setClean().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QUndoStack.CanUndoChanged">
            <summary>
            <para>This signal is emitted whenever the value of canUndo() changes. It is used to enable or disable the undo action returned by createUndoAction(). canUndo specifies the new value.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QUndoStack.CanRedoChanged">
            <summary>
            <para>This signal is emitted whenever the value of canRedo() changes. It is used to enable or disable the redo action returned by createRedoAction(). canRedo specifies the new value.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QUndoStack.UndoTextChanged">
            <summary>
            <para>This signal is emitted whenever the value of undoText() changes. It is used to update the text property of the undo action returned by createUndoAction(). undoText specifies the new text.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QUndoStack.RedoTextChanged">
            <summary>
            <para>This signal is emitted whenever the value of redoText() changes. It is used to update the text property of the redo action returned by createRedoAction(). redoText specifies the new text.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QUndoStack.UndoLimit">
            <summary>
            <para>This property holds the maximum number of commands on this
            stack.</para>
            <para>When the number of commands on a stack exceedes the stack's
            undoLimit, commands are deleted from the bottom of the stack. Macro
            commands (commands with child commands) are treated as one command. The
            default value is 0, which means that there is no limit.</para>
            <para>This property may only be set when the undo stack is empty, since
            setting it on a non-empty stack might delete the command at the current
            index. Calling setUndoLimit() on a non-empty stack prints a warning and
            does nothing.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QUndoStack.Index">
            <summary>
            <para>Returns the index of the current command. This is the command
            that will be executed on the next call to redo(). It is not always the
            top-most command on the stack, since a number of commands may have been
            undone.</para>
            <para>See also setIndex(), undo(), redo(), and count().</para>
            <para></para>
            <para>Repeatedly calls undo() or redo() until the current command index
            reaches idx. This function can be used to roll the state of the document
            forwards of backwards. indexChanged() is emitted only once.</para>
            <para>See also index(), count(), undo(), and redo().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QUndoStack.Active">
            <summary>
            <para>This property holds the active status of this stack.</para>
            <para>An application often has multiple undo stacks, one for each
            opened document. The active stack is the one associated with the currently
            active document. If the stack belongs to a QUndoGroup, calls to
            QUndoGroup::undo() or QUndoGroup::redo() will be forwarded to this stack
            when it is active. If the QUndoGroup is watched by a QUndoView, the view
            will display the contents of this stack when it is active. If the stack
            does not belong to a QUndoGroup, making it active has no effect.</para>
            <para>It is the programmer's responsibility to specify which stack is
            active by calling setActive(), usually when the associated document window
            receives focus.</para>
            <para>See also QUndoGroup.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QUndoStack.Count">
            <summary>
            <para>Returns the number of commands on the stack. Macro commands are
            counted as one command.</para>
            <para>See also index(), setIndex(), and command().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QUndoStack.IsClean">
            <summary>
            <para>If the stack is in the clean state, returns true; otherwise
            returns false.</para>
            <para>See also setClean() and cleanIndex().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QUndoStack.CleanIndex">
            <summary>
            <para>Returns the clean index. This is the index at which setClean()
            was called.</para>
            <para>A stack may not have a clean index. This happens if a document is
            saved, some commands are undone, then a new command is pushed. Since push()
            deletes all the undone commands before pushing the new command, the stack
            can't return to the clean state again. In this case, this function returns
            -1.</para>
            <para>See also isClean() and setClean().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QUndoView">
            <summary>
            <para>The QUndoView class displays the contents of a QUndoStack.</para>
            </summary>
            <remarks>
            <para>QUndoView is a QListView which displays the list of commands
            pushed on an undo stack. The most recently executed command is always
            selected. Selecting a different command results in a call to
            QUndoStack::setIndex(), rolling the state of the document backwards or
            forward to the new command.</para>
            <para>The stack can be set explicitly with setStack(). Alternatively, a
            QUndoGroup object can be set with setGroup(). The view will then update
            itself automatically whenever the active stack of the group changes.</para>
            <para></para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QUndoView.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a new view with parent parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoView.#ctor(QtWidgets.QUndoStack,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a new view with parent parent and sets the observed
            stack to stack.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QUndoView.#ctor(QtWidgets.QUndoGroup,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a new view with parent parent and sets the observed
            group to group.</para>
            <para>The view will update itself autmiatically whenever the active
            stack of the group changes.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QUndoView.EmptyLabel">
            <summary>
            <para>This property holds the label used for the empty state.</para>
            <para>The empty label is the topmost element in the list of commands,
            which represents the state of the document before any commands were pushed
            on the stack. The default is the string &quot;&lt;empty&gt;&quot;.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QUndoView.CleanIcon">
            <summary>
            <para>This property holds the icon used to represent the clean
            state.</para>
            <para>A stack may have a clean state set with QUndoStack::setClean().
            This is usually the state of the document at the point it was saved.
            QUndoView can display an icon in the list of commands to show the clean
            state. If this property is a null icon, no icon is shown. The default value
            is the null icon.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QUndoView.Stack">
            <summary>
            <para>Returns the stack currently displayed by this view. If the view
            is looking at a QUndoGroup, this the group's active stack.</para>
            <para>See also setStack() and setGroup().</para>
            <para></para>
            <para>Sets the stack displayed by this view to stack. If stack is 0,
            the view will be empty.</para>
            <para>If the view was previously looking at a QUndoGroup, the group is
            set to 0.</para>
            <para>See also stack() and setGroup().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QUndoView.Group">
            <summary>
            <para>Returns the group displayed by this view.</para>
            <para>If the view is not looking at group, this function returns
            0.</para>
            <para>See also setGroup() and setStack().</para>
            <para></para>
            <para>Sets the group displayed by this view to group. If group is 0,
            the view will be empty.</para>
            <para>The view will update itself autmiatically whenever the active
            stack of the group changes.</para>
            <para>See also group() and setStack().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QAbstractButton">
            <summary>
            <para>The QAbstractButton class is the abstract base class of button
            widgets, providing functionality common to buttons.</para>
            </summary>
            <remarks>
            <para>This class implements an abstract button. Subclasses of this
            class handle user actions, and specify how the button is drawn.</para>
            <para>QAbstractButton provides support for both push buttons and
            checkable (toggle) buttons. Checkable buttons are implemented in the
            QRadioButton and QCheckBox classes. Push buttons are implemented in the
            QPushButton and QToolButton classes; these also provide toggle behavior if
            required.</para>
            <para>Any button can display a label containing text and an icon.
            setText() sets the text; setIcon() sets the icon. If a button is disabled,
            its label is changed to give the button a &quot;disabled&quot;
            appearance.</para>
            <para>If the button is a text button with a string containing an
            ampersand ('&amp;'), QAbstractButton automatically creates a shortcut key.
            For example:</para>
            <para>QPushButton *button = new QPushButton(tr(&quot;Ro&amp;ck
            &amp;&amp; Roll&quot;), this);</para>
            <para>The Alt+C shortcut is assigned to the button, i.e., when the user
            presses Alt+C the button will call animateClick(). See the QShortcut
            documentation for details. To display an actual ampersand, use
            '&amp;&amp;'.</para>
            <para>You can also set a custom shortcut key using the setShortcut()
            function. This is useful mostly for buttons that do not have any text, and
            therefore can't have any automatic shortcut.</para>
            <para>button-&gt;setIcon(QIcon(&quot;:/images/print.png&quot;));</para>
            <para>button-&gt;setShortcut(tr(&quot;Alt+F7&quot;));</para>
            <para>All the buttons provided by Qt (QPushButton, QToolButton,
            QCheckBox, and QRadioButton) can display both text and icons.</para>
            <para>A button can be made the default button in a dialog by means of
            QPushButton::setDefault() and QPushButton::setAutoDefault().</para>
            <para>QAbstractButton provides most of the states used for
            buttons:</para>
            <para></para>
            <para>isDown() indicates whether the button is pressed down.</para>
            <para>isChecked() indicates whether the button is checked. Only
            checkable buttons can be checked and unchecked (see below).</para>
            <para>isEnabled() indicates whether the button can be pressed by the
            user.Note: As opposed to other widgets, buttons derived from
            QAbstractButton accept mouse and context menu events when disabled.</para>
            <para>setAutoRepeat() sets whether the button will auto-repeat if the
            user holds it down. autoRepeatDelay and autoRepeatInterval define how
            auto-repetition is done.</para>
            <para>setCheckable() sets whether the button is a toggle button or
            not.</para>
            <para></para>
            <para>The difference between isDown() and isChecked() is as follows.
            When the user clicks a toggle button to check it, the button is first
            pressed then released into the checked state. When the user clicks it again
            (to uncheck it), the button moves first to the pressed state, then to the
            unchecked state (isChecked() and isDown() are both false).</para>
            <para>QAbstractButton provides four signals:</para>
            <para></para>
            <para>pressed() is emitted when the left mouse button is pressed while
            the mouse cursor is inside the button.</para>
            <para>released() is emitted when the left mouse button is
            released.</para>
            <para>clicked() is emitted when the button is first pressed and then
            released, when the shortcut key is typed, or when click() or animateClick()
            is called.</para>
            <para>toggled() is emitted when the state of a toggle button
            changes.</para>
            <para></para>
            <para>To subclass QAbstractButton, you must reimplement at least
            paintEvent() to draw the button's outline and its text or pixmap. It is
            generally advisable to reimplement sizeHint() as well, and sometimes
            hitButton() (to determine whether a button press is within the button). For
            buttons with more than two states (like tri-state buttons), you will also
            have to reimplement checkStateSet() and nextCheckState().</para>
            <para></para>
            <para>See also QButtonGroup.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QAbstractButton.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs an abstract button with a parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.AnimateClick(System.Int32)">
            <summary>
            <para>Performs an animated click: the button is pressed immediately,
            and released msec milliseconds later (the default is 100 ms).</para>
            <para>Calling this function again before the button is released resets
            the release timer.</para>
            <para>All signals associated with a click are emitted as
            appropriate.</para>
            <para>This function does nothing if the button is disabled.</para>
            <para>See also click().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.Click">
            <summary>
            <para>Performs a click.</para>
            <para>All the usual signals associated with a click are emitted as
            appropriate. If the button is checkable, the state of the button is
            toggled.</para>
            <para>This function does nothing if the button is disabled.</para>
            <para>See also animateClick().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.Toggle">
            <summary>
            <para>Toggles the state of a checkable button.</para>
            <para>See also checked.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.HitButton(QtCore.QPoint)">
            <summary>
            <para>Returns true if pos is inside the clickable button rectangle;
            otherwise returns false.</para>
            <para>By default, the clickable area is the entire widget. Subclasses
            may reimplement this function to provide support for clickable areas of
            different shapes and sizes.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.CheckStateSet">
            <summary>
            <para>This virtual handler is called when setChecked() is used, unless
            it is called from within nextCheckState(). It allows subclasses to reset
            their intermediate button states.</para>
            <para>See also nextCheckState().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.NextCheckState">
            <summary>
            <para>This virtual handler is called when a button is clicked. The
            default implementation calls setChecked(!isChecked()) if the button
            isCheckable(). It allows subclasses to implement intermediate button
            states.</para>
            <para>See also checkStateSet().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.OnKeyReleaseEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QAbstractButton.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractButton.Pressed">
            <summary>
            <para>This signal is emitted when the button is pressed down.</para>
            <para>See also released() and clicked().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractButton.Released">
            <summary>
            <para>This signal is emitted when the button is released.</para>
            <para>See also pressed(), clicked(), and toggled().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractButton.Clicked">
            <summary>
            <para>This signal is emitted when the button is activated (i.e., pressed down then released while the mouse cursor is inside the button), when the shortcut key is typed, or when click() or animateClick() is called. Notably, this signal is not emitted if you call setDown(), setChecked() or toggle().</para>
            <para>If the button is checkable, checked is true if the button is checked, or false if the button is unchecked.</para>
            <para>See also pressed(), released(), and toggled().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QAbstractButton.Toggled">
            <summary>
            <para>This property holds whether the button is checked.</para>
            <para>Only checkable buttons can be checked. By default, the button is unchecked.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isChecked() const</para>
            <para> void 	setChecked(bool)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	toggled(bool checked)</para>
            <para></para>
            <para>See also checkable.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractButton.Text">
            <summary>
            <para>This property holds the text shown on the button.</para>
            <para>If the button has no text, the text() function will return an
            empty string.</para>
            <para>If the text contains an ampersand character ('&amp;'), a shortcut
            is automatically created for it. The character that follows the '&amp;'
            will be used as the shortcut key. Any previous shortcut will be overwritten
            or cleared if no shortcut is defined by the text. See the QShortcut
            documentation for details. To display an actual ampersand, use
            '&amp;&amp;'.</para>
            <para>There is no default text.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractButton.Icon">
            <summary>
            <para>This property holds the icon shown on the button.</para>
            <para>The icon's default size is defined by the GUI style, but can be
            adjusted by setting the iconSize property.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractButton.Shortcut">
            <summary>
            <para>This property holds the mnemonic associated with the
            button.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractButton.Checkable">
            <summary>
            <para>This property holds whether the button is checkable.</para>
            <para>By default, the button is not checkable.</para>
            <para>See also checked.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractButton.Down">
            <summary>
            <para>This property holds whether the button is pressed down.</para>
            <para>If this property is true, the button is pressed down. The signals
            pressed() and clicked() are not emitted if you set this property to true.
            The default is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractButton.AutoRepeat">
            <summary>
            <para>This property holds whether autoRepeat is enabled.</para>
            <para>If autoRepeat is enabled, then the pressed(), released(), and
            clicked() signals are emitted at regular intervals when the button is down.
            autoRepeat is off by default. The initial delay and the repetition interval
            are defined in milliseconds by autoRepeatDelay and
            autoRepeatInterval.</para>
            <para>Note: If a button is pressed down by a shortcut key, then
            auto-repeat is enabled and timed by the system and not by this class. The
            pressed(), released(), and clicked() signals will be emitted like in the
            normal case.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractButton.AutoRepeatDelay">
            <summary>
            <para>This property holds the initial delay of auto-repetition.</para>
            <para>If autoRepeat is enabled, then autoRepeatDelay defines the
            initial delay in milliseconds before auto-repetition kicks in.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also autoRepeat and autoRepeatInterval.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractButton.AutoRepeatInterval">
            <summary>
            <para>This property holds the interval of auto-repetition.</para>
            <para>If autoRepeat is enabled, then autoRepeatInterval defines the
            length of the auto-repetition interval in millisecons.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also autoRepeat and autoRepeatDelay.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractButton.AutoExclusive">
            <summary>
            <para>This property holds whether auto-exclusivity is enabled.</para>
            <para>If auto-exclusivity is enabled, checkable buttons that belong to
            the same parent widget behave as if they were part of the same exclusive
            button group. In an exclusive button group, only one button can be checked
            at any time; checking another button automatically unchecks the previously
            checked one.</para>
            <para>The property has no effect on buttons that belong to a button
            group.</para>
            <para>autoExclusive is off by default, except for radio buttons.</para>
            <para>See also QRadioButton.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractButton.IconSize">
            <summary>
            <para>This property holds the icon size used for this button.</para>
            <para>The default size is defined by the GUI style. This is a maximum
            size for the icons. Smaller icons will not be scaled up.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractButton.Checked">
            <summary>
            <para>This property holds whether the button is checked.</para>
            <para>Only checkable buttons can be checked. By default, the button is
            unchecked.</para>
            <para>See also checkable.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QAbstractButton.Group">
            <summary>
            <para>Returns the group that this button belongs to.</para>
            <para>If the button is not a member of any QButtonGroup, this function
            returns 0.</para>
            <para>See also QButtonGroup.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QButtonGroup">
            <summary>
            <para>The QButtonGroup class provides a container to organize groups of
            button widgets.</para>
            </summary>
            <remarks>
            <para>QButtonGroup provides an abstract container into which button
            widgets can be placed. It does not provide a visual representation of this
            container (see QGroupBox for a container widget), but instead manages the
            states of each of the buttons in the group.</para>
            <para>An exclusive button group switches off all checkable (toggle)
            buttons except the one that has been clicked. By default, a button group is
            exclusive. The buttons in a button group are usually checkable
            QPushButtons, QCheckBoxes (normally for non-exclusive button groups), or
            QRadioButtons. If you create an exclusive button group, you should ensure
            that one of the buttons in the group is initially checked; otherwise, the
            group will initially be in a state where no buttons are checked.</para>
            <para>A button can be added to the group with addButton() and removed
            with removeButton(). If the group is exclusive, the currently checked
            button is available with checkedButton(). If a button is clicked, the
            buttonClicked() signal is emitted; for a checkable button in an exclusive
            group this means that the button has been checked. The list of buttons in
            the group is returned by buttons().</para>
            <para>In addition, QButtonGroup can map between integers and buttons.
            You can assign an integer id to a button with setId(), and retrieve it with
            id(). The id of the currently checked button is available with checkedId(),
            and there is an overloaded signal buttonClicked() which emits the id of the
            button. The id -1 is reserved by QButtonGroup to mean &quot;no such
            button&quot;. The purpose of the mapping mechanism is to simplify the
            representation of enum values in a user interface.</para>
            <para></para>
            <para>See also QGroupBox, QPushButton, QCheckBox, and
            QRadioButton.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QButtonGroup.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new, empty button group with the given
            parent.</para>
            <para>See also addButton() and setExclusive().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QButtonGroup.AddButton(QtWidgets.QAbstractButton,System.Int32)">
            <summary>
            <para>Adds the given button to the button group. If id is -1, an id
            will be assigned to the button. Automatically assigned ids are guaranteed
            to be negative, starting with -2. If you are assigning your own ids, use
            positive values to avoid conflicts.</para>
            <para>See also removeButton() and buttons().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QButtonGroup.RemoveButton(QtWidgets.QAbstractButton)">
            <summary>
            <para>Removes the given button from the button group.</para>
            <para>See also addButton() and buttons().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QButtonGroup.Button(System.Int32)">
            <summary>
            <para>Returns the button with the specified id, or 0 if no such button
            exists.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QButtonGroup.SetId(QtWidgets.QAbstractButton,System.Int32)">
            <summary>
            <para>Sets the id for the specified button. Note that id cannot be
            -1.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also id().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QButtonGroup.Id(QtWidgets.QAbstractButton)">
            <summary>
            <para>Returns the id for the specified button, or -1 if no such button
            exists.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setId().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QButtonGroup.ButtonClicked">
            <summary>
            <para>This signal is emitted when the given button is clicked. A button is clicked when it is first pressed and then released, when its shortcut key is typed, or when QAbstractButton::click() or QAbstractButton::animateClick() is programmatically called.</para>
            <para>See also checkedButton() and QAbstractButton::clicked().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QButtonGroup.ButtonClickedId">
            <summary>
            <para>This signal is emitted when a button with the given id is clicked.</para>
            <para>See also checkedButton() and QAbstractButton::clicked().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QButtonGroup.ButtonPressed">
            <summary>
            <para>This signal is emitted when the given button is pressed down.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also QAbstractButton::pressed().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QButtonGroup.ButtonPressedId">
            <summary>
            <para>This signal is emitted when a button with the given id is pressed down.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also QAbstractButton::pressed().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QButtonGroup.ButtonReleased">
            <summary>
            <para>This signal is emitted when the given button is released.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also QAbstractButton::released().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QButtonGroup.ButtonReleasedId">
            <summary>
            <para>This signal is emitted when a button with the given id is released.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also QAbstractButton::released().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QButtonGroup.ButtonToggled">
            <summary>
            <para>This signal is emitted when the given button is toggled. checked is true if the button is checked, or false if the button is unchecked.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also QAbstractButton::toggled().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QButtonGroup.ButtonToggledChecked">
            <summary>
            <para>This signal is emitted when a button with the given id is toggled. checked is true if the button is checked, or false if the button is unchecked.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also QAbstractButton::toggled().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QButtonGroup.Exclusive">
            <summary>
            <para>This property holds whether the button group is exclusive.</para>
            <para>If this property is true, then only one button in the group can
            be checked at any given time. The user can click on any button to check it,
            and that button will replace the existing one as the checked button in the
            group.</para>
            <para>In an exclusive group, the user cannot uncheck the currently
            checked button by clicking on it; instead, another button in the group must
            be clicked to set the new checked button for that group.</para>
            <para>By default, this property is true.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QButtonGroup.CheckedButton">
            <summary>
            <para>Returns the button group's checked button, or 0 if no buttons are
            checked.</para>
            <para>See also buttonClicked().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QButtonGroup.CheckedId">
            <summary>
            <para>Returns the id of the checkedButton(), or -1 if no button is
            checked.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setId().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QCalendarWidget">
            <summary>
            <para>The QCalendarWidget class provides a monthly based calendar
            widget allowing the user to select a date.</para>
            </summary>
            <remarks>
            <para></para>
            <para>The widget is initialized with the current month and year, but
            QCalendarWidget provides several public slots to change the year and month
            that is shown.</para>
            <para>By default, today's date is selected, and the user can select a
            date using both mouse and keyboard. The currently selected date can be
            retrieved using the selectedDate() function. It is possible to constrain
            the user selection to a given date range by setting the minimumDate and
            maximumDate properties. Alternatively, both properties can be set in one go
            using the setDateRange() convenience slot. Set the selectionMode property
            to NoSelection to prohibit the user from selecting at all. Note that a date
            also can be selected programmatically using the setSelectedDate()
            slot.</para>
            <para>The currently displayed month and year can be retrieved using the
            monthShown() and yearShown() functions, respectively.</para>
            <para>A newly created calendar widget uses abbreviated day names, and
            both Saturdays and Sundays are marked in red. The calendar grid is not
            visible. The week numbers are displayed, and the first column day is the
            first day of the week for the calendar's locale.</para>
            <para>The notation of the days can be altered to a single letter
            abbreviations (&quot;M&quot; for &quot;Monday&quot;) by setting the
            horizontalHeaderFormat property to QCalendarWidget::SingleLetterDayNames.
            Setting the same property to QCalendarWidget::LongDayNames makes the header
            display the complete day names. The week numbers can be removed by setting
            the verticalHeaderFormat property to QCalendarWidget::NoVerticalHeader. The
            calendar grid can be turned on by setting the gridVisible property to true
            using the setGridVisible() function:</para>
            <para></para>
            <para> </para>
            <para>QCalendarWidget *calendar;</para>
            <para>calendar-&gt;setGridVisible(true);</para>
            <para></para>
            <para></para>
            <para>Finally, the day in the first column can be altered using the
            setFirstDayOfWeek() function.</para>
            <para>The QCalendarWidget class also provides three signals,
            selectionChanged(), activated() and currentPageChanged() making it possible
            to respond to user interaction.</para>
            <para>The rendering of the headers, weekdays or single days can be
            largely customized by setting QTextCharFormat's for some special weekday, a
            special date or for the rendering of the headers.</para>
            <para>Only a subset of the properties in QTextCharFormat are used by
            the calendar widget. Currently, the foreground, background and font
            properties are used to determine the rendering of individual cells in the
            widget.</para>
            <para></para>
            <para>See also QDate, QDateEdit, and QTextCharFormat.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a calendar widget with the given parent.</para>
            <para>The widget is initialized with the current month and year, and
            the currently selected date is today.</para>
            <para>See also setCurrentPage().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.WeekdayTextFormat(QtCore.Qt.DayOfWeek)">
            <summary>
            <para>Returns the text char format for rendering of day in the week
            dayOfWeek.</para>
            <para>See also setWeekdayTextFormat() and headerTextFormat().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.SetWeekdayTextFormat(QtCore.Qt.DayOfWeek,QtGui.QTextCharFormat)">
            <summary>
            <para>Sets the text char format for rendering of day in the week
            dayOfWeek to format. The format will take precedence over the header format
            in case of foreground and background color. Other text formatting
            information is taken from the headers format.</para>
            <para>See also weekdayTextFormat() and setHeaderTextFormat().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.DateTextFormat(QtCore.QDate)">
            <summary>
            <para>Returns a QTextCharFormat for date. The char format can be be
            empty if the date is not renderd specially.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.SetDateTextFormat(QtCore.QDate,QtGui.QTextCharFormat)">
            <summary>
            <para>Sets the format used to render the given date to that specified
            by format.</para>
            <para>If date is null, all date formats are cleared.</para>
            <para>See also dateTextFormat().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.EventFilter(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::eventFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.PaintCell(QtGui.QPainter,QtCore.QRect,QtCore.QDate)">
            <summary>
            <para>Paints the cell specified by the given date, using the given
            painter and rect.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.UpdateCell(QtCore.QDate)">
            <summary>
            <para>Updates the cell specified by the given date unless updates are
            disabled or the cell is hidden.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also updateCells(), yearShown(), and monthShown().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.UpdateCells">
            <summary>
            <para>Updates all visible cells unless updates are disabled.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also updateCell().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.SetDateRange(QtCore.QDate,QtCore.QDate)">
            <summary>
            <para>Defines a date range by setting the minimumDate and maximumDate
            properties.</para>
            <para>The date range restricts the user selection, i.e. the user can
            only select dates within the specified date range. Note that</para>
            <para>QCalendarWidget *calendar;</para>
            <para></para>
            <para>calendar-&gt;setDateRange(min, max);</para>
            <para>is analogous to</para>
            <para>QCalendarWidget *calendar;</para>
            <para></para>
            <para>calendar-&gt;setMinimumDate(min);</para>
            <para>calendar-&gt;setMaximumDate(max);</para>
            <para>If either the min or max parameters are not valid QDate objects,
            this function does nothing.</para>
            <para>See also setMinimumDate() and setMaximumDate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.SetCurrentPage(System.Int32,System.Int32)">
            <summary>
            <para>Displays the given month of the given year without changing the
            selected date. Use the setSelectedDate() function to alter the selected
            date.</para>
            <para>The currently displayed month and year can be retrieved using the
            monthShown() and yearShown() functions respectively.</para>
            <para>See also yearShown(), monthShown(), showPreviousMonth(),
            showNextMonth(), showPreviousYear(), and showNextYear().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.ShowNextMonth">
            <summary>
            <para>Shows the next month relative to the currently displayed month.
            Note that the selected date is not changed.</para>
            <para>See also showPreviousMonth(), setCurrentPage(), and
            setSelectedDate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.ShowPreviousMonth">
            <summary>
            <para>Shows the previous month relative to the currently displayed
            month. Note that the selected date is not changed.</para>
            <para>See also showNextMonth(), setCurrentPage(), and
            setSelectedDate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.ShowNextYear">
            <summary>
            <para>Shows the currently displayed month in the next year relative to
            the currently displayed year. Note that the selected date is not
            changed.</para>
            <para>See also showPreviousYear(), setCurrentPage(), and
            setSelectedDate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.ShowPreviousYear">
            <summary>
            <para>Shows the currently displayed month in the previous year relative
            to the currently displayed year. Note that the selected date is not
            changed.</para>
            <para>See also showNextYear(), setCurrentPage(), and
            setSelectedDate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.ShowSelectedDate">
            <summary>
            <para>Shows the month of the selected date.</para>
            <para>See also selectedDate() and setCurrentPage().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCalendarWidget.ShowToday">
            <summary>
            <para>Shows the month of the today's date.</para>
            <para>See also selectedDate() and setCurrentPage().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QCalendarWidget.SelectionChanged">
            <summary>
            <para>This signal is emitted when the currently selected date is changed.</para>
            <para>The currently selected date can be changed by the user using the mouse or keyboard, or by the programmer using setSelectedDate().</para>
            <para>See also selectedDate().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QCalendarWidget.Clicked">
            <summary>
            <para>This signal is emitted when a mouse button is clicked. The date the mouse was clicked on is specified by date. The signal is only emitted when clicked on a valid date, e.g., dates are not outside the minimumDate() and maximumDate(). If the selection mode is NoSelection, this signal will not be emitted.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QCalendarWidget.Activated">
            <summary>
            <para>This signal is emitted whenever the user presses the Return or Enter key or double-clicks a date in the calendar widget.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QCalendarWidget.CurrentPageChanged">
            <summary>
            <para>This signal is emitted when the currently shown month is changed. The new year and month are passed as parameters.</para>
            <para>See also setCurrentPage().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCalendarWidget.MinimumDate">
            <summary>
            <para>This property holds the minimum date of the currently specified
            date range.</para>
            <para>The user will not be able to select a date that is before the
            currently set minimum date.</para>
            <para></para>
            <para> </para>
            <para>QCalendarWidget *calendar;</para>
            <para>calendar-&gt;setGridVisible(true);</para>
            <para>calendar-&gt;setMinimumDate(QDate(2006, 6, 19));</para>
            <para></para>
            <para></para>
            <para>By default, the minimum date is the earliest date that the QDate
            class can handle.</para>
            <para>When setting a minimum date, the maximumDate and selectedDate
            properties are adjusted if the selection range becomes invalid. If the
            provided date is not a valid QDate object, the setMinimumDate() function
            does nothing.</para>
            <para>See also setDateRange().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCalendarWidget.MaximumDate">
            <summary>
            <para>This property holds the maximum date of the currently specified
            date range.</para>
            <para>The user will not be able to select a date which is after the
            currently set maximum date.</para>
            <para></para>
            <para> </para>
            <para>QCalendarWidget *calendar;</para>
            <para>calendar-&gt;setGridVisible(true);</para>
            <para>calendar-&gt;setMaximumDate(QDate(2006, 7, 3));</para>
            <para></para>
            <para></para>
            <para>By default, the maximum date is the last day the QDate class can
            handle.</para>
            <para>When setting a maximum date, the minimumDate and selectedDate
            properties are adjusted if the selection range becomes invalid. If the
            provided date is not a valid QDate object, the setMaximumDate() function
            does nothing.</para>
            <para>See also setDateRange().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCalendarWidget.FirstDayOfWeek">
            <summary>
            <para>This property holds a value identifying the day displayed in the
            first column.</para>
            <para>By default, the day displayed in the first column is the first
            day of the week for the calendar's locale.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCalendarWidget.selectionMode">
            <summary>
            <para>This property holds the type of selection the user can make in
            the calendar.</para>
            <para>When this property is set to SingleSelection, the user can select
            a date within the minimum and maximum allowed dates, using either the mouse
            or the keyboard.</para>
            <para>When the property is set to NoSelection, the user will be unable
            to select dates, but they can still be selected programmatically. Note that
            the date that is selected when the property is set to NoSelection will
            still be the selected date of the calendar.</para>
            <para>The default value is SingleSelection.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCalendarWidget.horizontalHeaderFormat">
            <summary>
            <para>This property holds the format of the horizontal header.</para>
            <para>The default value is QCalendarWidget::ShortDayNames.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCalendarWidget.verticalHeaderFormat">
            <summary>
            <para>This property holds the format of the vertical header.</para>
            <para>The default value is QCalendarWidget::ISOWeekNumber.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCalendarWidget.HeaderTextFormat">
            <summary>
            <para>Returns the text char format for rendering the header.</para>
            <para>See also setHeaderTextFormat().</para>
            <para></para>
            <para>Sets the text char format for rendering the header to format. If
            you also set a weekday text format, this format's foreground and background
            color will take precedence over the header's format. The other formatting
            information will still be decided by the header's format.</para>
            <para>See also headerTextFormat().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCalendarWidget.DateEditEnabled">
            <summary>
            <para>This property holds whether the date edit popup is
            enabled.</para>
            <para>If this property is enabled, pressing a non-modifier key will
            cause a date edit to popup if the calendar widget has focus, allowing the
            user to specify a date in the form specified by the current locale.</para>
            <para>By default, this property is enabled.</para>
            <para>The date edit is simpler in appearance than QDateEdit, but allows
            the user to navigate between fields using the left and right cursor keys,
            increment and decrement individual fields using the up and down cursor
            keys, and enter values directly using the number keys.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            <para>See also QCalendarWidget::dateEditAcceptDelay.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCalendarWidget.DateEditAcceptDelay">
            <summary>
            <para>This property holds the time an inactive date edit is shown
            before its contents are accepted.</para>
            <para>If the calendar widget's date edit is enabled, this property
            specifies the amount of time (in millseconds) that the date edit remains
            open after the most recent user input. Once this time has elapsed, the date
            specified in the date edit is accepted and the popup is closed.</para>
            <para>By default, the delay is defined to be 1500 milliseconds (1.5
            seconds).</para>
            <para>This property was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCalendarWidget.SelectedDate">
            <summary>
            <para>This property holds the currently selected date.</para>
            <para>The selected date must be within the date range specified by the
            minimumDate and maximumDate properties. By default, the selected date is
            the current date.</para>
            <para>See also setDateRange().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCalendarWidget.GridVisible">
            <summary>
            <para>This property holds whether the table grid is displayed.</para>
            <para></para>
            <para> </para>
            <para>QCalendarWidget *calendar;</para>
            <para>calendar-&gt;setGridVisible(true);</para>
            <para></para>
            <para></para>
            <para>The default value is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCalendarWidget.NavigationBarVisible">
            <summary>
            <para>This property holds whether the navigation bar is shown or
            not.</para>
            <para>When this property is true (the default), the next month,
            previous month, month selection, year selection controls are shown on
            top.</para>
            <para>When the property is set to false, these controls are
            hidden.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCalendarWidget.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCalendarWidget.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCalendarWidget.YearShown">
            <summary>
            <para>Returns the year of the currently displayed month. Months are
            numbered from 1 to 12.</para>
            <para>See also monthShown() and setCurrentPage().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCalendarWidget.MonthShown">
            <summary>
            <para>Returns the currently displayed month. Months are numbered from 1
            to 12.</para>
            <para>See also yearShown() and setCurrentPage().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QCalendarWidget.HorizontalHeaderFormat">
            <summary>
            <para>This enum type defines the various formats the horizontal header
            can display.</para>
            <para>See also horizontalHeaderFormat() and
            VerticalHeaderFormat.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QCalendarWidget.HorizontalHeaderFormat.NoHorizontalHeader">
            <summary>The header is hidden.</summary>
        </member>
        <member name="F:QtWidgets.QCalendarWidget.HorizontalHeaderFormat.SingleLetterDayNames">
            <summary>The header displays a single letter abbreviation for day names (e.g. M for Monday).</summary>
        </member>
        <member name="F:QtWidgets.QCalendarWidget.HorizontalHeaderFormat.ShortDayNames">
            <summary>The header displays a short abbreviation for day names (e.g. Mon for Monday).</summary>
        </member>
        <member name="F:QtWidgets.QCalendarWidget.HorizontalHeaderFormat.LongDayNames">
            <summary>The header displays complete day names (e.g. Monday).</summary>
        </member>
        <member name="T:QtWidgets.QCalendarWidget.VerticalHeaderFormat">
            <summary>
            <para>This enum type defines the various formats the vertical header
            can display.</para>
            <para>See also verticalHeaderFormat() and
            HorizontalHeaderFormat.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QCalendarWidget.VerticalHeaderFormat.NoVerticalHeader">
            <summary>The header is hidden.</summary>
        </member>
        <member name="F:QtWidgets.QCalendarWidget.VerticalHeaderFormat.ISOWeekNumbers">
            <summary>The header displays ISO week numbers as described by QDate::weekNumber().</summary>
        </member>
        <member name="T:QtWidgets.QCalendarWidget.SelectionMode">
            <summary>
            <para>This enum describes the types of selection offered to the user
            for selecting dates in the calendar.</para>
            <para>See also selectionMode.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QCalendarWidget.SelectionMode.NoSelection">
            <summary>Dates cannot be selected.</summary>
        </member>
        <member name="F:QtWidgets.QCalendarWidget.SelectionMode.SingleSelection">
            <summary>Single dates can be selected.</summary>
        </member>
        <member name="T:QtWidgets.QCheckBox">
            <summary>
            <para>The QCheckBox widget provides a checkbox with a text
            label.</para>
            </summary>
            <remarks>
            <para>A QCheckBox is an option button that can be switched on (checked)
            or off (unchecked). Checkboxes are typically used to represent features in
            an application that can be enabled or disabled without affecting others.
            Different types of behavior can be implemented. For example, a QButtonGroup
            can be used to group check buttons logically, allowing exclusive
            checkboxes. However, QButtonGroup does not provide any visual
            representation.</para>
            <para>The image below further illustrates the differences between
            exclusive and non-exclusive checkboxes.</para>
            <para></para>
            <para> 	</para>
            <para></para>
            <para>Whenever a checkbox is checked or cleared, it emits the signal
            stateChanged(). Connect to this signal if you want to trigger an action
            each time the checkbox changes state. You can use isChecked() to query
            whether or not a checkbox is checked.</para>
            <para>In addition to the usual checked and unchecked states, QCheckBox
            optionally provides a third state to indicate &quot;no change&quot;. This
            is useful whenever you need to give the user the option of neither checking
            nor unchecking a checkbox. If you need this third state, enable it with
            setTristate(), and use checkState() to query the current toggle
            state.</para>
            <para>Just like QPushButton, a checkbox displays text, and optionally a
            small icon. The icon is set with setIcon(). The text can be set in the
            constructor or with setText(). A shortcut key can be specified by preceding
            the preferred character with an ampersand. For example:</para>
            <para>QCheckBox *checkbox = new QCheckBox(&quot;C&amp;ase
            sensitive&quot;, this);</para>
            <para>In this example, the shortcut is Alt+A. See the QShortcut
            documentation for details. To display an actual ampersand, use
            '&amp;&amp;'.</para>
            <para>Important inherited functions: text(), setText(), text(),
            pixmap(), setPixmap(), accel(), setAccel(), isToggleButton(), setDown(),
            isDown(), isOn(), checkState(), autoRepeat(), isExclusiveToggle(), group(),
            setAutoRepeat(), toggle(), pressed(), released(), clicked(), toggled(),
            checkState(), and stateChanged().</para>
            <para></para>
            <para> 	A checkbox shown in the Macintosh widget style.</para>
            <para>	A checkbox shown in the Windows Vista widget style.</para>
            <para>	A checkbox shown in the Fusion widget style.</para>
            <para></para>
            <para></para>
            <para>See also QAbstractButton, QRadioButton, and GUI Design Handbook:
            Check Box.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QCheckBox.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a checkbox with the given parent, but with no
            text.</para>
            <para>parent is passed on to the QAbstractButton constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCheckBox.#ctor(System.String,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a checkbox with the given parent and text.</para>
            <para>parent is passed on to the QAbstractButton constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCheckBox.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCheckBox.HitButton(QtCore.QPoint)">
            <summary>
            <para>Reimplemented from QAbstractButton::hitButton().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCheckBox.CheckStateSet">
            <summary>
            <para>Reimplemented from QAbstractButton::checkStateSet().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCheckBox.NextCheckState">
            <summary>
            <para>Reimplemented from QAbstractButton::nextCheckState().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCheckBox.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCheckBox.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCheckBox.InitStyleOption(QtWidgets.QStyleOptionButton)">
            <summary>
            <para>Initializes option with the values from this QCheckBox. This
            method is useful for subclasses that require a QStyleOptionButton, but do
            not want to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QCheckBox.StateChanged">
            <summary>
            <para>This signal is emitted whenever the checkbox's state changes, i.e., whenever the user checks or unchecks it.</para>
            <para>state contains the checkbox's new Qt::CheckState.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QCheckBox.PaintEvent">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCheckBox.Tristate">
            <summary>
            <para>This property holds whether the checkbox is a tri-state
            checkbox.</para>
            <para>The default is false, i.e., the checkbox has only two
            states.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCheckBox.CheckState">
            <summary>
            <para>Returns the checkbox's check state. If you do not need tristate
            support, you can also use QAbstractButton::isChecked(), which returns a
            boolean.</para>
            <para>See also setCheckState() and Qt::CheckState.</para>
            <para></para>
            <para>Sets the checkbox's check state to state. If you do not need
            tristate support, you can also use QAbstractButton::setChecked(), which
            takes a boolean.</para>
            <para>See also checkState() and Qt::CheckState.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCheckBox.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCheckBox.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QComboBox">
            <summary>
            <para>The QComboBox widget is a combined button and popup list.</para>
            </summary>
            <remarks>
            <para>A QComboBox provides a means of presenting a list of options to
            the user in a way that takes up the minimum amount of screen space.</para>
            <para>A combobox is a selection widget that displays the current item,
            and can pop up a list of selectable items. A combobox may be editable,
            allowing the user to modify each item in the list.</para>
            <para>Comboboxes can contain pixmaps as well as strings; the
            insertItem() and setItemText() functions are suitably overloaded. For
            editable comboboxes, the function clearEditText() is provided, to clear the
            displayed string without changing the combobox's contents.</para>
            <para>There are two signals emitted if the current item of a combobox
            changes, currentIndexChanged() and activated(). currentIndexChanged() is
            always emitted regardless if the change was done programmatically or by
            user interaction, while activated() is only emitted when the change is
            caused by user interaction. The highlighted() signal is emitted when the
            user highlights an item in the combobox popup list. All three signals exist
            in two versions, one with a QString argument and one with an int argument.
            If the user selects or highlights a pixmap, only the int signals are
            emitted. Whenever the text of an editable combobox is changed the
            editTextChanged() signal is emitted.</para>
            <para>When the user enters a new string in an editable combobox, the
            widget may or may not insert it, and it can insert it in several locations.
            The default policy is InsertAtBottom but you can change this using
            setInsertPolicy().</para>
            <para>It is possible to constrain the input to an editable combobox
            using QValidator; see setValidator(). By default, any input is
            accepted.</para>
            <para>A combobox can be populated using the insert functions,
            insertItem() and insertItems() for example. Items can be changed with
            setItemText(). An item can be removed with removeItem() and all items can
            be removed with clear(). The text of the current item is returned by
            currentText(), and the text of a numbered item is returned with text(). The
            current item can be set with setCurrentIndex(). The number of items in the
            combobox is returned by count(); the maximum number of items can be set
            with setMaxCount(). You can allow editing using setEditable(). For editable
            comboboxes you can set auto-completion using setCompleter() and whether or
            not the user can add duplicates is set with setDuplicatesEnabled().</para>
            <para>QComboBox uses the model/view framework for its popup list and to
            store its items. By default a QStandardItemModel stores the items and a
            QListView subclass displays the popuplist. You can access the model and
            view directly (with model() and view()), but QComboBox also provides
            functions to set and get item data (e.g., setItemData() and itemText()).
            You can also set a new model and view (with setModel() and setView()). For
            the text and icon in the combobox label, the data in the model that has the
            Qt::DisplayRole and Qt::DecorationRole is used. Note that you cannot alter
            the SelectionMode of the view(), e.g., by using setSelectionMode().</para>
            <para></para>
            <para></para>
            <para>See also QLineEdit, QSpinBox, QRadioButton, QButtonGroup, and GUI
            Design Handbook: Combo Box, Drop-Down List Box.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QComboBox.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a combobox with the given parent, using the default
            model QStandardItemModel.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.SetFrame(System.Boolean)">
            <summary>
            <para>This property holds whether the combo box draws itself with a
            frame.</para>
            <para>If enabled (the default) the combo box draws itself inside a
            frame, otherwise the combo box draws itself without any frame.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasFrame() const</para>
            <para> void 	setFrame(bool)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.FindText(System.String,QtCore.Qt.MatchFlag)">
            <summary>
            <para>Returns the index of the item containing the given text;
            otherwise returns -1.</para>
            <para>The flags specify how the items in the combobox are
            searched.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.FindData(QtCore.QVariant,System.Int32,QtCore.Qt.MatchFlag)">
            <summary>
            <para>Returns the index of the item containing the given data for the
            given role; otherwise returns -1.</para>
            <para>The flags specify how the items in the combobox are
            searched.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.CurrentData(System.Int32)">
            <summary>
            <para>This property holds the data for the current item.</para>
            <para>By default, for an empty combo box or a combo box in which no
            current item is set, this property contains an invalid QVariant.</para>
            <para>This property was introduced in  Qt 5.2.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QVariant 	currentData(int role = Qt::UserRole) const</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.ItemText(System.Int32)">
            <summary>
            <para>Returns the text for the given index in the combobox.</para>
            <para>See also setItemText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.ItemIcon(System.Int32)">
            <summary>
            <para>Returns the icon for the given index in the combobox.</para>
            <para>See also setItemIcon().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.ItemData(System.Int32,System.Int32)">
            <summary>
            <para>Returns the data for the given role in the given index in the
            combobox, or QVariant::Invalid if there is no data for this role.</para>
            <para>See also setItemData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.AddItem(System.String,QtCore.QVariant)">
            <summary>
            <para>Adds an item to the combobox with the given text, and containing
            the specified userData (stored in the Qt::UserRole). The item is appended
            to the list of existing items.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.AddItem(QtGui.QIcon,System.String,QtCore.QVariant)">
            <summary>
            <para>Adds an item to the combobox with the given icon and text, and
            containing the specified userData (stored in the Qt::UserRole). The item is
            appended to the list of existing items.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.AddItems(QtCore.QStringList)">
            <summary>
            <para>Adds each of the strings in the given texts to the combobox. Each
            item is appended to the list of existing items in turn.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.InsertItem(System.Int32,System.String,QtCore.QVariant)">
            <summary>
            <para>Inserts the text and userData (stored in the Qt::UserRole) into
            the combobox at the given index.</para>
            <para>If the index is equal to or higher than the total number of
            items, the new item is appended to the list of existing items. If the index
            is zero or negative, the new item is prepended to the list of existing
            items.</para>
            <para>See also insertItems().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.InsertItem(System.Int32,QtGui.QIcon,System.String,QtCore.QVariant)">
            <summary>
            <para>Inserts the icon, text and userData (stored in the Qt::UserRole)
            into the combobox at the given index.</para>
            <para>If the index is equal to or higher than the total number of
            items, the new item is appended to the list of existing items. If the index
            is zero or negative, the new item is prepended to the list of existing
            items.</para>
            <para>See also insertItems().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.InsertItems(System.Int32,QtCore.QStringList)">
            <summary>
            <para>Inserts the strings from the list into the combobox as separate
            items, starting at the index specified.</para>
            <para>If the index is equal to or higher than the total number of
            items, the new items are appended to the list of existing items. If the
            index is zero or negative, the new items are prepended to the list of
            existing items.</para>
            <para>See also insertItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.InsertSeparator(System.Int32)">
            <summary>
            <para>Inserts a separator item into the combobox at the given
            index.</para>
            <para>If the index is equal to or higher than the total number of
            items, the new item is appended to the list of existing items. If the index
            is zero or negative, the new item is prepended to the list of existing
            items.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also insertItem().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.RemoveItem(System.Int32)">
            <summary>
            <para>Removes the item at the given index from the combobox. This will
            update the current index if the index is removed.</para>
            <para>This function does nothing if index is out of range.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.SetItemText(System.Int32,System.String)">
            <summary>
            <para>Sets the text for the item on the given index in the
            combobox.</para>
            <para>See also itemText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.SetItemIcon(System.Int32,QtGui.QIcon)">
            <summary>
            <para>Sets the icon for the item on the given index in the
            combobox.</para>
            <para>See also itemIcon().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.SetItemData(System.Int32,QtCore.QVariant,System.Int32)">
            <summary>
            <para>Sets the data role for the item on the given index in the
            combobox to the specified value.</para>
            <para>See also itemData().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.ShowPopup">
            <summary>
            <para>Displays the list of items in the combobox. If the list is empty
            then the no items will be shown.</para>
            <para>If you reimplement this function to show a custom pop-up, make
            sure you call hidePopup() to reset the internal state.</para>
            <para>See also hidePopup().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.HidePopup">
            <summary>
            <para>Hides the list of items in the combobox if it is currently
            visible and resets the internal state, so that if the custom pop-up was
            shown inside the reimplemented showPopup(), then you also need to
            reimplement the hidePopup() function to hide your custom pop-up and call
            the base class implementation to reset the internal state whenever your
            custom pop-up widget is hidden.</para>
            <para>See also showPopup().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.InputMethodQuery(QtCore.Qt.InputMethodQuery)">
            <summary>
            <para>Reimplemented from QWidget::inputMethodQuery().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.Clear">
            <summary>
            <para>Clears the combobox, removing all items.</para>
            <para>Note: If you have set an external model on the combobox this
            model will still be cleared when calling this function.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.ClearEditText">
            <summary>
            <para>Clears the contents of the line edit used for editing in the
            combobox.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.SetEditText(System.String)">
            <summary>
            <para>Sets the text in the combobox's text edit.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.OnHideEvent(QtGui.QHideEvent)">
            <summary>
            <para>Reimplemented from QWidget::hideEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.OnKeyReleaseEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.OnWheelEvent(QtGui.QWheelEvent)">
            <summary>
            <para>Reimplemented from QWidget::wheelEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.OnContextMenuEvent(QtGui.QContextMenuEvent)">
            <summary>
            <para>Reimplemented from QWidget::contextMenuEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.OnInputMethodEvent(QtGui.QInputMethodEvent)">
            <summary>
            <para>Reimplemented from QWidget::inputMethodEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QComboBox.InitStyleOption(QtWidgets.QStyleOptionComboBox)">
            <summary>
            <para>Initialize option with the values from this QComboBox. This
            method is useful for subclasses when they need a QStyleOptionComboBox, but
            don't want to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QComboBox.EditTextChanged">
            <summary>
            <para>This signal is emitted when the text in the combobox's line edit widget is changed. The new text is specified by text.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QComboBox.Activated">
            <summary>
            <para>This signal is sent when the user chooses an item in the combobox. The item's index is passed. Note that this signal is sent even when the choice is not changed. If you need to know when the choice actually changes, use signal currentIndexChanged().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QComboBox.ActivatedText">
            <summary>
            <para>This signal is sent when the user chooses an item in the combobox. The item's text is passed. Note that this signal is sent even when the choice is not changed. If you need to know when the choice actually changes, use signal currentIndexChanged().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QComboBox.Highlighted">
            <summary>
            <para>This signal is sent when an item in the combobox popup list is highlighted by the user. The item's index is passed.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QComboBox.HighlightedText">
            <summary>
            <para>This signal is sent when an item in the combobox popup list is highlighted by the user. The item's text is passed.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QComboBox.CurrentIndexChanged">
            <summary>
            <para>This property holds the index of the current item in the combobox.</para>
            <para>The current index can change when inserting or removing items.</para>
            <para>By default, for an empty combo box or a combo box in which no current item is set, this property has a value of -1.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	currentIndex() const</para>
            <para> void 	setCurrentIndex(int index)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	currentIndexChanged(int index)</para>
            <para> void 	currentIndexChanged(const QString &amp; text)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QComboBox.CurrentIndexChangedString">
            <summary>
            <para>This property holds the index of the current item in the combobox.</para>
            <para>The current index can change when inserting or removing items.</para>
            <para>By default, for an empty combo box or a combo box in which no current item is set, this property has a value of -1.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	currentIndex() const</para>
            <para> void 	setCurrentIndex(int index)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	currentIndexChanged(int index)</para>
            <para> void 	currentIndexChanged(const QString &amp; text)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QComboBox.CurrentTextChanged">
            <summary>
            <para>This property holds the current text.</para>
            <para>If the combo box is editable, the current text is the value displayed by the line edit. Otherwise, it is the value of the current item or an empty string if the combo box is empty or no current item is set.</para>
            <para>The setter setCurrentText() simply calls setEditText() if the combo box is editable. Otherwise, if there is a matching text in the list, currentIndex is set to the corresponding index.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	currentText() const</para>
            <para> void 	setCurrentText(const QString &amp; text)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	currentTextChanged(const QString &amp; text)</para>
            <para></para>
            <para>See also editable and setEditText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.MaxVisibleItems">
            <summary>
            <para>This property holds the maximum allowed size on screen of the
            combo box, measured in items.</para>
            <para>By default, this property has a value of 10.</para>
            <para>Note: This property is ignored for non-editable comboboxes in
            styles that returns true for QStyle::SH_ComboBox_Popup such as the Mac
            style or the Gtk+ Style.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.MaxCount">
            <summary>
            <para>This property holds the maximum number of items allowed in the
            combobox.</para>
            <para>Note: If you set the maximum number to be less then the current
            amount of items in the combobox, the extra items will be truncated. This
            also applies if you have set an external model on the combobox.</para>
            <para>By default, this property's value is derived from the highest
            signed integer available (typically 2147483647).</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.AutoCompletion">
            <summary>
            <para>This property holds whether the combobox provides auto-completion
            for editable items.</para>
            <para>Use setCompleter() instead.</para>
            <para>By default, this property is true.</para>
            <para>This property was introduced in  Qt 4.1.</para>
            <para>See also editable.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.AutoCompletionCaseSensitivity">
            <summary>
            <para>This property holds whether string comparisons are case-sensitive
            or case-insensitive for auto-completion.</para>
            <para>By default, this property is Qt::CaseInsensitive.</para>
            <para>Use setCompleter() instead. Case sensitivity of the auto
            completion can be changed using QCompleter::setCaseSensitivity().</para>
            <para>See also autoCompletion.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.DuplicatesEnabled">
            <summary>
            <para>This property holds whether the user can enter duplicate items
            into the combobox.</para>
            <para>Note that it is always possible to programmatically insert
            duplicate items into the combobox.</para>
            <para>By default, this property is false (duplicates are not
            allowed).</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.insertPolicy">
            <summary>
            <para>This property holds the policy used to determine where
            user-inserted items should appear in the combobox.</para>
            <para>The default value is InsertAtBottom, indicating that new items
            will appear at the bottom of the list of items.</para>
            <para>See also InsertPolicy.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.sizeAdjustPolicy">
            <summary>
            <para>This property holds the policy describing how the size of the
            combobox changes when the content changes.</para>
            <para>The default value is AdjustToContentsOnFirstShow.</para>
            <para>See also SizeAdjustPolicy.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.MinimumContentsLength">
            <summary>
            <para>This property holds the minimum number of characters that should
            fit into the combobox.</para>
            <para>The default value is 0.</para>
            <para>If this property is set to a positive value, the
            minimumSizeHint() and sizeHint() take it into account.</para>
            <para>See also sizeAdjustPolicy.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.IconSize">
            <summary>
            <para>This property holds the size of the icons shown in the
            combobox.</para>
            <para>Unless explicitly set this returns the default value of the
            current style. This size is the maximum size that icons can have; icons of
            smaller size are not scaled up.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.Editable">
            <summary>
            <para>This property holds whether the combo box can be edited by the
            user.</para>
            <para>By default, this property is false. The effect of editing depends
            on the insert policy.</para>
            <para>See also InsertPolicy.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.LineEdit">
            <summary>
            <para>Returns the line edit used to edit items in the combobox, or 0 if
            there is no line edit.</para>
            <para>Only editable combo boxes have a line edit.</para>
            <para>See also setLineEdit().</para>
            <para></para>
            <para>Sets the line edit to use instead of the current line edit
            widget.</para>
            <para>The combo box takes ownership of the line edit.</para>
            <para>See also lineEdit().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.Validator">
            <summary>
            <para>Returns the validator that is used to constrain text input for
            the combobox.</para>
            <para>See also setValidator() and editable.</para>
            <para></para>
            <para>Sets the validator to use instead of the current
            validator.</para>
            <para>See also validator().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.Completer">
            <summary>
            <para>Returns the completer that is used to auto complete text input
            for the combobox.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setCompleter() and editable.</para>
            <para></para>
            <para>Sets the completer to use instead of the current completer. If
            completer is 0, auto completion is disabled.</para>
            <para>By default, for an editable combo box, a QCompleter that performs
            case insensitive inline completion is automatically created.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also completer().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.ItemDelegate">
            <summary>
            <para>Returns the item delegate used by the popup list view.</para>
            <para>See also setItemDelegate().</para>
            <para></para>
            <para>Sets the item delegate for the popup list view. The combobox
            takes ownership of the delegate.</para>
            <para>Warning: You should not share the same instance of a delegate
            between comboboxes, widget mappers or views. Doing so can cause incorrect
            or unintuitive editing behavior since each view connected to a given
            delegate may receive the closeEditor() signal, and attempt to access,
            modify or close an editor that has already been closed.</para>
            <para>See also itemDelegate().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.Model">
            <summary>
            <para>Returns the model used by the combobox.</para>
            <para>See also setModel().</para>
            <para></para>
            <para>Sets the model to be model. model must not be 0. If you want to
            clear the contents of a model, call clear().</para>
            <para>See also model() and clear().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.RootModelIndex">
            <summary>
            <para>Returns the root model item index for the items in the
            combobox.</para>
            <para>See also setRootModelIndex().</para>
            <para></para>
            <para>Sets the root model item index for the items in the
            combobox.</para>
            <para>See also rootModelIndex().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.ModelColumn">
            <summary>
            <para>This property holds the column in the model that is
            visible.</para>
            <para>If set prior to populating the combo box, the pop-up view will
            not be affected and will show the first column (using this property's
            default value).</para>
            <para>By default, this property has a value of 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.View">
            <summary>
            <para>Returns the list view used for the combobox popup.</para>
            <para>See also setView().</para>
            <para></para>
            <para>Sets the view to be used in the combobox popup to the given
            itemView. The combobox takes ownership of the view.</para>
            <para>Note: If you want to use the convenience views (like QListWidget,
            QTableWidget or QTreeWidget), make sure to call setModel() on the combobox
            with the convenience widgets model before calling this function.</para>
            <para>See also view().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.CurrentIndex">
            <summary>
            <para>This property holds the index of the current item in the
            combobox.</para>
            <para>The current index can change when inserting or removing
            items.</para>
            <para>By default, for an empty combo box or a combo box in which no
            current item is set, this property has a value of -1.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.CurrentText">
            <summary>
            <para>This property holds the current text.</para>
            <para>If the combo box is editable, the current text is the value
            displayed by the line edit. Otherwise, it is the value of the current item
            or an empty string if the combo box is empty or no current item is
            set.</para>
            <para>The setter setCurrentText() simply calls setEditText() if the
            combo box is editable. Otherwise, if there is a matching text in the list,
            currentIndex is set to the corresponding index.</para>
            <para>See also editable and setEditText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            <para>This implementation caches the size hint to avoid resizing when
            the contents change dynamically. To invalidate the cached value change the
            sizeAdjustPolicy.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.Count">
            <summary>
            <para>This property holds the number of items in the combobox.</para>
            <para>By default, for an empty combo box, this property has a value of
            0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QComboBox.HasFrame">
            <summary>
            <para>This property holds whether the combo box draws itself with a
            frame.</para>
            <para>If enabled (the default) the combo box draws itself inside a
            frame, otherwise the combo box draws itself without any frame.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasFrame() const</para>
            <para> void 	setFrame(bool)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:QtWidgets.QComboBox.InsertPolicy">
            <summary>
            <para>This enum specifies what the QComboBox should do when a new
            string is entered by the user.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QComboBox.InsertPolicy.NoInsert">
            <summary>The string will not be inserted into the combobox.</summary>
        </member>
        <member name="F:QtWidgets.QComboBox.InsertPolicy.InsertAtTop">
            <summary>The string will be inserted as the first item in the combobox.</summary>
        </member>
        <member name="F:QtWidgets.QComboBox.InsertPolicy.InsertAtCurrent">
            <summary>The current item will be replaced by the string.</summary>
        </member>
        <member name="F:QtWidgets.QComboBox.InsertPolicy.InsertAtBottom">
            <summary>The string will be inserted after the last item in the combobox.</summary>
        </member>
        <member name="F:QtWidgets.QComboBox.InsertPolicy.InsertAfterCurrent">
            <summary>The string is inserted after the current item in the combobox.</summary>
        </member>
        <member name="F:QtWidgets.QComboBox.InsertPolicy.InsertBeforeCurrent">
            <summary>The string is inserted before the current item in the combobox.</summary>
        </member>
        <member name="F:QtWidgets.QComboBox.InsertPolicy.InsertAlphabetically">
            <summary>The string is inserted in the alphabetic order in the combobox.</summary>
        </member>
        <member name="T:QtWidgets.QComboBox.SizeAdjustPolicy">
            <summary>
            <para>This enum specifies how the size hint of the QComboBox should
            adjust when new content is added or content changes.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QComboBox.SizeAdjustPolicy.AdjustToContents">
            <summary>The combobox will always adjust to the contents</summary>
        </member>
        <member name="F:QtWidgets.QComboBox.SizeAdjustPolicy.AdjustToContentsOnFirstShow">
            <summary>The combobox will adjust to its contents the first time it is shown.</summary>
        </member>
        <member name="F:QtWidgets.QComboBox.SizeAdjustPolicy.AdjustToMinimumContentsLength">
            <summary>Use AdjustToContents or AdjustToContentsOnFirstShow instead.</summary>
        </member>
        <member name="F:QtWidgets.QComboBox.SizeAdjustPolicy.AdjustToMinimumContentsLengthWithIcon">
            <summary>The combobox will adjust to minimumContentsLength plus space for an icon. For performance reasons use this policy on large models.</summary>
        </member>
        <member name="T:QtWidgets.QPushButton">
            <summary>
            <para>The QPushButton widget provides a command button.</para>
            </summary>
            <remarks>
            <para>The push button, or command button, is perhaps the most commonly
            used widget in any graphical user interface. Push (click) a button to
            command the computer to perform some action, or to answer a question.
            Typical buttons are OK, Apply, Cancel, Close, Yes, No and Help.</para>
            <para>A command button is rectangular and typically displays a text
            label describing its action. A shortcut key can be specified by preceding
            the preferred character with an ampersand in the text. For example:</para>
            <para>QPushButton *button = new QPushButton(&quot;&amp;Download&quot;,
            this);</para>
            <para>In this example the shortcut is Alt+D. See the QShortcut
            documentation for details (to display an actual ampersand, use
            '&amp;&amp;').</para>
            <para>Push buttons display a textual label, and optionally a small
            icon. These can be set using the constructors and changed later using
            setText() and setIcon(). If the button is disabled, the appearance of the
            text and icon will be manipulated with respect to the GUI style to make the
            button look &quot;disabled&quot;.</para>
            <para>A push button emits the signal clicked() when it is activated by
            the mouse, the Spacebar or by a keyboard shortcut. Connect to this signal
            to perform the button's action. Push buttons also provide less commonly
            used signals, for example pressed() and released().</para>
            <para>Command buttons in dialogs are by default auto-default buttons,
            i.e., they become the default push button automatically when they receive
            the keyboard input focus. A default button is a push button that is
            activated when the user presses the Enter or Return key in a dialog. You
            can change this with setAutoDefault(). Note that auto-default buttons
            reserve a little extra space which is necessary to draw a default-button
            indicator. If you do not want this space around your buttons, call
            setAutoDefault(false).</para>
            <para>Being so central, the button widget has grown to accommodate a
            great many variations in the past decade. The Microsoft style guide now
            shows about ten different states of Windows push buttons and the text
            implies that there are dozens more when all the combinations of features
            are taken into consideration.</para>
            <para>The most important modes or states are:</para>
            <para></para>
            <para>Available or not (grayed out, disabled).</para>
            <para>Standard push button, toggling push button or menu button.</para>
            <para>On or off (only for toggling push buttons).</para>
            <para>Default or normal. The default button in a dialog can generally
            be &quot;clicked&quot; using the Enter or Return key.</para>
            <para>Auto-repeat or not.</para>
            <para>Pressed down or not.</para>
            <para></para>
            <para>As a general rule, use a push button when the application or
            dialog window performs an action when the user clicks on it (such as Apply,
            Cancel, Close and Help) and when the widget is supposed to have a wide,
            rectangular shape with a text label. Small, typically square buttons that
            change the state of the window rather than performing an action (such as
            the buttons in the top-right corner of the QFileDialog) are not command
            buttons, but tool buttons. Qt provides a special class (QToolButton) for
            these buttons.</para>
            <para>If you need toggle behavior (see setCheckable()) or a button that
            auto-repeats the activation signal when being pushed down like the arrows
            in a scroll bar (see setAutoRepeat()), a command button is probably not
            what you want. When in doubt, use a tool button.</para>
            <para>A variation of a command button is a menu button. These provide
            not just one command, but several, since when they are clicked they pop up
            a menu of options. Use the method setMenu() to associate a popup menu with
            a push button.</para>
            <para>Other classes of buttons are option buttons (see QRadioButton)
            and check boxes (see QCheckBox).</para>
            <para></para>
            <para> 	A push button shown in the Macintosh widget style.Note that
            when a button's width becomes smaller than 50 or its height becomes smaller
            than 30, the button's corners are changed from round to square. Use the
            setMinimumSize() function to prevent this behavior.</para>
            <para></para>
            <para>	A push button shown in the Windows Vista widget style.</para>
            <para>	A push button shown in the Fusion widget style.</para>
            <para></para>
            <para>In Qt, the QAbstractButton base class provides most of the modes
            and other API, and QPushButton provides GUI logic. See QAbstractButton for
            more information about the API.</para>
            <para></para>
            <para>See also QToolButton, QRadioButton, QCheckBox, and GUI Design
            Handbook: Push Button.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QPushButton.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a push button with no text and a parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPushButton.#ctor(System.String,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a push button with the parent parent and the text
            text.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPushButton.#ctor(QtGui.QIcon,System.String,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a push button with an icon and a text, and a
            parent.</para>
            <para>Note that you can also pass a QPixmap object as an icon (thanks
            to the implicit type conversion provided by C++).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPushButton.ShowMenu">
            <summary>
            <para>Shows (pops up) the associated popup menu. If there is no such
            menu, this function does nothing. This function does not return until the
            popup menu has been closed by the user.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPushButton.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPushButton.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPushButton.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPushButton.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPushButton.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPushButton.InitStyleOption(QtWidgets.QStyleOptionButton)">
            <summary>
            <para>Initialize option with the values from this QPushButton. This
            method is useful for subclasses when they need a QStyleOptionButton, but
            don't want to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QPushButton.PaintEvent">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPushButton.AutoDefault">
            <summary>
            <para>This property holds whether the push button is an auto default
            button.</para>
            <para>If this property is set to true then the push button is an auto
            default button.</para>
            <para>In some GUI styles a default button is drawn with an extra frame
            around it, up to 3 pixels or more. Qt automatically keeps this space free
            around auto-default buttons, i.e., auto-default buttons may have a slightly
            larger size hint.</para>
            <para>This property's default is true for buttons that have a QDialog
            parent; otherwise it defaults to false.</para>
            <para>See the default property for details of how default and
            auto-default interact.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPushButton.Default">
            <summary>
            <para>This property holds whether the push button is the default
            button.</para>
            <para>Default and autodefault buttons decide what happens when the user
            presses enter in a dialog.</para>
            <para>A button with this property set to true (i.e., the dialog's
            default button,) will automatically be pressed when the user presses enter,
            with one exception: if an autoDefault button currently has focus, the
            autoDefault button is pressed. When the dialog has autoDefault buttons but
            no default button, pressing enter will press either the autoDefault button
            that currently has focus, or if no button has focus, the next autoDefault
            button in the focus chain.</para>
            <para>In a dialog, only one push button at a time can be the default
            button. This button is then displayed with an additional frame (depending
            on the GUI style).</para>
            <para>The default button behavior is provided only in dialogs. Buttons
            can always be clicked from the keyboard by pressing Spacebar when the
            button has focus.</para>
            <para>If the default property is set to false on the current default
            button while the dialog is visible, a new default will automatically be
            assigned the next time a push button in the dialog receives focus.</para>
            <para>This property's default is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPushButton.Menu">
            <summary>
            <para>Returns the button's associated popup menu or 0 if no popup menu
            has been set.</para>
            <para>See also setMenu().</para>
            <para></para>
            <para>Associates the popup menu menu with this push button. This turns
            the button into a menu button, which in some styles will produce a small
            triangle to the right of the button's text.</para>
            <para>Ownership of the menu is not transferred to the push
            button.</para>
            <para></para>
            <para>A push button with popup menus shown in the Fusion widget
            style.</para>
            <para>See also menu().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPushButton.Flat">
            <summary>
            <para>This property holds whether the button border is raised.</para>
            <para>This property's default is false. If this property is set, most
            styles will not paint the button background unless the button is being
            pressed. setAutoFillBackground() can be used to ensure that the background
            is filled using the QPalette::Button brush.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPushButton.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPushButton.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QCommandLinkButton">
            <summary>
            <para>The QCommandLinkButton widget provides a Vista style command link
            button.</para>
            </summary>
            <remarks>
            <para>The command link is a new control that was introduced by Windows
            Vista. It's intended use is similar to that of a radio button in that it is
            used to choose between a set of mutually exclusive options. Command link
            buttons should not be used by themselves but rather as an alternative to
            radio buttons in Wizards and dialogs and makes pressing the
            &quot;next&quot; button redundant. The appearance is generally similar to
            that of a flat pushbutton, but it allows for a descriptive text in addition
            to the normal button text. By default it will also carry an arrow icon,
            indicating that pressing the control will open another window or
            page.</para>
            <para></para>
            <para>See also QPushButton and QRadioButton.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QCommandLinkButton.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a command link with no text and a parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommandLinkButton.#ctor(System.String,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a command link with the parent parent and the text
            text.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommandLinkButton.#ctor(System.String,System.String,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a command link with a text, a description, and a
            parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommandLinkButton.HeightForWidth(System.Int32)">
            <summary>
            <para>Reimplemented from QWidget::heightForWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommandLinkButton.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QCommandLinkButton.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCommandLinkButton.Description">
            <summary>
            <para>This property holds a descriptive label to complement the button
            text.</para>
            <para>Setting this property will set a descriptive text on the button,
            complementing the text label. This will usually be displayed in a smaller
            font than the primary text.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCommandLinkButton.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QCommandLinkButton.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:QtWidgets.QDateTimeEdit" -->
        <member name="M:QtWidgets.QDateTimeEdit.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty date time editor with a parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.#ctor(QtCore.QDateTime,QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty date time editor with a parent. The value is
            set to datetime.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.#ctor(QtCore.QDate,QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty date time editor with a parent. The value is
            set to date.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.#ctor(QtCore.QTime,QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty date time editor with a parent. The value is
            set to time.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.ClearMinimumDateTime">
            <summary>
            <para>This property holds the minimum datetime of the date time
            edit.</para>
            <para>When setting this property the maximumDateTime() is adjusted if
            necessary to ensure that the range remains valid. If the datetime is not a
            valid QDateTime object, this function does nothing.</para>
            <para>The default minimumDateTime can be restored with
            clearMinimumDateTime()</para>
            <para>By default, this property contains a date that refers to
            September 14, 1752 and a time of 00:00:00 and 0 milliseconds.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also maximumDateTime(), minimumTime(), maximumTime(),
            minimumDate(), maximumDate(), setDateTimeRange(), setDateRange(),
            setTimeRange(), clearMaximumDateTime(), clearMinimumDate(),
            clearMaximumDate(), clearMinimumTime(), and clearMaximumTime().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.ClearMaximumDateTime">
            <summary>
            <para>This property holds the maximum datetime of the date time
            edit.</para>
            <para>When setting this property the minimumDateTime() is adjusted if
            necessary to ensure that the range remains valid. If the datetime is not a
            valid QDateTime object, this function does nothing.</para>
            <para>The default maximumDateTime can be restored with
            clearMaximumDateTime().</para>
            <para>By default, this property contains a date that refers to 31
            December, 7999 and a time of 23:59:59 and 999 milliseconds.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also minimumDateTime(), minimumTime(), maximumTime(),
            minimumDate(), maximumDate(), setDateTimeRange(), setDateRange(),
            setTimeRange(), clearMinimumDateTime(), clearMinimumDate(),
            clearMaximumDate(), clearMinimumTime(), and clearMaximumTime().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.SetDateTimeRange(QtCore.QDateTime,QtCore.QDateTime)">
            <summary>
            <para>Convenience function to set minimum and maximum date time with
            one function call.</para>
            <para>setDateTimeRange(min, max);</para>
            <para>is analogous to:</para>
            <para>setMinimumDateTime(min);</para>
            <para>setMaximumDateTime(max);</para>
            <para>If either min or max are not valid, this function does
            nothing.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setMinimumDate(), maximumDate(), setMaximumDate(),
            clearMinimumDate(), setMinimumTime(), maximumTime(), setMaximumTime(),
            clearMinimumTime(), and QDateTime::isValid().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.ClearMinimumDate">
            <summary>
            <para>This property holds the minimum date of the date time
            edit.</para>
            <para>When setting this property the maximumDate is adjusted if
            necessary, to ensure that the range remains valid. If the date is not a
            valid QDate object, this function does nothing.</para>
            <para>By default, this property contains a date that refers to
            September 14, 1752. The minimum date must be at least the first day in year
            100, otherwise setMinimumDate() has no effect.</para>
            <para>See also minimumTime(), maximumTime(), and setDateRange().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.ClearMaximumDate">
            <summary>
            <para>This property holds the maximum date of the date time
            edit.</para>
            <para>When setting this property the minimumDate is adjusted if
            necessary to ensure that the range remains valid. If the date is not a
            valid QDate object, this function does nothing.</para>
            <para>By default, this property contains a date that refers to December
            31, 7999.</para>
            <para>See also minimumDate, minimumTime, maximumTime, and
            setDateRange().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.SetDateRange(QtCore.QDate,QtCore.QDate)">
            <summary>
            <para>Convenience function to set minimum and maximum date with one
            function call.</para>
            <para>setDateRange(min, max);</para>
            <para>is analogous to:</para>
            <para>setMinimumDate(min);</para>
            <para>setMaximumDate(max);</para>
            <para>If either min or max are not valid, this function does
            nothing.</para>
            <para>See also setMinimumDate(), maximumDate(), setMaximumDate(),
            clearMinimumDate(), setMinimumTime(), maximumTime(), setMaximumTime(),
            clearMinimumTime(), and QDate::isValid().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.ClearMinimumTime">
            <summary>
            <para>This property holds the minimum time of the date time
            edit.</para>
            <para>When setting this property the maximumTime is adjusted if
            necessary, to ensure that the range remains valid. If the time is not a
            valid QTime object, this function does nothing.</para>
            <para>By default, this property contains a time of 00:00:00 and 0
            milliseconds.</para>
            <para>See also maximumTime, minimumDate, maximumDate, and
            setTimeRange().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.ClearMaximumTime">
            <summary>
            <para>This property holds the maximum time of the date time
            edit.</para>
            <para>When setting this property, the minimumTime is adjusted if
            necessary to ensure that the range remains valid. If the time is not a
            valid QTime object, this function does nothing.</para>
            <para>By default, this property contains a time of 23:59:59 and 999
            milliseconds.</para>
            <para>See also minimumTime, minimumDate, maximumDate, and
            setTimeRange().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.SetTimeRange(QtCore.QTime,QtCore.QTime)">
            <summary>
            <para>Convenience function to set minimum and maximum time with one
            function call.</para>
            <para>setTimeRange(min, max);</para>
            <para>is analogous to:</para>
            <para>setMinimumTime(min);</para>
            <para>setMaximumTime(max);</para>
            <para>If either min or max are not valid, this function does
            nothing.</para>
            <para>See also setMinimumDate(), maximumDate(), setMaximumDate(),
            clearMinimumDate(), setMinimumTime(), maximumTime(), setMaximumTime(),
            clearMinimumTime(), and QTime::isValid().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.SectionAt(System.Int32)">
            <summary>
            <para>Returns the Section at index.</para>
            <para>If the format is 'yyyy/MM/dd', sectionAt(0) returns YearSection,
            sectionAt(1) returns MonthSection, and sectionAt(2) returns
            YearSection,</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.SetSelectedSection(QtWidgets.QDateTimeEdit.Section)">
            <summary>
            <para>Selects section. If section doesn't exist in the currently
            displayed sections, this function does nothing. If section is NoSection,
            this function will unselect all text in the editor. Otherwise, this
            function will move the cursor and the current section to the selected
            section.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also currentSection().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.SectionText(QtWidgets.QDateTimeEdit.Section)">
            <summary>
            <para>Returns the text from the given section.</para>
            <para>See also currentSection().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.Clear">
            <summary>
            <para>Reimplemented from QAbstractSpinBox::clear().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.StepBy(System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractSpinBox::stepBy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.OnWheelEvent(QtGui.QWheelEvent)">
            <summary>
            <para>Reimplemented from QWidget::wheelEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.FocusNextPrevChild(System.Boolean)">
            <summary>
            <para>Reimplemented from QWidget::focusNextPrevChild().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.Validate(System.String,System.Int32@)">
            <summary>
            <para>Reimplemented from QAbstractSpinBox::validate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.Fixup(System.String)">
            <summary>
            <para>Reimplemented from QAbstractSpinBox::fixup().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.DateTimeFromText(System.String)">
            <summary>
            <para>Returns an appropriate datetime for the given text.</para>
            <para>This virtual function is used by the datetime edit whenever it
            needs to interpret text entered by the user as a value.</para>
            <para>See also textFromDateTime() and validate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.TextFromDateTime(QtCore.QDateTime)">
            <summary>
            <para>This virtual function is used by the date time edit whenever it
            needs to display dateTime.</para>
            <para>If you reimplement this, you may also need to reimplement
            validate().</para>
            <para>See also dateTimeFromText() and validate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateTimeEdit.InitStyleOption(QtWidgets.QStyleOptionSpinBox)">
            <summary>
            <para>Initialize option with the values from this QDataTimeEdit. This
            method is useful for subclasses when they need a QStyleOptionSpinBox, but
            don't want to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDateTimeEdit.DateTimeChanged">
            <summary>
            <para>This property holds the QDateTime that is set in the QDateTimeEdit.</para>
            <para>When setting this property the timespec of the QDateTimeEdit remains the same and the timespec of the new QDateTime is ignored.</para>
            <para>By default, this property contains a date that refers to January 1, 2000 and a time of 00:00:00 and 0 milliseconds.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QDateTime 	dateTime() const</para>
            <para> void 	setDateTime(const QDateTime &amp; dateTime)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	dateTimeChanged(const QDateTime &amp; datetime)</para>
            <para></para>
            <para>See also date and time.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDateTimeEdit.TimeChanged">
            <summary>
            <para>This property holds the QTime that is set in the widget.</para>
            <para>By default, this property contains a time of 00:00:00 and 0 milliseconds.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QTime 	time() const</para>
            <para> void 	setTime(const QTime &amp; time)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	timeChanged(const QTime &amp; time)</para>
            <para></para>
            <para>See also date and dateTime.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDateTimeEdit.DateChanged">
            <summary>
            <para>This property holds the QDate that is set in the widget.</para>
            <para>By default, this property contains a date that refers to January 1, 2000.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QDate 	date() const</para>
            <para> void 	setDate(const QDate &amp; date)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	dateChanged(const QDate &amp; date)</para>
            <para></para>
            <para>See also time and dateTime.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.MinimumDateTime">
            <summary>
            <para>This property holds the minimum datetime of the date time
            edit.</para>
            <para>When setting this property the maximumDateTime() is adjusted if
            necessary to ensure that the range remains valid. If the datetime is not a
            valid QDateTime object, this function does nothing.</para>
            <para>The default minimumDateTime can be restored with
            clearMinimumDateTime()</para>
            <para>By default, this property contains a date that refers to
            September 14, 1752 and a time of 00:00:00 and 0 milliseconds.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also maximumDateTime(), minimumTime(), maximumTime(),
            minimumDate(), maximumDate(), setDateTimeRange(), setDateRange(),
            setTimeRange(), clearMaximumDateTime(), clearMinimumDate(),
            clearMaximumDate(), clearMinimumTime(), and clearMaximumTime().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.MaximumDateTime">
            <summary>
            <para>This property holds the maximum datetime of the date time
            edit.</para>
            <para>When setting this property the minimumDateTime() is adjusted if
            necessary to ensure that the range remains valid. If the datetime is not a
            valid QDateTime object, this function does nothing.</para>
            <para>The default maximumDateTime can be restored with
            clearMaximumDateTime().</para>
            <para>By default, this property contains a date that refers to 31
            December, 7999 and a time of 23:59:59 and 999 milliseconds.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also minimumDateTime(), minimumTime(), maximumTime(),
            minimumDate(), maximumDate(), setDateTimeRange(), setDateRange(),
            setTimeRange(), clearMinimumDateTime(), clearMinimumDate(),
            clearMaximumDate(), clearMinimumTime(), and clearMaximumTime().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.MinimumDate">
            <summary>
            <para>This property holds the minimum date of the date time
            edit.</para>
            <para>When setting this property the maximumDate is adjusted if
            necessary, to ensure that the range remains valid. If the date is not a
            valid QDate object, this function does nothing.</para>
            <para>By default, this property contains a date that refers to
            September 14, 1752. The minimum date must be at least the first day in year
            100, otherwise setMinimumDate() has no effect.</para>
            <para>See also minimumTime(), maximumTime(), and setDateRange().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.MaximumDate">
            <summary>
            <para>This property holds the maximum date of the date time
            edit.</para>
            <para>When setting this property the minimumDate is adjusted if
            necessary to ensure that the range remains valid. If the date is not a
            valid QDate object, this function does nothing.</para>
            <para>By default, this property contains a date that refers to December
            31, 7999.</para>
            <para>See also minimumDate, minimumTime, maximumTime, and
            setDateRange().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.MinimumTime">
            <summary>
            <para>This property holds the minimum time of the date time
            edit.</para>
            <para>When setting this property the maximumTime is adjusted if
            necessary, to ensure that the range remains valid. If the time is not a
            valid QTime object, this function does nothing.</para>
            <para>By default, this property contains a time of 00:00:00 and 0
            milliseconds.</para>
            <para>See also maximumTime, minimumDate, maximumDate, and
            setTimeRange().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.MaximumTime">
            <summary>
            <para>This property holds the maximum time of the date time
            edit.</para>
            <para>When setting this property, the minimumTime is adjusted if
            necessary to ensure that the range remains valid. If the time is not a
            valid QTime object, this function does nothing.</para>
            <para>By default, this property contains a time of 23:59:59 and 999
            milliseconds.</para>
            <para>See also minimumTime, minimumDate, maximumDate, and
            setTimeRange().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.CurrentSection">
            <summary>
            <para>This property holds the current section of the spinbox
            setCurrentSection().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.CurrentSectionIndex">
            <summary>
            <para>This property holds the current section index of the
            spinbox.</para>
            <para>If the format is 'yyyy/MM/dd', the displayText is '2001/05/21',
            and the cursorPosition is 5, currentSectionIndex returns 1. If the
            cursorPosition is 3, currentSectionIndex is 0, and so on.</para>
            <para>setCurrentSection()</para>
            <para>This property was introduced in  Qt 4.3.</para>
            <para>See also currentSection().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.CalendarWidget">
            <summary>
            <para>Returns the calendar widget for the editor if calendarPopup is
            set to true and (sections() &amp; DateSections_Mask) != 0.</para>
            <para>This function creates and returns a calendar widget if none has
            been set.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setCalendarWidget().</para>
            <para></para>
            <para>Sets the given calendarWidget as the widget to be used for the
            calendar pop-up. The editor does not automatically take ownership of the
            calendar widget.</para>
            <para>Note: calendarPopup must be set to true before setting the
            calendar widget.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also calendarWidget() and calendarPopup.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.DisplayFormat">
            <summary>
            <para>This property holds the format used to display the time/date of
            the date time edit.</para>
            <para>This format is described in QDateTime::toString() and
            QDateTime::fromString()</para>
            <para>Example format strings (assuming that the date is 2nd of July
            1969):</para>
            <para></para>
            <para> FormatResult</para>
            <para>dd.MM.yyyy	02.07.1969</para>
            <para>MMM d yy	Jul 2 69</para>
            <para>MMMM d yy	July 2 69</para>
            <para></para>
            <para>Note that if you specify a two digit year, it will be interpreted
            to be in the century in which the date time edit was initialized. The
            default century is the 21 (2000-2099).</para>
            <para>If you specify an invalid format the format will not be
            set.</para>
            <para>See also QDateTime::toString() and displayedSections().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.CalendarPopup">
            <summary>
            <para>This property holds the current calendar pop-up show mode.</para>
            <para>The calendar pop-up will be shown upon clicking the arrow button.
            This property is valid only if there is a valid date display format.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also setDisplayFormat().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.TimeSpec">
            <summary>
            <para>This property holds the current timespec used by the date time
            edit.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.DateTime">
            <summary>
            <para>This property holds the QDateTime that is set in the
            QDateTimeEdit.</para>
            <para>When setting this property the timespec of the QDateTimeEdit
            remains the same and the timespec of the new QDateTime is ignored.</para>
            <para>By default, this property contains a date that refers to January
            1, 2000 and a time of 00:00:00 and 0 milliseconds.</para>
            <para>See also date and time.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.Date">
            <summary>
            <para>This property holds the QDate that is set in the widget.</para>
            <para>By default, this property contains a date that refers to January
            1, 2000.</para>
            <para>See also time and dateTime.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.Time">
            <summary>
            <para>This property holds the QTime that is set in the widget.</para>
            <para>By default, this property contains a time of 00:00:00 and 0
            milliseconds.</para>
            <para>See also date and dateTime.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.StepEnabled">
            <summary>
            <para>Reimplemented from QAbstractSpinBox::stepEnabled().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.DisplayedSections">
            <summary>
            <para>This property holds the currently displayed fields of the date
            time edit.</para>
            <para>Returns a bit set of the displayed sections for this format.
            setDisplayFormat(), displayFormat()</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDateTimeEdit.SectionCount">
            <summary>
            <para>This property holds the number of sections displayed. If the
            format is 'yyyy/yy/yyyy', sectionCount returns 3.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QDateTimeEdit.Section">
            <summary>
            <para>The Sections type is a typedef for QFlags&lt;Section&gt;. It
            stores an OR combination of Section values.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTimeEdit">
            <summary>
            <para>The QTimeEdit class provides a widget for editing times based on
            the QDateTimeEdit widget.</para>
            </summary>
            <remarks>
            <para>Many of the properties and functions provided by QTimeEdit are
            implemented in QDateTimeEdit. These are the relevant properties of this
            class:</para>
            <para></para>
            <para>time holds the time displayed by the widget.</para>
            <para>minimumTime defines the minimum (earliest) time that can be set
            by the user.</para>
            <para>maximumTime defines the maximum (latest) time that can be set by
            the user.</para>
            <para>displayFormat contains a string that is used to format the time
            displayed in the widget.</para>
            <para></para>
            <para></para>
            <para> 	A time editing widget shown in the Windows Vista widget
            style.</para>
            <para>	A time editing widget shown in the Macintosh widget
            style.</para>
            <para>	A time editing widget shown in the Fusion widget style.</para>
            <para></para>
            <para></para>
            <para>See also QDateEdit and QDateTimeEdit.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QTimeEdit.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty time editor with a parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTimeEdit.#ctor(QtCore.QTime,QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty time editor with a parent. The time is set to
            time.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTimeEdit.QTimeEditParent">
            <summary>
            <para>Constructs an empty time editor with a parent.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QDateEdit">
            <summary>
            <para>The QDateEdit class provides a widget for editing dates based on
            the QDateTimeEdit widget.</para>
            </summary>
            <remarks>
            <para>Many of the properties and functions provided by QDateEdit are
            implemented in QDateTimeEdit. These are the relevant properties of this
            class:</para>
            <para></para>
            <para>date holds the date displayed by the widget.</para>
            <para>minimumDate defines the minimum (earliest) date that can be set
            by the user.</para>
            <para>maximumDate defines the maximum (latest) date that can be set by
            the user.</para>
            <para>displayFormat contains a string that is used to format the date
            displayed in the widget.</para>
            <para></para>
            <para></para>
            <para> 	A date editing widget shown in the Windows Vista widget
            style.</para>
            <para>	A date editing widget shown in the Macintosh widget
            style.</para>
            <para>	A date editing widget shown in the Fusion widget style.</para>
            <para></para>
            <para></para>
            <para>See also QTimeEdit and QDateTimeEdit.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QDateEdit.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty date editor with a parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDateEdit.#ctor(QtCore.QDate,QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty date editor with a parent. The date is set to
            date.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDateEdit.QDateEditParent">
            <summary>
            <para>Constructs an empty date editor with a parent.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QDial">
            <summary>
            <para>The QDial class provides a rounded range control (like a
            speedometer or potentiometer).</para>
            </summary>
            <remarks>
            <para>QDial is used when the user needs to control a value within a
            program-definable range, and the range either wraps around (for example,
            with angles measured from 0 to 359 degrees) or the dialog layout needs a
            square widget.</para>
            <para>Since QDial inherits from QAbstractSlider, the dial behaves in a
            similar way to a slider. When wrapping() is false (the default setting)
            there is no real difference between a slider and a dial. They both share
            the same signals, slots and member functions. Which one you use depends on
            the expectations of your users and on the type of application.</para>
            <para>The dial initially emits valueChanged() signals continuously
            while the slider is being moved; you can make it emit the signal less often
            by disabling the tracking property. The sliderMoved() signal is emitted
            continuously even when tracking is disabled.</para>
            <para>The dial also emits sliderPressed() and sliderReleased() signals
            when the mouse button is pressed and released. Note that the dial's value
            can change without these signals being emitted since the keyboard and wheel
            can also be used to change the value.</para>
            <para>Unlike the slider, QDial attempts to draw a &quot;nice&quot;
            number of notches rather than one per line step. If possible, the number of
            notches drawn is one per line step, but if there aren't enough pixels to
            draw every one, QDial will skip notches to try and draw a uniform set (e.g.
            by drawing every second or third notch).</para>
            <para>Like the slider, the dial makes the QAbstractSlider functions
            setValue(), addLine(), subtractLine(), addPage() and subtractPage()
            available as slots.</para>
            <para>The dial's keyboard interface is fairly simple: The left/up and
            right/down arrow keys adjust the dial's value by the defined singleStep,
            Page Up and Page Down by the defined pageStep, and the Home and End keys
            set the value to the defined minimum and maximum values.</para>
            <para>If you are using the mouse wheel to adjust the dial, the
            increment value is determined by the lesser value of wheelScrollLines
            multipled by singleStep, and pageStep.</para>
            <para></para>
            <para> 	</para>
            <para>Dials shown in various widget styles (from left to right):
            Fusion, Windows Vista, Macintosh.</para>
            <para></para>
            <para></para>
            <para>See also QScrollBar, QSpinBox, QSlider, GUI Design Handbook:
            Slider, and Sliders Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QDial.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a dial.</para>
            <para>The parent argument is sent to the QAbstractSlider
            constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDial.SetNotchTarget(System.Double)">
            <summary>
            <para>This property holds the target number of pixels between
            notches.</para>
            <para>The notch target is the number of pixels QDial attempts to put
            between each notch.</para>
            <para>The actual size may differ from the target size.</para>
            <para>The default notch target is 3.7 pixels.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDial.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDial.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDial.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDial.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDial.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDial.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDial.sliderChange(QtWidgets.QAbstractSlider.SliderChange)">
            <summary>
            <para>Reimplemented from QAbstractSlider::sliderChange().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDial.InitStyleOption(QtWidgets.QStyleOptionSlider)">
            <summary>
            <para>Initialize option with the values from this QDial. This method is
            useful for subclasses when they need a QStyleOptionSlider, but don't want
            to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDial.NotchesVisible">
            <summary>
            <para>This property holds whether the notches are shown.</para>
            <para>If the property is true, a series of notches are drawn around the
            dial to indicate the range of values available; otherwise no notches are
            shown.</para>
            <para>By default, this property is disabled.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDial.Wrapping">
            <summary>
            <para>This property holds whether wrapping is enabled.</para>
            <para>If true, wrapping is enabled; otherwise some space is inserted at
            the bottom of the dial to separate the ends of the range of valid
            values.</para>
            <para>If enabled, the arrow can be oriented at any angle on the dial.
            If disabled, the arrow will be restricted to the upper part of the dial; if
            it is rotated into the space at the bottom of the dial, it will be clamped
            to the closest end of the valid range of values.</para>
            <para>By default this property is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDial.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDial.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDial.NotchSize">
            <summary>
            <para>This property holds the current notch size.</para>
            <para>The notch size is in range control units, not pixels, and if
            possible it is a multiple of singleStep() that results in an on-screen
            notch size near notchTarget().</para>
            <para>By default, this property has a value of 1.</para>
            <para>See also notchTarget() and singleStep().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDial.NotchTarget">
            <summary>
            <para>This property holds the target number of pixels between
            notches.</para>
            <para>The notch target is the number of pixels QDial attempts to put
            between each notch.</para>
            <para>The actual size may differ from the target size.</para>
            <para>The default notch target is 3.7 pixels.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QDialogButtonBox">
            <summary>
            <para>The QDialogButtonBox class is a widget that presents buttons in a
            layout that is appropriate to the current widget style.</para>
            </summary>
            <remarks>
            <para>Dialogs and message boxes typically present buttons in a layout
            that conforms to the interface guidelines for that platform. Invariably,
            different platforms have different layouts for their dialogs.
            QDialogButtonBox allows a developer to add buttons to it and will
            automatically use the appropriate layout for the user's desktop
            environment.</para>
            <para>Most buttons for a dialog follow certain roles. Such roles
            include:</para>
            <para></para>
            <para>Accepting or rejecting the dialog.</para>
            <para>Asking for help.</para>
            <para>Performing actions on the dialog itself (such as resetting fields
            or applying changes).</para>
            <para></para>
            <para>There can also be alternate ways of dismissing the dialog which
            may cause destructive results.</para>
            <para>Most dialogs have buttons that can almost be considered standard
            (e.g. OK and Cancel buttons). It is sometimes convenient to create these
            buttons in a standard way.</para>
            <para>There are a couple ways of using QDialogButtonBox. One ways is to
            create the buttons (or button texts) yourself and add them to the button
            box, specifying their role.</para>
            <para>    findButton = new
            QPushButton(tr(&quot;&amp;Find&quot;));</para>
            <para>    findButton-&gt;setDefault(true);</para>
            <para></para>
            <para>    moreButton = new
            QPushButton(tr(&quot;&amp;More&quot;));</para>
            <para>    moreButton-&gt;setCheckable(true);</para>
            <para>    moreButton-&gt;setAutoDefault(false);</para>
            <para>Alternatively, QDialogButtonBox provides several standard buttons
            (e.g. OK, Cancel, Save) that you can use. They exist as flags so you can OR
            them together in the constructor.</para>
            <para>    buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok</para>
            <para>                                     |
            QDialogButtonBox::Cancel);</para>
            <para></para>
            <para>    connect(buttonBox, SIGNAL(accepted()), this,
            SLOT(accept()));</para>
            <para>    connect(buttonBox, SIGNAL(rejected()), this,
            SLOT(reject()));</para>
            <para>You can mix and match normal buttons and standard buttons.</para>
            <para>Currently the buttons are laid out in the following way if the
            button box is horizontal:</para>
            <para></para>
            <para> 	Button box laid out in horizontal GnomeLayout</para>
            <para>	Button box laid out in horizontal KdeLayout</para>
            <para>	Button box laid out in horizontal MacLayout</para>
            <para>	Button box laid out in horizontal WinLayout</para>
            <para></para>
            <para>The buttons are laid out the following way if the button box is
            vertical:</para>
            <para></para>
            <para> GnomeLayout	KdeLayout	MacLayout	WinLayout</para>
            <para>	</para>
            <para></para>
            <para>Additionally, button boxes that contain only buttons with
            ActionRole or HelpRole can be considered modeless and have an alternate
            look on Mac OS X:</para>
            <para></para>
            <para> modeless horizontal MacLayout	</para>
            <para>modeless vertical MacLayout	</para>
            <para></para>
            <para>When a button is clicked in the button box, the clicked() signal
            is emitted for the actual button is that is pressed. For convenience, if
            the button has an AcceptRole, RejectRole, or HelpRole, the accepted(),
            rejected(), or helpRequested() signals are emitted respectively.</para>
            <para>If you want a specific button to be default you need to call
            QPushButton::setDefault() on it yourself. However, if there is no default
            button set and to preserve which button is the default button across
            platforms when using the QPushButton::autoDefault property, the first push
            button with the accept role is made the default button when the
            QDialogButtonBox is shown,</para>
            <para></para>
            <para>See also QMessageBox, QPushButton, and QDialog.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QDialogButtonBox.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty, horizontal button box with the given
            parent.</para>
            <para>See also orientation and addButton().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialogButtonBox.#ctor(QtCore.Qt.Orientation,QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty button box with the given orientation and
            parent.</para>
            <para>See also orientation and addButton().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialogButtonBox.#ctor(QtWidgets.QDialogButtonBox.StandardButton,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a horizontal button box with the given parent,
            containing the standard buttons specified by buttons.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also orientation and addButton().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialogButtonBox.#ctor(QtWidgets.QDialogButtonBox.StandardButton,QtCore.Qt.Orientation,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a button box with the given orientation and parent,
            containing the standard buttons specified by buttons.</para>
            <para>See also orientation and addButton().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialogButtonBox.AddButton(QtWidgets.QAbstractButton,QtWidgets.QDialogButtonBox.ButtonRole)">
            <summary>
            <para>Adds the given button to the button box with the specified role.
            If the role is invalid, the button is not added.</para>
            <para>If the button has already been added, it is removed and added
            again with the new role.</para>
            <para>Note: The button box takes ownership of the button.</para>
            <para>See also removeButton() and clear().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialogButtonBox.AddButton(System.String,QtWidgets.QDialogButtonBox.ButtonRole)">
            <summary>
            <para>Creates a push button with the given text, adds it to the button
            box for the specified role, and returns the corresponding push button. If
            role is invalid, no button is created, and zero is returned.</para>
            <para>See also removeButton() and clear().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialogButtonBox.AddButton(QtWidgets.QDialogButtonBox.StandardButton)">
            <summary>
            <para>Adds a standard button to the button box if it is valid to do so,
            and returns a push button. If button is invalid, it is not added to the
            button box, and zero is returned.</para>
            <para>See also removeButton() and clear().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialogButtonBox.RemoveButton(QtWidgets.QAbstractButton)">
            <summary>
            <para>Removes button from the button box without deleting it and sets
            its parent to zero.</para>
            <para>See also clear(), buttons(), and addButton().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialogButtonBox.Clear">
            <summary>
            <para>Clears the button box, deleting all buttons within it.</para>
            <para>See also removeButton() and addButton().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialogButtonBox.buttonRole(QtWidgets.QAbstractButton)">
            <summary>
            <para>Returns the button role for the specified button. This function
            returns InvalidRole if button is 0 or has not been added to the button
            box.</para>
            <para>See also buttons() and addButton().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialogButtonBox.standardButton(QtWidgets.QAbstractButton)">
            <summary>
            <para>Returns the standard button enum value corresponding to the given
            button, or NoButton if the given button isn't a standard button.</para>
            <para>See also button(), buttons(), and standardButtons().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialogButtonBox.Button(QtWidgets.QDialogButtonBox.StandardButton)">
            <summary>
            <para>Returns the QPushButton corresponding to the standard button
            which, or 0 if the standard button doesn't exist in this button box.</para>
            <para>See also standardButton(), standardButtons(), and
            buttons().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialogButtonBox.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDialogButtonBox.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDialogButtonBox.Clicked">
            <summary>
            <para>This signal is emitted when a button inside the button box is clicked. The specific button that was pressed is specified by button.</para>
            <para>See also accepted(), rejected(), and helpRequested().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDialogButtonBox.Accepted">
            <summary>
            <para>This signal is emitted when a button inside the button box is clicked, as long as it was defined with the AcceptRole or YesRole.</para>
            <para>See also rejected(), clicked(), and helpRequested().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDialogButtonBox.HelpRequested">
            <summary>
            <para>This signal is emitted when a button inside the button box is clicked, as long as it was defined with the HelpRole.</para>
            <para>See also accepted(), rejected(), and clicked().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDialogButtonBox.Rejected">
            <summary>
            <para>This signal is emitted when a button inside the button box is clicked, as long as it was defined with the RejectRole or NoRole.</para>
            <para>See also accepted(), helpRequested(), and clicked().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDialogButtonBox.Orientation">
            <summary>
            <para>This property holds the orientation of the button box.</para>
            <para>By default, the orientation is horizontal (i.e. the buttons are
            laid out side by side). The possible orientations are Qt::Horizontal and
            Qt::Vertical.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDialogButtonBox.StandardButtons">
            <summary>
            <para>This property holds collection of standard buttons in the button
            box.</para>
            <para>This property controls which standard buttons are used by the
            button box.</para>
            <para>See also addButton().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDialogButtonBox.CenterButtons">
            <summary>
            <para>This property holds whether the buttons in the button box are
            centered.</para>
            <para>By default, this property is false. This behavior is appopriate
            for most types of dialogs. A notable exception is message boxes on most
            platforms (e.g. Windows), where the button box is centered
            horizontally.</para>
            <para>See also QMessageBox.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QDialogButtonBox.ButtonRole">
            <summary>
            <para>This enum describes the roles that can be used to describe
            buttons in the button box. Combinations of these roles are as flags used to
            describe different aspects of their behavior.</para>
            <para>See also StandardButton.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.ButtonRole.InvalidRole">
            <summary>The button is invalid.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.ButtonRole.AcceptRole">
            <summary>Clicking the button causes the dialog to be accepted (e.g. OK).</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.ButtonRole.RejectRole">
            <summary>Clicking the button causes the dialog to be rejected (e.g. Cancel).</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.ButtonRole.DestructiveRole">
            <summary>Clicking the button causes a destructive change (e.g. for Discarding Changes) and closes the dialog.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.ButtonRole.ActionRole">
            <summary>Clicking the button causes changes to the elements within the dialog.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.ButtonRole.HelpRole">
            <summary>The button can be clicked to request help.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.ButtonRole.YesRole">
            <summary>The button is a "Yes"-like button.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.ButtonRole.NoRole">
            <summary>The button is a "No"-like button.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.ButtonRole.ResetRole">
            <summary>The button resets the dialog's fields to default values.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.ButtonRole.ApplyRole">
            <summary>The button applies current changes.</summary>
        </member>
        <member name="T:QtWidgets.QDialogButtonBox.StandardButton">
            <summary>
            <para>These enums describe flags for standard buttons. Each button has
            a defined ButtonRole.</para>
            <para>The StandardButtons type is a typedef for
            QFlags&lt;StandardButton&gt;. It stores an OR combination of StandardButton
            values.</para>
            <para>See also ButtonRole and standardButtons.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.NoButton">
            <summary>An invalid button.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.Ok">
            <summary>An "OK" button defined with the AcceptRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.Save">
            <summary>A "Save" button defined with the AcceptRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.SaveAll">
            <summary>A "Save All" button defined with the AcceptRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.Open">
            <summary>An "Open" button defined with the AcceptRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.Yes">
            <summary>A "Yes" button defined with the YesRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.YesToAll">
            <summary>A "Yes to All" button defined with the YesRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.No">
            <summary>A "No" button defined with the NoRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.NoToAll">
            <summary>A "No to All" button defined with the NoRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.Abort">
            <summary>An "Abort" button defined with the RejectRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.Retry">
            <summary>A "Retry" button defined with the AcceptRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.Ignore">
            <summary>An "Ignore" button defined with the AcceptRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.Close">
            <summary>A "Close" button defined with the RejectRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.Cancel">
            <summary>A "Cancel" button defined with the RejectRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.Discard">
            <summary>A "Discard" or "Don't Save" button, depending on the platform, defined with the DestructiveRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.Help">
            <summary>A "Help" button defined with the HelpRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.Apply">
            <summary>An "Apply" button defined with the ApplyRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.Reset">
            <summary>A "Reset" button defined with the ResetRole.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.StandardButton.RestoreDefaults">
            <summary>A "Restore Defaults" button defined with the ResetRole.</summary>
        </member>
        <member name="T:QtWidgets.QDialogButtonBox.ButtonLayout">
            <summary>
            <para>This enum describes the layout policy to be used when arranging
            the buttons contained in the button box.</para>
            <para>The button layout is specified by the current style. However, on
            the X11 platform, it may be influenced by the desktop environment.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.ButtonLayout.WinLayout">
            <summary>Use a policy appropriate for applications on Windows.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.ButtonLayout.MacLayout">
            <summary>Use a policy appropriate for applications on Mac OS X.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.ButtonLayout.KdeLayout">
            <summary>Use a policy appropriate for applications on KDE.</summary>
        </member>
        <member name="F:QtWidgets.QDialogButtonBox.ButtonLayout.GnomeLayout">
            <summary>Use a policy appropriate for applications on GNOME.</summary>
        </member>
        <member name="T:QtWidgets.QDockWidget">
            <summary>
            <para>The QDockWidget class provides a widget that can be docked inside
            a QMainWindow or floated as a top-level window on the desktop.</para>
            </summary>
            <remarks>
            <para>QDockWidget provides the concept of dock widgets, also know as
            tool palettes or utility windows. Dock windows are secondary windows placed
            in the dock widget area around the central widget in a QMainWindow.</para>
            <para></para>
            <para>Dock windows can be moved inside their current area, moved into
            new areas and floated (e.g., undocked) by the end-user. The QDockWidget API
            allows the programmer to restrict the dock widgets ability to move, float
            and close, as well as the areas in which they can be placed.</para>
            <para></para>
            <para>Appearance</para>
            <para>A QDockWidget consists of a title bar and the content area. The
            title bar displays the dock widgets window title, a float button and a
            close button. Depending on the state of the QDockWidget, the float and
            close buttons may be either disabled or not shown at all.</para>
            <para>The visual appearance of the title bar and buttons is dependent
            on the style in use.</para>
            <para>A QDockWidget acts as a wrapper for its child widget, set with
            setWidget(). Custom size hints, minimum and maximum sizes and size policies
            should be implemented in the child widget. QDockWidget will respect them,
            adjusting its own constraints to include the frame and title. Size
            constraints should not be set on the QDockWidget itself, because they
            change depending on whether it is docked; a docked QDockWidget has no frame
            and a smaller title bar.</para>
            <para></para>
            <para>See also QMainWindow and Dock Widgets Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QDockWidget.#ctor(System.String,QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a QDockWidget with parent parent and window flags
            flags. The dock widget will be placed in the left dock widget area.</para>
            <para>The window title is set to title. This title is used when the
            QDockWidget is docked and undocked. It is also used in the context menu
            provided by QMainWindow.</para>
            <para>See also setWindowTitle().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDockWidget.#ctor(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a QDockWidget with parent parent and window flags
            flags. The dock widget will be placed in the left dock widget area.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDockWidget.IsAreaAllowed(QtCore.Qt.DockWidgetArea)">
            <summary>
            <para>Returns true if this dock widget can be placed in the given area;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDockWidget.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDockWidget.OnCloseEvent(QtGui.QCloseEvent)">
            <summary>
            <para>Reimplemented from QWidget::closeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDockWidget.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDockWidget.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDockWidget.InitStyleOption(QtWidgets.QStyleOptionDockWidget)">
            <summary>
            <para>Initialize option with the values from this QDockWidget. This
            method is useful for subclasses when they need a QStyleOptionDockWidget,
            but don't want to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDockWidget.FeaturesChanged">
            <summary>
            <para>This property holds whether the dock widget is movable, closable, and floatable.</para>
            <para>By default, this property is set to a combination of DockWidgetClosable, DockWidgetMovable and DockWidgetFloatable.</para>
            <para>Access functions:</para>
            <para></para>
            <para> DockWidgetFeatures 	features() const</para>
            <para> void 	setFeatures(DockWidgetFeatures features)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	featuresChanged(QDockWidget::DockWidgetFeatures features)</para>
            <para></para>
            <para>See also DockWidgetFeature.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDockWidget.TopLevelChanged">
            <summary>
            <para>This signal is emitted when the floating property changes. The topLevel parameter is true if the dock widget is now floating; otherwise it is false.</para>
            <para>See also isWindow().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDockWidget.AllowedAreasChanged">
            <summary>
            <para>This property holds areas where the dock widget may be placed.</para>
            <para>The default is Qt::AllDockWidgetAreas.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Qt::DockWidgetAreas 	allowedAreas() const</para>
            <para> void 	setAllowedAreas(Qt::DockWidgetAreas areas)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	allowedAreasChanged(Qt::DockWidgetAreas allowedAreas)</para>
            <para></para>
            <para>See also Qt::DockWidgetArea.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDockWidget.VisibilityChanged">
            <summary>
            <para>This signal is emitted when the dock widget becomes visible (or invisible). This happens when the widget is hidden or shown, as well as when it is docked in a tabbed dock area and its tab becomes selected or unselected.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDockWidget.DockLocationChanged">
            <summary>
            <para>This signal is emitted when the dock widget is moved to another dock area, or is moved to a different location in its current dock area. This happens when the dock widget is moved programmatically or is dragged to a new location by the user.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDockWidget.Widget">
            <summary>
            <para>Returns the widget for the dock widget. This function returns
            zero if the widget has not been set.</para>
            <para>See also setWidget().</para>
            <para></para>
            <para>Sets the widget for the dock widget to widget.</para>
            <para>If the dock widget is visible when widget is added, you must
            show() it explicitly.</para>
            <para>Note that you must add the layout of the widget before you call
            this function; if not, the widget will not be visible.</para>
            <para>See also widget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDockWidget.Features">
            <summary>
            <para>This property holds whether the dock widget is movable, closable,
            and floatable.</para>
            <para>By default, this property is set to a combination of
            DockWidgetClosable, DockWidgetMovable and DockWidgetFloatable.</para>
            <para>See also DockWidgetFeature.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDockWidget.Floating">
            <summary>
            <para>This property holds whether the dock widget is floating.</para>
            <para>A floating dock widget is presented to the user as an independent
            window &quot;on top&quot; of its parent QMainWindow, instead of being
            docked in the QMainWindow.</para>
            <para>By default, this property is true.</para>
            <para>See also isWindow().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDockWidget.AllowedAreas">
            <summary>
            <para>This property holds areas where the dock widget may be
            placed.</para>
            <para>The default is Qt::AllDockWidgetAreas.</para>
            <para>See also Qt::DockWidgetArea.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDockWidget.TitleBarWidget">
            <summary>
            <para>Returns the custom title bar widget set on the QDockWidget, or 0
            if no custom title bar has been set.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setTitleBarWidget().</para>
            <para></para>
            <para>Sets an arbitrary widget as the dock widget's title bar. If
            widget is 0, any custom title bar widget previously set on the dock widget
            is removed, but not deleted, and the default title bar will be used
            instead.</para>
            <para>If a title bar widget is set, QDockWidget will not use native
            window decorations when it is floated.</para>
            <para>Here are some tips for implementing custom title bars:</para>
            <para></para>
            <para>Mouse events that are not explicitly handled by the title bar
            widget must be ignored by calling QMouseEvent::ignore(). These events then
            propagate to the QDockWidget parent, which handles them in the usual
            manner, moving when the title bar is dragged, docking and undocking when it
            is double-clicked, etc.</para>
            <para>When DockWidgetVerticalTitleBar is set on QDockWidget, the title
            bar widget is repositioned accordingly. In resizeEvent(), the title bar
            should check what orientation it should assume:QDockWidget *dockWidget =
            qobject_cast&lt;QDockWidget*&gt;(parentWidget());</para>
            <para>if (dockWidget-&gt;features() &amp;
            QDockWidget::DockWidgetVerticalTitleBar) {</para>
            <para>    // I need to be vertical</para>
            <para>} else {</para>
            <para>    // I need to be horizontal</para>
            <para>}</para>
            <para></para>
            <para>The title bar widget must have a valid QWidget::sizeHint() and
            QWidget::minimumSizeHint(). These functions should take into account the
            current orientation of the title bar.</para>
            <para>It is not possible to remove a title bar from a dock widget.
            However, a similar effect can be achieved by setting a default constructed
            QWidget as the title bar widget.</para>
            <para></para>
            <para>Using qobject_cast() as shown above, the title bar widget has
            full access to its parent QDockWidget. Hence it can perform such operations
            as docking and hiding in response to user actions.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also titleBarWidget() and DockWidgetVerticalTitleBar.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDockWidget.ToggleViewAction">
            <summary>
            <para>Returns a checkable action that can be used to show or close this
            dock widget.</para>
            <para>The action's text is set to the dock widget's window
            title.</para>
            <para>See also QAction::text and QWidget::windowTitle.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QDockWidget.DockWidgetFeature">
            <summary>
            <para>The DockWidgetFeatures type is a typedef for
            QFlags&lt;DockWidgetFeature&gt;. It stores an OR combination of
            DockWidgetFeature values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QDockWidget.DockWidgetFeature.DockWidgetClosable">
            <summary>The dock widget can be closed. On some systems the dock widget always has a close button when it's floating (for example on MacOS 10.5).</summary>
        </member>
        <member name="F:QtWidgets.QDockWidget.DockWidgetFeature.DockWidgetMovable">
            <summary>The dock widget can be moved between docks by the user.</summary>
        </member>
        <member name="F:QtWidgets.QDockWidget.DockWidgetFeature.DockWidgetFloatable">
            <summary>The dock widget can be detached from the main window, and floated as an independent window.</summary>
        </member>
        <member name="F:QtWidgets.QDockWidget.DockWidgetFeature.DockWidgetVerticalTitleBar">
            <summary>The dock widget displays a vertical title bar on its left side. This can be used to increase the amount of vertical space in a QMainWindow.</summary>
        </member>
        <member name="F:QtWidgets.QDockWidget.DockWidgetFeature.AllDockWidgetFeatures">
            <summary>(Deprecated) The dock widget can be closed, moved, and floated. Since new features might be added in future releases, the look and behavior of dock widgets might change if you use this flag. Please specify individual flags instead.</summary>
        </member>
        <member name="F:QtWidgets.QDockWidget.DockWidgetFeature.NoDockWidgetFeatures">
            <summary>The dock widget cannot be closed, moved, or floated.</summary>
        </member>
        <member name="T:QtWidgets.QFocusFrame">
            <summary>
            <para>The QFocusFrame widget provides a focus frame which can be
            outside of a widget's normal paintable area.</para>
            </summary>
            <remarks>
            <para>Normally an application will not need to create its own
            QFocusFrame as QStyle will handle this detail for you. A style writer can
            optionally use a QFocusFrame to have a focus area outside of the widget's
            paintable geometry. In this way space need not be reserved for the widget
            to have focus but only set on a QWidget with QFocusFrame::setWidget. It is,
            however, legal to create your own QFocusFrame on a custom widget and set
            its geometry manually via QWidget::setGeometry however you will not get
            auto-placement when the focused widget changes size or placement.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QFocusFrame.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a QFocusFrame.</para>
            <para>The focus frame will not monitor parent for updates but rather
            can be placed manually or by using QFocusFrame::setWidget. A QFocusFrame
            sets Qt::WA_NoChildEventsForParent attribute; as a result the parent will
            not receive a QEvent::ChildAdded event, this will make it possible to
            manually set the geometry of the QFocusFrame inside of a QSplitter or other
            child event monitoring widget.</para>
            <para>See also QFocusFrame::setWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFocusFrame.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFocusFrame.EventFilter(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::eventFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFocusFrame.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFocusFrame.InitStyleOption(QtWidgets.QStyleOption)">
            <summary>
            <para>Initialize option with the values from this QFocusFrame. This
            method is useful for subclasses when they need a QStyleOption, but don't
            want to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFocusFrame.Widget">
            <summary>
            <para>Returns the currently monitored widget for automatically resize
            and update.</para>
            <para>See also QFocusFrame::setWidget().</para>
            <para></para>
            <para>QFocusFrame will track changes to widget and resize itself
            automatically. If the monitored widget's parent changes, QFocusFrame will
            follow the widget and place itself around the widget automatically. If the
            monitored widget is deleted, QFocusFrame will set it to zero.</para>
            <para>See also QFocusFrame::widget().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QFontComboBox">
            <summary>
            <para>The QFontComboBox widget is a combobox that lets the user select
            a font family.</para>
            </summary>
            <remarks>
            <para>The combobox is populated with an alphabetized list of font
            family names, such as Arial, Helvetica, and Times New Roman. Family names
            are displayed using the actual font when possible. For fonts such as
            Symbol, where the name is not representable in the font itself, a sample of
            the font is displayed next to the family name.</para>
            <para>QFontComboBox is often used in toolbars, in conjunction with a
            QComboBox for controlling the font size and two QToolButtons for bold and
            italic.</para>
            <para>When the user selects a new font, the currentFontChanged() signal
            is emitted in addition to currentIndexChanged().</para>
            <para>Call setWritingSystem() to tell QFontComboBox to show only fonts
            that support a given writing system, and setFontFilters() to filter out
            certain types of fonts as e.g. non scalable fonts or monospaced
            fonts.</para>
            <para></para>
            <para></para>
            <para>See also QComboBox, QFont, QFontInfo, QFontMetrics,
            QFontDatabase, and Character Map Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QFontComboBox.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a font combobox with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QFontComboBox.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QFontComboBox.CurrentFontChanged">
            <summary>
            <para>This property holds the currently selected font.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QFont 	currentFont() const</para>
            <para> void 	setCurrentFont(const QFont &amp; font)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	currentFontChanged(const QFont &amp; font)</para>
            <para></para>
            <para>See also currentIndex and currentText.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFontComboBox.WritingSystem">
            <summary>
            <para>This property holds the writing system that serves as a filter
            for the combobox.</para>
            <para>If script is QFontDatabase::Any (the default), all fonts are
            listed.</para>
            <para>See also fontFilters.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFontComboBox.FontFilters">
            <summary>
            <para>This property holds the filter for the combobox.</para>
            <para>By default, all fonts are listed.</para>
            <para>See also writingSystem.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFontComboBox.CurrentFont">
            <summary>
            <para>This property holds the currently selected font.</para>
            <para>See also currentIndex and currentText.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QFontComboBox.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QFontComboBox.FontFilter">
            <summary>
            <para>This enum can be used to only show certain types of fonts in the
            font combo box.</para>
            <para>The FontFilters type is a typedef for QFlags&lt;FontFilter&gt;.
            It stores an OR combination of FontFilter values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QFontComboBox.FontFilter.AllFonts">
            <summary>Show all fonts</summary>
        </member>
        <member name="F:QtWidgets.QFontComboBox.FontFilter.ScalableFonts">
            <summary>Show scalable fonts</summary>
        </member>
        <member name="F:QtWidgets.QFontComboBox.FontFilter.NonScalableFonts">
            <summary>Show non scalable fonts</summary>
        </member>
        <member name="F:QtWidgets.QFontComboBox.FontFilter.MonospacedFonts">
            <summary>Show monospaced fonts</summary>
        </member>
        <member name="F:QtWidgets.QFontComboBox.FontFilter.ProportionalFonts">
            <summary>Show proportional fonts</summary>
        </member>
        <member name="T:QtWidgets.QGroupBox">
            <summary>
            <para>The QGroupBox widget provides a group box frame with a
            title.</para>
            </summary>
            <remarks>
            <para>A group box provides a frame, a title on top, a keyboard
            shortcut, and displays various other widgets inside itself. The keyboard
            shortcut moves keyboard focus to one of the group box's child
            widgets.</para>
            <para>QGroupBox also lets you set the title (normally set in the
            constructor) and the title's alignment. Group boxes can be checkable. Child
            widgets in checkable group boxes are enabled or disabled depending on
            whether or not the group box is checked.</para>
            <para>You can minimize the space consumption of a group box by enabling
            the flat property. In most styles, enabling this property results in the
            removal of the left, right and bottom edges of the frame.</para>
            <para>QGroupBox doesn't automatically lay out the child widgets (which
            are often QCheckBoxes or QRadioButtons but can be any widgets). The
            following example shows how we can set up a QGroupBox with a layout:</para>
            <para>    QGroupBox *groupBox = new QGroupBox(tr(&quot;Exclusive Radio
            Buttons&quot;));</para>
            <para></para>
            <para>    QRadioButton *radio1 = new QRadioButton(tr(&quot;&amp;Radio
            button 1&quot;));</para>
            <para>    QRadioButton *radio2 = new QRadioButton(tr(&quot;R&amp;adio
            button 2&quot;));</para>
            <para>    QRadioButton *radio3 = new QRadioButton(tr(&quot;Ra&amp;dio
            button 3&quot;));</para>
            <para></para>
            <para>    radio1-&gt;setChecked(true);</para>
            <para></para>
            <para>    QVBoxLayout *vbox = new QVBoxLayout;</para>
            <para>    vbox-&gt;addWidget(radio1);</para>
            <para>    vbox-&gt;addWidget(radio2);</para>
            <para>    vbox-&gt;addWidget(radio3);</para>
            <para>    vbox-&gt;addStretch(1);</para>
            <para>    groupBox-&gt;setLayout(vbox);</para>
            <para></para>
            <para> 	</para>
            <para>A Windows Vista style group box.	A Macintosh style group box.	A
            Fusion style group box.</para>
            <para></para>
            <para></para>
            <para>See also QButtonGroup and Group Box Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QGroupBox.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a group box widget with the given parent but with no
            title.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGroupBox.#ctor(System.String,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a group box with the given title and parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGroupBox.SetAlignment(System.Int32)">
            <summary>
            <para>This property holds the alignment of the group box title.</para>
            <para>Most styles place the title at the top of the frame. The
            horizontal alignment of the title can be specified using single values from
            the following list:</para>
            <para></para>
            <para>Qt::AlignLeft aligns the title text with the left-hand side of
            the group box.</para>
            <para>Qt::AlignRight aligns the title text with the right-hand side of
            the group box.</para>
            <para>Qt::AlignHCenter aligns the title text with the horizontal center
            of the group box.</para>
            <para></para>
            <para>The default alignment is Qt::AlignLeft.</para>
            <para>See also Qt::Alignment.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGroupBox.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGroupBox.OnChildEvent(QtCore.QChildEvent)">
            <summary>
            <para>Reimplemented from QObject::childEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGroupBox.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGroupBox.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGroupBox.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGroupBox.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGroupBox.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGroupBox.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGroupBox.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QGroupBox.InitStyleOption(QtWidgets.QStyleOptionGroupBox)">
            <summary>
            <para>Initialize option with the values from this QGroupBox. This
            method is useful for subclasses when they need a QStyleOptionGroupBox, but
            don't want to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGroupBox.Clicked">
            <summary>
            <para>This signal is emitted when the check box is activated (i.e., pressed down then released while the mouse cursor is inside the button), or when the shortcut key is typed. Notably, this signal is not emitted if you call setChecked().</para>
            <para>If the check box is checked, checked is true; it is false if the check box is unchecked.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also checkable, toggled(), and checked.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QGroupBox.Toggled">
            <summary>
            <para>This property holds whether the group box is checked.</para>
            <para>If the group box is checkable, it is displayed with a check box. If the check box is checked, the group box's children are enabled; otherwise, the children are disabled and are inaccessible to the user.</para>
            <para>By default, checkable group boxes are also checked.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isChecked() const</para>
            <para> void 	setChecked(bool checked)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	toggled(bool on)</para>
            <para></para>
            <para>See also checkable.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGroupBox.Title">
            <summary>
            <para>This property holds the group box title text.</para>
            <para>The group box title text will have a keyboard shortcut if the
            title contains an ampersand ('&amp;') followed by a letter.</para>
            <para>g-&gt;setTitle(&quot;&amp;User information&quot;);</para>
            <para>In the example above, Alt+U moves the keyboard focus to the group
            box. See the QShortcut documentation for details (to display an actual
            ampersand, use '&amp;&amp;').</para>
            <para>There is no default title text.</para>
            <para>See also alignment.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGroupBox.Flat">
            <summary>
            <para>This property holds whether the group box is painted flat or has
            a frame.</para>
            <para>A group box usually consists of a surrounding frame with a title
            at the top. If this property is enabled, only the top part of the frame is
            drawn in most styles; otherwise, the whole frame is drawn.</para>
            <para>By default, this property is disabled, i.e., group boxes are not
            flat unless explicitly specified.</para>
            <para>Note: In some styles, flat and non-flat group boxes have similar
            representations and may not be as distinguishable as they are in other
            styles.</para>
            <para>See also title.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGroupBox.Checkable">
            <summary>
            <para>This property holds whether the group box has a checkbox in its
            title.</para>
            <para>If this property is true, the group box displays its title using
            a checkbox in place of an ordinary label. If the checkbox is checked, the
            group box's children are enabled; otherwise, they are disabled and
            inaccessible.</para>
            <para>By default, group boxes are not checkable.</para>
            <para>If this property is enabled for a group box, it will also be
            initially checked to ensure that its contents are enabled.</para>
            <para>See also checked.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGroupBox.Checked">
            <summary>
            <para>This property holds whether the group box is checked.</para>
            <para>If the group box is checkable, it is displayed with a check box.
            If the check box is checked, the group box's children are enabled;
            otherwise, the children are disabled and are inaccessible to the
            user.</para>
            <para>By default, checkable group boxes are also checked.</para>
            <para>See also checkable.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGroupBox.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QGroupBox.Alignment">
            <summary>
            <para>This property holds the alignment of the group box title.</para>
            <para>Most styles place the title at the top of the frame. The
            horizontal alignment of the title can be specified using single values from
            the following list:</para>
            <para></para>
            <para>Qt::AlignLeft aligns the title text with the left-hand side of
            the group box.</para>
            <para>Qt::AlignRight aligns the title text with the right-hand side of
            the group box.</para>
            <para>Qt::AlignHCenter aligns the title text with the horizontal center
            of the group box.</para>
            <para></para>
            <para>The default alignment is Qt::AlignLeft.</para>
            <para>See also Qt::Alignment.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QKeySequenceEdit">
            <summary>
            <para>The QKeySequenceEdit widget allows to input a
            QKeySequence.</para>
            </summary>
            <remarks>
            <para>This widget lets the user choose a QKeySequence, which is usually
            used as a shortcut. The recording is initiated when the widget receives the
            focus and ends one second after the user releases the last key.</para>
            <para></para>
            <para>See also QKeySequenceEdit::keySequence.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QKeySequenceEdit.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a QKeySequenceEdit widget with the given
            parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QKeySequenceEdit.#ctor(QtGui.QKeySequence,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a QKeySequenceEdit widget with the given keySequence
            and parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QKeySequenceEdit.Clear">
            <summary>
            <para>Clears the current key sequence.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QKeySequenceEdit.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QKeySequenceEdit.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QKeySequenceEdit.OnKeyReleaseEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QKeySequenceEdit.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QKeySequenceEdit.EditingFinished">
            <summary>
            <para>This signal is emitted when the user finishes entering the shortcut.</para>
            <para>Note: there is a one second delay before releasing the last key and emitting this signal.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QKeySequenceEdit.KeySequenceChanged">
            <summary>
            <para>This property holds this property contains the currently chosen key sequence.</para>
            <para>The shortcut can be changed by the user or via setter function.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QKeySequence 	keySequence() const</para>
            <para> void 	setKeySequence(const QKeySequence &amp; keySequence)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	keySequenceChanged(const QKeySequence &amp; keySequence)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QKeySequenceEdit.KeySequence">
            <summary>
            <para>This property holds this property contains the currently chosen
            key sequence.</para>
            <para>The shortcut can be changed by the user or via setter
            function.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QLabel">
            <summary>
            <para>The QLabel widget provides a text or image display.</para>
            </summary>
            <remarks>
            <para>QLabel is used for displaying text or an image. No user
            interaction functionality is provided. The visual appearance of the label
            can be configured in various ways, and it can be used for specifying a
            focus mnemonic key for another widget.</para>
            <para>A QLabel can contain any of the following content types:</para>
            <para></para>
            <para> ContentSetting</para>
            <para>Plain text	Pass a QString to setText().</para>
            <para>Rich text	Pass a QString that contains rich text to
            setText().</para>
            <para>A pixmap	Pass a QPixmap to setPixmap().</para>
            <para>A movie	Pass a QMovie to setMovie().</para>
            <para>A number	Pass an int or a double to setNum(), which converts the
            number to plain text.</para>
            <para>Nothing	The same as an empty plain text. This is the default. Set
            by clear().</para>
            <para></para>
            <para>Warning: When passing a QString to the constructor or calling
            setText(), make sure to sanitize your input, as QLabel tries to guess
            whether it displays the text as plain text or as rich text, a subset of
            HTML 4 markup. You may want to call setTextFormat() explicitly, e.g. in
            case you expect the text to be in plain format but cannot control the text
            source (for instance when displaying data loaded from the Web).</para>
            <para>When the content is changed using any of these functions, any
            previous content is cleared.</para>
            <para>By default, labels display left-aligned, vertically-centered text
            and images, where any tabs in the text to be displayed are automatically
            expanded. However, the look of a QLabel can be adjusted and fine-tuned in
            several ways.</para>
            <para>The positioning of the content within the QLabel widget area can
            be tuned with setAlignment() and setIndent(). Text content can also wrap
            lines along word boundaries with setWordWrap(). For example, this code sets
            up a sunken panel with a two-line text in the bottom right corner (both
            lines being flush with the right side of the label):</para>
            <para>QLabel *label = new QLabel(this);</para>
            <para>label-&gt;setFrameStyle(QFrame::Panel | QFrame::Sunken);</para>
            <para>label-&gt;setText(&quot;first line\nsecond line&quot;);</para>
            <para>label-&gt;setAlignment(Qt::AlignBottom | Qt::AlignRight);</para>
            <para>The properties and functions QLabel inherits from QFrame can also
            be used to specify the widget frame to be used for any given label.</para>
            <para>A QLabel is often used as a label for an interactive widget. For
            this use QLabel provides a useful mechanism for adding an mnemonic (see
            QKeySequence) that will set the keyboard focus to the other widget (called
            the QLabel's &quot;buddy&quot;). For example:</para>
            <para>QLineEdit *phoneEdit = new QLineEdit(this);</para>
            <para>QLabel *phoneLabel = new QLabel(&quot;&amp;Phone:&quot;,
            this);</para>
            <para>phoneLabel-&gt;setBuddy(phoneEdit);</para>
            <para>In this example, keyboard focus is transferred to the label's
            buddy (the QLineEdit) when the user presses Alt+P. If the buddy was a
            button (inheriting from QAbstractButton), triggering the mnemonic would
            emulate a button click.</para>
            <para></para>
            <para> 	A label shown in the Macintosh widget style.</para>
            <para>	A label shown in the Fusion widget style.</para>
            <para>	A label shown in the Windows Vista widget style.</para>
            <para></para>
            <para></para>
            <para>See also QLineEdit, QTextEdit, QPixmap, QMovie, and GUI Design
            Handbook: Label.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QLabel.#ctor(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs an empty label.</para>
            <para>The parent and widget flag f, arguments are passed to the QFrame
            constructor.</para>
            <para>See also setAlignment(), setFrameStyle(), and setIndent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.#ctor(System.String,QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a label that displays the text, text.</para>
            <para>The parent and widget flag f, arguments are passed to the QFrame
            constructor.</para>
            <para>See also setText(), setAlignment(), setFrameStyle(), and
            setIndent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.SetScaledContents(System.Boolean)">
            <summary>
            <para>This property holds whether the label will scale its contents to
            fill all available space.</para>
            <para>When enabled and the label shows a pixmap, it will scale the
            pixmap to fill the available space.</para>
            <para>This property's default is false.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasScaledContents() const</para>
            <para> void 	setScaledContents(bool)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.HeightForWidth(System.Int32)">
            <summary>
            <para>Reimplemented from QWidget::heightForWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.SetSelection(System.Int32,System.Int32)">
            <summary>
            <para>Selects text from position start and for length
            characters.</para>
            <para>Note: The textInteractionFlags set on the label need to include
            either TextSelectableByMouse or TextSelectableByKeyboard.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also selectedText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.SetNum(System.Int32)">
            <summary>
            <para>Sets the label contents to plain text containing the textual
            representation of integer num. Any previous content is cleared. Does
            nothing if the integer's string representation is the same as the current
            contents of the label.</para>
            <para>The buddy shortcut, if any, is disabled.</para>
            <para>See also setText(), QString::setNum(), and setBuddy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.SetNum(System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the label contents to plain text containing the textual
            representation of double num. Any previous content is cleared. Does nothing
            if the double's string representation is the same as the current contents
            of the label.</para>
            <para>The buddy shortcut, if any, is disabled.</para>
            <para>See also setText(), QString::setNum(), and setBuddy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.Clear">
            <summary>
            <para>Clears any label contents.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.OnContextMenuEvent(QtGui.QContextMenuEvent)">
            <summary>
            <para>Reimplemented from QWidget::contextMenuEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLabel.FocusNextPrevChild(System.Boolean)">
            <summary>
            <para>Reimplemented from QWidget::focusNextPrevChild().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QLabel.LinkActivated">
            <summary>
            <para>This signal is emitted when the user clicks a link. The URL referred to by the anchor is passed in link.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also linkHovered().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QLabel.LinkHovered">
            <summary>
            <para>This signal is emitted when the user hovers over a link. The URL referred to by the anchor is passed in link.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also linkActivated().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.TextFormat">
            <summary>
            <para>This property holds the label's text format.</para>
            <para>See the Qt::TextFormat enum for an explanation of the possible
            options.</para>
            <para>The default format is Qt::AutoText.</para>
            <para>See also text().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.Alignment">
            <summary>
            <para>This property holds the alignment of the label's contents.</para>
            <para>By default, the contents of the label are left-aligned and
            vertically-centered.</para>
            <para>See also text.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.WordWrap">
            <summary>
            <para>This property holds the label's word-wrapping policy.</para>
            <para>If this property is true then label text is wrapped where
            necessary at word-breaks; otherwise it is not wrapped at all.</para>
            <para>By default, word wrap is disabled.</para>
            <para>See also text.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.Indent">
            <summary>
            <para>This property holds the label's text indent in pixels.</para>
            <para>If a label displays text, the indent applies to the left edge if
            alignment() is Qt::AlignLeft, to the right edge if alignment() is
            Qt::AlignRight, to the top edge if alignment() is Qt::AlignTop, and to the
            bottom edge if alignment() is Qt::AlignBottom.</para>
            <para>If indent is negative, or if no indent has been set, the label
            computes the effective indent as follows: If frameWidth() is 0, the
            effective indent becomes 0. If frameWidth() is greater than 0, the
            effective indent becomes half the width of the &quot;x&quot; character of
            the widget's current font().</para>
            <para>By default, the indent is -1, meaning that an effective indent is
            calculating in the manner described above.</para>
            <para>See also alignment, margin, frameWidth(), and font().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.Margin">
            <summary>
            <para>This property holds the width of the margin.</para>
            <para>The margin is the distance between the innermost pixel of the
            frame and the outermost pixel of contents.</para>
            <para>The default margin is 0.</para>
            <para>See also indent.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.Buddy">
            <summary>
            <para>Returns this label's buddy, or 0 if no buddy is currently
            set.</para>
            <para>See also setBuddy().</para>
            <para></para>
            <para>Sets this label's buddy to buddy.</para>
            <para>When the user presses the shortcut key indicated by this label,
            the keyboard focus is transferred to the label's buddy widget.</para>
            <para>The buddy mechanism is only available for QLabels that contain
            text in which one character is prefixed with an ampersand, '&amp;'. This
            character is set as the shortcut key. See the QKeySequence::mnemonic()
            documentation for details (to display an actual ampersand, use
            '&amp;&amp;').</para>
            <para>In a dialog, you might create two data entry widgets and a label
            for each, and set up the geometry layout so each label is just to the left
            of its data entry widget (its &quot;buddy&quot;), for example:</para>
            <para>QLineEdit *nameEdit  = new QLineEdit(this);</para>
            <para>QLabel    *nameLabel = new QLabel(&quot;&amp;Name:&quot;,
            this);</para>
            <para>nameLabel-&gt;setBuddy(nameEdit);</para>
            <para>QLineEdit *phoneEdit  = new QLineEdit(this);</para>
            <para>QLabel    *phoneLabel = new QLabel(&quot;&amp;Phone:&quot;,
            this);</para>
            <para>phoneLabel-&gt;setBuddy(phoneEdit);</para>
            <para>// (layout setup not shown)</para>
            <para>With the code above, the focus jumps to the Name field when the
            user presses Alt+N, and to the Phone field when the user presses
            Alt+P.</para>
            <para>To unset a previously set buddy, call this function with buddy
            set to 0.</para>
            <para>See also buddy(), setText(), QShortcut, and
            setAlignment().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.OpenExternalLinks">
            <summary>
            <para>Specifies whether QLabel should automatically open links using
            QDesktopServices::openUrl() instead of emitting the linkActivated()
            signal.</para>
            <para>Note: The textInteractionFlags set on the label need to include
            either LinksAccessibleByMouse or LinksAccessibleByKeyboard.</para>
            <para>The default value is false.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also textInteractionFlags().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.TextInteractionFlags">
            <summary>
            <para>Specifies how the label should interact with user input if it
            displays text.</para>
            <para>If the flags contain Qt::LinksAccessibleByKeyboard the focus
            policy is also automatically set to Qt::StrongFocus. If
            Qt::TextSelectableByKeyboard is set then the focus policy is set to
            Qt::ClickFocus.</para>
            <para>The default value is Qt::LinksAccessibleByMouse.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.Text">
            <summary>
            <para>This property holds the label's text.</para>
            <para>If no text has been set this will return an empty string. Setting
            the text clears any previous content.</para>
            <para>The text will be interpreted either as plain text or as rich
            text, depending on the text format setting; see setTextFormat(). The
            default setting is Qt::AutoText; i.e. QLabel will try to auto-detect the
            format of the text set. See Supported HTML Subset for the definition of
            rich text.</para>
            <para>If a buddy has been set, the buddy mnemonic key is updated from
            the new text.</para>
            <para>Note that QLabel is well-suited to display small rich text
            documents, such as small documents that get their document specific
            settings (font, text color, link color) from the label's palette and font
            properties. For large documents, use QTextEdit in read-only mode instead.
            QTextEdit can also provide a scroll bar when necessary.</para>
            <para>Note: This function enables mouse tracking if text contains rich
            text.</para>
            <para>See also setTextFormat(), setBuddy(), and alignment.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.Pixmap">
            <summary>
            <para>This property holds the label's pixmap.</para>
            <para>If no pixmap has been set this will return 0.</para>
            <para>Setting the pixmap clears any previous content. The buddy
            shortcut, if any, is disabled.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.Picture">
            <summary>
            <para>Returns the label's picture or 0 if the label doesn't have a
            picture.</para>
            <para>See also setPicture().</para>
            <para></para>
            <para>Sets the label contents to picture. Any previous content is
            cleared.</para>
            <para>The buddy shortcut, if any, is disabled.</para>
            <para>See also picture() and setBuddy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.Movie">
            <summary>
            <para>Returns a pointer to the label's movie, or 0 if no movie has been
            set.</para>
            <para>See also setMovie().</para>
            <para></para>
            <para>Sets the label contents to movie. Any previous content is
            cleared. The label does NOT take ownership of the movie.</para>
            <para>The buddy shortcut, if any, is disabled.</para>
            <para>See also movie() and setBuddy().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.HasScaledContents">
            <summary>
            <para>This property holds whether the label will scale its contents to
            fill all available space.</para>
            <para>When enabled and the label shows a pixmap, it will scale the
            pixmap to fill the available space.</para>
            <para>This property's default is false.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hasScaledContents() const</para>
            <para> void 	setScaledContents(bool)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.HasSelectedText">
            <summary>
            <para>This property holds whether there is any text selected.</para>
            <para>hasSelectedText() returns true if some or all of the text has
            been selected by the user; otherwise returns false.</para>
            <para>By default, this property is false.</para>
            <para>Note: The textInteractionFlags set on the label need to include
            either TextSelectableByMouse or TextSelectableByKeyboard.</para>
            <para>This property was introduced in  Qt 4.7.</para>
            <para>See also selectedText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.SelectedText">
            <summary>
            <para>This property holds the selected text.</para>
            <para>If there is no selected text this property's value is an empty
            string.</para>
            <para>By default, this property contains an empty string.</para>
            <para>Note: The textInteractionFlags set on the label need to include
            either TextSelectableByMouse or TextSelectableByKeyboard.</para>
            <para>This property was introduced in  Qt 4.7.</para>
            <para>See also hasSelectedText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLabel.SelectionStart">
            <summary>
            <para>selectionStart() returns the index of the first selected
            character in the label or -1 if no text is selected.</para>
            <para>Note: The textInteractionFlags set on the label need to include
            either TextSelectableByMouse or TextSelectableByKeyboard.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also selectedText().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QLCDNumber">
            <summary>
            <para>The QLCDNumber widget displays a number with LCD-like
            digits.</para>
            </summary>
            <remarks>
            <para>It can display a number in just about any size. It can display
            decimal, hexadecimal, octal or binary numbers. It is easy to connect to
            data sources using the display() slot, which is overloaded to take any of
            five argument types.</para>
            <para>There are also slots to change the base with setMode() and the
            decimal point with setSmallDecimalPoint().</para>
            <para>QLCDNumber emits the overflow() signal when it is asked to
            display something beyond its range. The range is set by setDigitCount(),
            but setSmallDecimalPoint() also influences it. If the display is set to
            hexadecimal, octal or binary, the integer equivalent of the value is
            displayed.</para>
            <para>These digits and other symbols can be shown: 0/O, 1, 2, 3, 4,
            5/S, 6, 7, 8, 9/g, minus, decimal point, A, B, C, D, E, F, h, H, L, o, P,
            r, u, U, Y, colon, degree sign (which is specified as single quote in the
            string) and space. QLCDNumber substitutes spaces for illegal
            characters.</para>
            <para>It is not possible to retrieve the contents of a QLCDNumber
            object, although you can retrieve the numeric value with value(). If you
            really need the text, we recommend that you connect the signals that feed
            the display() slot to another slot as well and store the value
            there.</para>
            <para>Incidentally, QLCDNumber is the very oldest part of Qt, tracing
            its roots back to a BASIC program on the Sinclair Spectrum.</para>
            <para></para>
            <para>    </para>
            <para>LCD number widgets shown in various widget styles (from left to
            right): Windows, Windows Vista, Macintosh, Fusion.</para>
            <para></para>
            <para></para>
            <para>See also QLabel, QFrame, Digital Clock Example, and Tetrix
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QLCDNumber.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs an LCD number, sets the number of digits to 5, the
            base to decimal, the decimal point mode to 'small' and the frame style to a
            raised box. The segmentStyle() is set to Outline.</para>
            <para>The parent argument is passed to the QFrame constructor.</para>
            <para>See also setDigitCount() and setSmallDecimalPoint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLCDNumber.#ctor(System.UInt32,QtWidgets.QWidget)">
            <summary>
            <para>Constructs an LCD number, sets the number of digits to numDigits,
            the base to decimal, the decimal point mode to 'small' and the frame style
            to a raised box. The segmentStyle() is set to Filled.</para>
            <para>The parent argument is passed to the QFrame constructor.</para>
            <para>See also setDigitCount() and setSmallDecimalPoint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLCDNumber.CheckOverflow(System.Double)">
            <summary>
            <para>Returns true if num is too big to be displayed in its entirety;
            otherwise returns false.</para>
            <para>See also display(), digitCount(), and smallDecimalPoint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLCDNumber.CheckOverflow(System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if num is too big to be displayed in its entirety;
            otherwise returns false.</para>
            <para>See also display(), digitCount(), and smallDecimalPoint().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLCDNumber.Display(System.String)">
            <summary>
            <para>This property holds the displayed value.</para>
            <para>This property corresponds to the current value displayed by the
            LCDNumber.</para>
            <para>If the displayed value is not a number, the property has a value
            of 0.</para>
            <para>By default, this property contains a value of 0.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLCDNumber.Display(System.Int32)">
            <summary>
            <para>This property holds the displayed value.</para>
            <para>This property corresponds to the current value displayed by the
            LCDNumber.</para>
            <para>If the displayed value is not a number, the property has a value
            of 0.</para>
            <para>By default, this property contains a value of 0.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLCDNumber.Display(System.Double)">
            <summary>
            <para>This property holds the displayed value.</para>
            <para>This property corresponds to the current value displayed by the
            LCDNumber.</para>
            <para>If the displayed value is not a number, the property has a value
            of 0.</para>
            <para>By default, this property contains a value of 0.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLCDNumber.SetHexMode">
            <summary>
            <para>Calls setMode(Hex). Provided for convenience (e.g. for connecting
            buttons to it).</para>
            <para>See also setMode(), setDecMode(), setOctMode(), setBinMode(), and
            mode().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLCDNumber.SetDecMode">
            <summary>
            <para>Calls setMode(Dec). Provided for convenience (e.g. for connecting
            buttons to it).</para>
            <para>See also setMode(), setHexMode(), setOctMode(), setBinMode(), and
            mode().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLCDNumber.SetOctMode">
            <summary>
            <para>Calls setMode(Oct). Provided for convenience (e.g. for connecting
            buttons to it).</para>
            <para>See also setMode(), setHexMode(), setDecMode(), setBinMode(), and
            mode().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLCDNumber.SetBinMode">
            <summary>
            <para>Calls setMode(Bin). Provided for convenience (e.g. for connecting
            buttons to it).</para>
            <para>See also setMode(), setHexMode(), setDecMode(), setOctMode(), and
            mode().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLCDNumber.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QLCDNumber.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QLCDNumber.Overflow">
            <summary>
            <para>This signal is emitted whenever the QLCDNumber is asked to display a too-large number or a too-long string.</para>
            <para>It is never emitted by setDigitCount().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLCDNumber.DigitCount">
            <summary>
            <para>This property holds the current number of digits
            displayed.</para>
            <para>Corresponds to the current number of digits. If
            QLCDNumber::smallDecimalPoint is false, the decimal point occupies one
            digit position.</para>
            <para>By default, this property contains a value of 5.</para>
            <para>This property was introduced in  Qt 4.6.</para>
            <para>See also smallDecimalPoint.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLCDNumber.mode">
            <summary>
            <para>This property holds the current display mode (number
            base).</para>
            <para>Corresponds to the current display mode, which is one of Bin,
            Oct, Dec (the default) and Hex. Dec mode can display floating point values,
            the other modes display the integer equivalent.</para>
            <para>See also smallDecimalPoint(), setHexMode(), setDecMode(),
            setOctMode(), and setBinMode().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLCDNumber.segmentStyle">
            <summary>
            <para>This property holds the style of the LCDNumber.</para>
            <para></para>
            <para> StyleResult</para>
            <para>Outline	Produces raised segments filled with the background
            color</para>
            <para>Filled (this is the default).	Produces raised segments filled
            with the foreground color.</para>
            <para>Flat	Produces flat segments filled with the foreground
            color.</para>
            <para></para>
            <para>Outline and Filled will additionally use QPalette::light() and
            QPalette::dark() for shadow effects.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLCDNumber.SmallDecimalPoint">
            <summary>
            <para>This property holds the style of the decimal point.</para>
            <para>If true the decimal point is drawn between two digit positions.
            Otherwise it occupies a digit position of its own, i.e. is drawn in a digit
            position. The default is false.</para>
            <para>The inter-digit space is made slightly wider when the decimal
            point is drawn between the digits.</para>
            <para>See also mode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLCDNumber.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLCDNumber.Value">
            <summary>
            <para>This property holds the displayed value.</para>
            <para>This property corresponds to the current value displayed by the
            LCDNumber.</para>
            <para>If the displayed value is not a number, the property has a value
            of 0.</para>
            <para>By default, this property contains a value of 0.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QLCDNumber.IntValue">
            <summary>
            <para>This property holds the displayed value rounded to the nearest
            integer.</para>
            <para>This property corresponds to the nearest integer to the current
            value displayed by the LCDNumber. This is the value used for hexadecimal,
            octal and binary modes.</para>
            <para>If the displayed value is not a number, the property has a value
            of 0.</para>
            <para>By default, this property contains a value of 0.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QLCDNumber.Mode">
            <summary>
            <para>This type determines how numbers are shown.</para>
            <para>If the display is set to hexadecimal, octal or binary, the
            integer equivalent of the value is displayed.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QLCDNumber.Mode.Hex">
            <summary>Hexadecimal</summary>
        </member>
        <member name="F:QtWidgets.QLCDNumber.Mode.Dec">
            <summary>Decimal</summary>
        </member>
        <member name="F:QtWidgets.QLCDNumber.Mode.Oct">
            <summary>Octal</summary>
        </member>
        <member name="F:QtWidgets.QLCDNumber.Mode.Bin">
            <summary>Binary</summary>
        </member>
        <member name="T:QtWidgets.QLCDNumber.SegmentStyle">
            <summary>
            <para>This type determines the visual appearance of the QLCDNumber
            widget.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QLCDNumber.SegmentStyle.Outline">
            <summary>gives raised segments filled with the background color.</summary>
        </member>
        <member name="F:QtWidgets.QLCDNumber.SegmentStyle.Filled">
            <summary>gives raised segments filled with the windowText color.</summary>
        </member>
        <member name="F:QtWidgets.QLCDNumber.SegmentStyle.Flat">
            <summary>gives flat segments filled with the windowText color.</summary>
        </member>
        <member name="T:QtWidgets.QMainWindow">
            <summary>
            <para>The QMainWindow class provides a main application window.</para>
            </summary>
            <remarks>
            <para></para>
            <para>Qt Main Window Framework</para>
            <para>A main window provides a framework for building an application's
            user interface. Qt has QMainWindow and its related classes for main window
            management. QMainWindow has its own layout to which you can add QToolBars,
            QDockWidgets, a QMenuBar, and a QStatusBar. The layout has a center area
            that can be occupied by any kind of widget. You can see an image of the
            layout below.</para>
            <para></para>
            <para>Note: Creating a main window without a central widget is not
            supported. You must have a central widget even if it is just a
            placeholder.</para>
            <para></para>
            <para>Creating Main Window Components</para>
            <para>A central widget will typically be a standard Qt widget such as a
            QTextEdit or a QGraphicsView. Custom widgets can also be used for advanced
            applications. You set the central widget with setCentralWidget().</para>
            <para>Main windows have either a single (SDI) or multiple (MDI)
            document interface. You create MDI applications in Qt by using a QMdiArea
            as the central widget.</para>
            <para>We will now examine each of the other widgets that can be added
            to a main window. We give examples on how to create and add them.</para>
            <para></para>
            <para>Creating Menus</para>
            <para>Qt implements menus in QMenu and QMainWindow keeps them in a
            QMenuBar. QActions are added to the menus, which display them as menu
            items.</para>
            <para>You can add new menus to the main window's menu bar by calling
            menuBar(), which returns the QMenuBar for the window, and then add a menu
            with QMenuBar::addMenu().</para>
            <para>QMainWindow comes with a default menu bar, but you can also set
            one yourself with setMenuBar(). If you wish to implement a custom menu bar
            (i.e., not use the QMenuBar widget), you can set it with
            setMenuWidget().</para>
            <para>An example of how to create menus follows:</para>
            <para>void MainWindow::createMenus()</para>
            <para>{</para>
            <para>    fileMenu =
            menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));</para>
            <para>    fileMenu-&gt;addAction(newAct);</para>
            <para>    fileMenu-&gt;addAction(openAct);</para>
            <para>    fileMenu-&gt;addAction(saveAct);</para>
            <para>The createPopupMenu() function creates popup menus when the main
            window receives context menu events. The default implementation generates a
            menu with the checkable actions from the dock widgets and toolbars. You can
            reimplement createPopupMenu() for a custom menu.</para>
            <para></para>
            <para>Creating Toolbars</para>
            <para>Toolbars are implemented in the QToolBar class. You add a toolbar
            to a main window with addToolBar().</para>
            <para>You control the initial position of toolbars by assigning them to
            a specific Qt::ToolBarArea. You can split an area by inserting a toolbar
            break - think of this as a line break in text editing - with
            addToolBarBreak() or insertToolBarBreak(). You can also restrict placement
            by the user with QToolBar::setAllowedAreas() and
            QToolBar::setMovable().</para>
            <para>The size of toolbar icons can be retrieved with iconSize(). The
            sizes are platform dependent; you can set a fixed size with setIconSize().
            You can alter the appearance of all tool buttons in the toolbars with
            setToolButtonStyle().</para>
            <para>An example of toolbar creation follows:</para>
            <para>void MainWindow::createToolBars()</para>
            <para>{</para>
            <para>    fileToolBar = addToolBar(tr(&quot;File&quot;));</para>
            <para>    fileToolBar-&gt;addAction(newAct);</para>
            <para></para>
            <para>Creating Dock Widgets</para>
            <para>Dock widgets are implemented in the QDockWidget class. A dock
            widget is a window that can be docked into the main window. You add dock
            widgets to a main window with addDockWidget().</para>
            <para>There are four dock widget areas as given by the
            Qt::DockWidgetArea enum: left, right, top, and bottom. You can specify
            which dock widget area that should occupy the corners where the areas
            overlap with setCorner(). By default each area can only contain one row
            (vertical or horizontal) of dock widgets, but if you enable nesting with
            setDockNestingEnabled(), dock widgets can be added in either
            direction.</para>
            <para>Two dock widgets may also be stacked on top of each other. A
            QTabBar is then used to select which of the widgets that should be
            displayed.</para>
            <para>We give an example of how to create and add dock widgets to a
            main window:</para>
            <para>    QDockWidget *dockWidget = new QDockWidget(tr(&quot;Dock
            Widget&quot;), this);</para>
            <para>    dockWidget-&gt;setAllowedAreas(Qt::LeftDockWidgetArea
            |</para>
            <para>                                Qt::RightDockWidgetArea);</para>
            <para>    dockWidget-&gt;setWidget(dockWidgetContents);</para>
            <para>    addDockWidget(Qt::LeftDockWidgetArea, dockWidget);</para>
            <para></para>
            <para>The Status Bar</para>
            <para>You can set a status bar with setStatusBar(), but one is created
            the first time statusBar() (which returns the main window's status bar) is
            called. See QStatusBar for information on how to use it.</para>
            <para></para>
            <para>Storing State</para>
            <para>QMainWindow can store the state of its layout with saveState();
            it can later be retrieved with restoreState(). It is the position and size
            (relative to the size of the main window) of the toolbars and dock widgets
            that are stored.</para>
            <para></para>
            <para>See also QMenuBar, QToolBar, QStatusBar, QDockWidget, Application
            Example, Dock Widgets Example, MDI Example, SDI Example, and Menus
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QMainWindow.#ctor(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a QMainWindow with the given parent and the specified
            widget flags.</para>
            <para>QMainWindow sets the Qt::Window flag itself, and will hence
            always be created as a top-level widget.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.TabPosition(QtCore.Qt.DockWidgetArea)">
            <summary>
            <para>Returns the tab position for area.</para>
            <para>Note: The VerticalTabs dock option overrides the tab positions
            returned by this function.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setTabPosition() and tabShape().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.SetTabPosition(QtCore.Qt.DockWidgetArea,QtWidgets.QTabWidget.TabPosition)">
            <summary>
            <para>Sets the tab position for the given dock widget areas to the
            specified tabPosition. By default, all dock areas show their tabs at the
            bottom.</para>
            <para>Note: The VerticalTabs dock option overrides the tab positions
            set by this method.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also tabPosition() and setTabShape().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.TakeCentralWidget">
            <summary>
            <para>Removes the central widget from this main window.</para>
            <para>The ownership of the removed widget is passed to the
            caller.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.SetCorner(QtCore.Qt.Corner,QtCore.Qt.DockWidgetArea)">
            <summary>
            <para>Sets the given dock widget area to occupy the specified
            corner.</para>
            <para>See also corner().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.Corner(QtCore.Qt.Corner)">
            <summary>
            <para>Returns the dock widget area that occupies the specified
            corner.</para>
            <para>See also setCorner().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.AddToolBarBreak(QtCore.Qt.ToolBarArea)">
            <summary>
            <para>Adds a toolbar break to the given area after all the other
            objects that are present.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.InsertToolBarBreak(QtWidgets.QToolBar)">
            <summary>
            <para>Inserts a toolbar break before the toolbar specified by
            before.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.AddToolBar(QtCore.Qt.ToolBarArea,QtWidgets.QToolBar)">
            <summary>
            <para>Adds the toolbar into the specified area in this main window. The
            toolbar is placed at the end of the current tool bar block (i.e. line). If
            the main window already manages toolbar then it will only move the toolbar
            to area.</para>
            <para>See also insertToolBar(), addToolBarBreak(), and
            insertToolBarBreak().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.AddToolBar(QtWidgets.QToolBar)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Equivalent of calling addToolBar(Qt::TopToolBarArea,
            toolbar)</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.AddToolBar(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates a QToolBar object, setting its window title to title, and
            inserts it into the top toolbar area.</para>
            <para>See also setWindowTitle().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.InsertToolBar(QtWidgets.QToolBar,QtWidgets.QToolBar)">
            <summary>
            <para>Inserts the toolbar into the area occupied by the before toolbar
            so that it appears before it. For example, in normal left-to-right layout
            operation, this means that toolbar will appear to the left of the toolbar
            specified by before in a horizontal toolbar area.</para>
            <para>See also insertToolBarBreak(), addToolBar(), and
            addToolBarBreak().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.RemoveToolBar(QtWidgets.QToolBar)">
            <summary>
            <para>Removes the toolbar from the main window layout and hides it.
            Note that the toolbar is not deleted.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.RemoveToolBarBreak(QtWidgets.QToolBar)">
            <summary>
            <para>Removes a toolbar break previously inserted before the toolbar
            specified by before.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.ToolBarArea(QtWidgets.QToolBar)">
            <summary>
            <para>Returns the Qt::ToolBarArea for toolbar. If toolbar has not been
            added to the main window, this function returns Qt::NoToolBarArea.</para>
            <para>See also addToolBar(), addToolBarBreak(), and
            Qt::ToolBarArea.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.ToolBarBreak(QtWidgets.QToolBar)">
            <summary>
            <para>Returns whether there is a toolbar break before the
            toolbar.</para>
            <para>See also addToolBarBreak() and insertToolBarBreak().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.AddDockWidget(QtCore.Qt.DockWidgetArea,QtWidgets.QDockWidget)">
            <summary>
            <para>Adds the given dockwidget to the specified area.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.AddDockWidget(QtCore.Qt.DockWidgetArea,QtWidgets.QDockWidget,QtCore.Qt.Orientation)">
            <summary>
            <para>Adds dockwidget into the given area in the direction specified by
            the orientation.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.SplitDockWidget(QtWidgets.QDockWidget,QtWidgets.QDockWidget,QtCore.Qt.Orientation)">
            <summary>
            <para>Splits the space covered by the first dock widget into two parts,
            moves the first dock widget into the first part, and moves the second dock
            widget into the second part.</para>
            <para>The orientation specifies how the space is divided: A
            Qt::Horizontal split places the second dock widget to the right of the
            first; a Qt::Vertical split places the second dock widget below the
            first.</para>
            <para>Note: if first is currently in a tabbed docked area, second will
            be added as a new tab, not as a neighbor of first. This is because a single
            tab can contain only one dock widget.</para>
            <para>Note: The Qt::LayoutDirection influences the order of the dock
            widgets in the two parts of the divided area. When right-to-left layout
            direction is enabled, the placing of the dock widgets will be
            reversed.</para>
            <para>See also tabifyDockWidget(), addDockWidget(), and
            removeDockWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.TabifyDockWidget(QtWidgets.QDockWidget,QtWidgets.QDockWidget)">
            <summary>
            <para>Moves second dock widget on top of first dock widget, creating a
            tabbed docked area in the main window.</para>
            <para>See also tabifiedDockWidgets().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.RemoveDockWidget(QtWidgets.QDockWidget)">
            <summary>
            <para>Removes the dockwidget from the main window layout and hides it.
            Note that the dockwidget is not deleted.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.RestoreDockWidget(QtWidgets.QDockWidget)">
            <summary>
            <para>Restores the state of dockwidget if it is created after the call
            to restoreState(). Returns true if the state was restored; otherwise
            returns false.</para>
            <para>See also restoreState() and saveState().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.DockWidgetArea(QtWidgets.QDockWidget)">
            <summary>
            <para>Returns the Qt::DockWidgetArea for dockwidget. If dockwidget has
            not been added to the main window, this function returns
            Qt::NoDockWidgetArea.</para>
            <para>See also addDockWidget(), splitDockWidget(), and
            Qt::DockWidgetArea.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.SaveState(System.Int32)">
            <summary>
            <para>Saves the current state of this mainwindow's toolbars and
            dockwidgets. This includes the corner settings which can be set with
            setCorner(). The version number is stored as part of the data.</para>
            <para>The objectName property is used to identify each QToolBar and
            QDockWidget. You should make sure that this property is unique for each
            QToolBar and QDockWidget you add to the QMainWindow</para>
            <para>To restore the saved state, pass the return value and version
            number to restoreState().</para>
            <para>To save the geometry when the window closes, you can implement a
            close event like this:</para>
            <para>void MyMainWindow::closeEvent(QCloseEvent *event)</para>
            <para>{</para>
            <para>    QSettings settings(&quot;MyCompany&quot;,
            &quot;MyApp&quot;);</para>
            <para>    settings.setValue(&quot;geometry&quot;,
            saveGeometry());</para>
            <para>    settings.setValue(&quot;windowState&quot;,
            saveState());</para>
            <para>    QMainWindow::closeEvent(event);</para>
            <para>}</para>
            <para>See also restoreState(), QWidget::saveGeometry(), and
            QWidget::restoreGeometry().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.RestoreState(QtCore.QByteArray,System.Int32)">
            <summary>
            <para>Restores the state of this mainwindow's toolbars and dockwidgets.
            Also restores the corner settings too. The version number is compared with
            that stored in state. If they do not match, the mainwindow's state is left
            unchanged, and this function returns false; otherwise, the state is
            restored, and this function returns true.</para>
            <para>To restore geometry saved using QSettings, you can use code like
            this:</para>
            <para>void MainWindow::readSettings()</para>
            <para>{</para>
            <para>    QSettings settings(&quot;MyCompany&quot;,
            &quot;MyApp&quot;);</para>
            <para>
            restoreGeometry(settings.value(&quot;myWidget/geometry&quot;).toByteArray()
            );</para>
            <para>
            restoreState(settings.value(&quot;myWidget/windowState&quot;).toByteArray()
            );</para>
            <para>}</para>
            <para>See also saveState(), QWidget::saveGeometry(),
            QWidget::restoreGeometry(), and restoreDockWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.CreatePopupMenu">
            <summary>
            <para>Returns a popup menu containing checkable entries for the
            toolbars and dock widgets present in the main window. If there are no
            toolbars and dock widgets present, this function returns a null
            pointer.</para>
            <para>By default, this function is called by the main window when the
            user activates a context menu, typically by right-clicking on a toolbar or
            a dock widget.</para>
            <para>If you want to create a custom popup menu, reimplement this
            function and return a newly-created popup menu. Ownership of the popup menu
            is transferred to the caller.</para>
            <para>See also addDockWidget(), addToolBar(), and menuBar().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.OnContextMenuEvent(QtGui.QContextMenuEvent)">
            <summary>
            <para>Reimplemented from QWidget::contextMenuEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMainWindow.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QMainWindow.IconSizeChanged">
            <summary>
            <para>This signal is emitted when the size of the icons used in the window is changed. The new icon size is passed in iconSize.</para>
            <para>You can connect this signal to other components to help maintain a consistent appearance for your application.</para>
            <para>See also setIconSize().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QMainWindow.ToolButtonStyleChanged">
            <summary>
            <para>This signal is emitted when the style used for tool buttons in the window is changed. The new style is passed in toolButtonStyle.</para>
            <para>You can connect this signal to other components to help maintain a consistent appearance for your application.</para>
            <para>See also setToolButtonStyle().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMainWindow.IconSize">
            <summary>
            <para>This property holds size of toolbar icons in this
            mainwindow.</para>
            <para>The default is the default tool bar icon size of the GUI style.
            Note that the icons used must be at least of this size as the icons are
            only scaled down.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMainWindow.ToolButtonStyle">
            <summary>
            <para>This property holds style of toolbar buttons in this
            mainwindow.</para>
            <para>To have the style of toolbuttons follow the system settings, set
            this property to Qt::ToolButtonFollowStyle. On Unix, the user settings from
            the desktop environment will be used. On other platforms,
            Qt::ToolButtonFollowStyle means icon only.</para>
            <para>The default is Qt::ToolButtonIconOnly.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMainWindow.DocumentMode">
            <summary>
            <para>This property holds whether the tab bar for tabbed dockwidgets is
            set to document mode.</para>
            <para>The default is false.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also QTabBar::documentMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMainWindow.TabShape">
            <summary>
            <para>This property holds the tab shape used for tabbed dock
            widgets.</para>
            <para>The default is QTabWidget::Rounded.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also setTabPosition().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMainWindow.DockOptions">
            <summary>
            <para>This property holds the docking behavior of QMainWindow.</para>
            <para>The default value is AnimatedDocks | AllowTabbedDocks.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMainWindow.MenuBar">
            <summary>
            <para>Returns the menu bar for the main window. This function creates
            and returns an empty menu bar if the menu bar does not exist.</para>
            <para>If you want all windows in a Mac application to share one menu
            bar, don't use this function to create it, because the menu bar created
            here will have this QMainWindow as its parent. Instead, you must create a
            menu bar that does not have a parent, which you can then share among all
            the Mac windows. Create a parent-less menu bar this way:</para>
            <para>QMenuBar *menuBar = new QMenuBar(0);</para>
            <para>See also setMenuBar().</para>
            <para></para>
            <para>Sets the menu bar for the main window to menuBar.</para>
            <para>Note: QMainWindow takes ownership of the menuBar pointer and
            deletes it at the appropriate time.</para>
            <para>See also menuBar().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMainWindow.MenuWidget">
            <summary>
            <para>Returns the menu bar for the main window. This function returns
            null if a menu bar hasn't been constructed yet.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setMenuWidget().</para>
            <para></para>
            <para>Sets the menu bar for the main window to menuBar.</para>
            <para>QMainWindow takes ownership of the menuBar pointer and deletes it
            at the appropriate time.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also menuWidget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMainWindow.StatusBar">
            <summary>
            <para>Returns the status bar for the main window. This function creates
            and returns an empty status bar if the status bar does not exist.</para>
            <para>See also setStatusBar().</para>
            <para></para>
            <para>Sets the status bar for the main window to statusbar.</para>
            <para>Setting the status bar to 0 will remove it from the main window.
            Note that QMainWindow takes ownership of the statusbar pointer and deletes
            it at the appropriate time.</para>
            <para>See also statusBar().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMainWindow.CentralWidget">
            <summary>
            <para>Returns the central widget for the main window. This function
            returns zero if the central widget has not been set.</para>
            <para>See also setCentralWidget().</para>
            <para></para>
            <para>Sets the given widget to be the main window's central
            widget.</para>
            <para>Note: QMainWindow takes ownership of the widget pointer and
            deletes it at the appropriate time.</para>
            <para>See also centralWidget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMainWindow.Animated">
            <summary>
            <para>This property holds whether manipulating dock widgets and tool
            bars is animated.</para>
            <para>When a dock widget or tool bar is dragged over the main window,
            the main window adjusts its contents to indicate where the dock widget or
            tool bar will be docked if it is dropped. Setting this property causes
            QMainWindow to move its contents in a smooth animation. Clearing this
            property causes the contents to snap into their new positions.</para>
            <para>By default, this property is set. It may be cleared if the main
            window contains widgets which are slow at resizing or repainting
            themselves.</para>
            <para>Setting this property is identical to setting the AnimatedDocks
            option using setDockOptions().</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMainWindow.DockNestingEnabled">
            <summary>
            <para>This property holds whether docks can be nested.</para>
            <para>If this property is false, dock areas can only contain a single
            row (horizontal or vertical) of dock widgets. If this property is true, the
            area occupied by a dock widget can be split in either direction to contain
            more dock widgets.</para>
            <para>Dock nesting is only necessary in applications that contain a lot
            of dock widgets. It gives the user greater freedom in organizing their main
            window. However, dock nesting leads to more complex (and less intuitive)
            behavior when a dock widget is dragged over the main window, since there
            are more ways in which a dropped dock widget may be placed in the dock
            area.</para>
            <para>Setting this property is identical to setting the
            AllowNestedDocks option using setDockOptions().</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMainWindow.UnifiedTitleAndToolBarOnMac">
            <summary>
            <para>This property holds whether the window uses the unified title and
            toolbar look on Mac OS X.</para>
            <para>Note that the Qt 5 implementation has several limitations
            compared to Qt 4:</para>
            <para></para>
            <para>Use in windows with OpenGL content is not supported. This
            includes QGLWidget and QOpenGLWidget.</para>
            <para>Using dockable or movable toolbars may result in painting errors
            and is not recommended</para>
            <para></para>
            <para>This property was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QMainWindow.DockOption">
            <summary>
            <para>This enum contains flags that specify the docking behavior of
            QMainWindow.</para>
            <para>These options only control how dock widgets may be dropped in a
            QMainWindow. They do not re-arrange the dock widgets to conform with the
            specified options. For this reason they should be set before any dock
            widgets are added to the main window. Exceptions to this are the
            AnimatedDocks and VerticalTabs options, which may be set at any
            time.</para>
            <para>This enum was introduced or modified in  Qt 4.3.</para>
            <para>The DockOptions type is a typedef for QFlags&lt;DockOption&gt;.
            It stores an OR combination of DockOption values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QMainWindow.DockOption.AnimatedDocks">
            <summary>Identical to the animated property.</summary>
        </member>
        <member name="F:QtWidgets.QMainWindow.DockOption.AllowNestedDocks">
            <summary>Identical to the dockNestingEnabled property.</summary>
        </member>
        <member name="F:QtWidgets.QMainWindow.DockOption.AllowTabbedDocks">
            <summary>The user can drop one dock widget "on top" of another. The two widgets are stacked and a tab bar appears for selecting which one is visible.</summary>
        </member>
        <member name="F:QtWidgets.QMainWindow.DockOption.ForceTabbedDocks">
            <summary>Each dock area contains a single stack of tabbed dock widgets. In other words, dock widgets cannot be placed next to each other in a dock area. If this option is set, AllowNestedDocks has no effect.</summary>
        </member>
        <member name="F:QtWidgets.QMainWindow.DockOption.VerticalTabs">
            <summary>The two vertical dock areas on the sides of the main window show their tabs vertically. If this option is not set, all dock areas show their tabs at the bottom. Implies AllowTabbedDocks. See also setTabPosition().</summary>
        </member>
        <member name="T:QtWidgets.QMdiArea">
            <summary>
            <para>The QMdiArea widget provides an area in which MDI windows are
            displayed.</para>
            </summary>
            <remarks>
            <para>QMdiArea functions, essentially, like a window manager for MDI
            windows. For instance, it draws the windows it manages on itself and
            arranges them in a cascading or tile pattern. QMdiArea is commonly used as
            the center widget in a QMainWindow to create MDI applications, but can also
            be placed in any layout. The following code adds an area to a main
            window:</para>
            <para>    QMainWindow *mainWindow = new QMainWindow;</para>
            <para>    mainWindow-&gt;setCentralWidget(mdiArea);</para>
            <para>Unlike the window managers for top-level windows, all window
            flags (Qt::WindowFlags) are supported by QMdiArea as long as the flags are
            supported by the current widget style. If a specific flag is not supported
            by the style (e.g., the WindowShadeButtonHint), you can still shade the
            window with showShaded().</para>
            <para>Subwindows in QMdiArea are instances of QMdiSubWindow. They are
            added to an MDI area with addSubWindow(). It is common to pass a QWidget,
            which is set as the internal widget, to this function, but it is also
            possible to pass a QMdiSubWindow directly.The class inherits QWidget, and
            you can use the same API as with a normal top-level window when
            programming. QMdiSubWindow also has behavior that is specific to MDI
            windows. See the QMdiSubWindow class description for more details.</para>
            <para>A subwindow becomes active when it gets the keyboard focus, or
            when setFocus() is called. The user activates a window by moving focus in
            the usual ways. The MDI area emits the subWindowActivated() signal when the
            active window changes, and the activeSubWindow() function returns the
            active subwindow.</para>
            <para>The convenience function subWindowList() returns a list of all
            subwindows. This information could be used in a popup menu containing a
            list of windows, for example.</para>
            <para>The subwindows are sorted by the current WindowOrder. This is
            used for the subWindowList() and for activateNextSubWindow() and
            activatePreviousSubWindow(). Also, it is used when cascading or tiling the
            windows with cascadeSubWindows() and tileSubWindows().</para>
            <para>QMdiArea provides two built-in layout strategies for subwindows:
            cascadeSubWindows() and tileSubWindows(). Both are slots and are easily
            connected to menu entries.</para>
            <para></para>
            <para> 	</para>
            <para></para>
            <para>Note: The default scroll bar property for QMdiArea is
            Qt::ScrollBarAlwaysOff.</para>
            <para></para>
            <para>See also QMdiSubWindow.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QMdiArea.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty mdi area. parent is passed to QWidget's
            constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.AddSubWindow(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Adds widget as a new subwindow to the MDI area. If windowFlags
            are non-zero, they will override the flags set on the widget.</para>
            <para>The widget can be either a QMdiSubWindow or another QWidget (in
            which case the MDI area will create a subwindow and set the widget as the
            internal widget).</para>
            <para>Note: Once the subwindow has been added, its parent will be the
            viewport widget of the QMdiArea.</para>
            <para>    QMdiArea mdiArea;</para>
            <para>    QMdiSubWindow *subWindow1 = new QMdiSubWindow;</para>
            <para>    subWindow1-&gt;setWidget(internalWidget1);</para>
            <para>    subWindow1-&gt;setAttribute(Qt::WA_DeleteOnClose);</para>
            <para>    mdiArea.addSubWindow(subWindow1);</para>
            <para></para>
            <para>    QMdiSubWindow *subWindow2 =</para>
            <para>        mdiArea.addSubWindow(internalWidget2);</para>
            <para>When you create your own subwindow, you must set the
            Qt::WA_DeleteOnClose widget attribute if you want the window to be deleted
            when closed in the MDI area. If not, the window will be hidden and the MDI
            area will not activate the next subwindow.</para>
            <para>Returns the QMdiSubWindow that is added to the MDI area.</para>
            <para>See also removeSubWindow().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.RemoveSubWindow(QtWidgets.QWidget)">
            <summary>
            <para>Removes widget from the MDI area. The widget must be either a
            QMdiSubWindow or a widget that is the internal widget of a subwindow. Note
            widget is never actually deleted by QMdiArea. If a QMdiSubWindow is passed
            in its parent is set to 0 and it is removed, but if an internal widget is
            passed in the child widget is set to 0 but the QMdiSubWindow is not
            removed.</para>
            <para>See also addSubWindow().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.SetOption(QtWidgets.QMdiArea.AreaOption,System.Boolean)">
            <summary>
            <para>If on is true, option is enabled on the MDI area; otherwise it is
            disabled. See AreaOption for the effect of each option.</para>
            <para>See also AreaOption and testOption().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.TestOption(QtWidgets.QMdiArea.AreaOption)">
            <summary>
            <para>Returns true if option is enabled; otherwise returns
            false.</para>
            <para>See also AreaOption and setOption().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.TileSubWindows">
            <summary>
            <para>Arranges all child windows in a tile pattern.</para>
            <para>See also cascadeSubWindows().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.CascadeSubWindows">
            <summary>
            <para>Arranges all the child windows in a cascade pattern.</para>
            <para>See also tileSubWindows().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.CloseActiveSubWindow">
            <summary>
            <para>Closes the active subwindow.</para>
            <para>See also closeAllSubWindows().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.CloseAllSubWindows">
            <summary>
            <para>Closes all subwindows by sending a QCloseEvent to each window.
            You may receive subWindowActivated() signals from subwindows before they
            are closed (if the MDI area activates the subwindow when another is
            closing).</para>
            <para>Subwindows that ignore the close event will remain open.</para>
            <para>See also closeActiveSubWindow().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.ActivateNextSubWindow">
            <summary>
            <para>Gives the keyboard focus to another window in the list of child
            windows. The window activated will be the next one determined by the
            current activation order.</para>
            <para>See also activatePreviousSubWindow() and
            QMdiArea::WindowOrder.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.ActivatePreviousSubWindow">
            <summary>
            <para>Gives the keyboard focus to another window in the list of child
            windows. The window activated will be the previous one determined by the
            current activation order.</para>
            <para>See also activateNextSubWindow() and
            QMdiArea::WindowOrder.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.SetupViewport(QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QAbstractScrollArea::setupViewport().</para>
            <para>This slot is called by QAbstractScrollArea after setViewport()
            has been called. Reimplement this function in a subclass of QMdiArea to
            initialize the new viewport before it is used.</para>
            <para>See also setViewport().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.EventFilter(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::eventFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.OnChildEvent(QtCore.QChildEvent)">
            <summary>
            <para>Reimplemented from QObject::childEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.OnViewportEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractScrollArea::viewportEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiArea.ScrollContentsBy(System.Int32,System.Int32)">
            <summary>
            <para>Reimplemented from
            QAbstractScrollArea::scrollContentsBy().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QMdiArea.SubWindowActivated">
            <summary>
            <para>QMdiArea emits this signal after window has been activated. When window is 0, QMdiArea has just deactivated its last active window, and there are no active windows on the workspace.</para>
            <para>See also QMdiArea::activeSubWindow().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiArea.Background">
            <summary>
            <para>This property holds the background brush for the
            workspace.</para>
            <para>This property sets the background brush for the workspace area
            itself. By default, it is a gray color, but can be any brush (e.g., colors,
            gradients or pixmaps).</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiArea.ActivationOrder">
            <summary>
            <para>This property holds the ordering criteria for subwindow
            lists.</para>
            <para>This property specifies the ordering criteria for the list of
            subwindows returned by subWindowList(). By default, it is the window
            creation order.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also subWindowList().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiArea.viewMode">
            <summary>
            <para>This property holds the way sub-windows are displayed in the
            QMdiArea.</para>
            <para>By default, the SubWindowView is used to display
            sub-windows.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also ViewMode, setTabShape(), and setTabPosition().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiArea.DocumentMode">
            <summary>
            <para>This property holds whether the tab bar is set to document mode
            in tabbed view mode.</para>
            <para>Document mode is disabled by default.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also QTabBar::documentMode and setViewMode().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiArea.TabsClosable">
            <summary>
            <para>This property holds whether the tab bar should place close
            buttons on each tab in tabbed view mode.</para>
            <para>Tabs are not closable by default.</para>
            <para>This property was introduced in  Qt 4.8.</para>
            <para>See also QTabBar::tabsClosable and setViewMode().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiArea.TabsMovable">
            <summary>
            <para>This property holds whether the user can move the tabs within the
            tabbar area in tabbed view mode.</para>
            <para>Tabs are not movable by default.</para>
            <para>This property was introduced in  Qt 4.8.</para>
            <para>See also QTabBar::movable and setViewMode().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiArea.TabShape">
            <summary>
            <para>This property holds the shape of the tabs in tabbed view
            mode.</para>
            <para>Possible values for this property are QTabWidget::Rounded
            (default) or QTabWidget::Triangular.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also QTabWidget::TabShape and setViewMode().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiArea.TabPosition">
            <summary>
            <para>This property holds the position of the tabs in tabbed view
            mode.</para>
            <para>Possible values for this property are described by the
            QTabWidget::TabPosition enum.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also QTabWidget::TabPosition and setViewMode().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiArea.ActiveSubWindow">
            <summary>
            <para>Returns a pointer to the current active subwindow. If no window
            is currently active, 0 is returned.</para>
            <para>Subwindows are treated as top-level windows with respect to
            window state, i.e., if a widget outside the MDI area is the active window,
            no subwindow will be active. Note that if a widget in the window in which
            the MDI area lives gains focus, the window will be activated.</para>
            <para>See also setActiveSubWindow() and Qt::WindowState.</para>
            <para></para>
            <para>Activates the subwindow window. If window is 0, any current
            active window is deactivated.</para>
            <para>See also activeSubWindow().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiArea.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiArea.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiArea.CurrentSubWindow">
            <summary>
            <para>Returns a pointer to the current subwindow, or 0 if there is no
            current subwindow.</para>
            <para>This function will return the same as activeSubWindow() if the
            QApplication containing QMdiArea is active.</para>
            <para>See also activeSubWindow() and
            QApplication::activeWindow().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QMdiArea.AreaOption">
            <summary>
            <para>This enum describes options that customize the behavior of the
            QMdiArea.</para>
            <para>The AreaOptions type is a typedef for QFlags&lt;AreaOption&gt;.
            It stores an OR combination of AreaOption values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QMdiArea.AreaOption.DontMaximizeSubWindowOnActivation">
            <summary>When the active subwindow is maximized, the default behavior is to maximize the next subwindow that is activated. Set this option if you do not want this behavior.</summary>
        </member>
        <member name="T:QtWidgets.QMdiArea.WindowOrder">
            <summary>
            <para>Specifies the criteria to use for ordering the list of child
            windows returned by subWindowList(). The functions cascadeSubWindows() and
            tileSubWindows() follow this order when arranging the windows.</para>
            <para>See also subWindowList().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QMdiArea.WindowOrder.CreationOrder">
            <summary>The windows are returned in the order of their creation.</summary>
        </member>
        <member name="F:QtWidgets.QMdiArea.WindowOrder.StackingOrder">
            <summary>The windows are returned in the order in which they are stacked, with the top-most window being last in the list.</summary>
        </member>
        <member name="F:QtWidgets.QMdiArea.WindowOrder.ActivationHistoryOrder">
            <summary>The windows are returned in the order in which they were activated.</summary>
        </member>
        <member name="T:QtWidgets.QMdiArea.ViewMode">
            <summary>
            <para>This enum describes the view mode of the area; i.e. how
            sub-windows will be displayed.</para>
            <para>This enum was introduced or modified in  Qt 4.4.</para>
            <para>See also setViewMode().</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QMdiArea.ViewMode.SubWindowView">
            <summary>Display sub-windows with window frames (default).</summary>
        </member>
        <member name="F:QtWidgets.QMdiArea.ViewMode.TabbedView">
            <summary>Display sub-windows with tabs in a tab bar.</summary>
        </member>
        <member name="T:QtWidgets.QMdiSubWindow">
            <summary>
            <para>The QMdiSubWindow class provides a subwindow class for
            QMdiArea.</para>
            </summary>
            <remarks>
            <para>QMdiSubWindow represents a top-level window in a QMdiArea, and
            consists of a title bar with window decorations, an internal widget, and
            (depending on the current style) a window frame and a size grip.
            QMdiSubWindow has its own layout, which consists of the title bar and a
            center area for the internal widget.</para>
            <para></para>
            <para>The most common way to construct a QMdiSubWindow is to call
            QMdiArea::addSubWindow() with the internal widget as the argument. You can
            also create a subwindow yourself, and set an internal widget by calling
            setWidget().</para>
            <para>You use the same API when programming with subwindows as with
            regular top-level windows (e.g., you can call functions such as show(),
            hide(), showMaximized(), and setWindowTitle()).</para>
            <para></para>
            <para>Subwindow Handling</para>
            <para>QMdiSubWindow also supports behavior specific to subwindows in an
            MDI area.</para>
            <para>By default, each QMdiSubWindow is visible inside the MDI area
            viewport when moved around, but it is also possible to specify transparent
            window movement and resizing behavior, where only the outline of a
            subwindow is updated during these operations. The setOption() function is
            used to enable this behavior.</para>
            <para>The isShaded() function detects whether the subwindow is
            currently shaded (i.e., the window is collapsed so that only the title bar
            is visible). To enter shaded mode, call showShaded(). QMdiSubWindow emits
            the windowStateChanged() signal whenever the window state has changed
            (e.g., when the window becomes minimized, or is restored). It also emits
            aboutToActivate() before it is activated.</para>
            <para>In keyboard-interactive mode, the windows are moved and resized
            with the keyboard. You can enter this mode through the system menu of the
            window. The keyboardSingleStep and keyboardPageStep properties control the
            distance the widget is moved or resized for each keypress event. When shift
            is pressed down page step is used; otherwise single step is used.</para>
            <para>You can also change the active window with the keyboard. By
            pressing the control and tab keys at the same time, the next (using the
            current WindowOrder) subwindow will be activated. By pressing control,
            shift, and tab, you will activate the previous window. This is equivalent
            to calling activateNextSubWindow() and activatePreviousSubWindow(). Note
            that these shortcuts overrides global shortcuts, but not the QMdiAreas
            shortcuts.</para>
            <para></para>
            <para>See also QMdiArea.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.#ctor(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a new QMdiSubWindow widget. The parent and flags
            arguments are passed to QWidget's constructor.</para>
            <para>Instead of using addSubWindow(), it is also simply possible to
            use setParent() when you add the subwindow to a QMdiArea.</para>
            <para>Note that only QMdiSubWindows can be set as children of QMdiArea;
            you cannot, for instance, write:</para>
            <para>//bad code</para>
            <para>QMdiArea mdiArea;</para>
            <para>QTextEdit editor(&amp;mdiArea); // invalid child widget</para>
            <para>See also QMdiArea::addSubWindow().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.SetOption(QtWidgets.QMdiSubWindow.SubWindowOption,System.Boolean)">
            <summary>
            <para>If on is true, option is enabled on the subwindow; otherwise it
            is disabled. See SubWindowOption for the effect of each option.</para>
            <para>See also SubWindowOption and testOption().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.TestOption(QtWidgets.QMdiSubWindow.SubWindowOption)">
            <summary>
            <para>Returns true if option is enabled; otherwise returns
            false.</para>
            <para>See also SubWindowOption and setOption().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.ShowSystemMenu">
            <summary>
            <para>Shows the system menu below the system menu icon in the title
            bar.</para>
            <para>See also setSystemMenu() and systemMenu().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.ShowShaded">
            <summary>
            <para>Calling this function makes the subwindow enter the shaded mode.
            When the subwindow is shaded, only the title bar is visible.</para>
            <para>Although shading is not supported by all styles, this function
            will still show the subwindow as shaded, regardless of whether support for
            shading is available. However, when used with styles without shading
            support, the user will be unable to return from shaded mode through the
            user interface (e.g., through a shade button in the title bar).</para>
            <para>See also isShaded().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.EventFilter(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::eventFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnHideEvent(QtGui.QHideEvent)">
            <summary>
            <para>Reimplemented from QWidget::hideEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnCloseEvent(QtGui.QCloseEvent)">
            <summary>
            <para>Reimplemented from QWidget::closeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnLeaveEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::leaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            <para>Warning: When maximizing or restoring a subwindow, the resulting
            call to this function may have an invalid QResizeEvent::oldSize().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnMoveEvent(QtGui.QMoveEvent)">
            <summary>
            <para>Reimplemented from QWidget::moveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnMouseDoubleClickEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseDoubleClickEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnContextMenuEvent(QtGui.QContextMenuEvent)">
            <summary>
            <para>Reimplemented from QWidget::contextMenuEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMdiSubWindow.OnChildEvent(QtCore.QChildEvent)">
            <summary>
            <para>Reimplemented from QObject::childEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QMdiSubWindow.WindowStateChanged">
            <summary>
            <para>QMdiSubWindow emits this signal after the window state changes. oldState is the window state before it changed, and newState is the new, current state.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QMdiSubWindow.AboutToActivate">
            <summary>
            <para>QMdiSubWindow emits this signal immediately before it is activated. After the subwindow has been activated, the QMdiArea that manages the subwindow will also emit the subWindowActivated() signal.</para>
            <para>See also QMdiArea::subWindowActivated().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiSubWindow.Widget">
            <summary>
            <para>Returns the current internal widget.</para>
            <para>See also setWidget().</para>
            <para></para>
            <para>Sets widget as the internal widget of this subwindow. The
            internal widget is displayed in the center of the subwindow beneath the
            title bar.</para>
            <para>QMdiSubWindow takes temporary ownership of widget; you do not
            have to delete it. Any existing internal widget will be removed and
            reparented to the root window.</para>
            <para>See also widget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiSubWindow.KeyboardSingleStep">
            <summary>
            <para>This property holds sets how far a widget should move or resize
            when using the keyboard arrow keys.</para>
            <para>When in keyboard-interactive mode, you can use the arrow and page
            keys to either move or resize the window. This property controls the arrow
            keys. The common way to enter keyboard interactive mode is to enter the
            subwindow menu, and select either &quot;resize&quot; or
            &quot;move&quot;.</para>
            <para>The default keyboard single step value is 5 pixels.</para>
            <para>See also keyboardPageStep.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiSubWindow.KeyboardPageStep">
            <summary>
            <para>This property holds sets how far a widget should move or resize
            when using the keyboard page keys.</para>
            <para>When in keyboard-interactive mode, you can use the arrow and page
            keys to either move or resize the window. This property controls the page
            keys. The common way to enter keyboard interactive mode is to enter the
            subwindow menu, and select either &quot;resize&quot; or
            &quot;move&quot;.</para>
            <para>The default keyboard page step value is 20 pixels.</para>
            <para>See also keyboardSingleStep.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiSubWindow.SystemMenu">
            <summary>
            <para>Returns a pointer to the current system menu, or zero if no
            system menu is set. QMdiSubWindow provides a default system menu, but you
            can also set the menu with setSystemMenu().</para>
            <para>See also setSystemMenu() and showSystemMenu().</para>
            <para></para>
            <para>Sets systemMenu as the current system menu for this
            subwindow.</para>
            <para>By default, each QMdiSubWindow has a standard system menu.</para>
            <para>QActions for the system menu created by QMdiSubWindow will
            automatically be updated depending on the current window state; e.g., the
            minimize action will be disabled after the window is minimized.</para>
            <para>QActions added by the user are not updated by
            QMdiSubWindow.</para>
            <para>QMdiSubWindow takes ownership of systemMenu; you do not have to
            delete it. Any existing menus will be deleted.</para>
            <para>See also systemMenu() and showSystemMenu().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiSubWindow.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiSubWindow.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiSubWindow.IsShaded">
            <summary>
            <para>Returns true if this window is shaded; otherwise returns
            false.</para>
            <para>A window is shaded if it is collapsed so that only the title bar
            is visible.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMdiSubWindow.MdiArea">
            <summary>
            <para>Returns the area containing this sub-window, or 0 if there is
            none.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QMdiArea::addSubWindow().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QMdiSubWindow.SubWindowOption">
            <summary>
            <para>This enum describes options that customize the behavior of
            QMdiSubWindow.</para>
            <para>The SubWindowOptions type is a typedef for
            QFlags&lt;SubWindowOption&gt;. It stores an OR combination of
            SubWindowOption values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QMdiSubWindow.SubWindowOption.RubberBandResize">
            <summary>If you enable this option, a rubber band control is used to represent the subwindow's outline, and the user resizes this instead of the subwindow itself. As a result, the subwindow maintains its original position and size until the resize operation has been completed, at which time it will receive a single QResizeEvent. By default, this option is disabled.</summary>
        </member>
        <member name="F:QtWidgets.QMdiSubWindow.SubWindowOption.RubberBandMove">
            <summary>If you enable this option, a rubber band control is used to represent the subwindow's outline, and the user moves this instead of the subwindow itself. As a result, the subwindow remains in its original position until the move operation has completed, at which time a QMoveEvent is sent to the window. By default, this option is disabled.</summary>
        </member>
        <member name="T:QtWidgets.QMenu">
            <summary>
            <para>The QMenu class provides a menu widget for use in menu bars,
            context menus, and other popup menus.</para>
            </summary>
            <remarks>
            <para>A menu widget is a selection menu. It can be either a pull-down
            menu in a menu bar or a standalone context menu. Pull-down menus are shown
            by the menu bar when the user clicks on the respective item or presses the
            specified shortcut key. Use QMenuBar::addMenu() to insert a menu into a
            menu bar. Context menus are usually invoked by some special keyboard key or
            by right-clicking. They can be executed either asynchronously with popup()
            or synchronously with exec(). Menus can also be invoked in response to
            button presses; these are just like context menus except for how they are
            invoked.</para>
            <para></para>
            <para> 	</para>
            <para></para>
            <para>Fig. A menu shown in Fusion widget style, Windows XP widget
            style, and Macintosh widget style.</para>
            <para></para>
            <para>Actions</para>
            <para>A menu consists of a list of action items. Actions are added with
            the addAction(), addActions() and insertAction() functions. An action is
            represented vertically and rendered by QStyle. In addition, actions can
            have a text label, an optional icon drawn on the very left side, and
            shortcut key sequence such as &quot;Ctrl+X&quot;.</para>
            <para>The existing actions held by a menu can be found with
            actions().</para>
            <para>There are four kinds of action items: separators, actions that
            show a submenu, widgets, and actions that perform an action. Separators are
            inserted with addSeparator(), submenus with addMenu(), and all other items
            are considered action items.</para>
            <para>When inserting action items you usually specify a receiver and a
            slot. The receiver will be notifed whenever the item is triggered(). In
            addition, QMenu provides two signals, activated() and highlighted(), which
            signal the QAction that was triggered from the menu.</para>
            <para>You clear a menu with clear() and remove individual action items
            with removeAction().</para>
            <para>A QMenu can also provide a tear-off menu. A tear-off menu is a
            top-level window that contains a copy of the menu. This makes it possible
            for the user to &quot;tear off&quot; frequently used menus and position
            them in a convenient place on the screen. If you want this functionality
            for a particular menu, insert a tear-off handle with setTearOffEnabled().
            When using tear-off menus, bear in mind that the concept isn't typically
            used on Microsoft Windows so some users may not be familiar with it.
            Consider using a QToolBar instead.</para>
            <para>Widgets can be inserted into menus with the QWidgetAction class.
            Instances of this class are used to hold widgets, and are inserted into
            menus with the addAction() overload that takes a QAction.</para>
            <para>Conversely, actions can be added to widgets with the addAction(),
            addActions() and insertAction() functions.</para>
            <para>Warning: To make QMenu visible on the screen, exec() or popup()
            should be used instead of show().</para>
            <para></para>
            <para>QMenu on Qt for Windows CE</para>
            <para>If a menu is integrated into the native menubar on Windows Mobile
            we do not support the signals: aboutToHide (), aboutToShow () and hovered
            (). It is not possible to display an icon in a native menu on Windows
            Mobile.</para>
            <para></para>
            <para>QMenu on Mac OS X with Qt Build Against Cocoa</para>
            <para>QMenu can be inserted only once in a menu/menubar. Subsequent
            insertions will have no effect or will result in a disabled menu
            item.</para>
            <para>See the Menus example for an example of how to use QMenuBar and
            QMenu in your application.</para>
            <para>Important inherited functions: addAction(), removeAction(),
            clear(), addSeparator(), and addMenu().</para>
            <para></para>
            <para>See also QMenuBar, GUI Design Handbook: Menu, Drop-Down and
            Pop-Up, Application Example, Menus Example, and Recent Files
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QMenu.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a menu with parent parent.</para>
            <para>Although a popup menu is always a top-level widget, if a parent
            is passed the popup menu will be deleted when that parent is destroyed (as
            with any other QObject).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.#ctor(System.String,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a menu with a title and a parent.</para>
            <para>Although a popup menu is always a top-level widget, if a parent
            is passed the popup menu will be deleted when that parent is destroyed (as
            with any other QObject).</para>
            <para>See also title.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.AddAction(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function creates a new action with text. The
            function adds the newly created action to the menu's list of actions, and
            returns it.</para>
            <para>QMenu takes ownership of the returned QAction.</para>
            <para>See also QWidget::addAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.AddAction(QtGui.QIcon,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function creates a new action with an icon and
            some text. The function adds the newly created action to the menu's list of
            actions, and returns it.</para>
            <para>QMenu takes ownership of the returned QAction.</para>
            <para>See also QWidget::addAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.AddAction(System.String,QtCore.QObject,System.String,QtGui.QKeySequence)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function creates a new action with the text text
            and an optional shortcut shortcut. The action's triggered() signal is
            connected to the receiver's member slot. The function adds the newly
            created action to the menu's list of actions and returns it.</para>
            <para>QMenu takes ownership of the returned QAction.</para>
            <para>See also QWidget::addAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.AddAction(QtGui.QIcon,System.String,QtCore.QObject,System.String,QtGui.QKeySequence)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function creates a new action with an icon and
            some text and an optional shortcut shortcut. The action's triggered()
            signal is connected to the member slot of the receiver object. The function
            adds the newly created action to the menu's list of actions, and returns
            it.</para>
            <para>QMenu takes ownership of the returned QAction.</para>
            <para>See also QWidget::addAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.AddMenu(QtWidgets.QMenu)">
            <summary>
            <para>This convenience function adds menu as a submenu to this menu. It
            returns menu's menuAction(). This menu does not take ownership of
            menu.</para>
            <para>See also QWidget::addAction() and QMenu::menuAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.AddMenu(System.String)">
            <summary>
            <para>Appends a new QMenu with title to the menu. The menu takes
            ownership of the menu. Returns the new menu.</para>
            <para>See also QWidget::addAction() and QMenu::menuAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.AddMenu(QtGui.QIcon,System.String)">
            <summary>
            <para>Appends a new QMenu with icon and title to the menu. The menu
            takes ownership of the menu. Returns the new menu.</para>
            <para>See also QWidget::addAction() and QMenu::menuAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.AddSeparator">
            <summary>
            <para>This convenience function creates a new separator action, i.e. an
            action with QAction::isSeparator() returning true, and adds the new action
            to this menu's list of actions. It returns the newly created action.</para>
            <para>QMenu takes ownership of the returned QAction.</para>
            <para>See also QWidget::addAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.AddSection(System.String)">
            <summary>
            <para>This convenience function creates a new section action, i.e. an
            action with QAction::isSeparator() returning true but also having text
            hint, and adds the new action to this menu's list of actions. It returns
            the newly created action.</para>
            <para>The rendering of the hint is style and platform dependent. Widget
            styles can use the text information in the rendering for sections, or can
            choose to ignore it and render sections like simple separators.</para>
            <para>QMenu takes ownership of the returned QAction.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QWidget::addAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.AddSection(QtGui.QIcon,System.String)">
            <summary>
            <para>This convenience function creates a new section action, i.e. an
            action with QAction::isSeparator() returning true but also having text and
            icon hints, and adds the new action to this menu's list of actions. It
            returns the newly created action.</para>
            <para>The rendering of the hints is style and platform dependent.
            Widget styles can use the text and icon information in the rendering for
            sections, or can choose to ignore them and render sections like simple
            separators.</para>
            <para>QMenu takes ownership of the returned QAction.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QWidget::addAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.InsertMenu(QtWidgets.QAction,QtWidgets.QMenu)">
            <summary>
            <para>This convenience function inserts menu before action before and
            returns the menus menuAction().</para>
            <para>See also QWidget::insertAction() and addMenu().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.InsertSeparator(QtWidgets.QAction)">
            <summary>
            <para>This convenience function creates a new separator action, i.e. an
            action with QAction::isSeparator() returning true. The function inserts the
            newly created action into this menu's list of actions before action before
            and returns it.</para>
            <para>QMenu takes ownership of the returned QAction.</para>
            <para>See also QWidget::insertAction() and addSeparator().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.InsertSection(QtWidgets.QAction,System.String)">
            <summary>
            <para>This convenience function creates a new title action, i.e. an
            action with QAction::isSeparator() returning true but also having text
            hint. The function inserts the newly created action into this menu's list
            of actions before action before and returns it.</para>
            <para>The rendering of the hint is style and platform dependent. Widget
            styles can use the text information in the rendering for sections, or can
            choose to ignore it and render sections like simple separators.</para>
            <para>QMenu takes ownership of the returned QAction.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QWidget::insertAction() and addSection().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.InsertSection(QtWidgets.QAction,QtGui.QIcon,System.String)">
            <summary>
            <para>This convenience function creates a new title action, i.e. an
            action with QAction::isSeparator() returning true but also having text and
            icon hints. The function inserts the newly created action into this menu's
            list of actions before action before and returns it.</para>
            <para>The rendering of the hints is style and platform dependent.
            Widget styles can use the text and icon information in the rendering for
            sections, or can choose to ignore them and render sections like simple
            separators.</para>
            <para>QMenu takes ownership of the returned QAction.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QWidget::insertAction() and addSection().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.Clear">
            <summary>
            <para>Removes all the menu's actions. Actions owned by the menu and not
            shown in any other widget are deleted.</para>
            <para>See also removeAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.HideTearOffMenu">
            <summary>
            <para>This function will forcibly hide the torn off menu making it
            disappear from the users desktop.</para>
            <para>See also isTearOffMenuVisible() and isTearOffEnabled().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.Popup(QtCore.QPoint,QtWidgets.QAction)">
            <summary>
            <para>Displays the menu so that the action atAction will be at the
            specified global position p. To translate a widget's local coordinates into
            global coordinates, use QWidget::mapToGlobal().</para>
            <para>When positioning a menu with exec() or popup(), bear in mind that
            you cannot rely on the menu's current size(). For performance reasons, the
            menu adapts its size only when necessary, so in many cases, the size before
            and after the show is different. Instead, use sizeHint() which calculates
            the proper size depending on the menu's current contents.</para>
            <para>See also QWidget::mapToGlobal() and exec().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.Exec">
            <summary>
            <para>Executes this menu synchronously.</para>
            <para>This is equivalent to exec(pos()).</para>
            <para>This returns the triggered QAction in either the popup menu or
            one of its submenus, or 0 if no item was triggered (normally because the
            user pressed Esc).</para>
            <para>In most situations you'll want to specify the position yourself,
            for example, the current mouse position:</para>
            <para>exec(QCursor::pos());</para>
            <para>or aligned to a widget:</para>
            <para>exec(somewidget.mapToGlobal(QPoint(0,0)));</para>
            <para>or in reaction to a QMouseEvent *e:</para>
            <para>exec(e-&gt;globalPos());</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.Exec(QtCore.QPoint,QtWidgets.QAction)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Executes this menu synchronously.</para>
            <para>Pops up the menu so that the action action will be at the
            specified global position p. To translate a widget's local coordinates into
            global coordinates, use QWidget::mapToGlobal().</para>
            <para>This returns the triggered QAction in either the popup menu or
            one of its submenus, or 0 if no item was triggered (normally because the
            user pressed Esc).</para>
            <para>Note that all signals are emitted as usual. If you connect a
            QAction to a slot and call the menu's exec(), you get the result both via
            the signal-slot connection and in the return value of exec().</para>
            <para>Common usage is to position the menu at the current mouse
            position:</para>
            <para>exec(QCursor::pos());</para>
            <para>or aligned to a widget:</para>
            <para>exec(somewidget.mapToGlobal(QPoint(0, 0)));</para>
            <para>or in reaction to a QMouseEvent *e:</para>
            <para>exec(e-&gt;globalPos());</para>
            <para>When positioning a menu with exec() or popup(), bear in mind that
            you cannot rely on the menu's current size(). For performance reasons, the
            menu adapts its size only when necessary. So in many cases, the size before
            and after the show is different. Instead, use sizeHint() which calculates
            the proper size depending on the menu's current contents.</para>
            <para>See also popup() and QWidget::mapToGlobal().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.ActionGeometry(QtWidgets.QAction)">
            <summary>
            <para>Returns the geometry of action act.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.ActionAt(QtCore.QPoint)">
            <summary>
            <para>Returns the item at pt; returns 0 if there is no item
            there.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.OnWheelEvent(QtGui.QWheelEvent)">
            <summary>
            <para>Reimplemented from QWidget::wheelEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.OnEnterEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::enterEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.OnLeaveEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::leaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.OnHideEvent(QtGui.QHideEvent)">
            <summary>
            <para>Reimplemented from QWidget::hideEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.OnActionEvent(QtGui.QActionEvent)">
            <summary>
            <para>Reimplemented from QWidget::actionEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.FocusNextPrevChild(System.Boolean)">
            <summary>
            <para>Reimplemented from QWidget::focusNextPrevChild().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.InitStyleOption(QtWidgets.QStyleOptionMenuItem,QtWidgets.QAction)">
            <summary>
            <para>Initialize option with the values from this menu and information
            from action. This method is useful for subclasses when they need a
            QStyleOptionMenuItem, but don't want to fill in all the information
            themselves.</para>
            <para>See also QStyleOption::initFrom() and
            QMenuBar::initStyleOption().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.AddAction(System.String,QtCore.QObject,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function creates a new action with the text text
            and an optional shortcut shortcut. The action's triggered() signal is
            connected to the receiver's member slot. The function adds the newly
            created action to the menu's list of actions and returns it.</para>
            <para>QMenu takes ownership of the returned QAction.</para>
            <para>See also QWidget::addAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenu.AddAction(QtGui.QIcon,System.String,QtCore.QObject,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function creates a new action with an icon and
            some text and an optional shortcut shortcut. The action's triggered()
            signal is connected to the member slot of the receiver object. The function
            adds the newly created action to the menu's list of actions, and returns
            it.</para>
            <para>QMenu takes ownership of the returned QAction.</para>
            <para>See also QWidget::addAction().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QMenu.AboutToShow">
            <summary>
            <para>This signal is emitted just before the menu is shown to the user.</para>
            <para>See also aboutToHide() and show().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QMenu.AboutToHide">
            <summary>
            <para>This signal is emitted just before the menu is hidden from the user.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also aboutToShow() and hide().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QMenu.Triggered">
            <summary>
            <para>This signal is emitted when an action in this menu is triggered.</para>
            <para>action is the action that caused the signal to be emitted.</para>
            <para>Normally, you connect each menu action's triggered() signal to its own custom slot, but sometimes you will want to connect several actions to a single slot, for example, when you have a group of closely related actions, such as &quot;left justify&quot;, &quot;center&quot;, &quot;right justify&quot;.</para>
            <para>Note: This signal is emitted for the main parent menu in a hierarchy. Hence, only the parent menu needs to be connected to a slot; sub-menus need not be connected.</para>
            <para>See also hovered() and QAction::triggered().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QMenu.Hovered">
            <summary>
            <para>This signal is emitted when a menu action is highlighted; action is the action that caused the signal to be emitted.</para>
            <para>Often this is used to update status information.</para>
            <para>See also triggered() and QAction::hovered().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenu.TearOffEnabled">
            <summary>
            <para>This property holds whether the menu supports being torn
            off.</para>
            <para>When true, the menu contains a special tear-off item (often shown
            as a dashed line at the top of the menu) that creates a copy of the menu
            when it is triggered.</para>
            <para>This &quot;torn-off&quot; copy lives in a separate window. It
            contains the same menu items as the original menu, with the exception of
            the tear-off handle.</para>
            <para>By default, this property is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenu.DefaultAction">
            <summary>
            <para>Returns the current default action.</para>
            <para>See also setDefaultAction().</para>
            <para></para>
            <para>This sets the default action to act. The default action may have
            a visual cue, depending on the current QStyle. A default action usually
            indicates what will happen by default when a drop occurs.</para>
            <para>See also defaultAction().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenu.ActiveAction">
            <summary>
            <para>Returns the currently highlighted action, or 0 if no action is
            currently highlighted.</para>
            <para>See also setActiveAction().</para>
            <para></para>
            <para>Sets the currently highlighted action to act.</para>
            <para>See also activeAction().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenu.Title">
            <summary>
            <para>This property holds the title of the menu.</para>
            <para>This is equivalent to the QAction::text property of the
            menuAction().</para>
            <para>By default, this property contains an empty string.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenu.Icon">
            <summary>
            <para>This property holds the icon of the menu.</para>
            <para>This is equivalent to the QAction::icon property of the
            menuAction().</para>
            <para>By default, if no icon is explicitly set, this property contains
            a null icon.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenu.SeparatorsCollapsible">
            <summary>
            <para>This property holds whether consecutive separators should be
            collapsed.</para>
            <para>This property specifies whether consecutive separators in the
            menu should be visually collapsed to a single one. Separators at the
            beginning or the end of the menu are also hidden.</para>
            <para>By default, this property is true.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenu.ToolTipsVisible">
            <summary>
            <para>This property holds whether tooltips of menu actions should be
            visible.</para>
            <para>This property specifies whether action menu entries show their
            tooltip.</para>
            <para>By default, this property is false.</para>
            <para>This property was introduced in  Qt 5.1.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenu.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenu.IsEmpty">
            <summary>
            <para>Returns true if there are no visible actions inserted into the
            menu, false otherwise.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also QWidget::actions().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenu.IsTearOffMenuVisible">
            <summary>
            <para>When a menu is torn off a second menu is shown to display the
            menu contents in a new window. When the menu is in this mode and the menu
            is visible returns true; otherwise false.</para>
            <para>See also hideTearOffMenu() and isTearOffEnabled().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenu.MenuAction">
            <summary>
            <para>Returns the action associated with this menu.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenu.ColumnCount">
            <summary>
            <para>If a menu does not fit on the screen it lays itself out so that
            it does fit. It is style dependent what layout means (for example, on
            Windows it will use multiple columns).</para>
            <para>This functions returns the number of columns necessary.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QMenuBar">
            <summary>
            <para>The QMenuBar class provides a horizontal menu bar.</para>
            </summary>
            <remarks>
            <para>A menu bar consists of a list of pull-down menu items. You add
            menu items with addMenu(). For example, asuming that menubar is a pointer
            to a QMenuBar and fileMenu is a pointer to a QMenu, the following statement
            inserts the menu into the menu bar:</para>
            <para>menubar-&gt;addMenu(fileMenu);</para>
            <para>The ampersand in the menu item's text sets Alt+F as a shortcut
            for this menu. (You can use &quot;&amp;&amp;&quot; to get a real ampersand
            in the menu bar.)</para>
            <para>There is no need to lay out a menu bar. It automatically sets its
            own geometry to the top of the parent widget and changes it appropriately
            whenever the parent is resized.</para>
            <para></para>
            <para>Usage</para>
            <para>In most main window style applications you would use the
            menuBar() function provided in QMainWindow, adding QMenus to the menu bar
            and adding QActions to the pop-up menus.</para>
            <para>Example (from the Menus example):</para>
            <para>    fileMenu =
            menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));</para>
            <para>    fileMenu-&gt;addAction(newAct);</para>
            <para>Menu items may be removed with removeAction().</para>
            <para>Widgets can be added to menus by using instances of the
            QWidgetAction class to hold them. These actions can then be inserted into
            menus in the usual way; see the QMenu documentation for more
            details.</para>
            <para></para>
            <para>Platform Dependent Look and Feel</para>
            <para>Different platforms have different requirements for the
            appearance of menu bars and their behavior when the user interacts with
            them. For example, Windows systems are often configured so that the
            underlined character mnemonics that indicate keyboard shortcuts for items
            in the menu bar are only shown when the Alt key is pressed.</para>
            <para></para>
            <para>QMenuBar on OS X</para>
            <para>QMenuBar on OS X is a wrapper for using the system-wide menu bar.
            If you have multiple menu bars in one dialog the outermost menu bar
            (normally inside a widget with widget flag Qt::Window) will be used for the
            system-wide menu bar.</para>
            <para>Qt for OS X also provides a menu bar merging feature to make
            QMenuBar conform more closely to accepted OS X menu bar layout. The merging
            functionality is based on string matching the title of a QMenu entry. These
            strings are translated (using QObject::tr()) in the &quot;QMenuBar&quot;
            context. If an entry is moved its slots will still fire as if it was in the
            original place. The table below outlines the strings looked for and where
            the entry is placed if matched:</para>
            <para></para>
            <para> String matchesPlacementNotes</para>
            <para>about.*	Application Menu | About &lt;application name&gt;	The
            application name is fetched from the Info.plist file (see note below). If
            this entry is not found no About item will appear in the Application
            Menu.</para>
            <para>config, options, setup, settings or preferences	Application Menu
            | Preferences	If this entry is not found the Settings item will be
            disabled</para>
            <para>quit or exit	Application Menu | Quit &lt;application name&gt;	If
            this entry is not found a default Quit item will be created to call
            QApplication::quit()</para>
            <para></para>
            <para>You can override this behavior by using the QAction::menuRole()
            property.</para>
            <para>If you want all windows in a Mac application to share one menu
            bar, you must create a menu bar that does not have a parent. Create a
            parent-less menu bar this way:</para>
            <para>QMenuBar *menuBar = new QMenuBar(0);</para>
            <para>Note: Do not call QMainWindow::menuBar() to create the shared
            menu bar, because that menu bar will have the QMainWindow as its parent.
            That menu bar would only be displayed for the parent QMainWindow.</para>
            <para>Note: The text used for the application name in the menu bar is
            obtained from the value set in the Info.plist file in the application's
            bundle. See Qt for OS X - Deployment for more information.</para>
            <para></para>
            <para>QMenuBar on Windows CE</para>
            <para>QMenuBar on Windows CE is a wrapper for using the system-wide
            menu bar, similar to the Mac. This feature is activated for Windows Mobile
            and integrates QMenuBar with the native soft keys. The left soft key can be
            controlled with QMenuBar::setDefaultAction() and the right soft key can be
            used to access the menu bar.</para>
            <para>The hovered() signal is not supported for the native menu
            integration. Also, it is not possible to display an icon in a native menu
            on Windows Mobile.</para>
            <para></para>
            <para>Examples</para>
            <para>The Menus example shows how to use QMenuBar and QMenu. The other
            main window application examples also provide menus using these
            classes.</para>
            <para></para>
            <para>See also QMenu, QShortcut, QAction, Introduction to Apple Human
            Interface Guidelines, GUI Design Handbook: Menu Bar, and Menus
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QMenuBar.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a menu bar with parent parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.AddAction(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function creates a new action with text. The
            function adds the newly created action to the menu's list of actions, and
            returns it.</para>
            <para>See also QWidget::addAction() and QWidget::actions().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.AddAction(System.String,QtCore.QObject,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function creates a new action with the given
            text. The action's triggered() signal is connected to the receiver's member
            slot. The function adds the newly created action to the menu's list of
            actions and returns it.</para>
            <para>See also QWidget::addAction() and QWidget::actions().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.AddMenu(QtWidgets.QMenu)">
            <summary>
            <para>Appends menu to the menu bar. Returns the menu's
            menuAction().</para>
            <para>Note: The returned QAction object can be used to hide the
            corresponding menu.</para>
            <para>See also QWidget::addAction() and QMenu::menuAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.AddMenu(System.String)">
            <summary>
            <para>Appends a new QMenu with title to the menu bar. The menu bar
            takes ownership of the menu. Returns the new menu.</para>
            <para>See also QWidget::addAction() and QMenu::menuAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.AddMenu(QtGui.QIcon,System.String)">
            <summary>
            <para>Appends a new QMenu with icon and title to the menu bar. The menu
            bar takes ownership of the menu. Returns the new menu.</para>
            <para>See also QWidget::addAction() and QMenu::menuAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.AddSeparator">
            <summary>
            <para>Appends a separator to the menu.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.InsertSeparator(QtWidgets.QAction)">
            <summary>
            <para>This convenience function creates a new separator action, i.e. an
            action with QAction::isSeparator() returning true. The function inserts the
            newly created action into this menu bar's list of actions before action
            before and returns it.</para>
            <para>See also QWidget::insertAction() and addSeparator().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.InsertMenu(QtWidgets.QAction,QtWidgets.QMenu)">
            <summary>
            <para>This convenience function inserts menu before action before and
            returns the menus menuAction().</para>
            <para>See also QWidget::insertAction() and addMenu().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.Clear">
            <summary>
            <para>Removes all the actions from the menu bar.</para>
            <para>Note: On OS X, menu items that have been merged to the system
            menu bar are not removed by this function. One way to handle this would be
            to remove the extra actions yourself. You can set the menu role on the
            different menus, so that you know ahead of time which menu items get merged
            and which do not. Then decide what to recreate or remove yourself.</para>
            <para>See also removeAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.HeightForWidth(System.Int32)">
            <summary>
            <para>Reimplemented from QWidget::heightForWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.ActionGeometry(QtWidgets.QAction)">
            <summary>
            <para>Returns the geometry of action act as a QRect.</para>
            <para>See also actionAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.ActionAt(QtCore.QPoint)">
            <summary>
            <para>Returns the QAction at pt. Returns 0 if there is no action at pt
            or if the location has a separator.</para>
            <para>See also addAction() and addSeparator().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.SetCornerWidget(QtWidgets.QWidget,QtCore.Qt.Corner)">
            <summary>
            <para>This sets the given widget to be shown directly on the left of
            the first menu item, or on the right of the last menu item, depending on
            corner.</para>
            <para>The menu bar takes ownership of widget, reparenting it into the
            menu bar. However, if the corner already contains a widget, this previous
            widget will no longer be managed and will still be a visible child of the
            menu bar.</para>
            <para>Note: Using a corner other than Qt::TopRightCorner or
            Qt::TopLeftCorner will result in a warning.</para>
            <para>See also cornerWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.CornerWidget(QtCore.Qt.Corner)">
            <summary>
            <para>Returns the widget on the left of the first or on the right of
            the last menu item, depending on corner.</para>
            <para>Note: Using a corner other than Qt::TopRightCorner or
            Qt::TopLeftCorner will result in a warning.</para>
            <para>See also setCornerWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.OnLeaveEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::leaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.OnActionEvent(QtGui.QActionEvent)">
            <summary>
            <para>Reimplemented from QWidget::actionEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.EventFilter(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::eventFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QMenuBar.InitStyleOption(QtWidgets.QStyleOptionMenuItem,QtWidgets.QAction)">
            <summary>
            <para>Initialize option with the values from the menu bar and
            information from action. This method is useful for subclasses when they
            need a QStyleOptionMenuItem, but don't want to fill in all the information
            themselves.</para>
            <para>See also QStyleOption::initFrom() and
            QMenu::initStyleOption().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QMenuBar.Triggered">
            <summary>
            <para>This signal is emitted when an action in a menu belonging to this menubar is triggered as a result of a mouse click; action is the action that caused the signal to be emitted.</para>
            <para>Note: QMenuBar has to have ownership of the QMenu in order this signal to work.</para>
            <para>Normally, you connect each menu action to a single slot using QAction::triggered(), but sometimes you will want to connect several items to a single slot (most often if the user selects from an array). This signal is useful in such cases.</para>
            <para>See also hovered() and QAction::triggered().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QMenuBar.Hovered">
            <summary>
            <para>This signal is emitted when a menu action is highlighted; action is the action that caused the event to be sent.</para>
            <para>Often this is used to update status information.</para>
            <para>See also triggered() and QAction::hovered().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenuBar.ActiveAction">
            <summary>
            <para>Returns the QAction that is currently highlighted. A null pointer
            will be returned if no action is currently selected.</para>
            <para>See also setActiveAction().</para>
            <para></para>
            <para>Sets the currently highlighted action to act.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also activeAction().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenuBar.DefaultUp">
            <summary>
            <para>This property holds the popup orientation.</para>
            <para>The default popup orientation. By default, menus pop
            &quot;down&quot; the screen. By setting the property to true, the menu will
            pop &quot;up&quot;. You might call this for menus that are below the
            document to which they refer.</para>
            <para>If the menu would not fit on the screen, the other direction is
            used automatically.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenuBar.NativeMenuBar">
            <summary>
            <para>This property holds whether or not a menubar will be used as a
            native menubar on platforms that support it.</para>
            <para>This property specifies whether or not the menubar should be used
            as a native menubar on platforms that support it. The currently supported
            platforms are OS X and Windows CE. On these platforms if this property is
            true, the menubar is used in the native menubar and is not in the window of
            its parent, if false the menubar remains in the window. On other platforms
            the value of this attribute has no effect.</para>
            <para>The default is to follow whether the Qt::AA_DontUseNativeMenuBar
            attribute is set for the application. Explicitly settings this property
            overrides the presence (or abscence) of the attribute.</para>
            <para>This property was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenuBar.Visible">
            <summary>
            <para>This property holds whether the widget is visible.</para>
            <para>Calling setVisible(true) or show() sets the widget to visible
            status if all its parent widgets up to the window are visible. If an
            ancestor is not visible, the widget won't become visible until all its
            ancestors are shown. If its size or position has changed, Qt guarantees
            that a widget gets move and resize events just before it is shown. If the
            widget has not been resized yet, Qt will adjust the widget's size to a
            useful default using adjustSize().</para>
            <para>Calling setVisible(false) or hide() hides a widget explicitly. An
            explicitly hidden widget will never become visible, even if all its
            ancestors become visible, unless you show it.</para>
            <para>A widget receives show and hide events when its visibility status
            changes. Between a hide and a show event, there is no need to waste CPU
            cycles preparing or displaying information to the user. A video
            application, for example, might simply stop generating new frames.</para>
            <para>A widget that happens to be obscured by other windows on the
            screen is considered to be visible. The same applies to iconified windows
            and windows that exist on another virtual desktop (on platforms that
            support this concept). A widget receives spontaneous show and hide events
            when its mapping status is changed by the window system, e.g. a spontaneous
            hide event when the user minimizes the window, and a spontaneous show event
            when the window is restored again.</para>
            <para>You almost never have to reimplement the setVisible() function.
            If you need to change some settings before a widget is shown, use
            showEvent() instead. If you need to do some delayed initialization use the
            Polish event delivered to the event() function.</para>
            <para>See also show(), hide(), isHidden(), isVisibleTo(),
            isMinimized(), showEvent(), and hideEvent().</para>
            <para></para>
            <para>Reimplemented from QWidget::setVisible().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenuBar.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QMenuBar.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTextEdit">
            <summary>
            <para>The QTextEdit class provides a widget that is used to edit and
            display both plain and rich text.</para>
            </summary>
            <remarks>
            <para></para>
            <para>Introduction and Concepts</para>
            <para>QTextEdit is an advanced WYSIWYG viewer/editor supporting rich
            text formatting using HTML-style tags. It is optimized to handle large
            documents and to respond quickly to user input.</para>
            <para>QTextEdit works on paragraphs and characters. A paragraph is a
            formatted string which is word-wrapped to fit into the width of the widget.
            By default when reading plain text, one newline signifies a paragraph. A
            document consists of zero or more paragraphs. The words in the paragraph
            are aligned in accordance with the paragraph's alignment. Paragraphs are
            separated by hard line breaks. Each character within a paragraph has its
            own attributes, for example, font and color.</para>
            <para>QTextEdit can display images, lists and tables. If the text is
            too large to view within the text edit's viewport, scroll bars will appear.
            The text edit can load both plain text and rich text files. Rich text is
            described using a subset of HTML 4 markup, refer to the Supported HTML
            Subset page for more information.</para>
            <para>If you just need to display a small piece of rich text use
            QLabel.</para>
            <para>The rich text support in Qt is designed to provide a fast,
            portable and efficient way to add reasonable online help facilities to
            applications, and to provide a basis for rich text editors. If you find the
            HTML support insufficient for your needs you may consider the use of Qt
            WebKit, which provides a full-featured web browser widget.</para>
            <para>The shape of the mouse cursor on a QTextEdit is Qt::IBeamCursor
            by default. It can be changed through the viewport()'s cursor
            property.</para>
            <para></para>
            <para>Using QTextEdit as a Display Widget</para>
            <para>QTextEdit can display a large HTML subset, including tables and
            images.</para>
            <para>The text is set or replaced using setHtml() which deletes any
            existing text and replaces it with the text passed in the setHtml() call.
            If you call setHtml() with legacy HTML, and then call toHtml(), the text
            that is returned may have different markup, but will render the same. The
            entire text can be deleted with clear().</para>
            <para>Text itself can be inserted using the QTextCursor class or using
            the convenience functions insertHtml(), insertPlainText(), append() or
            paste(). QTextCursor is also able to insert complex objects like tables or
            lists into the document, and it deals with creating selections and applying
            changes to selected text.</para>
            <para>By default the text edit wraps words at whitespace to fit within
            the text edit widget. The setLineWrapMode() function is used to specify the
            kind of line wrap you want, or NoWrap if you don't want any wrapping. Call
            setLineWrapMode() to set a fixed pixel width FixedPixelWidth, or character
            column (e.g. 80 column) FixedColumnWidth with the pixels or columns
            specified with setLineWrapColumnOrWidth(). If you use word wrap to the
            widget's width WidgetWidth, you can specify whether to break on whitespace
            or anywhere with setWordWrapMode().</para>
            <para>The find() function can be used to find and select a given string
            within the text.</para>
            <para>If you want to limit the total number of paragraphs in a
            QTextEdit, as for example it is often useful in a log viewer, then you can
            use QTextDocument's maximumBlockCount property for that.</para>
            <para></para>
            <para>Read-only Key Bindings</para>
            <para>When QTextEdit is used read-only the key bindings are limited to
            navigation, and text may only be selected with the mouse:</para>
            <para></para>
            <para> KeypressesAction</para>
            <para>Up	Moves one line up.</para>
            <para>Down	Moves one line down.</para>
            <para>Left	Moves one character to the left.</para>
            <para>Right	Moves one character to the right.</para>
            <para>PageUp	Moves one (viewport) page up.</para>
            <para>PageDown	Moves one (viewport) page down.</para>
            <para>Home	Moves to the beginning of the text.</para>
            <para>End	Moves to the end of the text.</para>
            <para>Alt+Wheel	Scrolls the page horizontally (the Wheel is the mouse
            wheel).</para>
            <para>Ctrl+Wheel	Zooms the text.</para>
            <para>Ctrl+A	Selects all text.</para>
            <para></para>
            <para>The text edit may be able to provide some meta-information. For
            example, the documentTitle() function will return the text from within HTML
            &lt;title&gt; tags.</para>
            <para>Note: Zooming into HTML documents only works if the font-size is
            not set to a fixed size.</para>
            <para></para>
            <para>Using QTextEdit as an Editor</para>
            <para>All the information about using QTextEdit as a display widget
            also applies here.</para>
            <para>The current char format's attributes are set with
            setFontItalic(), setFontWeight(), setFontUnderline(), setFontFamily(),
            setFontPointSize(), setTextColor() and setCurrentFont(). The current
            paragraph's alignment is set with setAlignment().</para>
            <para>Selection of text is handled by the QTextCursor class, which
            provides functionality for creating selections, retrieving the text
            contents or deleting selections. You can retrieve the object that
            corresponds with the user-visible cursor using the textCursor() method. If
            you want to set a selection in QTextEdit just create one on a QTextCursor
            object and then make that cursor the visible cursor using setTextCursor().
            The selection can be copied to the clipboard with copy(), or cut to the
            clipboard with cut(). The entire text can be selected using
            selectAll().</para>
            <para>When the cursor is moved and the underlying formatting attributes
            change, the currentCharFormatChanged() signal is emitted to reflect the new
            attributes at the new cursor position.</para>
            <para>The textChanged() signal is emitted whenever the text changes (as
            a result of setText() or through the editor itself).</para>
            <para>QTextEdit holds a QTextDocument object which can be retrieved
            using the document() method. You can also set your own document object
            using setDocument().</para>
            <para>QTextDocument provides an isModified() function which will return
            true if the text has been modified since it was either loaded or since the
            last call to setModified with false as argument. In addition it provides
            methods for undo and redo.</para>
            <para></para>
            <para>Drag and Drop</para>
            <para>QTextEdit also supports custom drag and drop behavior. By
            default, QTextEdit will insert plain text, HTML and rich text when the user
            drops data of these MIME types onto a document. Reimplement
            canInsertFromMimeData() and insertFromMimeData() to add support for
            additional MIME types.</para>
            <para>For example, to allow the user to drag and drop an image onto a
            QTextEdit, you could the implement these functions in the following
            way:</para>
            <para>bool TextEdit::canInsertFromMimeData( const QMimeData *source )
            const</para>
            <para>{</para>
            <para>    if (source-&gt;hasImage())</para>
            <para>        return true;</para>
            <para>    else</para>
            <para>        return QTextEdit::canInsertFromMimeData(source);</para>
            <para>}</para>
            <para>We add support for image MIME types by returning true. For all
            other MIME types, we use the default implementation.</para>
            <para>void TextEdit::insertFromMimeData( const QMimeData *source
            )</para>
            <para>{</para>
            <para>    if (source-&gt;hasImage())</para>
            <para>    {</para>
            <para>        QImage image =
            qvariant_cast&lt;QImage&gt;(source-&gt;imageData());</para>
            <para>        QTextCursor cursor = this-&gt;textCursor();</para>
            <para>        QTextDocument *document = this-&gt;document();</para>
            <para>        document-&gt;addResource(QTextDocument::ImageResource,
            QUrl(&quot;image&quot;), image);</para>
            <para>        cursor.insertImage(&quot;image&quot;);</para>
            <para>    }</para>
            <para>}</para>
            <para>We unpack the image from the QVariant held by the MIME source and
            insert it into the document as a resource.</para>
            <para></para>
            <para>Editing Key Bindings</para>
            <para>The list of key bindings which are implemented for
            editing:</para>
            <para></para>
            <para> KeypressesAction</para>
            <para>Backspace	Deletes the character to the left of the cursor.</para>
            <para>Delete	Deletes the character to the right of the cursor.</para>
            <para>Ctrl+C	Copy the selected text to the clipboard.</para>
            <para>Ctrl+Insert	Copy the selected text to the clipboard.</para>
            <para>Ctrl+K	Deletes to the end of the line.</para>
            <para>Ctrl+V	Pastes the clipboard text into text edit.</para>
            <para>Shift+Insert	Pastes the clipboard text into text edit.</para>
            <para>Ctrl+X	Deletes the selected text and copies it to the
            clipboard.</para>
            <para>Shift+Delete	Deletes the selected text and copies it to the
            clipboard.</para>
            <para>Ctrl+Z	Undoes the last operation.</para>
            <para>Ctrl+Y	Redoes the last operation.</para>
            <para>Left	Moves the cursor one character to the left.</para>
            <para>Ctrl+Left	Moves the cursor one word to the left.</para>
            <para>Right	Moves the cursor one character to the right.</para>
            <para>Ctrl+Right	Moves the cursor one word to the right.</para>
            <para>Up	Moves the cursor one line up.</para>
            <para>Down	Moves the cursor one line down.</para>
            <para>PageUp	Moves the cursor one page up.</para>
            <para>PageDown	Moves the cursor one page down.</para>
            <para>Home	Moves the cursor to the beginning of the line.</para>
            <para>Ctrl+Home	Moves the cursor to the beginning of the text.</para>
            <para>End	Moves the cursor to the end of the line.</para>
            <para>Ctrl+End	Moves the cursor to the end of the text.</para>
            <para>Alt+Wheel	Scrolls the page horizontally (the Wheel is the mouse
            wheel).</para>
            <para></para>
            <para>To select (mark) text hold down the Shift key whilst pressing one
            of the movement keystrokes, for example, Shift+Right will select the
            character to the right, and Shift+Ctrl+Right will select the word to the
            right, etc.</para>
            <para></para>
            <para>See also QTextDocument, QTextCursor, Application Example, Syntax
            Highlighter Example, and Rich Text Processing.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QTextEdit.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty QTextEdit with parent parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.#ctor(System.String,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a QTextEdit with parent parent. The text edit will
            display the text text. The text is interpreted as html.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.MergeCurrentCharFormat(QtGui.QTextCharFormat)">
            <summary>
            <para>Merges the properties specified in modifier into the current
            character format by calling QTextCursor::mergeCharFormat on the editor's
            cursor. If the editor has a selection then the properties of modifier are
            directly applied to the selection.</para>
            <para>See also QTextCursor::mergeCharFormat().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.Find(System.String,QtGui.QTextDocument.FindFlag)">
            <summary>
            <para>Finds the next occurrence of the string, exp, using the given
            options. Returns true if exp was found and changes the cursor to select the
            match; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.Find(QtCore.QRegExp,QtGui.QTextDocument.FindFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Finds the next occurrence, matching the regular expression, exp,
            using the given options. The QTextDocument::FindCaseSensitively option is
            ignored for this overload, use QRegExp::caseSensitivity instead.</para>
            <para>Returns true if a match was found and changes the cursor to
            select the match; otherwise returns false.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.ToPlainText">
            <summary>
            <para>This property gets and sets the text editor's contents as plain
            text. Previous contents are removed and undo/redo history is reset when the
            property is set.</para>
            <para>If the text edit has another content type, it will not be
            replaced by plain text if you call toPlainText(). The only exception to
            this is the non-break space, nbsp;, that will be converted into standard
            space.</para>
            <para>By default, for an editor with no contents, this property
            contains an empty string.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	toPlainText() const</para>
            <para> void 	setPlainText(const QString &amp; text)</para>
            <para></para>
            <para>See also html.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.ToHtml">
            <summary>
            <para>This property provides an HTML interface to the text of the text
            edit.</para>
            <para>toHtml() returns the text of the text edit as html.</para>
            <para>setHtml() changes the text of the text edit. Any previous text is
            removed and the undo/redo history is cleared. The input text is interpreted
            as rich text in html format.</para>
            <para>Note: It is the responsibility of the caller to make sure that
            the text is correctly decoded when a QString containing HTML is created and
            passed to setHtml().</para>
            <para>By default, for a newly-created, empty document, this property
            contains text to describe an HTML 4.0 document with no body text.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	toHtml() const</para>
            <para> void 	setHtml(const QString &amp; text)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textChanged()</para>
            <para></para>
            <para>See also Supported HTML Subset and plainText.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.EnsureCursorVisible">
            <summary>
            <para>Ensures that the cursor is visible by scrolling the text edit if
            necessary.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.LoadResource(System.Int32,QtCore.QUrl)">
            <summary>
            <para>Loads the resource specified by the given type and name.</para>
            <para>This function is an extension of
            QTextDocument::loadResource().</para>
            <para>See also QTextDocument::loadResource().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.CreateStandardContextMenu">
            <summary>
            <para>This function creates the standard context menu which is shown
            when the user clicks on the text edit with the right mouse button. It is
            called from the default contextMenuEvent() handler. The popup menu's
            ownership is transferred to the caller.</para>
            <para>We recommend that you use the createStandardContextMenu(QPoint)
            version instead which will enable the actions that are sensitive to where
            the user clicked.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.CreateStandardContextMenu(QtCore.QPoint)">
            <summary>
            <para>This function creates the standard context menu which is shown
            when the user clicks on the text edit with the right mouse button. It is
            called from the default contextMenuEvent() handler and it takes the
            position in document coordinates where the mouse click was. This can enable
            actions that are sensitive to the position where the user clicked. The
            popup menu's ownership is transferred to the caller.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.CursorForPosition(QtCore.QPoint)">
            <summary>
            <para>returns a QTextCursor at position pos (in viewport
            coordinates).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.CursorRect(QtGui.QTextCursor)">
            <summary>
            <para>returns a rectangle (in viewport coordinates) that includes the
            cursor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.CursorRect">
            <summary>
            <para>returns a rectangle (in viewport coordinates) that includes the
            cursor of the text edit.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.AnchorAt(QtCore.QPoint)">
            <summary>
            <para>Returns the reference of the anchor at position pos, or an empty
            string if no anchor exists at that point.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.MoveCursor(QtGui.QTextCursor.MoveOperation,QtGui.QTextCursor.MoveMode)">
            <summary>
            <para>Moves the cursor by performing the given operation.</para>
            <para>If mode is QTextCursor::KeepAnchor, the cursor selects the text
            it moves over. This is the same effect that the user achieves when they
            hold down the Shift key and move the cursor with the cursor keys.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also QTextCursor::movePosition().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.CanPaste">
            <summary>
            <para>Returns whether text can be pasted from the clipboard into the
            textedit.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.Print(QtGui.IQPagedPaintDevice)">
            <summary>
            <para>Convenience function to print the text edit's document to the
            given printer. This is equivalent to calling the print method on the
            document directly except that this function also supports
            QPrinter::Selection as print range.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also QTextDocument::print().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.InputMethodQuery(QtCore.Qt.InputMethodQuery)">
            <summary>
            <para>Reimplemented from QWidget::inputMethodQuery().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.SetPlainText(System.String)">
            <summary>
            <para>This property gets and sets the text editor's contents as plain
            text. Previous contents are removed and undo/redo history is reset when the
            property is set.</para>
            <para>If the text edit has another content type, it will not be
            replaced by plain text if you call toPlainText(). The only exception to
            this is the non-break space, nbsp;, that will be converted into standard
            space.</para>
            <para>By default, for an editor with no contents, this property
            contains an empty string.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	toPlainText() const</para>
            <para> void 	setPlainText(const QString &amp; text)</para>
            <para></para>
            <para>See also html.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.SetHtml(System.String)">
            <summary>
            <para>This property provides an HTML interface to the text of the text
            edit.</para>
            <para>toHtml() returns the text of the text edit as html.</para>
            <para>setHtml() changes the text of the text edit. Any previous text is
            removed and the undo/redo history is cleared. The input text is interpreted
            as rich text in html format.</para>
            <para>Note: It is the responsibility of the caller to make sure that
            the text is correctly decoded when a QString containing HTML is created and
            passed to setHtml().</para>
            <para>By default, for a newly-created, empty document, this property
            contains text to describe an HTML 4.0 document with no body text.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	toHtml() const</para>
            <para> void 	setHtml(const QString &amp; text)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textChanged()</para>
            <para></para>
            <para>See also Supported HTML Subset and plainText.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.SetText(System.String)">
            <summary>
            <para>Sets the text edit's text. The text can be plain text or HTML and
            the text edit will try to guess the right format.</para>
            <para>Use setHtml() or setPlainText() directly to avoid text edit's
            guessing.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also toPlainText() and toHtml().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.Cut">
            <summary>
            <para>Copies the selected text to the clipboard and deletes it from the
            text edit.</para>
            <para>If there is no selected text nothing happens.</para>
            <para>See also copy() and paste().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.Copy">
            <summary>
            <para>Copies any selected text to the clipboard.</para>
            <para>See also copyAvailable().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.Paste">
            <summary>
            <para>Pastes the text from the clipboard into the text edit at the
            current cursor position.</para>
            <para>If there is no text in the clipboard nothing happens.</para>
            <para>To change the behavior of this function, i.e. to modify what
            QTextEdit can paste and how it is being pasted, reimplement the virtual
            canInsertFromMimeData() and insertFromMimeData() functions.</para>
            <para>See also cut() and copy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.Undo">
            <summary>
            <para>Undoes the last operation.</para>
            <para>If there is no operation to undo, i.e. there is no undo step in
            the undo/redo history, nothing happens.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also redo().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.Redo">
            <summary>
            <para>Redoes the last operation.</para>
            <para>If there is no operation to redo, i.e. there is no redo step in
            the undo/redo history, nothing happens.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also undo().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.Clear">
            <summary>
            <para>Deletes all the text in the text edit.</para>
            <para>Note that the undo/redo history is cleared by this
            function.</para>
            <para>See also cut(), setPlainText(), and setHtml().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.SelectAll">
            <summary>
            <para>Selects all text.</para>
            <para>See also copy(), cut(), and textCursor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.InsertPlainText(System.String)">
            <summary>
            <para>Convenience slot that inserts text at the current cursor
            position.</para>
            <para>It is equivalent to</para>
            <para>edit-&gt;textCursor().insertText(text);</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.InsertHtml(System.String)">
            <summary>
            <para>Convenience slot that inserts text which is assumed to be of html
            formatting at the current cursor position.</para>
            <para>It is equivalent to:</para>
            <para>edit-&gt;textCursor().insertHtml(fragment);</para>
            <para>Note: When using this function with a style sheet, the style
            sheet will only apply to the current block in the document. In order to
            apply a style sheet throughout a document, use
            QTextDocument::setDefaultStyleSheet() instead.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.Append(System.String)">
            <summary>
            <para>Appends a new paragraph with text to the end of the text
            edit.</para>
            <para>Note: The new paragraph appended will have the same character
            format and block format as the current paragraph, determined by the
            position of the cursor.</para>
            <para>See also currentCharFormat() and
            QTextCursor::blockFormat().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.ScrollToAnchor(System.String)">
            <summary>
            <para>Scrolls the text edit so that the anchor with the given name is
            visible; does nothing if the name is empty, or is already visible, or isn't
            found.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.ZoomIn(System.Int32)">
            <summary>
            <para>Zooms in on the text by making the base font size range points
            larger and recalculating all font sizes to be the new size. This does not
            change the size of any images.</para>
            <para>See also zoomOut().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.ZoomOut(System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Zooms out on the text by making the base font size range points
            smaller and recalculating all font sizes to be the new size. This does not
            change the size of any images.</para>
            <para>See also zoomIn().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnKeyReleaseEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            <para>This event handler can be reimplemented in a subclass to receive
            paint events passed in event. It is usually unnecessary to reimplement this
            function in a subclass of QTextEdit.</para>
            <para>Warning: The underlying text document must not be modified from
            within a reimplementation of this function.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnMouseDoubleClickEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseDoubleClickEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.FocusNextPrevChild(System.Boolean)">
            <summary>
            <para>Reimplemented from QWidget::focusNextPrevChild().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnContextMenuEvent(QtGui.QContextMenuEvent)">
            <summary>
            <para>Reimplemented from QWidget::contextMenuEvent().</para>
            <para>Shows the standard context menu created with
            createStandardContextMenu().</para>
            <para>If you do not want the text edit to have a context menu, you can
            set its contextMenuPolicy to Qt::NoContextMenu. If you want to customize
            the context menu, reimplement this function. If you want to extend the
            standard context menu, reimplement this function, call
            createStandardContextMenu() and extend the menu returned.</para>
            <para>Information about the event is passed in the event object.</para>
            <para>void MyTextEdit::contextMenuEvent(QContextMenuEvent
            *event)</para>
            <para>{</para>
            <para>    QMenu *menu = createStandardContextMenu();</para>
            <para>    menu-&gt;addAction(tr(&quot;My Menu Item&quot;));</para>
            <para>    //...</para>
            <para>    menu-&gt;exec(event-&gt;globalPos());</para>
            <para>    delete menu;</para>
            <para>}</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnDragEnterEvent(QtGui.QDragEnterEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragEnterEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnDragLeaveEvent(QtGui.QDragLeaveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnDragMoveEvent(QtGui.QDragMoveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnDropEvent(QtGui.QDropEvent)">
            <summary>
            <para>Reimplemented from QWidget::dropEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnWheelEvent(QtGui.QWheelEvent)">
            <summary>
            <para>Reimplemented from QWidget::wheelEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.CreateMimeDataFromSelection">
            <summary>
            <para>This function returns a new MIME data object to represent the
            contents of the text edit's current selection. It is called when the
            selection needs to be encapsulated into a new QMimeData object; for
            example, when a drag and drop operation is started, or when data is copied
            to the clipboard.</para>
            <para>If you reimplement this function, note that the ownership of the
            returned QMimeData object is passed to the caller. The selection can be
            retrieved by using the textCursor() function.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.CanInsertFromMimeData(QtCore.QMimeData)">
            <summary>
            <para>This function returns true if the contents of the MIME data
            object, specified by source, can be decoded and inserted into the document.
            It is called for example when during a drag operation the mouse enters this
            widget and it is necessary to determine whether it is possible to accept
            the drag and drop operation.</para>
            <para>Reimplement this function to enable drag and drop support for
            additional MIME types.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.InsertFromMimeData(QtCore.QMimeData)">
            <summary>
            <para>This function inserts the contents of the MIME data object,
            specified by source, into the text edit at the current cursor position. It
            is called whenever text is inserted as the result of a clipboard paste
            operation, or when the text edit accepts data from a drag and drop
            operation.</para>
            <para>Reimplement this function to enable drag and drop support for
            additional MIME types.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.OnInputMethodEvent(QtGui.QInputMethodEvent)">
            <summary>
            <para>Reimplemented from QWidget::inputMethodEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextEdit.ScrollContentsBy(System.Int32,System.Int32)">
            <summary>
            <para>Reimplemented from
            QAbstractScrollArea::scrollContentsBy().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTextEdit.TextChanged">
            <summary>
            <para>This property provides an HTML interface to the text of the text edit.</para>
            <para>toHtml() returns the text of the text edit as html.</para>
            <para>setHtml() changes the text of the text edit. Any previous text is removed and the undo/redo history is cleared. The input text is interpreted as rich text in html format.</para>
            <para>Note: It is the responsibility of the caller to make sure that the text is correctly decoded when a QString containing HTML is created and passed to setHtml().</para>
            <para>By default, for a newly-created, empty document, this property contains text to describe an HTML 4.0 document with no body text.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	toHtml() const</para>
            <para> void 	setHtml(const QString &amp; text)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textChanged()</para>
            <para></para>
            <para>See also Supported HTML Subset and plainText.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTextEdit.UndoAvailable">
            <summary>
            <para>This signal is emitted whenever undo operations become available (available is true) or unavailable (available is false).</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTextEdit.RedoAvailable">
            <summary>
            <para>This signal is emitted whenever redo operations become available (available is true) or unavailable (available is false).</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTextEdit.CurrentCharFormatChanged">
            <summary>
            <para>This signal is emitted if the current character format has changed, for example caused by a change of the cursor position.</para>
            <para>The new format is f.</para>
            <para>See also setCurrentCharFormat().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTextEdit.CopyAvailable">
            <summary>
            <para>This signal is emitted when text is selected or de-selected in the text edit.</para>
            <para>When text is selected this signal will be emitted with yes set to true. If no text has been selected or if the selected text is de-selected this signal is emitted with yes set to false.</para>
            <para>If yes is true then copy() can be used to copy the selection to the clipboard. If yes is false then copy() does nothing.</para>
            <para>See also selectionChanged().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTextEdit.SelectionChanged">
            <summary>
            <para>This signal is emitted whenever the selection changes.</para>
            <para>See also copyAvailable().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTextEdit.CursorPositionChanged">
            <summary>
            <para>This signal is emitted whenever the position of the cursor changed.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.Document">
            <summary>
            <para>This property holds the underlying document of the text
            editor.</para>
            <para>Note: The editor does not take ownership of the document unless
            it is the document's parent object. The parent object of the provided
            document remains the owner of the object. If the previously assigned
            document is a child of the editor then it will be deleted.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QTextDocument * 	document() const</para>
            <para> void 	setDocument(QTextDocument * document)</para>
            <para></para>
            <para></para>
            <para>This property holds the underlying document of the text
            editor.</para>
            <para>Note: The editor does not take ownership of the document unless
            it is the document's parent object. The parent object of the provided
            document remains the owner of the object. If the previously assigned
            document is a child of the editor then it will be deleted.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QTextDocument * 	document() const</para>
            <para> void 	setDocument(QTextDocument * document)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.PlaceholderText">
            <summary>
            <para>This property holds the editor placeholder text.</para>
            <para>Setting this property makes the editor display a grayed-out
            placeholder text as long as the document() is empty.</para>
            <para>By default, this property contains an empty string.</para>
            <para>This property was introduced in  Qt 5.2.</para>
            <para>See also document().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.TextCursor">
            <summary>
            <para>Returns a copy of the QTextCursor that represents the currently
            visible cursor. Note that changes on the returned cursor do not affect
            QTextEdit's cursor; use setTextCursor() to update the visible
            cursor.</para>
            <para>See also setTextCursor().</para>
            <para></para>
            <para>Sets the visible cursor.</para>
            <para>See also textCursor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.ReadOnly">
            <summary>
            <para>This property holds whether the text edit is read-only.</para>
            <para>In a read-only text edit the user can only navigate through the
            text and select text; modifying the text is not possible.</para>
            <para>This property's default is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.TextInteractionFlags">
            <summary>
            <para>Specifies how the widget should interact with user input.</para>
            <para>The default value depends on whether the QTextEdit is read-only
            or editable, and whether it is a QTextBrowser or not.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.CurrentCharFormat">
            <summary>
            <para>Returns the char format that is used when inserting new
            text.</para>
            <para>See also setCurrentCharFormat().</para>
            <para></para>
            <para>Sets the char format that is be used when inserting new text to
            format by calling QTextCursor::setCharFormat() on the editor's cursor. If
            the editor has a selection then the char format is directly applied to the
            selection.</para>
            <para>See also currentCharFormat().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.AutoFormatting">
            <summary>
            <para>This property holds the enabled set of auto formatting
            features.</para>
            <para>The value can be any combination of the values in the
            AutoFormattingFlag enum. The default is AutoNone. Choose AutoAll to enable
            all automatic formatting.</para>
            <para>Currently, the only automatic formatting feature provided is
            AutoBulletList; future versions of Qt may offer more.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.TabChangesFocus">
            <summary>
            <para>This property holds whether Tab changes focus or is accepted as
            input.</para>
            <para>In some occasions text edits should not allow the user to input
            tabulators or change indentation using the Tab key, as this breaks the
            focus chain. The default is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.DocumentTitle">
            <summary>
            <para>This property holds the title of the document parsed from the
            text.</para>
            <para>By default, for a newly-created, empty document, this property
            contains an empty string.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.UndoRedoEnabled">
            <summary>
            <para>This property holds whether undo and redo are enabled.</para>
            <para>Users are only able to undo or redo actions if this property is
            true, and if there is an action that can be undone (or redone).</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.lineWrapMode">
            <summary>
            <para>This property holds the line wrap mode.</para>
            <para>The default mode is WidgetWidth which causes words to be wrapped
            at the right edge of the text edit. Wrapping occurs at whitespace, keeping
            whole words intact. If you want wrapping to occur within words use
            setWordWrapMode(). If you set a wrap mode of FixedPixelWidth or
            FixedColumnWidth you should also call setLineWrapColumnOrWidth() with the
            width you want.</para>
            <para>See also lineWrapColumnOrWidth.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.LineWrapColumnOrWidth">
            <summary>
            <para>This property holds the position (in pixels or columns depending
            on the wrap mode) where text will be wrapped.</para>
            <para>If the wrap mode is FixedPixelWidth, the value is the number of
            pixels from the left edge of the text edit at which text should be wrapped.
            If the wrap mode is FixedColumnWidth, the value is the column number (in
            character columns) from the left edge of the text edit at which text should
            be wrapped.</para>
            <para>By default, this property contains a value of 0.</para>
            <para>See also lineWrapMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.WordWrapMode">
            <summary>
            <para>This property holds the mode QTextEdit will use when wrapping
            text by words.</para>
            <para>By default, this property is set to
            QTextOption::WrapAtWordBoundaryOrAnywhere.</para>
            <para>See also QTextOption::WrapMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.OverwriteMode">
            <summary>
            <para>This property holds whether text entered by the user will
            overwrite existing text.</para>
            <para>As with many text editors, the text editor widget can be
            configured to insert or overwrite existing text with new text entered by
            the user.</para>
            <para>If this property is true, existing text is overwritten,
            character-for-character by new text; otherwise, text is inserted at the
            cursor position, displacing existing text.</para>
            <para>By default, this property is false (new text does not overwrite
            existing text).</para>
            <para>This property was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.TabStopWidth">
            <summary>
            <para>This property holds the tab stop width in pixels.</para>
            <para>By default, this property contains a value of 80 pixels.</para>
            <para>This property was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.CursorWidth">
            <summary>
            <para>This property specifies the width of the cursor in pixels. The
            default value is 1.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.AcceptRichText">
            <summary>
            <para>This property holds whether the text edit accepts rich text
            insertions by the user.</para>
            <para>When this propery is set to false text edit will accept only
            plain text input from the user. For example through clipboard or drag and
            drop.</para>
            <para>This property's default is true.</para>
            <para>This property was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.FontPointSize">
            <summary>
            <para>Returns the point size of the font of the current format.</para>
            <para>See also setFontFamily(), setCurrentFont(), and
            setFontPointSize().</para>
            <para></para>
            <para>Sets the point size of the current format to s.</para>
            <para>Note that if s is zero or negative, the behavior of this function
            is not defined.</para>
            <para>See also fontPointSize(), setCurrentFont(), and
            setFontFamily().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.FontFamily">
            <summary>
            <para>Returns the font family of the current format.</para>
            <para>See also setFontFamily(), setCurrentFont(), and
            setFontPointSize().</para>
            <para></para>
            <para>Sets the font family of the current format to fontFamily.</para>
            <para>See also fontFamily() and setCurrentFont().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.FontWeight">
            <summary>
            <para>Returns the font weight of the current format.</para>
            <para>See also setFontWeight(), setCurrentFont(), setFontPointSize(),
            and QFont::Weight.</para>
            <para></para>
            <para>Sets the font weight of the current format to the given weight,
            where the value used is in the range defined by the QFont::Weight
            enum.</para>
            <para>See also fontWeight(), setCurrentFont(), and
            setFontFamily().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.FontUnderline">
            <summary>
            <para>Returns true if the font of the current format is underlined;
            otherwise returns false.</para>
            <para>See also setFontUnderline().</para>
            <para></para>
            <para>If underline is true, sets the current format to underline;
            otherwise sets the current format to non-underline.</para>
            <para>See also fontUnderline().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.FontItalic">
            <summary>
            <para>Returns true if the font of the current format is italic;
            otherwise returns false.</para>
            <para>See also setFontItalic().</para>
            <para></para>
            <para>If italic is true, sets the current format to italic; otherwise
            sets the current format to non-italic.</para>
            <para>See also fontItalic().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.TextColor">
            <summary>
            <para>Returns the text color of the current format.</para>
            <para>See also setTextColor().</para>
            <para></para>
            <para>Sets the text color of the current format to c.</para>
            <para>See also textColor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.TextBackgroundColor">
            <summary>
            <para>Returns the text background color of the current format.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setTextBackgroundColor().</para>
            <para></para>
            <para>Sets the text background color of the current format to c.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also textBackgroundColor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.CurrentFont">
            <summary>
            <para>Returns the font of the current format.</para>
            <para>See also setCurrentFont(), setFontFamily(), and
            setFontPointSize().</para>
            <para></para>
            <para>Sets the font of the current format to f.</para>
            <para>See also currentFont(), setFontPointSize(), and
            setFontFamily().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.Alignment">
            <summary>
            <para>Returns the alignment of the current paragraph.</para>
            <para>See also setAlignment().</para>
            <para></para>
            <para>Sets the alignment of the current paragraph to a. Valid
            alignments are Qt::AlignLeft, Qt::AlignRight, Qt::AlignJustify and
            Qt::AlignCenter (which centers horizontally).</para>
            <para>See also alignment().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTextEdit.AutoFormattingFlag">
            <summary>
            <para>The AutoFormatting type is a typedef for
            QFlags&lt;AutoFormattingFlag&gt;. It stores an OR combination of
            AutoFormattingFlag values.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QTextEdit.AutoFormattingFlag.AutoNone">
            <summary>Don't do any automatic formatting.</summary>
        </member>
        <member name="F:QtWidgets.QTextEdit.AutoFormattingFlag.AutoBulletList">
            <summary>Automatically create bullet lists (e.g. when the user enters an asterisk ('*') in the left most column, or presses Enter in an existing list item.</summary>
        </member>
        <member name="F:QtWidgets.QTextEdit.AutoFormattingFlag.AutoAll">
            <summary>Apply all automatic formatting. Currently only automatic bullet lists are supported.</summary>
        </member>
        <member name="T:QtWidgets.QTextEdit.ExtraSelection">
            <summary>
            <para>The QTextEdit::ExtraSelection structure provides a way of
            specifying a character format for a given selection in a document</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.ExtraSelection.Cursor">
            <summary>
            <para>A cursor that contains a selection in a QTextDocument</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextEdit.ExtraSelection.Format">
            <summary>
            <para>A format that is used to specify a foreground or background
            brush/color for the selection.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QPlainTextEdit">
            <summary>
            <para>The QPlainTextEdit class provides a widget that is used to edit
            and display plain text.</para>
            </summary>
            <remarks>
            <para></para>
            <para>Introduction and Concepts</para>
            <para>QPlainTextEdit is an advanced viewer/editor supporting plain
            text. It is optimized to handle large documents and to respond quickly to
            user input.</para>
            <para>QPlainText uses very much the same technology and concepts as
            QTextEdit, but is optimized for plain text handling.</para>
            <para>QPlainTextEdit works on paragraphs and characters. A paragraph is
            a formatted string which is word-wrapped to fit into the width of the
            widget. By default when reading plain text, one newline signifies a
            paragraph. A document consists of zero or more paragraphs. Paragraphs are
            separated by hard line breaks. Each character within a paragraph has its
            own attributes, for example, font and color.</para>
            <para>The shape of the mouse cursor on a QPlainTextEdit is
            Qt::IBeamCursor by default. It can be changed through the viewport()'s
            cursor property.</para>
            <para></para>
            <para>Using QPlainTextEdit as a Display Widget</para>
            <para>The text is set or replaced using setPlainText() which deletes
            the existing text and replaces it with the text passed to
            setPlainText().</para>
            <para>Text can be inserted using the QTextCursor class or using the
            convenience functions insertPlainText(), appendPlainText() or
            paste().</para>
            <para>By default, the text edit wraps words at whitespace to fit within
            the text edit widget. The setLineWrapMode() function is used to specify the
            kind of line wrap you want, WidgetWidth or NoWrap if you don't want any
            wrapping. If you use word wrap to the widget's width WidgetWidth, you can
            specify whether to break on whitespace or anywhere with
            setWordWrapMode().</para>
            <para>The find() function can be used to find and select a given string
            within the text.</para>
            <para>If you want to limit the total number of paragraphs in a
            QPlainTextEdit, as it is for example useful in a log viewer, then you can
            use the maximumBlockCount property. The combination of
            setMaximumBlockCount() and appendPlainText() turns QPlainTextEdit into an
            efficient viewer for log text. The scrolling can be reduced with the
            centerOnScroll() property, making the log viewer even faster. Text can be
            formatted in a limited way, either using a syntax highlighter (see below),
            or by appending html-formatted text with appendHtml(). While QPlainTextEdit
            does not support complex rich text rendering with tables and floats, it
            does support limited paragraph-based formatting that you may need in a log
            viewer.</para>
            <para></para>
            <para>Read-only Key Bindings</para>
            <para>When QPlainTextEdit is used read-only the key bindings are
            limited to navigation, and text may only be selected with the mouse:</para>
            <para></para>
            <para> KeypressesAction</para>
            <para>Qt::UpArrow	Moves one line up.</para>
            <para>Qt::DownArrow	Moves one line down.</para>
            <para>Qt::LeftArrow	Moves one character to the left.</para>
            <para>Qt::RightArrow	Moves one character to the right.</para>
            <para>PageUp	Moves one (viewport) page up.</para>
            <para>PageDown	Moves one (viewport) page down.</para>
            <para>Home	Moves to the beginning of the text.</para>
            <para>End	Moves to the end of the text.</para>
            <para>Alt+Wheel	Scrolls the page horizontally (the Wheel is the mouse
            wheel).</para>
            <para>Ctrl+Wheel	Zooms the text.</para>
            <para>Ctrl+A	Selects all text.</para>
            <para></para>
            <para></para>
            <para>Using QPlainTextEdit as an Editor</para>
            <para>All the information about using QPlainTextEdit as a display
            widget also applies here.</para>
            <para>Selection of text is handled by the QTextCursor class, which
            provides functionality for creating selections, retrieving the text
            contents or deleting selections. You can retrieve the object that
            corresponds with the user-visible cursor using the textCursor() method. If
            you want to set a selection in QPlainTextEdit just create one on a
            QTextCursor object and then make that cursor the visible cursor using
            setCursor(). The selection can be copied to the clipboard with copy(), or
            cut to the clipboard with cut(). The entire text can be selected using
            selectAll().</para>
            <para>QPlainTextEdit holds a QTextDocument object which can be
            retrieved using the document() method. You can also set your own document
            object using setDocument(). QTextDocument emits a textChanged() signal if
            the text changes and it also provides a isModified() function which will
            return true if the text has been modified since it was either loaded or
            since the last call to setModified with false as argument. In addition it
            provides methods for undo and redo.</para>
            <para></para>
            <para>Syntax Highlighting</para>
            <para>Just like QTextEdit, QPlainTextEdit works together with
            QSyntaxHighlighter.</para>
            <para></para>
            <para>Editing Key Bindings</para>
            <para>The list of key bindings which are implemented for
            editing:</para>
            <para></para>
            <para> KeypressesAction</para>
            <para>Backspace	Deletes the character to the left of the cursor.</para>
            <para>Delete	Deletes the character to the right of the cursor.</para>
            <para>Ctrl+C	Copy the selected text to the clipboard.</para>
            <para>Ctrl+Insert	Copy the selected text to the clipboard.</para>
            <para>Ctrl+K	Deletes to the end of the line.</para>
            <para>Ctrl+V	Pastes the clipboard text into text edit.</para>
            <para>Shift+Insert	Pastes the clipboard text into text edit.</para>
            <para>Ctrl+X	Deletes the selected text and copies it to the
            clipboard.</para>
            <para>Shift+Delete	Deletes the selected text and copies it to the
            clipboard.</para>
            <para>Ctrl+Z	Undoes the last operation.</para>
            <para>Ctrl+Y	Redoes the last operation.</para>
            <para>LeftArrow	Moves the cursor one character to the left.</para>
            <para>Ctrl+LeftArrow	Moves the cursor one word to the left.</para>
            <para>RightArrow	Moves the cursor one character to the right.</para>
            <para>Ctrl+RightArrow	Moves the cursor one word to the right.</para>
            <para>UpArrow	Moves the cursor one line up.</para>
            <para>Ctrl+UpArrow	Moves the cursor one word up.</para>
            <para>DownArrow	Moves the cursor one line down.</para>
            <para>Ctrl+Down Arrow	Moves the cursor one word down.</para>
            <para>PageUp	Moves the cursor one page up.</para>
            <para>PageDown	Moves the cursor one page down.</para>
            <para>Home	Moves the cursor to the beginning of the line.</para>
            <para>Ctrl+Home	Moves the cursor to the beginning of the text.</para>
            <para>End	Moves the cursor to the end of the line.</para>
            <para>Ctrl+End	Moves the cursor to the end of the text.</para>
            <para>Alt+Wheel	Scrolls the page horizontally (the Wheel is the mouse
            wheel).</para>
            <para>Ctrl+Wheel	Zooms the text.</para>
            <para></para>
            <para>To select (mark) text hold down the Shift key whilst pressing one
            of the movement keystrokes, for example, Shift+Right Arrow will select the
            character to the right, and Shift+Ctrl+Right Arrow will select the word to
            the right, etc.</para>
            <para></para>
            <para>Differences to QTextEdit</para>
            <para>QPlainTextEdit is a thin class, implemented by using most of the
            technology that is behind QTextEdit and QTextDocument. Its performance
            benefits over QTextEdit stem mostly from using a different and simplified
            text layout called QPlainTextDocumentLayout on the text document (see
            QTextDocument::setDocumentLayout()). The plain text document layout does
            not support tables nor embedded frames, and replaces a pixel-exact height
            calculation with a line-by-line respectively paragraph-by-paragraph
            scrolling approach. This makes it possible to handle significantly larger
            documents, and still resize the editor with line wrap enabled in real time.
            It also makes for a fast log viewer (see setMaximumBlockCount()).</para>
            <para></para>
            <para>See also QTextDocument, QTextCursor, Application Example, Code
            Editor Example, Syntax Highlighter Example, and Rich Text
            Processing.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty QPlainTextEdit with parent parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.#ctor(System.String,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a QPlainTextEdit with parent parent. The text edit
            will display the plain text text.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.MergeCurrentCharFormat(QtGui.QTextCharFormat)">
            <summary>
            <para>Merges the properties specified in modifier into the current
            character format by calling QTextCursor::mergeCharFormat on the editor's
            cursor. If the editor has a selection then the properties of modifier are
            directly applied to the selection.</para>
            <para>See also QTextCursor::mergeCharFormat().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.Find(System.String,QtGui.QTextDocument.FindFlag)">
            <summary>
            <para>Finds the next occurrence of the string, exp, using the given
            options. Returns true if exp was found and changes the cursor to select the
            match; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.Find(QtCore.QRegExp,QtGui.QTextDocument.FindFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Finds the next occurrence, matching the regular expression, exp,
            using the given options. The QTextDocument::FindCaseSensitively option is
            ignored for this overload, use QRegExp::caseSensitivity instead.</para>
            <para>Returns true if a match was found and changes the cursor to
            select the match; otherwise returns false.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.ToPlainText">
            <summary>
            <para>This property gets and sets the plain text editor's contents. The
            previous contents are removed and undo/redo history is reset when this
            property is set.</para>
            <para>By default, for an editor with no contents, this property
            contains an empty string.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	toPlainText() const</para>
            <para> void 	setPlainText(const QString &amp; text)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.EnsureCursorVisible">
            <summary>
            <para>Ensures that the cursor is visible by scrolling the text edit if
            necessary.</para>
            <para>See also centerCursor() and centerOnScroll.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.LoadResource(System.Int32,QtCore.QUrl)">
            <summary>
            <para>Loads the resource specified by the given type and name.</para>
            <para>This function is an extension of
            QTextDocument::loadResource().</para>
            <para>See also QTextDocument::loadResource().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.CreateStandardContextMenu">
            <summary>
            <para>This function creates the standard context menu which is shown
            when the user clicks on the text edit with the right mouse button. It is
            called from the default contextMenuEvent() handler. The popup menu's
            ownership is transferred to the caller.</para>
            <para>We recommend that you use the createStandardContextMenu(QPoint)
            version instead which will enable the actions that are sensitive to where
            the user clicked.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.CreateStandardContextMenu(QtCore.QPoint)">
            <summary>
            <para>This function creates the standard context menu which is shown
            when the user clicks on the text edit with the right mouse button. It is
            called from the default contextMenuEvent() handler and it takes the
            position in document coordinates where the mouse click was. This can enable
            actions that are sensitive to the position where the user clicked. The
            popup menu's ownership is transferred to the caller.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.CursorForPosition(QtCore.QPoint)">
            <summary>
            <para>returns a QTextCursor at position pos (in viewport
            coordinates).</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.CursorRect(QtGui.QTextCursor)">
            <summary>
            <para>returns a rectangle (in viewport coordinates) that includes the
            cursor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.CursorRect">
            <summary>
            <para>returns a rectangle (in viewport coordinates) that includes the
            cursor of the text edit.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.AnchorAt(QtCore.QPoint)">
            <summary>
            <para>Returns the reference of the anchor at position pos, or an empty
            string if no anchor exists at that point.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.MoveCursor(QtGui.QTextCursor.MoveOperation,QtGui.QTextCursor.MoveMode)">
            <summary>
            <para>Moves the cursor by performing the given operation.</para>
            <para>If mode is QTextCursor::KeepAnchor, the cursor selects the text
            it moves over. This is the same effect that the user achieves when they
            hold down the Shift key and move the cursor with the cursor keys.</para>
            <para>See also QTextCursor::movePosition().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.CanPaste">
            <summary>
            <para>Returns whether text can be pasted from the clipboard into the
            textedit.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.Print(QtGui.IQPagedPaintDevice)">
            <summary>
            <para>Convenience function to print the text edit's document to the
            given printer. This is equivalent to calling the print method on the
            document directly except that this function also supports
            QPrinter::Selection as print range.</para>
            <para>See also QTextDocument::print().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.InputMethodQuery(QtCore.Qt.InputMethodQuery)">
            <summary>
            <para>Reimplemented from QWidget::inputMethodQuery().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.SetPlainText(System.String)">
            <summary>
            <para>This property gets and sets the plain text editor's contents. The
            previous contents are removed and undo/redo history is reset when this
            property is set.</para>
            <para>By default, for an editor with no contents, this property
            contains an empty string.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	toPlainText() const</para>
            <para> void 	setPlainText(const QString &amp; text)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.Cut">
            <summary>
            <para>Copies the selected text to the clipboard and deletes it from the
            text edit.</para>
            <para>If there is no selected text nothing happens.</para>
            <para>See also copy() and paste().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.Copy">
            <summary>
            <para>Copies any selected text to the clipboard.</para>
            <para>See also copyAvailable().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.Paste">
            <summary>
            <para>Pastes the text from the clipboard into the text edit at the
            current cursor position.</para>
            <para>If there is no text in the clipboard nothing happens.</para>
            <para>To change the behavior of this function, i.e. to modify what
            QPlainTextEdit can paste and how it is being pasted, reimplement the
            virtual canInsertFromMimeData() and insertFromMimeData() functions.</para>
            <para>See also cut() and copy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.Undo">
            <summary>
            <para>Undoes the last operation.</para>
            <para>If there is no operation to undo, i.e. there is no undo step in
            the undo/redo history, nothing happens.</para>
            <para>See also redo().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.Redo">
            <summary>
            <para>Redoes the last operation.</para>
            <para>If there is no operation to redo, i.e. there is no redo step in
            the undo/redo history, nothing happens.</para>
            <para>See also undo().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.Clear">
            <summary>
            <para>Deletes all the text in the text edit.</para>
            <para>Note that the undo/redo history is cleared by this
            function.</para>
            <para>See also cut() and setPlainText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.SelectAll">
            <summary>
            <para>Selects all text.</para>
            <para>See also copy(), cut(), and textCursor().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.InsertPlainText(System.String)">
            <summary>
            <para>Convenience slot that inserts text at the current cursor
            position.</para>
            <para>It is equivalent to</para>
            <para>edit-&gt;textCursor().insertText(text);</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.AppendPlainText(System.String)">
            <summary>
            <para>Appends a new paragraph with text to the end of the text
            edit.</para>
            <para>See also appendHtml().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.AppendHtml(System.String)">
            <summary>
            <para>Appends a new paragraph with html to the end of the text
            edit.</para>
            <para>appendPlainText()</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.CenterCursor">
            <summary>
            <para>Scrolls the document in order to center the cursor
            vertically.</para>
            <para>See also ensureCursorVisible() and centerOnScroll.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.ZoomIn(System.Int32)">
            <summary>
            <para>Zooms in on the text by making the base font size range points
            larger and recalculating all font sizes to be the new size. This does not
            change the size of any images.</para>
            <para>See also zoomOut().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.ZoomOut(System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Zooms out on the text by making the base font size range points
            smaller and recalculating all font sizes to be the new size. This does not
            change the size of any images.</para>
            <para>See also zoomIn().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnKeyReleaseEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnMouseDoubleClickEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseDoubleClickEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.FocusNextPrevChild(System.Boolean)">
            <summary>
            <para>Reimplemented from QWidget::focusNextPrevChild().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnContextMenuEvent(QtGui.QContextMenuEvent)">
            <summary>
            <para>Reimplemented from QWidget::contextMenuEvent().</para>
            <para>Shows the standard context menu created with
            createStandardContextMenu().</para>
            <para>If you do not want the text edit to have a context menu, you can
            set its contextMenuPolicy to Qt::NoContextMenu. If you want to customize
            the context menu, reimplement this function. If you want to extend the
            standard context menu, reimplement this function, call
            createStandardContextMenu() and extend the menu returned.</para>
            <para>Information about the event is passed in the event object.</para>
            <para>void MyQPlainTextEdit::contextMenuEvent(QContextMenuEvent
            *event)</para>
            <para>{</para>
            <para>    QMenu *menu = createStandardContextMenu();</para>
            <para>    menu-&gt;addAction(tr(&quot;My Menu Item&quot;));</para>
            <para>    //...</para>
            <para>    menu-&gt;exec(event-&gt;globalPos());</para>
            <para>    delete menu;</para>
            <para>}</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnDragEnterEvent(QtGui.QDragEnterEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragEnterEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnDragLeaveEvent(QtGui.QDragLeaveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnDragMoveEvent(QtGui.QDragMoveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnDropEvent(QtGui.QDropEvent)">
            <summary>
            <para>Reimplemented from QWidget::dropEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnWheelEvent(QtGui.QWheelEvent)">
            <summary>
            <para>Reimplemented from QWidget::wheelEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.CreateMimeDataFromSelection">
            <summary>
            <para>This function returns a new MIME data object to represent the
            contents of the text edit's current selection. It is called when the
            selection needs to be encapsulated into a new QMimeData object; for
            example, when a drag and drop operation is started, or when data is copied
            to the clipboard.</para>
            <para>If you reimplement this function, note that the ownership of the
            returned QMimeData object is passed to the caller. The selection can be
            retrieved by using the textCursor() function.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.CanInsertFromMimeData(QtCore.QMimeData)">
            <summary>
            <para>This function returns true if the contents of the MIME data
            object, specified by source, can be decoded and inserted into the document.
            It is called for example when during a drag operation the mouse enters this
            widget and it is necessary to determine whether it is possible to accept
            the drag.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.InsertFromMimeData(QtCore.QMimeData)">
            <summary>
            <para>This function inserts the contents of the MIME data object,
            specified by source, into the text edit at the current cursor position. It
            is called whenever text is inserted as the result of a clipboard paste
            operation, or when the text edit accepts data from a drag and drop
            operation.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.OnInputMethodEvent(QtGui.QInputMethodEvent)">
            <summary>
            <para>Reimplemented from QWidget::inputMethodEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.ScrollContentsBy(System.Int32,System.Int32)">
            <summary>
            <para>Reimplemented from
            QAbstractScrollArea::scrollContentsBy().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.BlockBoundingRect(QtGui.QTextBlock)">
            <summary>
            <para>Returns the bounding rectangle of the text block in the block's
            own coordinates.</para>
            <para>See also blockBoundingGeometry().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextEdit.BlockBoundingGeometry(QtGui.QTextBlock)">
            <summary>
            <para>Returns the bounding rectangle of the text block in content
            coordinates. Translate the rectangle with the contentOffset() to get visual
            coordinates on the viewport.</para>
            <para>See also firstVisibleBlock() and blockBoundingRect().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QPlainTextEdit.TextChanged">
            <summary>
            <para>This property gets and sets the plain text editor's contents. The previous contents are removed and undo/redo history is reset when this property is set.</para>
            <para>By default, for an editor with no contents, this property contains an empty string.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	toPlainText() const</para>
            <para> void 	setPlainText(const QString &amp; text)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QPlainTextEdit.UndoAvailable">
            <summary>
            <para>This signal is emitted whenever undo operations become available (available is true) or unavailable (available is false).</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QPlainTextEdit.RedoAvailable">
            <summary>
            <para>This signal is emitted whenever redo operations become available (available is true) or unavailable (available is false).</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QPlainTextEdit.CopyAvailable">
            <summary>
            <para>This signal is emitted when text is selected or de-selected in the text edit.</para>
            <para>When text is selected this signal will be emitted with yes set to true. If no text has been selected or if the selected text is de-selected this signal is emitted with yes set to false.</para>
            <para>If yes is true then copy() can be used to copy the selection to the clipboard. If yes is false then copy() does nothing.</para>
            <para>See also selectionChanged().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QPlainTextEdit.SelectionChanged">
            <summary>
            <para>This signal is emitted whenever the selection changes.</para>
            <para>See also copyAvailable().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QPlainTextEdit.CursorPositionChanged">
            <summary>
            <para>This signal is emitted whenever the position of the cursor changed.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QPlainTextEdit.UpdateRequest">
            <summary>
            <para>This signal is emitted when the text document needs an update of the specified rect. If the text is scrolled, rect will cover the entire viewport area. If the text is scrolled vertically, dy carries the amount of pixels the viewport was scrolled.</para>
            <para>The purpose of the signal is to support extra widgets in plain text edit subclasses that e.g. show line numbers, breakpoints, or other extra information.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QPlainTextEdit.BlockCountChanged">
            <summary>
            <para>This signal is emitted whenever the block count changes. The new block count is passed in newBlockCount.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QPlainTextEdit.ModificationChanged">
            <summary>
            <para>This signal is emitted whenever the content of the document changes in a way that affects the modification state. If changed is true, the document has been modified; otherwise it is false.</para>
            <para>For example, calling setModified(false) on a document and then inserting text causes the signal to get emitted. If you undo that operation, causing the document to return to its original unmodified state, the signal will get emitted again.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.Document">
            <summary>
            <para>Returns a pointer to the underlying document.</para>
            <para>See also setDocument().</para>
            <para></para>
            <para>Makes document the new document of the text editor.</para>
            <para>The parent QObject of the provided document remains the owner of
            the object. If the current document is a child of the text editor, then it
            is deleted.</para>
            <para>The document must have a document layout that inherits
            QPlainTextDocumentLayout (see QTextDocument::setDocumentLayout()).</para>
            <para>See also document().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.PlaceholderText">
            <summary>
            <para>This property holds the editor placeholder text.</para>
            <para>Setting this property makes the editor display a grayed-out
            placeholder text as long as the document() is empty.</para>
            <para>By default, this property contains an empty string.</para>
            <para>This property was introduced in  Qt 5.3.</para>
            <para>See also document().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.TextCursor">
            <summary>
            <para>Returns a copy of the QTextCursor that represents the currently
            visible cursor. Note that changes on the returned cursor do not affect
            QPlainTextEdit's cursor; use setTextCursor() to update the visible
            cursor.</para>
            <para>See also setTextCursor().</para>
            <para></para>
            <para>Sets the visible cursor.</para>
            <para>See also textCursor().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.ReadOnly">
            <summary>
            <para>This property holds whether the text edit is read-only.</para>
            <para>In a read-only text edit the user can only navigate through the
            text and select text; modifying the text is not possible.</para>
            <para>This property's default is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.TextInteractionFlags">
            <summary>
            <para>Specifies how the label should interact with user input if it
            displays text.</para>
            <para>If the flags contain either Qt::LinksAccessibleByKeyboard or
            Qt::TextSelectableByKeyboard then the focus policy is also automatically
            set to Qt::ClickFocus.</para>
            <para>The default value depends on whether the QPlainTextEdit is
            read-only or editable.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.CurrentCharFormat">
            <summary>
            <para>Returns the char format that is used when inserting new
            text.</para>
            <para>See also setCurrentCharFormat().</para>
            <para></para>
            <para>Sets the char format that is be used when inserting new text to
            format by calling QTextCursor::setCharFormat() on the editor's cursor. If
            the editor has a selection then the char format is directly applied to the
            selection.</para>
            <para>See also currentCharFormat().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.TabChangesFocus">
            <summary>
            <para>This property holds whether Tab changes focus or is accepted as
            input.</para>
            <para>In some occasions text edits should not allow the user to input
            tabulators or change indentation using the Tab key, as this breaks the
            focus chain. The default is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.DocumentTitle">
            <summary>
            <para>This property holds the title of the document parsed from the
            text.</para>
            <para>By default, this property contains an empty string.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.UndoRedoEnabled">
            <summary>
            <para>This property holds whether undo and redo are enabled.</para>
            <para>Users are only able to undo or redo actions if this property is
            true, and if there is an action that can be undone (or redone).</para>
            <para>By default, this property is true.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.MaximumBlockCount">
            <summary>
            <para>This property holds the limit for blocks in the document.</para>
            <para>Specifies the maximum number of blocks the document may have. If
            there are more blocks in the document that specified with this property
            blocks are removed from the beginning of the document.</para>
            <para>A negative or zero value specifies that the document may contain
            an unlimited amount of blocks.</para>
            <para>The default value is 0.</para>
            <para>Note that setting this property will apply the limit immediately
            to the document contents. Setting this property also disables the undo redo
            history.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.lineWrapMode">
            <summary>
            <para>This property holds the line wrap mode.</para>
            <para>The default mode is WidgetWidth which causes words to be wrapped
            at the right edge of the text edit. Wrapping occurs at whitespace, keeping
            whole words intact. If you want wrapping to occur within words use
            setWordWrapMode().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.WordWrapMode">
            <summary>
            <para>This property holds the mode QPlainTextEdit will use when
            wrapping text by words.</para>
            <para>By default, this property is set to
            QTextOption::WrapAtWordBoundaryOrAnywhere.</para>
            <para>See also QTextOption::WrapMode.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.BackgroundVisible">
            <summary>
            <para>This property holds whether the palette background is visible
            outside the document area.</para>
            <para>If set to true, the plain text edit paints the palette background
            on the viewport area not covered by the text document. Otherwise, if set to
            false, it won't. The feature makes it possible for the user to visually
            distinguish between the area of the document, painted with the base color
            of the palette, and the empty area not covered by any document.</para>
            <para>The default is false.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.CenterOnScroll">
            <summary>
            <para>This property holds whether the cursor should be centered on
            screen.</para>
            <para>If set to true, the plain text edit scrolls the document
            vertically to make the cursor visible at the center of the viewport. This
            also allows the text edit to scroll below the end of the document.
            Otherwise, if set to false, the plain text edit scrolls the smallest amount
            possible to ensure the cursor is visible. The same algorithm is applied to
            any new line appended through appendPlainText().</para>
            <para>The default is false.</para>
            <para>See also centerCursor() and ensureCursorVisible().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.OverwriteMode">
            <summary>
            <para>This property holds whether text entered by the user will
            overwrite existing text.</para>
            <para>As with many text editors, the plain text editor widget can be
            configured to insert or overwrite existing text with new text entered by
            the user.</para>
            <para>If this property is true, existing text is overwritten,
            character-for-character by new text; otherwise, text is inserted at the
            cursor position, displacing existing text.</para>
            <para>By default, this property is false (new text does not overwrite
            existing text).</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.TabStopWidth">
            <summary>
            <para>This property holds the tab stop width in pixels.</para>
            <para>By default, this property contains a value of 80.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.CursorWidth">
            <summary>
            <para>This property specifies the width of the cursor in pixels. The
            default value is 1.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.BlockCount">
            <summary>
            <para>This property holds the number of text blocks in the
            document.</para>
            <para>By default, in an empty document, this property contains a value
            of 1.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.FirstVisibleBlock">
            <summary>
            <para>Returns the first visible block.</para>
            <para>See also blockBoundingRect().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.ContentOffset">
            <summary>
            <para>Returns the content's origin in viewport coordinates.</para>
            <para>The origin of the content of a plain text edit is always the top
            left corner of the first visible text block. The content offset is
            different from (0,0) when the text has been scrolled horizontally, or when
            the first visible block has been scrolled partially off the screen, i.e.
            the visible text does not start with the first line of the first visible
            block, or when the first visible block is the very first block and the
            editor displays a margin.</para>
            <para>See also firstVisibleBlock(), horizontalScrollBar(), and
            verticalScrollBar().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextEdit.PaintContext">
            <summary>
            <para>Returns the paint context for the viewport(), useful only when
            reimplementing paintEvent().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QPlainTextDocumentLayout">
            <summary>
            <para>The QPlainTextDocumentLayout class implements a plain text layout
            for QTextDocument</para>
            </summary>
            <remarks>
            <para>A QPlainTextDocumentLayout is required for text documents that
            can be display or edited in a QPlainTextEdit. See
            QTextDocument::setDocumentLayout().</para>
            <para>QPlainTextDocumentLayout uses the QAbstractTextDocumentLayout API
            that QTextDocument requires, but redefines it partially in order to support
            plain text better. For instances, it does not operate on vertical pixels,
            but on paragraphs (called blocks) instead. The height of a document is
            identical to the number of paragraphs it contains. The layout also doesn't
            support tables or nested frames, or any sort of advanced text layout that
            goes beyond a list of paragraphs with syntax highlighting.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QPlainTextDocumentLayout.#ctor(QtGui.QTextDocument)">
            <summary>
            <para>Constructs a plain text document layout for the text
            document.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextDocumentLayout.Draw(QtGui.QPainter,QtGui.QAbstractTextDocumentLayout.PaintContext)">
            <summary>
            <para>Reimplemented from QAbstractTextDocumentLayout::draw().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextDocumentLayout.HitTest(QtCore.QPointF,QtCore.Qt.HitTestAccuracy)">
            <summary>
            <para>Reimplemented from QAbstractTextDocumentLayout::hitTest().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextDocumentLayout.FrameBoundingRect(QtGui.QTextFrame)">
            <summary>
            <para>Reimplemented from
            QAbstractTextDocumentLayout::frameBoundingRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextDocumentLayout.BlockBoundingRect(QtGui.QTextBlock)">
            <summary>
            <para>Reimplemented from
            QAbstractTextDocumentLayout::blockBoundingRect().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextDocumentLayout.EnsureBlockLayout(QtGui.QTextBlock)">
            <summary>
            <para>Ensures that block has a valid layout</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextDocumentLayout.RequestUpdate">
            <summary>
            <para>Requests a complete update on all views.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QPlainTextDocumentLayout.DocumentChanged(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Reimplemented from
            QAbstractTextDocumentLayout::documentChanged().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextDocumentLayout.CursorWidth">
            <summary>
            <para>This property specifies the width of the cursor in pixels. The
            default value is 1.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextDocumentLayout.PageCount">
            <summary>
            <para>Reimplemented from
            QAbstractTextDocumentLayout::pageCount().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QPlainTextDocumentLayout.DocumentSize">
            <summary>
            <para>Reimplemented from
            QAbstractTextDocumentLayout::documentSize().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QProgressBar">
            <summary>
            <para>The QProgressBar widget provides a horizontal or vertical
            progress bar.</para>
            </summary>
            <remarks>
            <para>A progress bar is used to give the user an indication of the
            progress of an operation and to reassure them that the application is still
            running.</para>
            <para>The progress bar uses the concept of steps. You set it up by
            specifying the minimum and maximum possible step values, and it will
            display the percentage of steps that have been completed when you later
            give it the current step value. The percentage is calculated by dividing
            the progress (value() - minimum()) divided by maximum() - minimum().</para>
            <para>You can specify the minimum and maximum number of steps with
            setMinimum() and setMaximum. The current number of steps is set with
            setValue(). The progress bar can be rewound to the beginning with
            reset().</para>
            <para>If minimum and maximum both are set to 0, the bar shows a busy
            indicator instead of a percentage of steps. This is useful, for example,
            when using QNetworkAccessManager to download items when they are unable to
            determine the size of the item being downloaded.</para>
            <para></para>
            <para> 	A progress bar shown in the Macintosh widget style.</para>
            <para>	A progress bar shown in the Windows Vista widget style.</para>
            <para>	A progress bar shown in the Fusion widget style.</para>
            <para></para>
            <para></para>
            <para>See also QProgressDialog and GUI Design Handbook: Progress
            Indicator.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QProgressBar.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a progress bar with the given parent.</para>
            <para>By default, the minimum step value is set to 0, and the maximum
            to 100.</para>
            <para>See also setRange().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressBar.ResetFormat">
            <summary>
            <para>This property holds the string used to generate the current
            text.</para>
            <para>%p - is replaced by the percentage completed. %v - is replaced by
            the current value. %m - is replaced by the total number of steps.</para>
            <para>The default value is &quot;%p%&quot;.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also text().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressBar.Reset">
            <summary>
            <para>Reset the progress bar. The progress bar &quot;rewinds&quot; and
            shows no progress.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressBar.SetRange(System.Int32,System.Int32)">
            <summary>
            <para>Sets the progress bar's minimum and maximum values to minimum and
            maximum respectively.</para>
            <para>If maximum is smaller than minimum, minimum becomes the only
            legal value.</para>
            <para>If the current value falls outside the new range, the progress
            bar is reset with reset().</para>
            <para>The QProgressBar can be set to undetermined state by using
            setRange(0, 0).</para>
            <para>See also minimum and maximum.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressBar.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressBar.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QProgressBar.InitStyleOption(QtWidgets.QStyleOptionProgressBar)">
            <summary>
            <para>Initialize option with the values from this QProgressBar. This
            method is useful for subclasses when they need a QStyleOptionProgressBar or
            QStyleOptionProgressBarV2, but don't want to fill in all the information
            themselves. This function will check the version of the
            QStyleOptionProgressBar and fill in the additional values for a
            QStyleOptionProgressBarV2.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QProgressBar.ValueChanged">
            <summary>
            <para>This property holds the progress bar's current value.</para>
            <para>Attempting to change the current value to one outside the minimum-maximum range has no effect on the current value.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	value() const</para>
            <para> void 	setValue(int value)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	valueChanged(int value)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressBar.TextVisible">
            <summary>
            <para>This property holds whether the current completed percentage
            should be displayed.</para>
            <para>This property may be ignored by the style (e.g., QMacStyle never
            draws the text).</para>
            <para>See also textDirection.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressBar.Alignment">
            <summary>
            <para>This property holds the alignment of the progress bar.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressBar.InvertedAppearance">
            <summary>
            <para>This property holds whether or not a progress bar shows its
            progress inverted.</para>
            <para>If this property is true, the progress bar grows in the other
            direction (e.g. from right to left). By default, the progress bar is not
            inverted.</para>
            <para>This property was introduced in  Qt 4.1.</para>
            <para>See also orientation and layoutDirection.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressBar.TextDirection">
            <summary>
            <para>This property holds the reading direction of the text for
            vertical progress bars.</para>
            <para>This property has no impact on horizontal progress bars. By
            default, the reading direction is QProgressBar::TopToBottom.</para>
            <para>This property was introduced in  Qt 4.1.</para>
            <para>See also orientation and textVisible.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressBar.Format">
            <summary>
            <para>This property holds the string used to generate the current
            text.</para>
            <para>%p - is replaced by the percentage completed. %v - is replaced by
            the current value. %m - is replaced by the total number of steps.</para>
            <para>The default value is &quot;%p%&quot;.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also text().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressBar.Minimum">
            <summary>
            <para>This property holds the progress bar's minimum value.</para>
            <para>When setting this property, the maximum is adjusted if necessary
            to ensure that the range remains valid. If the current value falls outside
            the new range, the progress bar is reset with reset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressBar.Maximum">
            <summary>
            <para>This property holds the progress bar's maximum value.</para>
            <para>When setting this property, the minimum is adjusted if necessary
            to ensure that the range remains valid. If the current value falls outside
            the new range, the progress bar is reset with reset().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressBar.Value">
            <summary>
            <para>This property holds the progress bar's current value.</para>
            <para>Attempting to change the current value to one outside the
            minimum-maximum range has no effect on the current value.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressBar.Orientation">
            <summary>
            <para>This property holds the orientation of the progress bar.</para>
            <para>The orientation must be Qt::Horizontal (the default) or
            Qt::Vertical.</para>
            <para>This property was introduced in  Qt 4.1.</para>
            <para>See also invertedAppearance and textDirection.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressBar.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressBar.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QProgressBar.Text">
            <summary>
            <para>This property holds the descriptive text shown with the progress
            bar.</para>
            <para>The text returned is the same as the text displayed in the center
            (or in some styles, to the left) of the progress bar.</para>
            <para>The progress shown in the text may be smaller than the minimum
            value, indicating that the progress bar is in the &quot;reset&quot; state
            before any progress is set.</para>
            <para>In the default implementation, the text either contains a
            percentage value that indicates the progress so far, or it is blank because
            the progress bar is in the reset state.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QProgressBar.Direction">
            <summary>
            <para>Specifies the reading direction of the text for vertical progress
            bars.</para>
            <para>Note that whether or not the text is drawn is dependent on the
            style. Currently CleanLooks and Plastique draw the text. Mac, Windows and
            WindowsXP style do not.</para>
            <para>This enum was introduced or modified in  Qt 4.1.</para>
            <para>See also textDirection.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QProgressBar.Direction.TopToBottom">
            <summary>The text is rotated 90 degrees clockwise.</summary>
        </member>
        <member name="F:QtWidgets.QProgressBar.Direction.BottomToTop">
            <summary>The text is rotated 90 degrees counter-clockwise.</summary>
        </member>
        <member name="T:QtWidgets.QRadioButton">
            <summary>
            <para>The QRadioButton widget provides a radio button with a text
            label.</para>
            </summary>
            <remarks>
            <para>A QRadioButton is an option button that can be switched on
            (checked) or off (unchecked). Radio buttons typically present the user with
            a &quot;one of many&quot; choice. In a group of radio buttons, only one
            radio button at a time can be checked; if the user selects another button,
            the previously selected button is switched off.</para>
            <para>Radio buttons are autoExclusive by default. If auto-exclusive is
            enabled, radio buttons that belong to the same parent widget behave as if
            they were part of the same exclusive button group. If you need multiple
            exclusive button groups for radio buttons that belong to the same parent
            widget, put them into a QButtonGroup.</para>
            <para>Whenever a button is switched on or off, it emits the toggled()
            signal. Connect to this signal if you want to trigger an action each time
            the button changes state. Use isChecked() to see if a particular button is
            selected.</para>
            <para>Just like QPushButton, a radio button displays text, and
            optionally a small icon. The icon is set with setIcon(). The text can be
            set in the constructor or with setText(). A shortcut key can be specified
            by preceding the preferred character with an ampersand in the text. For
            example:</para>
            <para>QRadioButton *button = new QRadioButton(&quot;Search from the
            &amp;cursor&quot;, this);</para>
            <para>In this example the shortcut is Alt+c. See the QShortcut
            documentation for details. To display an actual ampersand, use
            '&amp;&amp;'.</para>
            <para>Important inherited members: text(), setText(), text(),
            setDown(), isDown(), autoRepeat(), group(), setAutoRepeat(), toggle(),
            pressed(), released(), clicked(), and toggled().</para>
            <para></para>
            <para> 	A radio button shown in the Fusion widget style.</para>
            <para>	A radio button shown in the Windows Vista widget style.</para>
            <para>	A radio button shown in the Macintosh widget style.</para>
            <para></para>
            <para></para>
            <para>See also QPushButton, QToolButton, QCheckBox, GUI Design
            Handbook: Radio Button, and Group Box Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QRadioButton.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a radio button with the given parent, but with no text
            or pixmap.</para>
            <para>The parent argument is passed on to the QAbstractButton
            constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRadioButton.#ctor(System.String,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a radio button with the given parent and text
            string.</para>
            <para>The parent argument is passed on to the QAbstractButton
            constructor.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRadioButton.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRadioButton.HitButton(QtCore.QPoint)">
            <summary>
            <para>Reimplemented from QAbstractButton::hitButton().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRadioButton.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRadioButton.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QRadioButton.InitStyleOption(QtWidgets.QStyleOptionButton)">
            <summary>
            <para>Initialize option with the values from this QRadioButton. This
            method is useful for subclasses when they need a QStyleOptionButton, but
            don't want to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QRadioButton.PaintEvent">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QRadioButton.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QRadioButton.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QScrollBar">
            <summary>
            <para>The QScrollBar widget provides a vertical or horizontal scroll
            bar.</para>
            </summary>
            <remarks>
            <para>A scroll bar is a control that enables the user to access parts
            of a document that is larger than the widget used to display it. It
            provides a visual indication of the user's current position within the
            document and the amount of the document that is visible. Scroll bars are
            usually equipped with other controls that enable more accurate navigation.
            Qt displays scroll bars in a way that is appropriate for each
            platform.</para>
            <para>If you need to provide a scrolling view onto another widget, it
            may be more convenient to use the QScrollArea class because this provides a
            viewport widget and scroll bars. QScrollBar is useful if you need to
            implement similar functionality for specialized widgets using
            QAbstractScrollArea; for example, if you decide to subclass
            QAbstractItemView. For most other situations where a slider control is used
            to obtain a value within a given range, the QSlider class may be more
            appropriate for your needs.</para>
            <para></para>
            <para> 	Scroll bars typically include four separate controls: a slider,
            scroll arrows, and a page control.</para>
            <para>a. The slider provides a way to quickly go to any part of the
            document, but does not support accurate navigation within large
            documents.</para>
            <para>b. The scroll arrows are push buttons which can be used to
            accurately navigate to a particular place in a document. For a vertical
            scroll bar connected to a text editor, these typically move the current
            position one &quot;line&quot; up or down, and adjust the position of the
            slider by a small amount. In editors and list boxes a &quot;line&quot;
            might mean one line of text; in an image viewer it might mean 20
            pixels.</para>
            <para>c. The page control is the area over which the slider is dragged
            (the scroll bar's background). Clicking here moves the scroll bar towards
            the click by one &quot;page&quot;. This value is usually the same as the
            length of the slider.</para>
            <para></para>
            <para></para>
            <para></para>
            <para>Each scroll bar has a value that indicates how far the slider is
            from the start of the scroll bar; this is obtained with value() and set
            with setValue(). This value always lies within the range of values defined
            for the scroll bar, from minimum() to maximum() inclusive. The range of
            acceptable values can be set with setMinimum() and setMaximum(). At the
            minimum value, the top edge of the slider (for a vertical scroll bar) or
            left edge (for a horizontal scroll bar) will be at the top (or left) end of
            the scroll bar. At the maximum value, the bottom (or right) edge of the
            slider will be at the bottom (or right) end of the scroll bar.</para>
            <para>The length of the slider is usually related to the value of the
            page step, and typically represents the proportion of the document area
            shown in a scrolling view. The page step is the amount that the value
            changes by when the user presses the Page Up and Page Down keys, and is set
            with setPageStep(). Smaller changes to the value defined by the line step
            are made using the cursor keys, and this quantity is set with
            setSingleStep().</para>
            <para>Note that the range of values used is independent of the actual
            size of the scroll bar widget. You do not need to take this into account
            when you choose values for the range and the page step.</para>
            <para>The range of values specified for the scroll bar are often
            determined differently to those for a QSlider because the length of the
            slider needs to be taken into account. If we have a document with 100
            lines, and we can only show 20 lines in a widget, we may wish to construct
            a scroll bar with a page step of 20, a minimum value of 0, and a maximum
            value of 80. This would give us a scroll bar with five
            &quot;pages&quot;.</para>
            <para></para>
            <para> 	The relationship between a document length, the range of values
            used in a scroll bar, and the page step is simple in many common
            situations. The scroll bar's range of values is determined by subtracting a
            chosen page step from some value representing the length of the document.
            In such cases, the following equation is useful: document length =
            maximum() - minimum() + pageStep().</para>
            <para></para>
            <para>QScrollBar only provides integer ranges. Note that although
            QScrollBar handles very large numbers, scroll bars on current screens
            cannot usefully represent ranges above about 100,000 pixels. Beyond that,
            it becomes difficult for the user to control the slider using either the
            keyboard or the mouse, and the scroll arrows will have limited use.</para>
            <para>ScrollBar inherits a comprehensive set of signals from
            QAbstractSlider:</para>
            <para></para>
            <para>valueChanged() is emitted when the scroll bar's value has
            changed. The tracking() determines whether this signal is emitted during
            user interaction.</para>
            <para>rangeChanged() is emitted when the scroll bar's range of values
            has changed.</para>
            <para>sliderPressed() is emitted when the user starts to drag the
            slider.</para>
            <para>sliderMoved() is emitted when the user drags the slider.</para>
            <para>sliderReleased() is emitted when the user releases the
            slider.</para>
            <para>actionTriggered() is emitted when the scroll bar is changed by
            user interaction or via the triggerAction() function.</para>
            <para></para>
            <para>A scroll bar can be controlled by the keyboard, but it has a
            default focusPolicy() of Qt::NoFocus. Use setFocusPolicy() to enable
            keyboard interaction with the scroll bar:</para>
            <para></para>
            <para>Left/Right move a horizontal scroll bar by one single
            step.</para>
            <para>Up/Down move a vertical scroll bar by one single step.</para>
            <para>PageUp moves up one page.</para>
            <para>PageDown moves down one page.</para>
            <para>Home moves to the start (mininum).</para>
            <para>End moves to the end (maximum).</para>
            <para></para>
            <para>The slider itself can be controlled by using the triggerAction()
            function to simulate user interaction with the scroll bar controls. This is
            useful if you have many different widgets that use a common range of
            values.</para>
            <para>Most GUI styles use the pageStep() value to calculate the size of
            the slider.</para>
            <para></para>
            <para> 	A scroll bar shown in the Macintosh widget style.</para>
            <para>	A scroll bar shown in the Windows Vista widget style.</para>
            <para>	A scroll bar shown in the Fusion widget style.</para>
            <para></para>
            <para></para>
            <para>See also QScrollArea, QSlider, QDial, QSpinBox, GUI Design
            Handbook: Scroll Bar, and Sliders Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QScrollBar.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a vertical scroll bar.</para>
            <para>The parent argument is sent to the QWidget constructor.</para>
            <para>The minimum defaults to 0, the maximum to 99, with a singleStep
            size of 1 and a pageStep size of 10, and an initial value of 0.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollBar.#ctor(QtCore.Qt.Orientation,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a scroll bar with the given orientation.</para>
            <para>The parent argument is passed to the QWidget constructor.</para>
            <para>The minimum defaults to 0, the maximum to 99, with a singleStep
            size of 1 and a pageStep size of 10, and an initial value of 0.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollBar.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollBar.OnWheelEvent(QtGui.QWheelEvent)">
            <summary>
            <para>Reimplemented from QWidget::wheelEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollBar.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollBar.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollBar.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollBar.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollBar.OnHideEvent(QtGui.QHideEvent)">
            <summary>
            <para>Reimplemented from QWidget::hideEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollBar.sliderChange(QtWidgets.QAbstractSlider.SliderChange)">
            <summary>
            <para>Reimplemented from QAbstractSlider::sliderChange().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollBar.OnContextMenuEvent(QtGui.QContextMenuEvent)">
            <summary>
            <para>Reimplemented from QWidget::contextMenuEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QScrollBar.InitStyleOption(QtWidgets.QStyleOptionSlider)">
            <summary>
            <para>Initialize option with the values from this QScrollBar. This
            method is useful for subclasses when they need a QStyleOptionSlider, but
            don't want to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QScrollBar.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QSizeGrip">
            <summary>
            <para>The QSizeGrip class provides a resize handle for resizing
            top-level windows.</para>
            </summary>
            <remarks>
            <para>This widget works like the standard Windows resize handle. In the
            X11 version this resize handle generally works differently from the one
            provided by the system if the X11 window manager does not support necessary
            modern post-ICCCM specifications.</para>
            <para>Put this widget anywhere in a widget tree and the user can use it
            to resize the top-level window or any widget with the Qt::SubWindow flag
            set. Generally, this should be in the lower right-hand corner. Note that
            QStatusBar already uses this widget, so if you have a status bar (e.g., you
            are using QMainWindow), then you don't need to use this widget
            explicitly.</para>
            <para>On some platforms the size grip automatically hides itself when
            the window is shown full screen or maximised.</para>
            <para></para>
            <para> 	A size grip widget at the bottom-right corner of a main window,
            shown in the Fusion widget style.</para>
            <para></para>
            <para>The QSizeGrip class inherits QWidget and reimplements the
            mousePressEvent() and mouseMoveEvent() functions to feature the resize
            functionality, and the paintEvent() function to render the size grip
            widget.</para>
            <para></para>
            <para>See also QStatusBar and QWidget::windowState().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QSizeGrip.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a resize corner as a child widget of the given
            parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSizeGrip.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            <para>Paints the resize grip.</para>
            <para>Resize grips are usually rendered as small diagonal textured
            lines in the lower-right corner. The paint event is passed in the event
            parameter.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSizeGrip.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            <para>Receives the mouse press events for the widget, and primes the
            resize operation. The mouse press event is passed in the event
            parameter.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSizeGrip.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            <para>Resizes the top-level widget containing this widget. The mouse
            move event is passed in the event parameter.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSizeGrip.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSizeGrip.OnMoveEvent(QtGui.QMoveEvent)">
            <summary>
            <para>Reimplemented from QWidget::moveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSizeGrip.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSizeGrip.OnHideEvent(QtGui.QHideEvent)">
            <summary>
            <para>Reimplemented from QWidget::hideEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSizeGrip.EventFilter(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::eventFilter().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSizeGrip.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSizeGrip.Visible">
            <summary>
            <para>This property holds whether the widget is visible.</para>
            <para>Calling setVisible(true) or show() sets the widget to visible
            status if all its parent widgets up to the window are visible. If an
            ancestor is not visible, the widget won't become visible until all its
            ancestors are shown. If its size or position has changed, Qt guarantees
            that a widget gets move and resize events just before it is shown. If the
            widget has not been resized yet, Qt will adjust the widget's size to a
            useful default using adjustSize().</para>
            <para>Calling setVisible(false) or hide() hides a widget explicitly. An
            explicitly hidden widget will never become visible, even if all its
            ancestors become visible, unless you show it.</para>
            <para>A widget receives show and hide events when its visibility status
            changes. Between a hide and a show event, there is no need to waste CPU
            cycles preparing or displaying information to the user. A video
            application, for example, might simply stop generating new frames.</para>
            <para>A widget that happens to be obscured by other windows on the
            screen is considered to be visible. The same applies to iconified windows
            and windows that exist on another virtual desktop (on platforms that
            support this concept). A widget receives spontaneous show and hide events
            when its mapping status is changed by the window system, e.g. a spontaneous
            hide event when the user minimizes the window, and a spontaneous show event
            when the window is restored again.</para>
            <para>You almost never have to reimplement the setVisible() function.
            If you need to change some settings before a widget is shown, use
            showEvent() instead. If you need to do some delayed initialization use the
            Polish event delivered to the event() function.</para>
            <para>See also show(), hide(), isHidden(), isVisibleTo(),
            isMinimized(), showEvent(), and hideEvent().</para>
            <para></para>
            <para>Reimplemented from QWidget::setVisible().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSizeGrip.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QSpinBox">
            <summary>
            <para>The QSpinBox class provides a spin box widget.</para>
            </summary>
            <remarks>
            <para>QSpinBox is designed to handle integers and discrete sets of
            values (e.g., month names); use QDoubleSpinBox for floating point
            values.</para>
            <para>QSpinBox allows the user to choose a value by clicking the
            up/down buttons or pressing up/down on the keyboard to increase/decrease
            the value currently displayed. The user can also type the value in
            manually. The spin box supports integer values but can be extended to use
            different strings with validate(), textFromValue() and
            valueFromText().</para>
            <para>Every time the value changes QSpinBox emits two valueChanged()
            signals, one providing an int and the other a QString. The QString overload
            provides the value with both prefix() and suffix(). The current value can
            be fetched with value() and set with setValue().</para>
            <para>Clicking the up/down buttons or using the keyboard accelerator's
            up and down arrows will increase or decrease the current value in steps of
            size singleStep(). If you want to change this behaviour you can reimplement
            the virtual function stepBy(). The minimum and maximum value and the step
            size can be set using one of the constructors, and can be changed later
            with setMinimum(), setMaximum() and setSingleStep().</para>
            <para>Most spin boxes are directional, but QSpinBox can also operate as
            a circular spin box, i.e. if the range is 0-99 and the current value is 99,
            clicking &quot;up&quot; will give 0 if wrapping() is set to true. Use
            setWrapping() if you want circular behavior.</para>
            <para>The displayed value can be prepended and appended with arbitrary
            strings indicating, for example, currency or the unit of measurement. See
            setPrefix() and setSuffix(). The text in the spin box is retrieved with
            text() (which includes any prefix() and suffix()), or with cleanText()
            (which has no prefix(), no suffix() and no leading or trailing
            whitespace).</para>
            <para>It is often desirable to give the user a special (often default)
            choice in addition to the range of numeric values. See
            setSpecialValueText() for how to do this with QSpinBox.</para>
            <para></para>
            <para> 	A spin box shown in the Windows Vista widget style.</para>
            <para>	A spin box shown in the Fusion widget style.</para>
            <para>	A spin box shown in the Macintosh widget style.</para>
            <para></para>
            <para></para>
            <para>Subclassing QSpinBox</para>
            <para>If using prefix(), suffix(), and specialValueText() don't provide
            enough control, you subclass QSpinBox and reimplement valueFromText() and
            textFromValue(). For example, here's the code for a custom spin box that
            allows the user to enter icon sizes (e.g., &quot;32 x 32&quot;):</para>
            <para>int IconSizeSpinBox::valueFromText(const QString &amp;text)
            const</para>
            <para>{</para>
            <para>    QRegExp
            regExp(tr(&quot;(\\d+)(\\s*[xx]\\s*\\d+)?&quot;));</para>
            <para></para>
            <para>    if (regExp.exactMatch(text)) {</para>
            <para>        return regExp.cap(1).toInt();</para>
            <para>    } else {</para>
            <para>        return 0;</para>
            <para>    }</para>
            <para>}</para>
            <para></para>
            <para>QString IconSizeSpinBox::textFromValue(int value) const</para>
            <para>{</para>
            <para>    return tr(&quot;%1 x %1&quot;).arg(value);</para>
            <para>}</para>
            <para>See the Icons example for the full source code.</para>
            <para></para>
            <para>See also QDoubleSpinBox, QDateTimeEdit, QSlider, and Spin Boxes
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QSpinBox.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a spin box with 0 as minimum value and 99 as maximum
            value, a step value of 1. The value is initially set to 0. It is parented
            to parent.</para>
            <para>See also setMinimum(), setMaximum(), and setSingleStep().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSpinBox.SetRange(System.Int32,System.Int32)">
            <summary>
            <para>Convenience function to set the minimum, and maximum values with
            a single function call.</para>
            <para>setRange(minimum, maximum);</para>
            <para>is equivalent to:</para>
            <para>setMinimum(minimum);</para>
            <para>setMaximum(maximum);</para>
            <para>See also minimum and maximum.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSpinBox.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSpinBox.Validate(System.String,System.Int32@)">
            <summary>
            <para>Reimplemented from QAbstractSpinBox::validate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSpinBox.ValueFromText(System.String)">
            <summary>
            <para>This virtual function is used by the spin box whenever it needs
            to interpret text entered by the user as a value.</para>
            <para>Subclasses that need to display spin box values in a non-numeric
            way need to reimplement this function.</para>
            <para>Note: QSpinBox handles specialValueText() separately; this
            function is only concerned with the other values.</para>
            <para>See also textFromValue() and validate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSpinBox.TextFromValue(System.Int32)">
            <summary>
            <para>This virtual function is used by the spin box whenever it needs
            to display the given value. The default implementation returns a string
            containing value printed in the standard way using
            QWidget::locale().toString(), but with the thousand separator removed
            unless setGroupSeparatorShown() is set. Reimplementations may return
            anything. (See the example in the detailed description.)</para>
            <para>Note: QSpinBox does not call this function for specialValueText()
            and that neither prefix() nor suffix() should be included in the return
            value.</para>
            <para>If you reimplement this, you may also need to reimplement
            valueFromText() and validate()</para>
            <para>See also valueFromText(), validate(), and
            QLocale::groupSeparator().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSpinBox.Fixup(System.String)">
            <summary>
            <para>Reimplemented from QAbstractSpinBox::fixup().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QSpinBox.ValueChanged">
            <summary>
            <para>This property holds the value of the spin box.</para>
            <para>setValue() will emit valueChanged() if the new value is different from the old one. The value property has a second notifier signal which includes the spin box's prefix and suffix.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	value() const</para>
            <para> void 	setValue(int val)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	valueChanged(int i)</para>
            <para> void 	valueChanged(const QString &amp; text)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QSpinBox.ValueChangedString">
            <summary>
            <para>This property holds the value of the spin box.</para>
            <para>setValue() will emit valueChanged() if the new value is different from the old one. The value property has a second notifier signal which includes the spin box's prefix and suffix.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	value() const</para>
            <para> void 	setValue(int val)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	valueChanged(int i)</para>
            <para> void 	valueChanged(const QString &amp; text)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSpinBox.Prefix">
            <summary>
            <para>This property holds the spin box's prefix.</para>
            <para>The prefix is prepended to the start of the displayed value.
            Typical use is to display a unit of measurement or a currency symbol. For
            example:</para>
            <para>sb-&gt;setPrefix(&quot;$&quot;);</para>
            <para>To turn off the prefix display, set this property to an empty
            string. The default is no prefix. The prefix is not displayed when value()
            == minimum() and specialValueText() is set.</para>
            <para>If no prefix is set, prefix() returns an empty string.</para>
            <para>See also suffix(), setSuffix(), specialValueText(), and
            setSpecialValueText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSpinBox.Suffix">
            <summary>
            <para>This property holds the suffix of the spin box.</para>
            <para>The suffix is appended to the end of the displayed value. Typical
            use is to display a unit of measurement or a currency symbol. For
            example:</para>
            <para>sb-&gt;setSuffix(&quot; km&quot;);</para>
            <para>To turn off the suffix display, set this property to an empty
            string. The default is no suffix. The suffix is not displayed for the
            minimum() if specialValueText() is set.</para>
            <para>If no suffix is set, suffix() returns an empty string.</para>
            <para>See also prefix(), setPrefix(), specialValueText(), and
            setSpecialValueText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSpinBox.SingleStep">
            <summary>
            <para>This property holds the step value.</para>
            <para>When the user uses the arrows to change the spin box's value the
            value will be incremented/decremented by the amount of the singleStep. The
            default value is 1. Setting a singleStep value of less than 0 does
            nothing.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSpinBox.Minimum">
            <summary>
            <para>This property holds the minimum value of the spin box.</para>
            <para>When setting this property the maximum is adjusted if necessary
            to ensure that the range remains valid.</para>
            <para>The default minimum value is 0.</para>
            <para>See also setRange() and specialValueText.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSpinBox.Maximum">
            <summary>
            <para>This property holds the maximum value of the spin box.</para>
            <para>When setting this property the minimum is adjusted if necessary,
            to ensure that the range remains valid.</para>
            <para>The default maximum value is 99.</para>
            <para>See also setRange() and specialValueText.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSpinBox.DisplayIntegerBase">
            <summary>
            <para>This property holds the base used to display the value of the
            spin box.</para>
            <para>The default displayIntegerBase value is 10.</para>
            <para>This property was introduced in  Qt 5.2.</para>
            <para>See also textFromValue() and valueFromText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSpinBox.Value">
            <summary>
            <para>This property holds the value of the spin box.</para>
            <para>setValue() will emit valueChanged() if the new value is different
            from the old one. The value property has a second notifier signal which
            includes the spin box's prefix and suffix.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSpinBox.CleanText">
            <summary>
            <para>This property holds the text of the spin box excluding any
            prefix, suffix, or leading or trailing whitespace.</para>
            <para>See also text, QSpinBox::prefix, and QSpinBox::suffix.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QDoubleSpinBox">
            <summary>
            <para>The QDoubleSpinBox class provides a spin box widget that takes
            doubles.</para>
            </summary>
            <remarks>
            <para>QDoubleSpinBox allows the user to choose a value by clicking the
            up and down buttons or by pressing Up or Down on the keyboard to increase
            or decrease the value currently displayed. The user can also type the value
            in manually. The spin box supports double values but can be extended to use
            different strings with validate(), textFromValue() and
            valueFromText().</para>
            <para>Every time the value changes QDoubleSpinBox emits two
            valueChanged() signals, one taking providing a double and the other a
            QString. The QString overload provides the value with both prefix() and
            suffix(). The current value can be fetched with value() and set with
            setValue().</para>
            <para>Note: QDoubleSpinBox will round numbers so they can be displayed
            with the current precision. In a QDoubleSpinBox with decimals set to 2,
            calling setValue(2.555) will cause value() to return 2.56.</para>
            <para>Clicking the up and down buttons or using the keyboard
            accelerator's Up and Down arrows will increase or decrease the current
            value in steps of size singleStep(). If you want to change this behavior
            you can reimplement the virtual function stepBy(). The minimum and maximum
            value and the step size can be set using one of the constructors, and can
            be changed later with setMinimum(), setMaximum() and setSingleStep(). The
            spinbox has a default precision of 2 decimal places but this can be changed
            using setDecimals().</para>
            <para>Most spin boxes are directional, but QDoubleSpinBox can also
            operate as a circular spin box, i.e. if the range is 0.0-99.9 and the
            current value is 99.9, clicking &quot;up&quot; will give 0 if wrapping() is
            set to true. Use setWrapping() if you want circular behavior.</para>
            <para>The displayed value can be prepended and appended with arbitrary
            strings indicating, for example, currency or the unit of measurement. See
            setPrefix() and setSuffix(). The text in the spin box is retrieved with
            text() (which includes any prefix() and suffix()), or with cleanText()
            (which has no prefix(), no suffix() and no leading or trailing
            whitespace).</para>
            <para>It is often desirable to give the user a special (often default)
            choice in addition to the range of numeric values. See
            setSpecialValueText() for how to do this with QDoubleSpinBox.</para>
            <para>Note: The displayed value of the QDoubleSpinBox is limited to 18
            characters in addition to eventual prefix and suffix content. This
            limitation is used to keep the double spin box usable even with extremely
            large values.</para>
            <para></para>
            <para>See also QSpinBox, QDateTimeEdit, QSlider, and Spin Boxes
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QDoubleSpinBox.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a spin box with 0.0 as minimum value and 99.99 as
            maximum value, a step value of 1.0 and a precision of 2 decimal places. The
            value is initially set to 0.00. The spin box has the given parent.</para>
            <para>See also setMinimum(), setMaximum(), and setSingleStep().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDoubleSpinBox.SetRange(System.Double,System.Double)">
            <summary>
            <para>Convenience function to set the minimum and maximum values with a
            single function call.</para>
            <para>Note: The maximum and minimum values will be rounded to match the
            decimals property.</para>
            <para>setRange(minimum, maximum);</para>
            <para>is equivalent to:</para>
            <para>setMinimum(minimum);</para>
            <para>setMaximum(maximum);</para>
            <para>See also minimum and maximum.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDoubleSpinBox.Validate(System.String,System.Int32@)">
            <summary>
            <para>Reimplemented from QAbstractSpinBox::validate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDoubleSpinBox.ValueFromText(System.String)">
            <summary>
            <para>This virtual function is used by the spin box whenever it needs
            to interpret text entered by the user as a value.</para>
            <para>Subclasses that need to display spin box values in a non-numeric
            way need to reimplement this function.</para>
            <para>Note: QDoubleSpinBox handles specialValueText() separately; this
            function is only concerned with the other values.</para>
            <para>See also textFromValue() and validate().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDoubleSpinBox.TextFromValue(System.Double)">
            <summary>
            <para>This virtual function is used by the spin box whenever it needs
            to display the given value. The default implementation returns a string
            containing value printed using QWidget::locale().toString(value,
            QLatin1Char('f'), decimals()) and will remove the thousand separator unless
            setGroupSeparatorShown() is set. Reimplementations may return
            anything.</para>
            <para>Note: QDoubleSpinBox does not call this function for
            specialValueText() and that neither prefix() nor suffix() should be
            included in the return value.</para>
            <para>If you reimplement this, you may also need to reimplement
            valueFromText().</para>
            <para>See also valueFromText() and QLocale::groupSeparator().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QDoubleSpinBox.Fixup(System.String)">
            <summary>
            <para>Reimplemented from QAbstractSpinBox::fixup().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDoubleSpinBox.ValueChanged">
            <summary>
            <para>This property holds the value of the spin box.</para>
            <para>setValue() will emit valueChanged() if the new value is different from the old one. The value property has a second notifier signal which includes the spin box's prefix and suffix.</para>
            <para>Note: The value will be rounded so it can be displayed with the current setting of decimals.</para>
            <para>Access functions:</para>
            <para></para>
            <para> double 	value() const</para>
            <para> void 	setValue(double val)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	valueChanged(double d)</para>
            <para> void 	valueChanged(const QString &amp; text)</para>
            <para></para>
            <para>See also decimals.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QDoubleSpinBox.ValueChangedString">
            <summary>
            <para>This property holds the value of the spin box.</para>
            <para>setValue() will emit valueChanged() if the new value is different from the old one. The value property has a second notifier signal which includes the spin box's prefix and suffix.</para>
            <para>Note: The value will be rounded so it can be displayed with the current setting of decimals.</para>
            <para>Access functions:</para>
            <para></para>
            <para> double 	value() const</para>
            <para> void 	setValue(double val)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	valueChanged(double d)</para>
            <para> void 	valueChanged(const QString &amp; text)</para>
            <para></para>
            <para>See also decimals.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDoubleSpinBox.Prefix">
            <summary>
            <para>This property holds the spin box's prefix.</para>
            <para>The prefix is prepended to the start of the displayed value.
            Typical use is to display a unit of measurement or a currency symbol. For
            example:</para>
            <para>spinbox-&gt;setPrefix(&quot;$&quot;);</para>
            <para>To turn off the prefix display, set this property to an empty
            string. The default is no prefix. The prefix is not displayed when value()
            == minimum() and specialValueText() is set.</para>
            <para>If no prefix is set, prefix() returns an empty string.</para>
            <para>See also suffix(), setSuffix(), specialValueText(), and
            setSpecialValueText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDoubleSpinBox.Suffix">
            <summary>
            <para>This property holds the suffix of the spin box.</para>
            <para>The suffix is appended to the end of the displayed value. Typical
            use is to display a unit of measurement or a currency symbol. For
            example:</para>
            <para>spinbox-&gt;setSuffix(&quot; km&quot;);</para>
            <para>To turn off the suffix display, set this property to an empty
            string. The default is no suffix. The suffix is not displayed for the
            minimum() if specialValueText() is set.</para>
            <para>If no suffix is set, suffix() returns an empty string.</para>
            <para>See also prefix(), setPrefix(), specialValueText(), and
            setSpecialValueText().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDoubleSpinBox.SingleStep">
            <summary>
            <para>This property holds the step value.</para>
            <para>When the user uses the arrows to change the spin box's value the
            value will be incremented/decremented by the amount of the singleStep. The
            default value is 1.0. Setting a singleStep value of less than 0 does
            nothing.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDoubleSpinBox.Minimum">
            <summary>
            <para>This property holds the minimum value of the spin box.</para>
            <para>When setting this property the maximum is adjusted if necessary
            to ensure that the range remains valid.</para>
            <para>The default minimum value is 0.0.</para>
            <para>Note: The minimum value will be rounded to match the decimals
            property.</para>
            <para>See also decimals, setRange(), and specialValueText.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDoubleSpinBox.Maximum">
            <summary>
            <para>This property holds the maximum value of the spin box.</para>
            <para>When setting this property the minimum is adjusted if necessary,
            to ensure that the range remains valid.</para>
            <para>The default maximum value is 99.99.</para>
            <para>Note: The maximum value will be rounded to match the decimals
            property.</para>
            <para>See also decimals and setRange().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDoubleSpinBox.Decimals">
            <summary>
            <para>This property holds the precision of the spin box, in
            decimals.</para>
            <para>Sets how many decimals the spinbox will use for displaying and
            interpreting doubles.</para>
            <para>Warning: The maximum value for decimals is DBL_MAX_10_EXP +
            DBL_DIG (ie. 323) because of the limitations of the double type.</para>
            <para>Note: The maximum, minimum and value might change as a result of
            changing this property.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDoubleSpinBox.Value">
            <summary>
            <para>This property holds the value of the spin box.</para>
            <para>setValue() will emit valueChanged() if the new value is different
            from the old one. The value property has a second notifier signal which
            includes the spin box's prefix and suffix.</para>
            <para>Note: The value will be rounded so it can be displayed with the
            current setting of decimals.</para>
            <para>See also decimals.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QDoubleSpinBox.CleanText">
            <summary>
            <para>This property holds the text of the spin box excluding any
            prefix, suffix, or leading or trailing whitespace.</para>
            <para>See also text, QDoubleSpinBox::prefix, and
            QDoubleSpinBox::suffix.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QSplashScreen">
            <summary>
            <para>The QSplashScreen widget provides a splash screen that can be
            shown during application startup.</para>
            </summary>
            <remarks>
            <para>A splash screen is a widget that is usually displayed when an
            application is being started. Splash screens are often used for
            applications that have long start up times (e.g. database or networking
            applications that take time to establish connections) to provide the user
            with feedback that the application is loading.</para>
            <para>The splash screen appears in the center of the screen. It may be
            useful to add the Qt::WindowStaysOnTopHint to the splash widget's window
            flags if you want to keep it above all the other windows on the
            desktop.</para>
            <para>Some X11 window managers do not support the &quot;stays on
            top&quot; flag. A solution is to set up a timer that periodically calls
            raise() on the splash screen to simulate the &quot;stays on top&quot;
            effect.</para>
            <para>The most common usage is to show a splash screen before the main
            widget is displayed on the screen. This is illustrated in the following
            code snippet in which a splash screen is displayed and some initialization
            tasks are performed before the application's main window is shown:</para>
            <para>int main(int argc, char *argv[])</para>
            <para>{</para>
            <para>    QApplication app(argc, argv);</para>
            <para>    QPixmap pixmap(&quot;:/splash.png&quot;);</para>
            <para>    QSplashScreen splash(pixmap);</para>
            <para>    splash.show();</para>
            <para>    app.processEvents();</para>
            <para>    ...</para>
            <para>    QMainWindow window;</para>
            <para>    window.show();</para>
            <para>    splash.finish(&amp;window);</para>
            <para>    return app.exec();</para>
            <para>}</para>
            <para>The user can hide the splash screen by clicking on it with the
            mouse. Since the splash screen is typically displayed before the event loop
            has started running, it is necessary to periodically call
            QApplication::processEvents() to receive the mouse clicks.</para>
            <para>It is sometimes useful to update the splash screen with messages,
            for example, announcing connections established or modules loaded as the
            application starts up:</para>
            <para>QPixmap pixmap(&quot;:/splash.png&quot;);</para>
            <para>QSplashScreen *splash = new QSplashScreen(pixmap);</para>
            <para>splash-&gt;show();</para>
            <para></para>
            <para>... // Loading some items</para>
            <para>splash-&gt;showMessage(&quot;Loaded modules&quot;);</para>
            <para></para>
            <para>qApp-&gt;processEvents();</para>
            <para></para>
            <para>... // Establishing connections</para>
            <para>splash-&gt;showMessage(&quot;Established
            connections&quot;);</para>
            <para></para>
            <para>qApp-&gt;processEvents();</para>
            <para>QSplashScreen supports this with the showMessage() function. If
            you wish to do your own drawing you can get a pointer to the pixmap used in
            the splash screen with pixmap(). Alternatively, you can subclass
            QSplashScreen and reimplement drawContents().</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QSplashScreen.#ctor(QtGui.QPixmap,QtCore.Qt.WindowType)">
            <summary>
            <para>Construct a splash screen that will display the pixmap.</para>
            <para>There should be no need to set the widget flags, f, except
            perhaps Qt::WindowStaysOnTopHint.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplashScreen.#ctor(QtWidgets.QWidget,QtGui.QPixmap,QtCore.Qt.WindowType)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function allows you to specify a parent for your
            splashscreen. The typical use for this constructor is if you have a
            multiple screens and prefer to have the splash screen on a different screen
            than your primary one. In that case pass the proper desktop() as the
            parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplashScreen.#ctor">
            <summary>
            <para>Construct a splash screen that will display the pixmap.</para>
            <para>There should be no need to set the widget flags, f, except
            perhaps Qt::WindowStaysOnTopHint.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplashScreen.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function allows you to specify a parent for your
            splashscreen. The typical use for this constructor is if you have a
            multiple screens and prefer to have the splash screen on a different screen
            than your primary one. In that case pass the proper desktop() as the
            parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplashScreen.Finish(QtWidgets.QWidget)">
            <summary>
            <para>Makes the splash screen wait until the widget mainWin is
            displayed before calling close() on itself.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplashScreen.Repaint">
            <summary>
            <para>This overrides QWidget::repaint(). It differs from the standard
            repaint function in that it also calls QApplication::flush() to ensure the
            updates are displayed, even when there is no event loop present.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplashScreen.ShowMessage(System.String,System.Int32,QtGui.QColor)">
            <summary>
            <para>Draws the message text onto the splash screen with color color
            and aligns the text according to the flags in alignment.</para>
            <para>To make sure the splash screen is repainted immediately, you can
            call QCoreApplication's processEvents() after the call to showMessage().
            You usually want this to make sure that the message is kept up to date with
            what your application is doing (e.g., loading files).</para>
            <para>See also Qt::Alignment, clearMessage(), and message().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplashScreen.ClearMessage">
            <summary>
            <para>Removes the message being displayed on the splash screen</para>
            <para>See also showMessage().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplashScreen.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplashScreen.DrawContents(QtGui.QPainter)">
            <summary>
            <para>Draw the contents of the splash screen using painter painter. The
            default implementation draws the message passed by showMessage().
            Reimplement this function if you want to do your own drawing on the splash
            screen.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplashScreen.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplashScreen.ShowMessage(System.String,System.Int32)">
            <summary>
            <para>Draws the message text onto the splash screen with color color
            and aligns the text according to the flags in alignment.</para>
            <para>To make sure the splash screen is repainted immediately, you can
            call QCoreApplication's processEvents() after the call to showMessage().
            You usually want this to make sure that the message is kept up to date with
            what your application is doing (e.g., loading files).</para>
            <para>See also Qt::Alignment, clearMessage(), and message().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QSplashScreen.MessageChanged">
            <summary>
            <para>This signal is emitted when the message on the splash screen changes. message is the new message and is a null-string when the message has been removed.</para>
            <para>See also showMessage() and clearMessage().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSplashScreen.Pixmap">
            <summary>
            <para>Returns the pixmap that is used in the splash screen. The image
            does not have any of the text drawn by showMessage() calls.</para>
            <para>See also setPixmap().</para>
            <para></para>
            <para>Sets the pixmap that will be used as the splash screen's image to
            pixmap.</para>
            <para>See also pixmap().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSplashScreen.Message">
            <summary>
            <para>Returns the message that is currently displayed on the splash
            screen.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also showMessage() and clearMessage().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QSplitter">
            <summary>
            <para>The QSplitter class implements a splitter widget.</para>
            </summary>
            <remarks>
            <para>A splitter lets the user control the size of child widgets by
            dragging the boundary between them. Any number of widgets may be controlled
            by a single splitter. The typical use of a QSplitter is to create several
            widgets and add them using insertWidget() or addWidget().</para>
            <para>The following example will show a QListView, QTreeView, and
            QTextEdit side by side, with two splitter handles:</para>
            <para>    QSplitter *splitter = new QSplitter(parent);</para>
            <para>    QListView *listview = new QListView;</para>
            <para>    QTreeView *treeview = new QTreeView;</para>
            <para>    QTextEdit *textedit = new QTextEdit;</para>
            <para>    splitter-&gt;addWidget(listview);</para>
            <para>    splitter-&gt;addWidget(treeview);</para>
            <para>    splitter-&gt;addWidget(textedit);</para>
            <para>If a widget is already inside a QSplitter when insertWidget() or
            addWidget() is called, it will move to the new position. This can be used
            to reorder widgets in the splitter later. You can use indexOf(), widget(),
            and count() to get access to the widgets inside the splitter.</para>
            <para>A default QSplitter lays out its children horizontally (side by
            side); you can use setOrientation(Qt::Vertical) to lay its children out
            vertically.</para>
            <para>By default, all widgets can be as large or as small as the user
            wishes, between the minimumSizeHint() (or minimumSize()) and maximumSize()
            of the widgets.</para>
            <para>QSplitter resizes its children dynamically by default. If you
            would rather have QSplitter resize the children only at the end of a resize
            operation, call setOpaqueResize(false).</para>
            <para>The initial distribution of size between the widgets is
            determined by multiplying the initial size with the stretch factor. You can
            also use setSizes() to set the sizes of all the widgets. The function
            sizes() returns the sizes set by the user. Alternatively, you can save and
            restore the sizes of the widgets from a QByteArray using saveState() and
            restoreState() respectively.</para>
            <para>When you hide() a child, its space will be distributed among the
            other children. It will be reinstated when you show() it again.</para>
            <para>Note: Adding a QLayout to a QSplitter is not supported (either
            through setLayout() or making the QSplitter a parent of the QLayout); use
            addWidget() instead (see example above).</para>
            <para></para>
            <para>See also QSplitterHandle, QHBoxLayout, QVBoxLayout, and
            QTabWidget.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QSplitter.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a horizontal splitter with the parent argument passed
            on to the QFrame constructor.</para>
            <para>See also setOrientation().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.#ctor(QtCore.Qt.Orientation,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a splitter with the given orientation and
            parent.</para>
            <para>See also setOrientation().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.AddWidget(QtWidgets.QWidget)">
            <summary>
            <para>Adds the given widget to the splitter's layout after all the
            other items.</para>
            <para>If widget is already in the splitter, it will be moved to the new
            position.</para>
            <para>See also insertWidget(), widget(), and indexOf().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.InsertWidget(System.Int32,QtWidgets.QWidget)">
            <summary>
            <para>Inserts the widget specified into the splitter's layout at the
            given index.</para>
            <para>If widget is already in the splitter, it will be moved to the new
            position.</para>
            <para>if index is an invalid index, then the widget will be inserted at
            the end.</para>
            <para>See also addWidget(), indexOf(), and widget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.SetCollapsible(System.Int32,System.Boolean)">
            <summary>
            <para>Sets whether the child widget at index is collapsible to
            collapse.</para>
            <para>By default, children are collapsible, meaning that the user can
            resize them down to size 0, even if they have a non-zero minimumSize() or
            minimumSizeHint(). This behavior can be changed on a per-widget basis by
            calling this function, or globally for all the widgets in the splitter by
            setting the childrenCollapsible property.</para>
            <para>See also isCollapsible() and childrenCollapsible.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.IsCollapsible(System.Int32)">
            <summary>
            <para>Returns true if the widget at index is collapsible, otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.Refresh">
            <summary>
            <para>Updates the splitter's state. You should not need to call this
            function.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.SaveState">
            <summary>
            <para>Saves the state of the splitter's layout.</para>
            <para>Typically this is used in conjunction with QSettings to remember
            the size for a future session. A version number is stored as part of the
            data. Here is an example:</para>
            <para>    QSettings settings;</para>
            <para>    settings.setValue(&quot;splitterSizes&quot;,
            splitter-&gt;saveState());</para>
            <para>See also restoreState().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.RestoreState(QtCore.QByteArray)">
            <summary>
            <para>Restores the splitter's layout to the state specified. Returns
            true if the state is restored; otherwise returns false.</para>
            <para>Typically this is used in conjunction with QSettings to restore
            the size from a past session. Here is an example:</para>
            <para>Restore the splitter's state:</para>
            <para>    QSettings settings;</para>
            <para>
            splitter-&gt;restoreState(settings.value(&quot;splitterSizes&quot;).toByteA
            rray());</para>
            <para>A failure to restore the splitter's layout may result from either
            invalid or out-of-date data in the supplied byte array.</para>
            <para>See also saveState().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.IndexOf(QtWidgets.QWidget)">
            <summary>
            <para>Returns the index in the splitter's layout of the specified
            widget. This also works for handles.</para>
            <para>Handles are numbered from 0. There are as many handles as there
            are child widgets, but the handle at position 0 is always hidden.</para>
            <para>See also count() and widget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.Widget(System.Int32)">
            <summary>
            <para>Returns the widget at the given index in the splitter's
            layout.</para>
            <para>See also count(), handle(), indexOf(), and insertWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.GetRange(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            <para>Returns the valid range of the splitter at index in *min and *max
            if min and max are not 0.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.Handle(System.Int32)">
            <summary>
            <para>Returns the handle to the left (or above) for the item in the
            splitter's layout at the given index. The handle at index 0 is always
            hidden.</para>
            <para>For right-to-left languages such as Arabic and Hebrew, the layout
            of horizontal splitters is reversed. The handle will be to the right of the
            widget at index.</para>
            <para>See also count(), widget(), indexOf(), createHandle(), and
            setHandleWidth().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.SetStretchFactor(System.Int32,System.Int32)">
            <summary>
            <para>Updates the size policy of the widget at position index to have a
            stretch factor of stretch.</para>
            <para>stretch is not the effective stretch factor; the effective
            stretch factor is calculated by taking the initial size of the widget and
            multiplying it with stretch.</para>
            <para>This function is provided for convenience. It is equivalent
            to</para>
            <para>QWidget *widget = splitter-&gt;widget(index);</para>
            <para>QSizePolicy policy = widget-&gt;sizePolicy();</para>
            <para>policy.setHorizontalStretch(stretch);</para>
            <para>policy.setVerticalStretch(stretch);</para>
            <para>widget-&gt;setSizePolicy(policy);</para>
            <para>See also setSizes() and widget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.CreateHandle">
            <summary>
            <para>Returns a new splitter handle as a child widget of this splitter.
            This function can be reimplemented in subclasses to provide support for
            custom handles.</para>
            <para>See also handle() and indexOf().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.OnChildEvent(QtCore.QChildEvent)">
            <summary>
            <para>Reimplemented from QObject::childEvent().</para>
            <para>Tells the splitter that the child widget described by c has been
            inserted or removed.</para>
            <para>This method is also used to handle the situation where a widget
            is created with the splitter as a parent but not explicitly added with
            insertWidget() or addWidget(). This is for compatibility and not the
            recommended way of putting widgets into a splitter in new code. Please use
            insertWidget() or addWidget() in new code.</para>
            <para>See also addWidget() and insertWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.MoveSplitter(System.Int32,System.Int32)">
            <summary>
            <para>Moves the left or top edge of the splitter handle at index as
            close as possible to position pos, which is the distance from the left or
            top edge of the widget.</para>
            <para>For right-to-left languages such as Arabic and Hebrew, the layout
            of horizontal splitters is reversed. pos is then the distance from the
            right edge of the widget.</para>
            <para>See also splitterMoved(), closestLegalPosition(), and
            getRange().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.SetRubberBand(System.Int32)">
            <summary>
            <para>Displays a rubber band at position pos. If pos is negative, the
            rubber band is removed.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitter.ClosestLegalPosition(System.Int32,System.Int32)">
            <summary>
            <para>Returns the closest legal position to pos of the widget at
            index.</para>
            <para>For right-to-left languages such as Arabic and Hebrew, the layout
            of horizontal splitters is reversed. Positions are then measured from the
            right edge of the widget.</para>
            <para>See also getRange().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QSplitter.SplitterMoved">
            <summary>
            <para>This signal is emitted when the splitter handle at a particular index has been moved to position pos.</para>
            <para>For right-to-left languages such as Arabic and Hebrew, the layout of horizontal splitters is reversed. pos is then the distance from the right edge of the widget.</para>
            <para>See also moveSplitter().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSplitter.Orientation">
            <summary>
            <para>This property holds the orientation of the splitter.</para>
            <para>By default, the orientation is horizontal (i.e., the widgets are
            laid out side by side). The possible orientations are Qt::Horizontal and
            Qt::Vertical.</para>
            <para>See also QSplitterHandle::orientation().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSplitter.ChildrenCollapsible">
            <summary>
            <para>This property holds whether child widgets can be resized down to
            size 0 by the user.</para>
            <para>By default, children are collapsible. It is possible to enable
            and disable the collapsing of individual children using
            setCollapsible().</para>
            <para>See also setCollapsible().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSplitter.OpaqueResize">
            <summary>
            <para>This property holds whether resizing is opaque.</para>
            <para>The default resize behavior is style dependent (determined by the
            SH_Splitter_OpaqueResize style hint). However, you can override it by
            calling setOpaqueResize()</para>
            <para>See also QStyle::StyleHint.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSplitter.HandleWidth">
            <summary>
            <para>This property holds the width of the splitter handles.</para>
            <para>By default, this property contains a value that depends on the
            user's platform and style preferences.</para>
            <para>If you set handleWidth to 1 or 0, the actual grab area will grow
            to overlap a few pixels of its respective widgets.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSplitter.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSplitter.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSplitter.Count">
            <summary>
            <para>Returns the number of widgets contained in the splitter's
            layout.</para>
            <para>See also widget() and handle().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QSplitterHandle">
            <summary>
            <para>The QSplitterHandle class provides handle functionality for the
            splitter.</para>
            </summary>
            <remarks>
            <para>QSplitterHandle is typically what people think about when they
            think about a splitter. It is the handle that is used to resize the
            widgets.</para>
            <para>A typical developer using QSplitter will never have to worry
            about QSplitterHandle. It is provided for developers who want splitter
            handles that provide extra features, such as popup menus.</para>
            <para>The typical way one would create splitter handles is to subclass
            QSplitter and then reimplement QSplitter::createHandle() to instantiate the
            custom splitter handle. For example, a minimum QSplitter subclass might
            look like this:</para>
            <para>class Splitter : public QSplitter</para>
            <para>{</para>
            <para>public:</para>
            <para>    Splitter(Qt::Orientation orientation, QWidget *parent =
            0);</para>
            <para></para>
            <para>protected:</para>
            <para>    QSplitterHandle *createHandle();</para>
            <para>};</para>
            <para>The createHandle() implementation simply constructs a custom
            splitter handle, called Splitter in this example:</para>
            <para>QSplitterHandle *Splitter::createHandle()</para>
            <para>{</para>
            <para>    return new SplitterHandle(orientation(), this);</para>
            <para>}</para>
            <para>Information about a given handle can be obtained using functions
            like orientation() and opaqueResize(), and is retrieved from its parent
            splitter. Details like these can be used to give custom handles different
            appearances depending on the splitter's orientation.</para>
            <para>The complexity of a custom handle subclass depends on the tasks
            that it needs to perform. A simple subclass might only provide a
            paintEvent() implementation:</para>
            <para>void SplitterHandle::paintEvent(QPaintEvent *event)</para>
            <para>{</para>
            <para>    QPainter painter(this);</para>
            <para>    if (orientation() == Qt::Horizontal) {</para>
            <para>        gradient.setStart(rect().left(),
            rect().height()/2);</para>
            <para>        gradient.setFinalStop(rect().right(),
            rect().height()/2);</para>
            <para>    } else {</para>
            <para>        gradient.setStart(rect().width()/2, rect().top());</para>
            <para>        gradient.setFinalStop(rect().width()/2,
            rect().bottom());</para>
            <para>    }</para>
            <para>    painter.fillRect(event-&gt;rect(), QBrush(gradient));</para>
            <para>}</para>
            <para>In this example, a predefined gradient is set up differently
            depending on the orientation of the handle. QSplitterHandle provides a
            reasonable size hint for the handle, so the subclass does not need to
            provide a reimplementation of sizeHint() unless the handle has special size
            requirements.</para>
            <para></para>
            <para>See also QSplitter.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QSplitterHandle.#ctor(QtCore.Qt.Orientation,QtWidgets.QSplitter)">
            <summary>
            <para>Creates a QSplitter handle with the given orientation and
            parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitterHandle.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitterHandle.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitterHandle.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitterHandle.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitterHandle.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitterHandle.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitterHandle.MoveSplitter(System.Int32)">
            <summary>
            <para>Tells the splitter to move this handle to position pos, which is
            the distance from the left or top edge of the widget.</para>
            <para>Note that pos is also measured from the left (or top) for
            right-to-left languages. This function will map pos to the appropriate
            position before calling QSplitter::moveSplitter().</para>
            <para>See also QSplitter::moveSplitter() and
            closestLegalPosition().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QSplitterHandle.ClosestLegalPosition(System.Int32)">
            <summary>
            <para>Returns the closest legal position to pos of the splitter handle.
            The positions are measured from the left or top edge of the splitter, even
            for right-to-left languages.</para>
            <para>See also QSplitter::closestLegalPosition() and
            moveSplitter().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSplitterHandle.Orientation">
            <summary>
            <para>Returns the handle's orientation. This is usually propagated from
            the QSplitter.</para>
            <para>See also setOrientation() and QSplitter::orientation().</para>
            <para></para>
            <para>Sets the orientation of the splitter handle to orientation. This
            is usually propagated from the QSplitter.</para>
            <para>See also orientation() and QSplitter::setOrientation().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSplitterHandle.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSplitterHandle.OpaqueResize">
            <summary>
            <para>Returns true if widgets are resized dynamically (opaquely),
            otherwise returns false. This value is controlled by the QSplitter.</para>
            <para>See also QSplitter::opaqueResize().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QSplitterHandle.Splitter">
            <summary>
            <para>Returns the splitter associated with this splitter handle.</para>
            <para>See also QSplitter::handle().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStackedWidget">
            <summary>
            <para>The QStackedWidget class provides a stack of widgets where only
            one widget is visible at a time.</para>
            </summary>
            <remarks>
            <para>QStackedWidget can be used to create a user interface similar to
            the one provided by QTabWidget. It is a convenience layout widget built on
            top of the QStackedLayout class.</para>
            <para>Like QStackedLayout, QStackedWidget can be constructed and
            populated with a number of child widgets (&quot;pages&quot;):</para>
            <para>    QWidget *firstPageWidget = new QWidget;</para>
            <para>    QWidget *secondPageWidget = new QWidget;</para>
            <para>    QWidget *thirdPageWidget = new QWidget;</para>
            <para></para>
            <para>    QStackedWidget *stackedWidget = new QStackedWidget;</para>
            <para>    stackedWidget-&gt;addWidget(firstPageWidget);</para>
            <para>    stackedWidget-&gt;addWidget(secondPageWidget);</para>
            <para>    stackedWidget-&gt;addWidget(thirdPageWidget);</para>
            <para></para>
            <para>    QVBoxLayout *layout = new QVBoxLayout;</para>
            <para>    layout-&gt;addWidget(stackedWidget);</para>
            <para>    setLayout(layout);</para>
            <para>QStackedWidget provides no intrinsic means for the user to switch
            page. This is typically done through a QComboBox or a QListWidget that
            stores the titles of the QStackedWidget's pages. For example:</para>
            <para>    QComboBox *pageComboBox = new QComboBox;</para>
            <para>    pageComboBox-&gt;addItem(tr(&quot;Page 1&quot;));</para>
            <para>    pageComboBox-&gt;addItem(tr(&quot;Page 2&quot;));</para>
            <para>    pageComboBox-&gt;addItem(tr(&quot;Page 3&quot;));</para>
            <para>    connect(pageComboBox, SIGNAL(activated(int)),</para>
            <para>            stackedWidget, SLOT(setCurrentIndex(int)));</para>
            <para>When populating a stacked widget, the widgets are added to an
            internal list. The indexOf() function returns the index of a widget in that
            list. The widgets can either be added to the end of the list using the
            addWidget() function, or inserted at a given index using the insertWidget()
            function. The removeWidget() function removes a widget from the stacked
            widget. The number of widgets contained in the stacked widget can be
            obtained using the count() function.</para>
            <para>The widget() function returns the widget at a given index
            position. The index of the widget that is shown on screen is given by
            currentIndex() and can be changed using setCurrentIndex(). In a similar
            manner, the currently shown widget can be retrieved using the
            currentWidget() function, and altered using the setCurrentWidget()
            function.</para>
            <para>Whenever the current widget in the stacked widget changes or a
            widget is removed from the stacked widget, the currentChanged() and
            widgetRemoved() signals are emitted respectively.</para>
            <para></para>
            <para>See also QStackedLayout, QTabWidget, and Config Dialog
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStackedWidget.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a QStackedWidget with the given parent.</para>
            <para>See also addWidget() and insertWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStackedWidget.AddWidget(QtWidgets.QWidget)">
            <summary>
            <para>Appends the given widget to the QStackedWidget and returns the
            index position. Ownership of widget is passed on to the
            QStackedWidget.</para>
            <para>If the QStackedWidget is empty before this function is called,
            widget becomes the current widget.</para>
            <para>See also insertWidget(), removeWidget(), and
            setCurrentWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStackedWidget.InsertWidget(System.Int32,QtWidgets.QWidget)">
            <summary>
            <para>Inserts the given widget at the given index in the
            QStackedWidget. Ownership of widget is passed on to the QStackedWidget. If
            index is out of range, the widget is appended (in which case it is the
            actual index of the widget that is returned).</para>
            <para>If the QStackedWidget was empty before this function is called,
            the given widget becomes the current widget.</para>
            <para>Inserting a new widget at an index less than or equal to the
            current index will increment the current index, but keep the current
            widget.</para>
            <para>See also addWidget(), removeWidget(), and
            setCurrentWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStackedWidget.RemoveWidget(QtWidgets.QWidget)">
            <summary>
            <para>Removes widget from the QStackedWidget. i.e., widget is not
            deleted but simply removed from the stacked layout, causing it to be
            hidden.</para>
            <para>Note: Parent object and parent widget of widget will remain the
            QStackedWidget. If the application wants to reuse the removed widget, then
            it is recommended to re-parent it.</para>
            <para>See also addWidget(), insertWidget(), and currentWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStackedWidget.IndexOf(QtWidgets.QWidget)">
            <summary>
            <para>Returns the index of the given widget, or -1 if the given widget
            is not a child of the QStackedWidget.</para>
            <para>See also currentIndex() and widget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStackedWidget.Widget(System.Int32)">
            <summary>
            <para>Returns the widget at the given index, or 0 if there is no such
            widget.</para>
            <para>See also currentWidget() and indexOf().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStackedWidget.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QStackedWidget.CurrentChanged">
            <summary>
            <para>This property holds the index position of the widget that is visible.</para>
            <para>The current index is -1 if there is no current widget.</para>
            <para>By default, this property contains a value of -1 because the stack is initially empty.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	currentIndex() const</para>
            <para> void 	setCurrentIndex(int index)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	currentChanged(int index)</para>
            <para></para>
            <para>See also currentWidget() and indexOf().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QStackedWidget.WidgetRemoved">
            <summary>
            <para>This signal is emitted whenever a widget is removed. The widget's index is passed as parameter.</para>
            <para>See also removeWidget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStackedWidget.CurrentIndex">
            <summary>
            <para>This property holds the index position of the widget that is
            visible.</para>
            <para>The current index is -1 if there is no current widget.</para>
            <para>By default, this property contains a value of -1 because the
            stack is initially empty.</para>
            <para>See also currentWidget() and indexOf().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStackedWidget.CurrentWidget">
            <summary>
            <para>Returns the current widget, or 0 if there are no child
            widgets.</para>
            <para>See also currentIndex() and setCurrentWidget().</para>
            <para></para>
            <para>Sets the current widget to be the specified widget. The new
            current widget must already be contained in this stacked widget.</para>
            <para>See also currentWidget() and setCurrentIndex().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStackedWidget.Count">
            <summary>
            <para>This property holds the number of widgets contained by this
            stacked widget.</para>
            <para>By default, this property contains a value of 0.</para>
            <para>See also currentIndex() and widget().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QStatusBar">
            <summary>
            <para>The QStatusBar class provides a horizontal bar suitable for
            presenting status information.</para>
            </summary>
            <remarks>
            <para>Each status indicator falls into one of three categories:</para>
            <para></para>
            <para>Temporary - briefly occupies most of the status bar. Used to
            explain tool tip texts or menu entries, for example.</para>
            <para>Normal - occupies part of the status bar and may be hidden by
            temporary messages. Used to display the page and line number in a word
            processor, for example.</para>
            <para>Permanent - is never hidden. Used for important mode indications,
            for example, some applications put a Caps Lock indicator in the status
            bar.</para>
            <para></para>
            <para>QStatusBar lets you display all three types of indicators.</para>
            <para>Typically, a request for the status bar functionality occurs in
            relation to a QMainWindow object. QMainWindow provides a main application
            window, with a menu bar, tool bars, dock widgets and a status bar around a
            large central widget. The status bar can be retrieved using the
            QMainWindow::statusBar() function, and replaced using the
            QMainWindow::setStatusBar() function.</para>
            <para>Use the showMessage() slot to display a temporary message:</para>
            <para>void MainWindow::createStatusBar()</para>
            <para>{</para>
            <para>    statusBar()-&gt;showMessage(tr(&quot;Ready&quot;));</para>
            <para>}</para>
            <para>To remove a temporary message, use the clearMessage() slot, or
            set a time limit when calling showMessage(). For example:</para>
            <para>void MainWindow::print()</para>
            <para>{</para>
            <para>#ifndef QT_NO_PRINTDIALOG</para>
            <para>    QTextDocument *document = textEdit-&gt;document();</para>
            <para>    QPrinter printer;</para>
            <para></para>
            <para>    QPrintDialog dlg(&amp;printer, this);</para>
            <para>    if (dlg.exec() != QDialog::Accepted) {</para>
            <para>        return;</para>
            <para>    }</para>
            <para></para>
            <para>    document-&gt;print(&amp;printer);</para>
            <para>    statusBar()-&gt;showMessage(tr(&quot;Ready&quot;),
            2000);</para>
            <para>#endif</para>
            <para>}</para>
            <para>Use the currentMessage() function to retrieve the temporary
            message currently shown. The QStatusBar class also provide the
            messageChanged() signal which is emitted whenever the temporary status
            message changes.</para>
            <para></para>
            <para>Normal and Permanent messages are displayed by creating a small
            widget (QLabel, QProgressBar or even QToolButton) and then adding it to the
            status bar using the addWidget() or the addPermanentWidget() function. Use
            the removeWidget() function to remove such messages from the status
            bar.</para>
            <para>statusBar()-&gt;addWidget(new MyReadWriteIndication);</para>
            <para>By default QStatusBar provides a QSizeGrip in the lower-right
            corner. You can disable it using the setSizeGripEnabled() function. Use the
            isSizeGripEnabled() function to determine the current status of the size
            grip.</para>
            <para></para>
            <para></para>
            <para>See also QMainWindow, QStatusTipEvent, GUI Design Handbook:
            Status Bar, and Application Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QStatusBar.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a status bar with a size grip and the given
            parent.</para>
            <para>See also setSizeGripEnabled().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStatusBar.AddWidget(QtWidgets.QWidget,System.Int32)">
            <summary>
            <para>Adds the given widget to this status bar, reparenting the widget
            if it isn't already a child of this QStatusBar object. The stretch
            parameter is used to compute a suitable size for the given widget as the
            status bar grows and shrinks. The default stretch factor is 0, i.e giving
            the widget a minimum of space.</para>
            <para>The widget is located to the far left of the first permanent
            widget (see addPermanentWidget()) and may be obscured by temporary
            messages.</para>
            <para>See also insertWidget(), removeWidget(), and
            addPermanentWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStatusBar.InsertWidget(System.Int32,QtWidgets.QWidget,System.Int32)">
            <summary>
            <para>Inserts the given widget at the given index to this status bar,
            reparenting the widget if it isn't already a child of this QStatusBar
            object. If index is out of range, the widget is appended (in which case it
            is the actual index of the widget that is returned).</para>
            <para>The stretch parameter is used to compute a suitable size for the
            given widget as the status bar grows and shrinks. The default stretch
            factor is 0, i.e giving the widget a minimum of space.</para>
            <para>The widget is located to the far left of the first permanent
            widget (see addPermanentWidget()) and may be obscured by temporary
            messages.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also addWidget(), removeWidget(), and
            addPermanentWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStatusBar.AddPermanentWidget(QtWidgets.QWidget,System.Int32)">
            <summary>
            <para>Adds the given widget permanently to this status bar, reparenting
            the widget if it isn't already a child of this QStatusBar object. The
            stretch parameter is used to compute a suitable size for the given widget
            as the status bar grows and shrinks. The default stretch factor is 0, i.e
            giving the widget a minimum of space.</para>
            <para>Permanently means that the widget may not be obscured by
            temporary messages. It is is located at the far right of the status
            bar.</para>
            <para>See also insertPermanentWidget(), removeWidget(), and
            addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStatusBar.InsertPermanentWidget(System.Int32,QtWidgets.QWidget,System.Int32)">
            <summary>
            <para>Inserts the given widget at the given index permanently to this
            status bar, reparenting the widget if it isn't already a child of this
            QStatusBar object. If index is out of range, the widget is appended (in
            which case it is the actual index of the widget that is returned).</para>
            <para>The stretch parameter is used to compute a suitable size for the
            given widget as the status bar grows and shrinks. The default stretch
            factor is 0, i.e giving the widget a minimum of space.</para>
            <para>Permanently means that the widget may not be obscured by
            temporary messages. It is is located at the far right of the status
            bar.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also addPermanentWidget(), removeWidget(), and
            addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStatusBar.RemoveWidget(QtWidgets.QWidget)">
            <summary>
            <para>Removes the specified widget from the status bar.</para>
            <para>Note: This function does not delete the widget but hides it. To
            add the widget again, you must call both the addWidget() and show()
            functions.</para>
            <para>See also addWidget(), addPermanentWidget(), and
            clearMessage().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStatusBar.ShowMessage(System.String,System.Int32)">
            <summary>
            <para>Hides the normal status indications and displays the given
            message for the specified number of milli-seconds (timeout). If timeout is
            0 (default), the message remains displayed until the clearMessage() slot is
            called or until the showMessage() slot is called again to change the
            message.</para>
            <para>Note that showMessage() is called to show temporary explanations
            of tool tip texts, so passing a timeout of 0 is not sufficient to display a
            permanent message.</para>
            <para>See also messageChanged(), currentMessage(), and
            clearMessage().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStatusBar.ClearMessage">
            <summary>
            <para>Removes any temporary message being shown.</para>
            <para>See also currentMessage(), showMessage(), and
            removeWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStatusBar.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStatusBar.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            <para>Shows the temporary message, if appropriate, in response to the
            paint event.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStatusBar.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWidget::resizeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStatusBar.Reformat">
            <summary>
            <para>Changes the status bar's appearance to account for item
            changes.</para>
            <para>Special subclasses may need this function, but geometry
            management will usually take care of any necessary rearrangements.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStatusBar.HideOrShow">
            <summary>
            <para>Ensures that the right widgets are visible.</para>
            <para>Used by the showMessage() and clearMessage() functions.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QStatusBar.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QStatusBar.MessageChanged">
            <summary>
            <para>This signal is emitted whenever the temporary status message changes. The new temporary message is passed in the message parameter which is a null-string when the message has been removed.</para>
            <para>See also showMessage() and clearMessage().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStatusBar.SizeGripEnabled">
            <summary>
            <para>This property holds whether the QSizeGrip in the bottom-right
            corner of the status bar is enabled.</para>
            <para>The size grip is enabled by default.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QStatusBar.CurrentMessage">
            <summary>
            <para>Returns the temporary message currently shown, or an empty string
            if there is no such message.</para>
            <para>See also showMessage().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QTextBrowser">
            <summary>
            <para>The QTextBrowser class provides a rich text browser with
            hypertext navigation.</para>
            </summary>
            <remarks>
            <para>This class extends QTextEdit (in read-only mode), adding some
            navigation functionality so that users can follow links in hypertext
            documents.</para>
            <para>If you want to provide your users with an editable rich text
            editor, use QTextEdit. If you want a text browser without hypertext
            navigation use QTextEdit, and use QTextEdit::setReadOnly() to disable
            editing. If you just need to display a small piece of rich text use
            QLabel.</para>
            <para></para>
            <para>Document Source and Contents</para>
            <para>The contents of QTextEdit are set with setHtml() or
            setPlainText(), but QTextBrowser also implements the setSource() function,
            making it possible to use a named document as the source text. The name is
            looked up in a list of search paths and in the directory of the current
            document factory.</para>
            <para>If a document name ends with an anchor (for example,
            &quot;#anchor&quot;), the text browser automatically scrolls to that
            position (using scrollToAnchor()). When the user clicks on a hyperlink, the
            browser will call setSource() itself with the link's href value as
            argument. You can track the current source by connecting to the
            sourceChanged() signal.</para>
            <para></para>
            <para>Navigation</para>
            <para>QTextBrowser provides backward() and forward() slots which you
            can use to implement Back and Forward buttons. The home() slot sets the
            text to the very first document displayed. The anchorClicked() signal is
            emitted when the user clicks an anchor. To override the default navigation
            behavior of the browser, call the setSource() function to supply new
            document text in a slot connected to this signal.</para>
            <para>If you want to load documents stored in the Qt resource system
            use qrc as the scheme in the URL to load. For example, for the document
            resource path :/docs/index.html use qrc:/docs/index.html as the URL with
            setSource().</para>
            <para></para>
            <para>See also QTextEdit and QTextDocument.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QTextBrowser.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty QTextBrowser with parent parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextBrowser.LoadResource(System.Int32,QtCore.QUrl)">
            <summary>
            <para>Reimplemented from QTextEdit::loadResource().</para>
            <para>This function is called when the document is loaded and for each
            image in the document. The type indicates the type of resource to be
            loaded. An invalid QVariant is returned if the resource cannot be
            loaded.</para>
            <para>The default implementation ignores type and tries to locate the
            resources by interpreting name as a file name. If it is not an absolute
            path it tries to find the file in the paths of the searchPaths property and
            in the same directory as the current source. On success, the result is a
            QVariant that stores a QByteArray with the contents of the file.</para>
            <para>If you reimplement this function, you can return other QVariant
            types. The table below shows which variant types are supported depending on
            the resource type:</para>
            <para></para>
            <para> ResourceTypeQVariant::Type</para>
            <para>QTextDocument::HtmlResource	QString or QByteArray</para>
            <para>QTextDocument::ImageResource	QImage, QPixmap or QByteArray</para>
            <para>QTextDocument::StyleSheetResource	QString or QByteArray</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextBrowser.ClearHistory">
            <summary>
            <para>Clears the history of visited documents and disables the forward
            and backward navigation.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also backward() and forward().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextBrowser.HistoryTitle(System.Int32)">
            <summary>
            <para>Returns the documentTitle() of the HistoryItem.</para>
            <para></para>
            <para> InputReturn</para>
            <para>i &lt; 0	backward() history</para>
            <para>i == 0	current, see QTextBrowser::source()</para>
            <para>i &gt; 0	forward() history</para>
            <para></para>
            <para>backaction.setToolTip(browser.historyTitle(-1));</para>
            <para>forwardaction.setToolTip(browser.historyTitle(+1));</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextBrowser.HistoryUrl(System.Int32)">
            <summary>
            <para>Returns the url of the HistoryItem.</para>
            <para></para>
            <para> InputReturn</para>
            <para>i &lt; 0	backward() history</para>
            <para>i == 0	current, see QTextBrowser::source()</para>
            <para>i &gt; 0	forward() history</para>
            <para></para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextBrowser.Backward">
            <summary>
            <para>Changes the document displayed to the previous document in the
            list of documents built by navigating links. Does nothing if there is no
            previous document.</para>
            <para>See also forward() and backwardAvailable().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextBrowser.Forward">
            <summary>
            <para>Changes the document displayed to the next document in the list
            of documents built by navigating links. Does nothing if there is no next
            document.</para>
            <para>See also backward() and forwardAvailable().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextBrowser.Home">
            <summary>
            <para>Changes the document displayed to be the first document from the
            history.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextBrowser.Reload">
            <summary>
            <para>Reloads the current set source.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextBrowser.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextBrowser.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            <para>The event ev is used to provide the following keyboard
            shortcuts:</para>
            <para></para>
            <para> KeypressAction</para>
            <para>Alt+Left Arrow	backward()</para>
            <para>Alt+Right Arrow	forward()</para>
            <para>Alt+Up Arrow	home()</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextBrowser.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextBrowser.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextBrowser.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextBrowser.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextBrowser.FocusNextPrevChild(System.Boolean)">
            <summary>
            <para>Reimplemented from QWidget::focusNextPrevChild().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QTextBrowser.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTextBrowser.BackwardAvailable">
            <summary>
            <para>This signal is emitted when the availability of backward() changes. available is false when the user is at home(); otherwise it is true.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTextBrowser.ForwardAvailable">
            <summary>
            <para>This signal is emitted when the availability of forward() changes. available is true after the user navigates backward() and false when the user navigates or goes forward().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTextBrowser.HistoryChanged">
            <summary>
            <para>This signal is emitted when the history changes.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also historyTitle() and historyUrl().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTextBrowser.SourceChanged">
            <summary>
            <para>This signal is emitted when the source has changed, src being the new source.</para>
            <para>Source changes happen both programmatically when calling setSource(), forward(), backword() or home() or when the user clicks on links or presses the equivalent key sequences.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTextBrowser.Highlighted">
            <summary>
            <para>This signal is emitted when the user has selected but not activated an anchor in the document. The URL referred to by the anchor is passed in link.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTextBrowser.HighlightedLink">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Convenience signal that allows connecting to a slot that takes just a QString, like for example QStatusBar's message().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QTextBrowser.AnchorClicked">
            <summary>
            <para>This signal is emitted when the user clicks an anchor. The URL referred to by the anchor is passed in link.</para>
            <para>Note that the browser will automatically handle navigation to the location specified by link unless the openLinks property is set to false or you call setSource() in a slot connected. This mechanism is used to override the default navigation features of the browser.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextBrowser.SearchPaths">
            <summary>
            <para>This property holds the search paths used by the text browser to
            find supporting content.</para>
            <para>QTextBrowser uses this list to locate images and
            documents.</para>
            <para>By default, this property contains an empty string list.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextBrowser.OpenExternalLinks">
            <summary>
            <para>Specifies whether QTextBrowser should automatically open links to
            external sources using QDesktopServices::openUrl() instead of emitting the
            anchorClicked signal. Links are considered external if their scheme is
            neither file or qrc.</para>
            <para>The default value is false.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextBrowser.OpenLinks">
            <summary>
            <para>This property specifies whether QTextBrowser should automatically
            open links the user tries to activate by mouse or keyboard.</para>
            <para>Regardless of the value of this property the anchorClicked signal
            is always emitted.</para>
            <para>The default value is true.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextBrowser.Source">
            <summary>
            <para>This property holds the name of the displayed document.</para>
            <para>This is a an invalid url if no document is displayed or if the
            source is unknown.</para>
            <para>When setting this property QTextBrowser tries to find a document
            with the specified name in the paths of the searchPaths property and
            directory of the current source, unless the value is an absolute file path.
            It also checks for optional anchors and scrolls the document
            accordingly</para>
            <para>If the first tag in the document is &lt;qt type=detail&gt;, the
            document is displayed as a popup rather than as new document in the browser
            window itself. Otherwise, the document is displayed normally in the text
            browser with the text set to the contents of the named document with
            setHtml().</para>
            <para>By default, this property contains an empty URL.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextBrowser.IsBackwardAvailable">
            <summary>
            <para>Returns true if the text browser can go backward in the document
            history using backward().</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also backwardAvailable() and backward().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextBrowser.IsForwardAvailable">
            <summary>
            <para>Returns true if the text browser can go forward in the document
            history using forward().</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also forwardAvailable() and forward().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextBrowser.BackwardHistoryCount">
            <summary>
            <para>Returns the number of locations backward in the history.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QTextBrowser.ForwardHistoryCount">
            <summary>
            <para>Returns the number of locations forward in the history.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QToolBar">
            <summary>
            <para>The QToolBar class provides a movable panel that contains a set
            of controls.</para>
            </summary>
            <remarks>
            <para>Toolbar buttons are added by adding actions, using addAction() or
            insertAction(). Groups of buttons can be separated using addSeparator() or
            insertSeparator(). If a toolbar button is not appropriate, a widget can be
            inserted instead using addWidget() or insertWidget(). Examples of suitable
            widgets are QSpinBox, QDoubleSpinBox, and QComboBox. When a toolbar button
            is pressed, it emits the actionTriggered() signal.</para>
            <para>A toolbar can be fixed in place in a particular area (e.g., at
            the top of the window), or it can be movable between toolbar areas; see
            setMovable(), isMovable(), allowedAreas() and isAreaAllowed().</para>
            <para>When a toolbar is resized in such a way that it is too small to
            show all the items it contains, an extension button will appear as the last
            item in the toolbar. Pressing the extension button will pop up a menu
            containing the items that does not currently fit in the toolbar.</para>
            <para>When a QToolBar is not a child of a QMainWindow, it loses the
            ability to populate the extension pop up with widgets added to the toolbar
            using addWidget(). Please use widget actions created by inheriting
            QWidgetAction and implementing QWidgetAction::createWidget()
            instead.</para>
            <para></para>
            <para>See also QToolButton, QMenu, QAction, and Application
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QToolBar.#ctor(System.String,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a QToolBar with the given parent.</para>
            <para>The given window title identifies the toolbar and is shown in the
            context menu provided by QMainWindow.</para>
            <para>See also setWindowTitle().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a QToolBar with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.IsAreaAllowed(QtCore.Qt.ToolBarArea)">
            <summary>
            <para>Returns true if this toolbar is dockable in the given area;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.Clear">
            <summary>
            <para>Removes all actions from the toolbar.</para>
            <para>See also removeAction().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.AddAction(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates a new action with the given text. This action is added to
            the end of the toolbar.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.AddAction(QtGui.QIcon,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates a new action with the given icon and text. This action is
            added to the end of the toolbar.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.AddAction(System.String,QtCore.QObject,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates a new action with the given text. This action is added to
            the end of the toolbar. The action's triggered() signal is connected to
            member in receiver.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.AddAction(QtGui.QIcon,System.String,QtCore.QObject,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates a new action with the given icon and text. This action is
            added to the end of the toolbar. The action's triggered() signal is
            connected to member in receiver.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.AddSeparator">
            <summary>
            <para>Adds a separator to the end of the toolbar.</para>
            <para>See also insertSeparator().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.InsertSeparator(QtWidgets.QAction)">
            <summary>
            <para>Inserts a separator into the toolbar in front of the toolbar item
            associated with the before action.</para>
            <para>See also addSeparator().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.AddWidget(QtWidgets.QWidget)">
            <summary>
            <para>Adds the given widget to the toolbar as the toolbar's last
            item.</para>
            <para>The toolbar takes ownership of widget.</para>
            <para>If you add a QToolButton with this method, the toolbar's
            Qt::ToolButtonStyle will not be respected.</para>
            <para>Note: You should use QAction::setVisible() to change the
            visibility of the widget. Using QWidget::setVisible(), QWidget::show() and
            QWidget::hide() does not work.</para>
            <para>See also insertWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.InsertWidget(QtWidgets.QAction,QtWidgets.QWidget)">
            <summary>
            <para>Inserts the given widget in front of the toolbar item associated
            with the before action.</para>
            <para>Note: You should use QAction::setVisible() to change the
            visibility of the widget. Using QWidget::setVisible(), QWidget::show() and
            QWidget::hide() does not work.</para>
            <para>See also addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.ActionAt(QtCore.QPoint)">
            <summary>
            <para>Returns the action at point p. This function returns zero if no
            action was found.</para>
            <para>See also QWidget::childAt().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.ActionAt(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the action at the point x, y. This function returns zero
            if no action was found.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.WidgetForAction(QtWidgets.QAction)">
            <summary>
            <para>Returns the widget associated with the specified action.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also addWidget().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.OnActionEvent(QtGui.QActionEvent)">
            <summary>
            <para>Reimplemented from QWidget::actionEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBar.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QToolBar.ActionTriggered">
            <summary>
            <para>This signal is emitted when an action in this toolbar is triggered. This happens when the action's tool button is pressed, or when the action is triggered in some other way outside the toolbar. The parameter holds the triggered action.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QToolBar.MovableChanged">
            <summary>
            <para>This property holds whether the user can move the toolbar within the toolbar area, or between toolbar areas.</para>
            <para>By default, this property is true.</para>
            <para>This property only makes sense if the toolbar is in a QMainWindow.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isMovable() const</para>
            <para> void 	setMovable(bool movable)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	movableChanged(bool movable)</para>
            <para></para>
            <para>See also allowedAreas.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QToolBar.AllowedAreasChanged">
            <summary>
            <para>This property holds areas where the toolbar may be placed.</para>
            <para>The default is Qt::AllToolBarAreas.</para>
            <para>This property only makes sense if the toolbar is in a QMainWindow.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Qt::ToolBarAreas 	allowedAreas() const</para>
            <para> void 	setAllowedAreas(Qt::ToolBarAreas areas)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	allowedAreasChanged(Qt::ToolBarAreas allowedAreas)</para>
            <para></para>
            <para>See also movable.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QToolBar.OrientationChanged">
            <summary>
            <para>This property holds orientation of the toolbar.</para>
            <para>The default is Qt::Horizontal.</para>
            <para>This function should not be used when the toolbar is managed by QMainWindow. You can use QMainWindow::addToolBar() or QMainWindow::insertToolBar() if you wish to move a toolbar that is already added to a main window to another Qt::ToolBarArea.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Qt::Orientation 	orientation() const</para>
            <para> void 	setOrientation(Qt::Orientation orientation)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	orientationChanged(Qt::Orientation orientation)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QToolBar.IconSizeChanged">
            <summary>
            <para>This property holds size of icons in the toolbar.</para>
            <para>The default size is determined by the application's style and is derived from the QStyle::PM_ToolBarIconSize pixel metric. It is the maximum size an icon can have. Icons of smaller size will not be scaled up.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QSize 	iconSize() const</para>
            <para> void 	setIconSize(const QSize &amp; iconSize)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	iconSizeChanged(const QSize &amp; iconSize)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QToolBar.ToolButtonStyleChanged">
            <summary>
            <para>This property holds the style of toolbar buttons.</para>
            <para>This property defines the style of all tool buttons that are added as QActions. Note that if you add a QToolButton with the addWidget() method, it will not get this button style.</para>
            <para>To have the style of toolbuttons follow the system settings, set this property to Qt::ToolButtonFollowStyle. On Unix, the user settings from the desktop environment will be used. On other platforms, Qt::ToolButtonFollowStyle means icon only.</para>
            <para>The default is Qt::ToolButtonIconOnly.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Qt::ToolButtonStyle 	toolButtonStyle() const</para>
            <para> void 	setToolButtonStyle(Qt::ToolButtonStyle toolButtonStyle)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	toolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWidgets.QToolBar.TopLevelChanged">
            <summary>
            <para>This signal is emitted when the floating property changes. The topLevel parameter is true if the toolbar is now floating; otherwise it is false.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also isWindow().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QToolBar.VisibilityChanged">
            <summary>
            <para>This signal is emitted when the toolbar becomes visible (or invisible). This happens when the widget is hidden or shown.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolBar.Movable">
            <summary>
            <para>This property holds whether the user can move the toolbar within
            the toolbar area, or between toolbar areas.</para>
            <para>By default, this property is true.</para>
            <para>This property only makes sense if the toolbar is in a
            QMainWindow.</para>
            <para>See also allowedAreas.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolBar.AllowedAreas">
            <summary>
            <para>This property holds areas where the toolbar may be placed.</para>
            <para>The default is Qt::AllToolBarAreas.</para>
            <para>This property only makes sense if the toolbar is in a
            QMainWindow.</para>
            <para>See also movable.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolBar.Orientation">
            <summary>
            <para>This property holds orientation of the toolbar.</para>
            <para>The default is Qt::Horizontal.</para>
            <para>This function should not be used when the toolbar is managed by
            QMainWindow. You can use QMainWindow::addToolBar() or
            QMainWindow::insertToolBar() if you wish to move a toolbar that is already
            added to a main window to another Qt::ToolBarArea.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolBar.Floatable">
            <summary>
            <para>This property holds whether the toolbar can be dragged and
            dropped as an independent window.</para>
            <para>The default is true.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolBar.IconSize">
            <summary>
            <para>This property holds size of icons in the toolbar.</para>
            <para>The default size is determined by the application's style and is
            derived from the QStyle::PM_ToolBarIconSize pixel metric. It is the maximum
            size an icon can have. Icons of smaller size will not be scaled up.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolBar.ToolButtonStyle">
            <summary>
            <para>This property holds the style of toolbar buttons.</para>
            <para>This property defines the style of all tool buttons that are
            added as QActions. Note that if you add a QToolButton with the addWidget()
            method, it will not get this button style.</para>
            <para>To have the style of toolbuttons follow the system settings, set
            this property to Qt::ToolButtonFollowStyle. On Unix, the user settings from
            the desktop environment will be used. On other platforms,
            Qt::ToolButtonFollowStyle means icon only.</para>
            <para>The default is Qt::ToolButtonIconOnly.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolBar.ToggleViewAction">
            <summary>
            <para>Returns a checkable action that can be used to show or hide this
            toolbar.</para>
            <para>The action's text is set to the toolbar's window title.</para>
            <para>See also QAction::text and QWidget::windowTitle.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolBar.IsFloating">
            <summary>
            <para>This property holds whether the toolbar is an independent
            window.</para>
            <para>By default, this property is true.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isFloating() const</para>
            <para></para>
            <para>See also QWidget::isWindow().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QToolBox">
            <summary>
            <para>The QToolBox class provides a column of tabbed widget
            items.</para>
            </summary>
            <remarks>
            <para>A toolbox is a widget that displays a column of tabs one above
            the other, with the current item displayed below the current tab. Every tab
            has an index position within the column of tabs. A tab's item is a
            QWidget.</para>
            <para>Each item has an itemText(), an optional itemIcon(), an optional
            itemToolTip(), and a widget(). The item's attributes can be changed with
            setItemText(), setItemIcon(), and setItemToolTip(). Each item can be
            enabled or disabled individually with setItemEnabled().</para>
            <para>Items are added using addItem(), or inserted at particular
            positions using insertItem(). The total number of items is given by
            count(). Items can be deleted with delete, or removed from the toolbox with
            removeItem(). Combining removeItem() and insertItem() allows you to move
            items to different positions.</para>
            <para>The index of the current item widget is returned by
            currentIndex(), and set with setCurrentIndex(). The index of a particular
            item can be found using indexOf(), and the item at a given index is
            returned by item().</para>
            <para>The currentChanged() signal is emitted when the current item is
            changed.</para>
            <para></para>
            <para>See also QTabWidget.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QToolBox.#ctor(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a new toolbox with the given parent and the flags,
            f.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.AddItem(QtWidgets.QWidget,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Adds the widget w in a new tab at bottom of the toolbox. The new
            tab's text is set to text. Returns the new tab's index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.AddItem(QtWidgets.QWidget,QtGui.QIcon,System.String)">
            <summary>
            <para>Adds the widget in a new tab at bottom of the toolbox. The new
            tab's text is set to text, and the iconSet is displayed to the left of the
            text. Returns the new tab's index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.InsertItem(System.Int32,QtWidgets.QWidget,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts the widget at position index, or at the bottom of the
            toolbox if index is out of range. The new item's text is set to text.
            Returns the new item's index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.InsertItem(System.Int32,QtWidgets.QWidget,QtGui.QIcon,System.String)">
            <summary>
            <para>Inserts the widget at position index, or at the bottom of the
            toolbox if index is out of range. The new item's text is set to text, and
            the icon is displayed to the left of the text. Returns the new item's
            index.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.RemoveItem(System.Int32)">
            <summary>
            <para>Removes the item at position index from the toolbox. Note that
            the widget is not deleted.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.SetItemEnabled(System.Int32,System.Boolean)">
            <summary>
            <para>If enabled is true then the item at position index is enabled;
            otherwise the item at position index is disabled.</para>
            <para>See also isItemEnabled().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.IsItemEnabled(System.Int32)">
            <summary>
            <para>Returns true if the item at position index is enabled; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.SetItemText(System.Int32,System.String)">
            <summary>
            <para>Sets the text of the item at position index to text.</para>
            <para>If the provided text contains an ampersand character ('&amp;'), a
            mnemonic is automatically created for it. The character that follows the
            '&amp;' will be used as the shortcut key. Any previous mnemonic will be
            overwritten, or cleared if no mnemonic is defined by the text. See the
            QShortcut documentation for details (to display an actual ampersand, use
            '&amp;&amp;').</para>
            <para>See also itemText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.ItemText(System.Int32)">
            <summary>
            <para>Returns the text of the item at position index, or an empty
            string if index is out of range.</para>
            <para>See also setItemText().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.SetItemIcon(System.Int32,QtGui.QIcon)">
            <summary>
            <para>Sets the icon of the item at position index to icon.</para>
            <para>See also itemIcon().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.ItemIcon(System.Int32)">
            <summary>
            <para>Returns the icon of the item at position index, or a null icon if
            index is out of range.</para>
            <para>See also setItemIcon().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.SetItemToolTip(System.Int32,System.String)">
            <summary>
            <para>Sets the tooltip of the item at position index to toolTip.</para>
            <para>See also itemToolTip().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.ItemToolTip(System.Int32)">
            <summary>
            <para>Returns the tooltip of the item at position index, or an empty
            string if index is out of range.</para>
            <para>See also setItemToolTip().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.Widget(System.Int32)">
            <summary>
            <para>Returns the widget at position index, or 0 if there is no such
            item.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.IndexOf(QtWidgets.QWidget)">
            <summary>
            <para>Returns the index of widget, or -1 if the item does not
            exist.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.ItemInserted(System.Int32)">
            <summary>
            <para>This virtual handler is called after a new item was added or
            inserted at position index.</para>
            <para>See also itemRemoved().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.ItemRemoved(System.Int32)">
            <summary>
            <para>This virtual handler is called after an item was removed from
            position index.</para>
            <para>See also itemInserted().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolBox.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QToolBox.CurrentChanged">
            <summary>
            <para>This property holds the index of the current item.</para>
            <para>By default, for an empty toolbox, this property has a value of -1.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	currentIndex() const</para>
            <para> void 	setCurrentIndex(int index)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	currentChanged(int index)</para>
            <para></para>
            <para>See also indexOf() and widget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolBox.CurrentIndex">
            <summary>
            <para>This property holds the index of the current item.</para>
            <para>By default, for an empty toolbox, this property has a value of
            -1.</para>
            <para>See also indexOf() and widget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolBox.CurrentWidget">
            <summary>
            <para>Returns a pointer to the current widget, or 0 if there is no such
            item.</para>
            <para>See also currentIndex() and setCurrentWidget().</para>
            <para></para>
            <para>Makeswidget the current widget. The widget must be an item in
            this tool box.</para>
            <para>See also addItem(), setCurrentIndex(), and
            currentWidget().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolBox.Count">
            <summary>
            <para>This property holds the number of items contained in the
            toolbox.</para>
            <para>By default, this property has a value of 0.</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QToolButton">
            <summary>
            <para>The QToolButton class provides a quick-access button to commands
            or options, usually used inside a QToolBar.</para>
            </summary>
            <remarks>
            <para>A tool button is a special button that provides quick-access to
            specific commands or options. As opposed to a normal command button, a tool
            button usually doesn't show a text label, but shows an icon instead.</para>
            <para>Tool buttons are normally created when new QAction instances are
            created with QToolBar::addAction() or existing actions are added to a
            toolbar with QToolBar::addAction(). It is also possible to construct tool
            buttons in the same way as any other widget, and arrange them alongside
            other widgets in layouts.</para>
            <para>One classic use of a tool button is to select tools; for example,
            the &quot;pen&quot; tool in a drawing program. This would be implemented by
            using a QToolButton as a toggle button (see setToggleButton()).</para>
            <para>QToolButton supports auto-raising. In auto-raise mode, the button
            draws a 3D frame only when the mouse points at it. The feature is
            automatically turned on when a button is used inside a QToolBar. Change it
            with setAutoRaise().</para>
            <para>A tool button's icon is set as QIcon. This makes it possible to
            specify different pixmaps for the disabled and active state. The disabled
            pixmap is used when the button's functionality is not available. The active
            pixmap is displayed when the button is auto-raised because the mouse
            pointer is hovering over it.</para>
            <para>The button's look and dimension is adjustable with
            setToolButtonStyle() and setIconSize(). When used inside a QToolBar in a
            QMainWindow, the button automatically adjusts to QMainWindow's settings
            (see QMainWindow::setToolButtonStyle() and QMainWindow::setIconSize()).
            Instead of an icon, a tool button can also display an arrow symbol,
            specified with arrowType.</para>
            <para>A tool button can offer additional choices in a popup menu. The
            popup menu can be set using setMenu(). Use setPopupMode() to configure the
            different modes available for tool buttons with a menu set. The default
            mode is DelayedPopupMode which is sometimes used with the &quot;Back&quot;
            button in a web browser. After pressing and holding the button down for a
            while, a menu pops up showing a list of possible pages to jump to. The
            default delay is 600 ms; you can adjust it with setPopupDelay().</para>
            <para></para>
            <para> </para>
            <para>Qt Assistant's toolbar contains tool buttons that are associated
            with actions used in other parts of the main window.</para>
            <para></para>
            <para></para>
            <para>See also QPushButton, QToolBar, QMainWindow, QAction, and GUI
            Design Handbook: Push Button.</para>
            </remarks>
        </member>
        <member name="M:QtWidgets.QToolButton.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs an empty tool button with parent parent.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolButton.ShowMenu">
            <summary>
            <para>Shows (pops up) the associated popup menu. If there is no such
            menu, this function does nothing. This function does not return until the
            popup menu has been closed by the user.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolButton.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolButton.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolButton.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolButton.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            <para>Paints the button in response to the paint event.</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolButton.OnActionEvent(QtGui.QActionEvent)">
            <summary>
            <para>Reimplemented from QWidget::actionEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolButton.OnEnterEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::enterEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolButton.OnLeaveEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::leaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolButton.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolButton.OnChangeEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QWidget::changeEvent().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolButton.HitButton(QtCore.QPoint)">
            <summary>
            <para>Reimplemented from QAbstractButton::hitButton().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolButton.NextCheckState">
            <summary>
            <para>Reimplemented from QAbstractButton::nextCheckState().</para>
            </summary>
        </member>
        <member name="M:QtWidgets.QToolButton.InitStyleOption(QtWidgets.QStyleOptionToolButton)">
            <summary>
            <para>Initialize option with the values from this QToolButton. This
            method is useful for subclasses when they need a QStyleOptionToolButton,
            but don't want to fill in all the information themselves.</para>
            <para>See also QStyleOption::initFrom().</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QToolButton.Triggered">
            <summary>
            <para>This signal is emitted when the given action is triggered.</para>
            <para>The action may also be associated with other parts of the user interface, such as menu items and keyboard shortcuts. Sharing actions in this way helps make the user interface more consistent and is often less work to implement.</para>
            </summary>
        </member>
        <member name="E:QtWidgets.QToolButton.PaintEvent">
            <summary>
            <para>Reimplemented from QWidget::paintEvent().</para>
            <para>Paints the button in response to the paint event.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolButton.ArrowType">
            <summary>
            <para>This property holds whether the button displays an arrow instead
            of a normal icon.</para>
            <para>This displays an arrow as the icon for the QToolButton.</para>
            <para>By default, this property is set to Qt::NoArrow.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolButton.Menu">
            <summary>
            <para>Returns the associated menu, or 0 if no menu has been
            defined.</para>
            <para>See also setMenu().</para>
            <para></para>
            <para>Associates the given menu with this tool button.</para>
            <para>The menu will be shown according to the button's
            popupMode.</para>
            <para>Ownership of the menu is not transferred to the tool
            button.</para>
            <para>See also menu().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolButton.PopupMode">
            <summary>
            <para>This property describes the way that popup menus are used with
            tool buttons.</para>
            <para>By default, this property is set to DelayedPopup.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolButton.AutoRaise">
            <summary>
            <para>This property holds whether auto-raising is enabled or
            not.</para>
            <para>The default is disabled (i.e. false).</para>
            <para>This property is currently ignored on Mac OS X when using
            QMacStyle.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolButton.ToolButtonStyle">
            <summary>
            <para>This property holds whether the tool button displays an icon
            only, text only, or text beside/below the icon.</para>
            <para>The default is Qt::ToolButtonIconOnly.</para>
            <para>To have the style of toolbuttons follow the system settings, set
            this property to Qt::ToolButtonFollowStyle. On Unix, the user settings from
            the desktop environment will be used. On other platforms,
            Qt::ToolButtonFollowStyle means icon only.</para>
            <para>QToolButton automatically connects this slot to the relevant
            signal in the QMainWindow in which is resides.</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolButton.DefaultAction">
            <summary>
            <para>Returns the default action.</para>
            <para>See also setDefaultAction().</para>
            <para></para>
            <para>Sets the default action to action.</para>
            <para>If a tool button has a default action, the action defines the
            button's properties like text, icon, tool tip, etc.</para>
            <para>See also defaultAction().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolButton.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtWidgets.QToolButton.MinimumSizeHint">
            <summary>
            <para>Reimplemented from QWidget::minimumSizeHint().</para>
            </summary>
        </member>
        <member name="T:QtWidgets.QToolButton.ToolButtonPopupMode">
            <summary>
            <para>Describes how a menu should be popped up for tool buttons that
            has a menu set or contains a list of actions.</para>
            </summary>
        </member>
        <member name="F:QtWidgets.QToolButton.ToolButtonPopupMode.DelayedPopup">
            <summary>After pressing and holding the tool button down for a certain amount of time (the timeout is style dependant, see QStyle::SH_ToolButton_PopupDelay), the menu is displayed. A typical application example is the "back" button in some web browsers's tool bars. If the user clicks it, the browser simply browses back to the previous page. If the user presses and holds the button down for a while, the tool button shows a menu containing the current history list</summary>
        </member>
        <member name="F:QtWidgets.QToolButton.ToolButtonPopupMode.MenuButtonPopup">
            <summary>In this mode the tool button displays a special arrow to indicate that a menu is present. The menu is displayed when the arrow part of the button is pressed.</summary>
        </member>
        <member name="F:QtWidgets.QToolButton.ToolButtonPopupMode.InstantPopup">
            <summary>The menu is displayed, without delay, when the tool button is pressed. In this mode, the button's own action is not triggered.</summary>
        </member>
    </members>
</doc>
