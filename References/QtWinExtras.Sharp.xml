<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QtWinExtras.Sharp</name>
    </assembly>
    <members>
        <member name="T:QtWinExtras.QtWin.HBitmapFormat">
            <summary>
            <para>This enum defines how the conversion between HBITMAP and QPixmap is performed.</para>
            <para>This enum was introduced or modified in  Qt 5.2.</para>
            <para>See also fromHBITMAP() and toHBITMAP().</para>
            </summary>
        </member>
        <member name="F:QtWinExtras.QtWin.HBitmapFormat.HBitmapNoAlpha">
            <summary>The alpha channel is ignored and always treated as being set to fully opaque. This is preferred if the HBITMAP is used with standard GDI calls, such as BitBlt().</summary>
        </member>
        <member name="F:QtWinExtras.QtWin.HBitmapFormat.HBitmapPremultipliedAlpha">
            <summary>The HBITMAP is treated as having an alpha channel and premultiplied colors. This is preferred if the HBITMAP is accessed through the AlphaBlend() GDI function.</summary>
        </member>
        <member name="F:QtWinExtras.QtWin.HBitmapFormat.HBitmapAlpha">
            <summary>The HBITMAP is treated as having a plain alpha channel. This is the preferred format if the HBITMAP is going to be used as an application icon or a systray icon.</summary>
        </member>
        <member name="T:QtWinExtras.QtWin.WindowFlip3DPolicy">
            <summary>
            <para>This enum type specifies the Flip3D window policy.</para>
            <para>This enum was introduced or modified in  Qt 5.2.</para>
            <para>See also setWindowFlip3DPolicy().</para>
            </summary>
        </member>
        <member name="F:QtWinExtras.QtWin.WindowFlip3DPolicy.FlipDefault">
            <summary>Let the OS decide whether to include the window in the Flip3D rendering.</summary>
        </member>
        <member name="F:QtWinExtras.QtWin.WindowFlip3DPolicy.FlipExcludeBelow">
            <summary>Exclude the window from Flip3D and display it below the Flip3D rendering.</summary>
        </member>
        <member name="F:QtWinExtras.QtWin.WindowFlip3DPolicy.FlipExcludeAbove">
            <summary>Exclude the window from Flip3D and display it above the Flip3D rendering.</summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.StringFromHresult(System.Int32)">
            <summary>
            <para>Returns a message string that explains the hresult error id specified or an empty string if the explanation cannot be found.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.ErrorStringFromHresult(System.Int32)">
            <summary>
            <para>Returns the code name of the hresult error id specified (usually the name of the WinAPI macro) or an empty string if the message is unknown.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.ColorizationColor(System.Boolean@)">
            <summary>
            <para>Returns the DWM colorization color. After the function returns, the optional opaqueBlend will contain true if the color is an opaque blend and false otherwise.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.RealColorizationColor">
            <summary>
            <para>Returns the real colorization color, set by the user, using an undocumented registry key. The API-based function getColorizationColor() returns an alpha-blended color which often turns out a semitransparent gray rather than something similar to what is chosen by the user.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also colorizationColor().</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.SetWindowExcludedFromPeek(QtGui.QWindow,System.Boolean)">
            <summary>
            <para>Excludes the specified window from Aero Peek if exclude is true.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also isWindowExcludedFromPeek().</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.IsWindowExcludedFromPeek(QtGui.QWindow)">
            <summary>
            <para>Returns true if the specified window is excluded from Aero Peek.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.SetWindowDisallowPeek(QtGui.QWindow,System.Boolean)">
            <summary>
            <para>Disables Aero Peek for the specified window when hovering over the taskbar thumbnail of the window with the mouse pointer if disallow is true; otherwise allows it.</para>
            <para>The default is false.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.IsWindowPeekDisallowed(QtGui.QWindow)">
            <summary>
            <para>Returns true if Aero Peek is disallowed on the thumbnail of the specified window.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.SetWindowFlip3DPolicy(QtGui.QWindow,QtWinExtras.QtWin.WindowFlip3DPolicy)">
            <summary>
            <para>Sets the Flip3D policy policy for the specified window.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also windowFlip3DPolicy().</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.windowFlip3DPolicy(QtGui.QWindow)">
            <summary>
            <para>Returns the current Flip3D policy for the specified window.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also setWindowFlip3DPolicy().</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.ExtendFrameIntoClientArea(QtGui.QWindow,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Extends the glass frame into the client area of the specified window using the left, top, right, and bottom margin values.</para>
            <para>Pass -1 as values for any of the four margins to fully extend the frame, creating a sheet of glass effect.</para>
            <para>If you want the extended frame to act like a standard window border, you should handle that yourself.</para>
            <para>Note: If window is a QWidget handle, set the Qt::WA_NoSystemBackground attribute for your widget.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also resetExtendedFrame().</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.ExtendFrameIntoClientArea(QtGui.QWindow,QtCore.QMargins)">
            <summary>
            <para>This function overloads QtWin::extendFrameIntoClientArea().</para>
            <para>Extends the glass frame into the client area of the specified window using the specified margins.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.ResetExtendedFrame(QtGui.QWindow)">
            <summary>
            <para>Resets the glass frame and restores the window attributes.</para>
            <para>This convenience function calls extendFrameIntoClientArea() with margins set to 0.</para>
            <para>Note: You must unset the Qt::WA_NoSystemBackground attribute for extendFrameIntoClientArea() to work.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also extendFrameIntoClientArea().</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.EnableBlurBehindWindow(QtGui.QWindow,QtGui.QRegion)">
            <summary>
            <para>Enables the blur effect for the specified region of the specified window.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also disableBlurBehindWindow().</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.EnableBlurBehindWindow(QtGui.QWindow)">
            <summary>
            <para>Enables the blur effect for the specified window.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also disableBlurBehindWindow().</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.DisableBlurBehindWindow(QtGui.QWindow)">
            <summary>
            <para>Disables the previously enabled blur effect for the specified window.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also enableBlurBehindWindow().</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.IsCompositionEnabled">
            <summary>
            <para>Returns the DWM composition state.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.SetCompositionEnabled(System.Boolean)">
            <summary>
            <para>Sets whether the Windows Desktop composition is enabled.</para>
            <para>Note: The underlying function was declared deprecated as of Windows 8 and takes no effect.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also isCompositionEnabled().</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.IsCompositionOpaque">
            <summary>
            <para>Returns whether the colorization color is an opaque blend.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.SetCurrentProcessExplicitAppUserModelID(System.String)">
            <summary>
            <para>Sets the Application User Model ID id.</para>
            <para>For more information, see Application User Model IDs.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.MarkFullscreenWindow(QtGui.QWindow,System.Boolean)">
            <summary>
            <para>Marks the specified window as running in the full-screen mode if fullscreen is true, so that the shell handles it correctly. Otherwise, removes the mark.</para>
            <para>Note: You do not usually need to call this function, because the Windows taskbar always tries to determine whether a window is running in the full-screen mode.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.TaskbarActivateTab(QtGui.QWindow)">
            <summary>
            <para>Activates an item on the taskbar without activating the window itself.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.TaskbarActivateTabAlt(QtGui.QWindow)">
            <summary>
            <para>Marks the item that represents the specified window on the taskbar as active, but does not activate it visually.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.TaskbarAddTab(QtGui.QWindow)">
            <summary>
            <para>Adds an item for the specified window to the taskbar.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.TaskbarDeleteTab(QtGui.QWindow)">
            <summary>
            <para>Removes the specified window from the taskbar.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QtWin.qwinfunctions.ColorizationColor">
            <summary>
            <para>Returns the DWM colorization color. After the function returns, the optional opaqueBlend will contain true if the color is an opaque blend and false otherwise.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="T:QtWinExtras.QWinJumpList">
            <summary>
            <para>The QWinJumpList class represents a transparent wrapper around Windows Jump Lists.</para>
            </summary>
            <remarks>
            <para>An application can use Jump Lists to provide users with faster access to files or to display shortcuts to tasks or commands.</para>
            </remarks>
        </member>
        <member name="M:QtWinExtras.QWinJumpList.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QWinJumpList with the parent object parent.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinJumpList.Frequent">
            <summary>
            <para>Returns the frequent items category in the jump list.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinJumpList.AddCategory(QtWinExtras.QWinJumpListCategory)">
            <summary>
            <para>Adds a custom category to the jump list.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinJumpList.Clear">
            <summary>
            <para>Clears the jump list.</para>
            <para>See also QWinJumpListCategory::clear().</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinJumpList.Identifier">
            <summary>
            <para>This property holds the jump list identifier.</para>
            <para>Specifies an optional explicit unique identifier for the application jump list.</para>
            <para>The default value is empty; a system-defined internal identifier is used instead. See Application User Model IDs on MSDN for further details.</para>
            <para>Note: The identifier cannot have more than 128 characters and cannot contain spaces. A too long identifier is automatically truncated to 128 characters, and spaces are replaced by underscores.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinJumpList.Recent">
            <summary>
            <para>Returns the recent items category in the jump list.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinJumpList.Tasks">
            <summary>
            <para>Returns the tasks category in the jump list.</para>
            </summary>
        </member>
        <member name="T:QtWinExtras.QWinJumpListCategory">
            <summary>
            <para>The QWinJumpListCategory class represents a jump list category.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinJumpListCategory.#ctor(System.String)">
            <summary>
            <para>Constructs a custom QWinJumpListCategory with the specified title.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinJumpListCategory.AddItem(QtWinExtras.QWinJumpListItem)">
            <summary>
            <para>Adds an item to the category.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinJumpListCategory.AddDestination(System.String)">
            <summary>
            <para>Adds a destination to the category pointing to filePath.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinJumpListCategory.AddLink(System.String,System.String,QtCore.QStringList)">
            <summary>
            <para>Adds a link to the category using title, executablePath, and optionally arguments.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinJumpListCategory.AddLink(QtGui.QIcon,System.String,System.String,QtCore.QStringList)">
            <summary>
            <para>This function overloads addLink().</para>
            <para>Adds a link to the category using icon, title, executablePath, and optionally arguments.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinJumpListCategory.AddSeparator">
            <summary>
            <para>Adds a separator to the category.</para>
            <para>Note: Only tasks category supports separators.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinJumpListCategory.Clear">
            <summary>
            <para>Clears the category.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinJumpListCategory.AddLink(System.String,System.String)">
            <summary>
            <para>Adds a link to the category using title, executablePath, and optionally arguments.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinJumpListCategory.AddLink(QtGui.QIcon,System.String,System.String)">
            <summary>
            <para>This function overloads addLink().</para>
            <para>Adds a link to the category using icon, title, executablePath, and optionally arguments.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinJumpListCategory.Visible">
            <summary>
            <para>Returns whether the category is visible.</para>
            <para></para>
            <para>Sets the category visible.</para>
            <para>See also isVisible().</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinJumpListCategory.Title">
            <summary>
            <para>Returns the category title.</para>
            <para>See also setTitle().</para>
            <para></para>
            <para>Sets the category title.</para>
            <para>See also title().</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinJumpListCategory.type">
            <summary>
            <para>Returns the category type.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinJumpListCategory.Count">
            <summary>
            <para>Returns the amount of items in the category.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinJumpListCategory.IsEmpty">
            <summary>
            <para>Returns whether the category is empty.</para>
            </summary>
        </member>
        <member name="T:QtWinExtras.QWinJumpListCategory.Type">
            <summary>
            <para>This enum describes the available QWinJumpListCategory types.</para>
            </summary>
        </member>
        <member name="F:QtWinExtras.QWinJumpListCategory.Type.Custom">
            <summary>A custom jump list category.</summary>
        </member>
        <member name="F:QtWinExtras.QWinJumpListCategory.Type.Recent">
            <summary>A jump list category of "recent" items.</summary>
        </member>
        <member name="F:QtWinExtras.QWinJumpListCategory.Type.Frequent">
            <summary>A jump list category of "frequent" items.</summary>
        </member>
        <member name="F:QtWinExtras.QWinJumpListCategory.Type.Tasks">
            <summary>A jump list category of tasks.</summary>
        </member>
        <member name="T:QtWinExtras.QWinJumpListItem">
            <summary>
            <para>The QWinJumpListItem class represents a jump list item.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinJumpListItem.#ctor(QtWinExtras.QWinJumpListItem.Type)">
            <summary>
            <para>Constructs a QWinJumpListItem with the specified type.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinJumpListItem.type">
            <summary>
            <para>Returns the item type.</para>
            <para>See also setType().</para>
            <para></para>
            <para>Sets the item type.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinJumpListItem.FilePath">
            <summary>
            <para>Returns the file path set by setFilePath().</para>
            <para>See also setFilePath().</para>
            <para></para>
            <para>Sets the item filePath, the meaning of which depends on the type of this item:</para>
            <para></para>
            <para>If the item type is QWinJumpListItem::Destination, filePath is the path to a file that can be opened by an application.</para>
            <para>If the item type is QWinJumpListItem::Link, filePath is the path to an executable that is executed when this item is clicked by the user.</para>
            <para></para>
            <para>See also filePath(), setWorkingDirectory(), and setArguments().</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinJumpListItem.WorkingDirectory">
            <summary>
            <para>Returns the working directory path.</para>
            <para>See also setWorkingDirectory().</para>
            <para></para>
            <para>Sets the path to the working directory of this item to workingDirectory.</para>
            <para>This value is used only if the type of this item is QWinJumpListItem::Link.</para>
            <para>See also workingDirectory() and setFilePath().</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinJumpListItem.Icon">
            <summary>
            <para>Returns the icon set for this item.</para>
            <para>See also setIcon().</para>
            <para></para>
            <para>Sets the icon of this item.</para>
            <para>This value is used only if the type of this item is QWinJumpListItem::Link.</para>
            <para>See also icon().</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinJumpListItem.Title">
            <summary>
            <para>Returns the title of this item.</para>
            <para>See also setTitle().</para>
            <para></para>
            <para>Sets the title of this item.</para>
            <para>This value is used only if the type of this item is QWinJumpListItem::Link.</para>
            <para>See also title().</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinJumpListItem.Description">
            <summary>
            <para>Returns the description of this item.</para>
            <para>See also setDescription().</para>
            <para></para>
            <para>Sets a description for this item.</para>
            <para>This value is used only if the type of this item is QWinJumpListItem::Link.</para>
            <para>See also description().</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinJumpListItem.Arguments">
            <summary>
            <para>Returns the command-line arguments of this item.</para>
            <para>See also setArguments().</para>
            <para></para>
            <para>Sets command-line arguments for this item.</para>
            <para>This value is used only if the type of this item is QWinJumpListItem::Link.</para>
            <para>See also arguments() and setFilePath().</para>
            </summary>
        </member>
        <member name="T:QtWinExtras.QWinJumpListItem.Type">
            <summary>
            <para>This enum describes the available QWinJumpListItem types.</para>
            </summary>
        </member>
        <member name="F:QtWinExtras.QWinJumpListItem.Type.Destination">
            <summary>Item acts as a link to a file that the application can open.</summary>
        </member>
        <member name="F:QtWinExtras.QWinJumpListItem.Type.Link">
            <summary>Item represents a link to an application.</summary>
        </member>
        <member name="F:QtWinExtras.QWinJumpListItem.Type.Separator">
            <summary>Item is a separator. Only tasks category supports separators.</summary>
        </member>
        <member name="T:QtWinExtras.QWinMime">
            <summary>
            <para>The QWinMime class maps open-standard MIME to Window Clipboard formats.</para>
            </summary>
            <remarks>
            <para>Qt's drag-and-drop and clipboard facilities use the MIME standard. On X11, this maps trivially to the Xdnd protocol, but on Windows although some applications use MIME types to describe clipboard formats, others use arbitrary non-standardized naming conventions, or unnamed built-in formats of Windows.</para>
            <para>By instantiating subclasses of QWinMime that provide conversions between Windows Clipboard and MIME formats, you can convert proprietary clipboard formats to MIME formats.</para>
            <para>Qt has predefined support for the following Windows Clipboard formats:</para>
            <para></para>
            <para>Windows FormatEquivalent MIME type</para>
            <para>CF_UNICODETEXT	text/plain</para>
            <para>CF_TEXT	text/plain</para>
            <para>CF_DIB	image/xyz, where xyz is a Qt image format</para>
            <para>CF_HDROP	text/uri-list</para>
            <para>CF_INETURL	text/uri-list</para>
            <para>CF_HTML	text/html</para>
            <para></para>
            <para>An example use of this class would be to map the Windows Metafile clipboard format (CF_METAFILEPICT) to and from the MIME type image/x-wmf. This conversion might simply be adding or removing a header, or even just passing on the data. See Drag and Drop for more information on choosing and definition MIME types.</para>
            <para>You can check if a MIME type is convertible using canConvertFromMime() and can perform conversions with convertToMime() and convertFromMime().</para>
            </remarks>
        </member>
        <member name="M:QtWinExtras.QWinMime.#ctor">
            <summary>
            <para>Constructs a new conversion object, adding it to the globally accessed list of available converters.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinMime.RegisterMimeType(System.String)">
            <summary>
            <para>Registers the MIME type mime, and returns an ID number identifying the format on Windows.</para>
            </summary>
        </member>
        <member name="T:QtWinExtras.QWinTaskbarButton">
            <summary>
            <para>The QWinTaskbarButton class represents the Windows taskbar button for a top-level window (Windows 7 and newer).</para>
            </summary>
            <remarks>
            <para>The QWinTaskbarButton class enables you to set overlay icons on a taskbar button, and provides access to its progress indicator.</para>
            <para>An overlay icon indicates change in the state of an application, whereas a progress indicator shows how time-consuming tasks are progressing.</para>
            <para></para>
            <para>The following example code illustrates how to use the QWinTaskbarButton and QWinTaskbarProgress classes to adjust the look of the taskbar button:</para>
            <para></para>
            <para></para>
            <para>      QWinTaskbarButton *button = new QWinTaskbarButton(widget);</para>
            <para>      button-&gt;setWindow(widget-&gt;windowHandle());</para>
            <para>      button-&gt;setOverlayIcon(QIcon(&quot;:/loading.png&quot;));</para>
            <para></para>
            <para>      QWinTaskbarProgress *progress = button-&gt;progress();</para>
            <para>      progress-&gt;setVisible(true);</para>
            <para>      progress-&gt;setValue(50);</para>
            <para></para>
            <para></para>
            <para>Note: QWidget::windowHandle() returns a valid instance of a QWindow only after the widget has been shown. It is therefore recommended to delay the initialization of the QWinTaskbarButton instances until QWidget::showEvent().</para>
            <para>Note: The class wraps API only available since Windows 7. Instantiating it on Windows XP or Windows Vista causes a runtime warning.</para>
            <para></para>
            <para>See also QWinTaskbarProgress.</para>
            </remarks>
        </member>
        <member name="M:QtWinExtras.QWinTaskbarButton.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QWinTaskbarButton with the specified parent.</para>
            <para>If parent is an instance of QWindow, it is automatically assigned as the taskbar button's window.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinTaskbarButton.ClearOverlayIcon">
            <summary>
            <para>This property holds the overlay icon of the taskbar button.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinTaskbarButton.Window">
            <summary>
            <para>This property holds the window whose taskbar button is manipulated.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QWindow *	window() const</para>
            <para> void 	setWindow(QWindow *window)</para>
            <para></para>
            <para></para>
            <para>This property holds the window whose taskbar button is manipulated.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QWindow *	window() const</para>
            <para> void 	setWindow(QWindow *window)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinTaskbarButton.OverlayIcon">
            <summary>
            <para>This property holds the overlay icon of the taskbar button.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinTaskbarButton.OverlayAccessibleDescription">
            <summary>
            <para>This property holds the description of the overlay for accessibility purposes.</para>
            <para>See also overlayIcon.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinTaskbarButton.Progress">
            <summary>
            <para>This property holds the progress indicator of the taskbar button.</para>
            <para>Note: The progress indicator is not visible by default.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QWinTaskbarProgress *	progress() const</para>
            <para></para>
            </summary>
        </member>
        <member name="T:QtWinExtras.QWinTaskbarProgress">
            <summary>
            <para>The QWinTaskbarProgress class represents a progress indicator in the Windows taskbar.</para>
            </summary>
            <remarks>
            <para>A progress indicator is used to give the user an indication of the progress of an operation and to reassure them that the application is still running.</para>
            <para>The progress indicator uses the concept of steps. It is set up by specifying the minimum and maximum possible step values, and it will display the percentage of steps that have been completed when you later give it the current step value. The percentage is calculated by dividing the progress (value() - minimum()) divided by maximum() - minimum().</para>
            <para>The minimum and maximum number of steps can be specified by calling setMinimum() and setMaximum(). The current number of steps is set with setValue(). The progress indicator can be rewound to the beginning with reset().</para>
            <para>If minimum and maximum both are set to 0, the indicator shows up as a busy (indeterminate) indicator instead of a percentage of steps. This is useful when it is not possible to determine the number of steps.</para>
            <para></para>
            <para>	A progress indicator at 50%.</para>
            <para>	A paused progress indicator at 50%.</para>
            <para>	A stopped progress indicator at 50%.</para>
            <para>	An indeterminate progress indicator.</para>
            <para></para>
            <para>Note: The final appearance of the progress indicator varies depending on the active Windows theme.</para>
            <para></para>
            <para>See also QWinTaskbarButton.</para>
            </remarks>
        </member>
        <member name="M:QtWinExtras.QWinTaskbarProgress.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QWinTaskbarProgress with the parent object parent.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinTaskbarProgress.SetRange(System.Int32,System.Int32)">
            <summary>
            <para>Sets both the minimum and maximum values.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinTaskbarProgress.Reset">
            <summary>
            <para>Resets the progress indicator.</para>
            <para>This function rewinds the value to the minimum value.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinTaskbarProgress.Show">
            <summary>
            <para>Shows the progress indicator.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinTaskbarProgress.Hide">
            <summary>
            <para>Hides the progress indicator.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinTaskbarProgress.Pause">
            <summary>
            <para>Pauses the progress indicator.</para>
            <para>See also paused.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinTaskbarProgress.Resume">
            <summary>
            <para>Resumes a paused or stopped progress indicator.</para>
            <para>See also paused and stopped.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinTaskbarProgress.Stop">
            <summary>
            <para>Stops the progress indicator.</para>
            <para>See also stopped.</para>
            </summary>
        </member>
        <member name="E:QtWinExtras.QWinTaskbarProgress.ValueChanged">
            <summary>
            <para>This property holds the current value of the progress indicator.</para>
            <para>The default value is 0.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	value() const</para>
            <para> void 	setValue(int value)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	valueChanged(int value)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWinExtras.QWinTaskbarProgress.MinimumChanged">
            <summary>
            <para>This property holds the minimum value of the progress indicator.</para>
            <para>The default value is 0.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	minimum() const</para>
            <para> void 	setMinimum(int minimum)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	minimumChanged(int minimum)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWinExtras.QWinTaskbarProgress.MaximumChanged">
            <summary>
            <para>This property holds the maximum value of the progress indicator.</para>
            <para>The default value is 100.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	maximum() const</para>
            <para> void 	setMaximum(int maximum)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	maximumChanged(int maximum)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtWinExtras.QWinTaskbarProgress.VisibilityChanged">
            <summary>
            <para>This property holds whether the progress indicator is visible.</para>
            <para>The default value is false.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isVisible() const</para>
            <para> void 	setVisible(bool visible)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	visibilityChanged(bool visible)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinTaskbarProgress.Value">
            <summary>
            <para>This property holds the current value of the progress indicator.</para>
            <para>The default value is 0.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinTaskbarProgress.Minimum">
            <summary>
            <para>This property holds the minimum value of the progress indicator.</para>
            <para>The default value is 0.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinTaskbarProgress.Maximum">
            <summary>
            <para>This property holds the maximum value of the progress indicator.</para>
            <para>The default value is 100.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinTaskbarProgress.Visible">
            <summary>
            <para>This property holds whether the progress indicator is visible.</para>
            <para>The default value is false.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinTaskbarProgress.Paused">
            <summary>
            <para>This property holds whether the progress indicator is paused.</para>
            <para>The default value is false.</para>
            <para>The final appearance of a paused progress indicator depends on the active Windows theme. Typically, a paused progress indicator turns yellow to indicate that the progress is currently paused. Unlike a stopped progress indicator, a paused progress should not be used to indicate an error.</para>
            <para>See also pause() and resume().</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinTaskbarProgress.IsStopped">
            <summary>
            <para>This property holds whether the progress indicator is stopped.</para>
            <para>The default value is false.</para>
            <para>The final appearance of a stopped progress indicator depends on the active Windows theme. Typically, a stopped progress indicator turns red to indicate that the progress is currently stopped. Unlike a paused progress indicator, a stopped progress may be used to indicate an error.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isStopped() const</para>
            <para></para>
            <para>See also stop() and resume().</para>
            </summary>
        </member>
        <member name="T:QtWinExtras.QWinThumbnailToolBar">
            <summary>
            <para>The QWinThumbnailToolBar class allows manipulating the thumbnail toolbar of a window.</para>
            </summary>
            <remarks>
            <para>Applications can embed a toolbar in the thumbnail of a window, which is shown when hovering over its taskbar icon. A thumbnail toolbar may provide quick access to the commands of a window without requiring the user to restore or activate the window.</para>
            <para></para>
            <para>The following example code illustrates how to use the functions in the QWinThumbnailToolBar and QWinThumbnailToolButton class to implement a thumbnail toolbar:</para>
            <para></para>
            <para></para>
            <para>      QWinThumbnailToolBar *thumbbar = new QWinThumbnailToolBar(widget);</para>
            <para>      thumbbar-&gt;setWindow(widget-&gt;windowHandle());</para>
            <para></para>
            <para>      QWinThumbnailToolButton *settings = new QWinThumbnailToolButton(thumbbar);</para>
            <para>      settings-&gt;setToolTip(&quot;Settings&quot;);</para>
            <para>      settings-&gt;setIcon(&quot;:/settings.png&quot;);</para>
            <para>      settings-&gt;setDismissOnClick(true);</para>
            <para>      connect(settings, SIGNAL(clicked()), settingsPage, SLOT(show()));</para>
            <para></para>
            <para>      QWinThumbnailToolButton *playPause = new QWinThumbnailToolButton(thumbbar);</para>
            <para>      playPause-&gt;setToolTip(&quot;Play/Pause&quot;);</para>
            <para>      playPause-&gt;setIcon(&quot;:/play.png&quot;);</para>
            <para>      connect(playPause, SIGNAL(clicked()), mediaPlayer, SLOT(play()));</para>
            <para></para>
            <para>      thumbbar-&gt;addButton(settings);</para>
            <para>      thumbbar-&gt;addButton(playPause);</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QWinThumbnailToolButton.</para>
            </remarks>
        </member>
        <member name="M:QtWinExtras.QWinThumbnailToolBar.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QWinThumbnailToolBar with the specified parent.</para>
            <para>If parent is an instance of QWindow, it is automatically assigned as the thumbnail toolbar's window.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinThumbnailToolBar.AddButton(QtWinExtras.QWinThumbnailToolButton)">
            <summary>
            <para>Adds a button to the thumbnail toolbar.</para>
            <para>Note: The number of buttons is limited to 7.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinThumbnailToolBar.RemoveButton(QtWinExtras.QWinThumbnailToolButton)">
            <summary>
            <para>Removes the button from the thumbnail toolbar.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinThumbnailToolBar.Clear">
            <summary>
            <para>Removes all buttons from the thumbnail toolbar.</para>
            </summary>
        </member>
        <member name="E:QtWinExtras.QWinThumbnailToolBar.IconicThumbnailPixmapRequested">
            <summary>
            <para>This signal is emitted when the operating system requests a new iconic thumbnail pixmap, typically when the thumbnail is shown.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also iconicThumbnailPixmap.</para>
            </summary>
        </member>
        <member name="E:QtWinExtras.QWinThumbnailToolBar.IconicLivePreviewPixmapRequested">
            <summary>
            <para>This signal is emitted when the operating system requests a new iconic live preview pixmap, typically when the user ALT-tabs to the application.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also iconicLivePreviewPixmap.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinThumbnailToolBar.Window">
            <summary>
            <para>This property holds the window whose thumbnail toolbar is manipulated.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QWindow *	window() const</para>
            <para> void 	setWindow(QWindow *window)</para>
            <para></para>
            <para></para>
            <para>This property holds the window whose thumbnail toolbar is manipulated.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QWindow *	window() const</para>
            <para> void 	setWindow(QWindow *window)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinThumbnailToolBar.IconicPixmapNotificationsEnabled">
            <summary>
            <para>This property holds whether signals iconicThumbnailPixmapRequested() and iconicLivePreviewPixmapRequested() will be emitted.</para>
            <para>This property was introduced in  Qt 5.4.</para>
            <para>See also QWinThumbnailToolBar::iconicThumbnailPixmap and QWinThumbnailToolBar::iconicLivePreviewPixmap.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinThumbnailToolBar.IconicThumbnailPixmap">
            <summary>
            <para>This property holds the pixmap for use as a thumbnail representation.</para>
            <para>This property was introduced in  Qt 5.4.</para>
            <para>See also QWinThumbnailToolBar::iconicPixmapNotificationsEnabled.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinThumbnailToolBar.IconicLivePreviewPixmap">
            <summary>
            <para>This property holds the pixmap for use as a live (peek) preview when tabbing into the application.</para>
            <para>This property was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinThumbnailToolBar.Count">
            <summary>
            <para>This property holds the number of buttons in the thumbnail toolbar.</para>
            <para>Note: The number of buttons is limited to 7.</para>
            </summary>
        </member>
        <member name="T:QtWinExtras.QWinThumbnailToolButton">
            <summary>
            <para>The QWinThumbnailToolButton class represents a button in a thumbnail toolbar.</para>
            </summary>
            <remarks>
            <para>Buttons in a QWinThumbnailToolBar are instances of QWinThumbnailToolButton. It provides a set of properties for specifying the attributes of a thumbnail toolbar button. It also provides a signal that is emitted whenever the button is clicked, and a slot to perform clicks programmatically.</para>
            <para></para>
            <para>See also QWinThumbnailToolBar.</para>
            </remarks>
        </member>
        <member name="M:QtWinExtras.QWinThumbnailToolButton.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QWinThumbnailToolButton with the specified parent.</para>
            </summary>
        </member>
        <member name="M:QtWinExtras.QWinThumbnailToolButton.Click">
            <summary>
            <para>Performs a click. The clicked() signal is emitted as appropriate.</para>
            <para>This function does nothing if the button is disabled or non-interactive.</para>
            </summary>
        </member>
        <member name="E:QtWinExtras.QWinThumbnailToolButton.Clicked">
            <summary>
            <para>This signal is emitted when the button is clicked.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinThumbnailToolButton.ToolTip">
            <summary>
            <para>This property holds the tooltip of the button.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinThumbnailToolButton.Icon">
            <summary>
            <para>This property holds the icon of the button.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinThumbnailToolButton.Enabled">
            <summary>
            <para>This property holds whether the button is enabled.</para>
            <para>The default value is true.</para>
            <para>A disabled button does not react to user interaction, and is also visually disabled.</para>
            <para>See also interactive.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinThumbnailToolButton.Interactive">
            <summary>
            <para>This property holds whether the button is interactive.</para>
            <para>The default value is true.</para>
            <para>A non-interactive button does not react to user interaction, but is still visually enabled. A typical use case for non- interactive buttons are notification icons.</para>
            <para>See also enabled.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinThumbnailToolButton.Visible">
            <summary>
            <para>This property holds whether the button is visible.</para>
            <para>The default value is true.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinThumbnailToolButton.DismissOnClick">
            <summary>
            <para>This property holds whether the window thumbnail is dismissed after a button click.</para>
            <para>The default value is false.</para>
            </summary>
        </member>
        <member name="P:QtWinExtras.QWinThumbnailToolButton.Flat">
            <summary>
            <para>This property holds whether the button is flat.</para>
            <para>The default value is false.</para>
            <para>A flat button does not draw a background nor a frame - only an icon.</para>
            </summary>
        </member>
    </members>
</doc>
