<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QtBluetooth.Sharp</name>
    </assembly>
    <members>
        <member name="T:QtBluetooth.QBluetooth.Security">
            <summary>
            <para>This enum describe the security requirements of a Bluetooth service.</para>
            <para>The SecurityFlags type is a typedef for QFlags&lt;Security&gt;. It stores an OR combination of Security values.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetooth.Security.NoSecurity">
            <summary>The service does not require any security.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetooth.Security.Authorization">
            <summary>The service requires authorization by the user, unless the device is Authorized-Paired.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetooth.Security.Authentication">
            <summary>The service requires authentication. Device must be paired, and the user is prompted on connection unless the device is Authorized-Paired.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetooth.Security.Encryption">
            <summary>The service requires the communication link to be encrypted. This requires the device to be paired.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetooth.Security.Secure">
            <summary>The service requires the communication link to be secure. Simple Pairing from Bluetooth 2.1 or greater is required. Legacy pairing is not permitted.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetooth.AttAccessConstraint">
            <summary>
            <para>This enum describes the possible requirements for reading or writing an ATT attribute.</para>
            <para>This enum was introduced or modified in  Qt 5.7.</para>
            <para>The AttAccessConstraints type is a typedef for QFlags&lt;AttAccessConstraint&gt;. It stores an OR combination of AttAccessConstraint values.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetooth.AttAccessConstraint.AttAuthorizationRequired">
            <summary>The client needs authorization from the ATT server to access the attribute.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetooth.AttAccessConstraint.AttAuthenticationRequired">
            <summary>The client needs to be authenticated to access the attribute.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetooth.AttAccessConstraint.AttEncryptionRequired">
            <summary>The attribute can only be accessed if the connection is encrypted.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothAddress">
            <summary>
            <para>The QBluetoothAddress class assigns an address to the Bluetooth device.</para>
            </summary>
            <remarks>
            <para>This class holds a Bluetooth address in a platform- and protocol-independent manner.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QBluetoothAddress.#ctor">
            <summary>
            <para>Constructs an null Bluetooth address.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothAddress.#ctor(System.UInt64)">
            <summary>
            <para>Constructs a new Bluetooth address and assigns address to it.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothAddress.#ctor(System.String)">
            <summary>
            <para>Constructs a new Bluetooth address and assigns address to it.</para>
            <para>The format of address can be either XX:XX:XX:XX:XX:XX or XXXXXXXXXXXX, where X is a hexadecimal digit. Case is not important.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothAddress.#ctor(QtBluetooth.QBluetoothAddress)">
            <summary>
            <para>Constructs a new Bluetooth address which is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothAddress.Clear">
            <summary>
            <para>Sets the Bluetooth address to 00:00:00:00:00:00.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothAddress.op_LessThan(QtBluetooth.QBluetoothAddress,QtBluetooth.QBluetoothAddress)">
            <summary>
            <para>Returns true if the Bluetooth address is less than other, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothAddress.op_Equality(QtBluetooth.QBluetoothAddress,QtBluetooth.QBluetoothAddress)">
            <summary>
            <para>Compares this Bluetooth address to other.</para>
            <para>Returns true if the two Bluetooth addresses are equal, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothAddress.op_Inequality(QtBluetooth.QBluetoothAddress,QtBluetooth.QBluetoothAddress)">
            <summary>
            <para>Compares this Bluetooth address with other.</para>
            <para>Returns true if the Bluetooth addresses are not equal, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothAddress.ToUInt64">
            <summary>
            <para>Returns this Bluetooth address as a quint64.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothAddress.ToString">
            <summary>
            <para>Returns the Bluetooth address as a string of the form, XX:XX:XX:XX:XX:XX.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothAddress.IsNull">
            <summary>
            <para>Returns true if the Bluetooth address is null, otherwise returns false.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceInfo">
            <summary>
            <para>The QBluetoothDeviceInfo class stores information about the Bluetooth device.</para>
            </summary>
            <remarks>
            <para>QBluetoothDeviceInfo provides information about a Bluetooth device's name, address and class of device.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QBluetoothDeviceInfo.#ctor">
            <summary>
            <para>Constructs an invalid QBluetoothDeviceInfo object.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothDeviceInfo.#ctor(QtBluetooth.QBluetoothAddress,System.String,System.UInt32)">
            <summary>
            <para>Constructs a QBluetoothDeviceInfo object with Bluetooth address address, device name name and the encoded class of device classOfDevice.</para>
            <para>The classOfDevice parameter is encoded in the following format</para>
            <para></para>
            <para> BitsSizeDescription</para>
            <para>0 - 1	2	Unused, set to 0.</para>
            <para>2 - 7	6	Minor device class.</para>
            <para>8 - 12	5	Major device class.</para>
            <para>13 - 23	11	Service class.</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothDeviceInfo.#ctor(QtBluetooth.QBluetoothUuid,System.String,System.UInt32)">
            <summary>
            <para>Constructs a QBluetoothDeviceInfo object with unique uuid, device name name and the encoded class of device classOfDevice.</para>
            <para>This constructor is required for Low Energy devices on OS X and iOS. CoreBluetooth API hides addresses and provides unique UUIDs to identify a device. This UUID is not the same thing as a service UUID and is required to work later with CoreBluetooth API and discovered devices.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothDeviceInfo.#ctor(QtBluetooth.QBluetoothDeviceInfo)">
            <summary>
            <para>Constructs a QBluetoothDeviceInfo that is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothDeviceInfo.op_Equality(QtBluetooth.QBluetoothDeviceInfo,QtBluetooth.QBluetoothDeviceInfo)">
            <summary>
            <para>Returns true if the other QBluetoothDeviceInfo object and this are identical.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothDeviceInfo.op_Inequality(QtBluetooth.QBluetoothDeviceInfo,QtBluetooth.QBluetoothDeviceInfo)">
            <summary>
            <para>Returns true if this object is different from other, or false otherwise.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothDeviceInfo.Cached">
            <summary>
            <para>Returns true if the QBluetoothDeviceInfo object is created from cached data.</para>
            <para></para>
            <para>Used by the system to set the cached flag if the QBluetoothDeviceInfo is created from cached data. Cached information may not be as accurate as data read from an active device.</para>
            <para>See also isCached().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothDeviceInfo.Rssi">
            <summary>
            <para>Returns the signal strength when the device was last scanned</para>
            <para>See also setRssi().</para>
            <para></para>
            <para>Set the signal strength value, used internally.</para>
            <para>See also rssi().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothDeviceInfo.CoreConfigurations">
            <summary>
            <para>Returns the configuration of the device. If device configuration is not set, basic rate device configuration will be returned.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also setCoreConfigurations().</para>
            <para></para>
            <para>Sets the CoreConfigurations of the device to coreConfigs. This will help to make a difference between regular and Low Energy devices.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also coreConfigurations().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothDeviceInfo.DeviceUuid">
            <summary>
            <para>Returns a unique identifier for a Bluetooth device without an address.</para>
            <para>In general, this uuid is invalid on every platform but OS X and iOS. It is used as a workaround for those two platforms as they do not provide Bluetooth addresses for found Bluetooth Low Energy devices. Every other platform uses address() instead.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also setDeviceUuid().</para>
            <para></para>
            <para>Sets the unique identifier uuid for Bluetooth devices, that do not have addresses. This happens on OS X and iOS, where the CoreBluetooth API hides addresses, but provides UUIDs to identify devices/peripherals.</para>
            <para>This uuid is invalid on any other platform.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also deviceUuid().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothDeviceInfo.IsValid">
            <summary>
            <para>Returns true if the QBluetoothDeviceInfo object is valid, otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothDeviceInfo.Address">
            <summary>
            <para>Returns the address of the device.</para>
            <para>Note: On iOS and OS X this address is invalid. Instead deviceUuid() should be used. Those two platforms do not expose Bluetooth addresses for found Bluetooth devices and utilize unique device identifiers.</para>
            <para>See also deviceUuid().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothDeviceInfo.Name">
            <summary>
            <para>Returns the name assigned to the device.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothDeviceInfo.ServiceClasses">
            <summary>
            <para>Returns the service class of the device.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothDeviceInfo.majorDeviceClass">
            <summary>
            <para>Returns the major device class of the device.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothDeviceInfo.MinorDeviceClass">
            <summary>
            <para>Returns the minor device class of the device.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothDeviceInfo.ServiceUuidsCompleteness">
            <summary>
            <para>Returns the completeness of the service UUID list. If DataComplete is returned, serviceUuids() returns the complete list of service UUIDs supported by the device, otherwise only the partial or empty list of service UUIDs. To get a list of all services supported by the device, a full service discovery needs to be performed.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceInfo.MajorDeviceClass">
            <summary>
            <para>This enum describes a Bluetooth device's major device class.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MajorDeviceClass.MiscellaneousDevice">
            <summary>A miscellaneous device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MajorDeviceClass.ComputerDevice">
            <summary>A computer device or PDA.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MajorDeviceClass.PhoneDevice">
            <summary>A telephone device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MajorDeviceClass.LANAccessDevice">
            <summary>A device that provides access to a local area network.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MajorDeviceClass.AudioVideoDevice">
            <summary>A device capable of playback or capture of audio and/or video.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MajorDeviceClass.PeripheralDevice">
            <summary>A peripheral device such as a keyboard, mouse, and so on.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MajorDeviceClass.ImagingDevice">
            <summary>An imaging device such as a display, printer, scanner or camera.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MajorDeviceClass.WearableDevice">
            <summary>A wearable device such as a watch or pager.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MajorDeviceClass.ToyDevice">
            <summary>A toy.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MajorDeviceClass.HealthDevice">
            <summary>A health reated device such as heart rate or temperature monitor.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MajorDeviceClass.UncategorizedDevice">
            <summary>A device that does not fit into any of the other device classes.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceInfo.MinorMiscellaneousClass">
            <summary>
            <para>This enum describes the minor device classes for miscellaneous Bluetooth devices.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorMiscellaneousClass.UncategorizedMiscellaneous">
            <summary>An uncategorized miscellaneous device.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceInfo.MinorComputerClass">
            <summary>
            <para>This enum describes the minor device classes for computer devices.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorComputerClass.UncategorizedComputer">
            <summary>An uncategorized computer device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorComputerClass.DesktopComputer">
            <summary>A desktop computer.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorComputerClass.ServerComputer">
            <summary>A server computer.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorComputerClass.LaptopComputer">
            <summary>A laptop computer.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorComputerClass.HandheldClamShellComputer">
            <summary>A clamshell handheld computer or PDA.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorComputerClass.HandheldComputer">
            <summary>A handheld computer or PDA.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorComputerClass.WearableComputer">
            <summary>A wearable computer.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceInfo.MinorPhoneClass">
            <summary>
            <para>This enum describes the minor device classes for phone devices.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorPhoneClass.UncategorizedPhone">
            <summary>An uncategorized phone device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorPhoneClass.CellularPhone">
            <summary>A cellular phone.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorPhoneClass.CordlessPhone">
            <summary>A cordless phone.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorPhoneClass.SmartPhone">
            <summary>A smart phone.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorPhoneClass.WiredModemOrVoiceGatewayPhone">
            <summary>A wired modem or voice gateway.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorPhoneClass.CommonIsdnAccessPhone">
            <summary>A device that provides ISDN access.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceInfo.MinorNetworkClass">
            <summary>
            <para>This enum describes the minor device classes for local area network access devices. Local area network access devices use the minor device class to specify the current network utilization.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorNetworkClass.NetworkFullService">
            <summary>100% of the total bandwidth is available.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorNetworkClass.NetworkLoadFactorOne">
            <summary>0 - 17% of the total bandwidth is currently being used.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorNetworkClass.NetworkLoadFactorTwo">
            <summary>17 - 33% of the total bandwidth is currently being used.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorNetworkClass.NetworkLoadFactorThree">
            <summary>33 - 50% of the total bandwidth is currently being used.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorNetworkClass.NetworkLoadFactorFour">
            <summary>50 - 67% of the total bandwidth is currently being used.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorNetworkClass.NetworkLoadFactorFive">
            <summary>67 - 83% of the total bandwidth is currently being used.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorNetworkClass.NetworkLoadFactorSix">
            <summary>83 - 99% of the total bandwidth is currently being used.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorNetworkClass.NetworkNoService">
            <summary>No network service available.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass">
            <summary>
            <para>This enum describes the minor device classes for audio/video devices.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.UncategorizedAudioVideoDevice">
            <summary>An uncategorized audio/video device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.WearableHeadsetDevice">
            <summary>A wearable headset device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.HandsFreeDevice">
            <summary>A handsfree device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.Microphone">
            <summary>A microphone.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.Loudspeaker">
            <summary>A loudspeaker.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.Headphones">
            <summary>Headphones.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.PortableAudioDevice">
            <summary>A portable audio device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.CarAudio">
            <summary>A car audio device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.SetTopBox">
            <summary>A settop box.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.HiFiAudioDevice">
            <summary>A HiFi audio device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.Vcr">
            <summary>A video cassette recorder.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.VideoCamera">
            <summary>A video camera.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.Camcorder">
            <summary>A video camera.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.VideoMonitor">
            <summary>A video monitor.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.VideoDisplayAndLoudspeaker">
            <summary>A video display with built-in loudspeaker.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.VideoConferencing">
            <summary>A video conferencing device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorAudioVideoClass.GamingDevice">
            <summary>A gaming device.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceInfo.MinorPeripheralClass">
            <summary>
            <para>This enum describes the minor device classes for peripheral devices.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorPeripheralClass.UncategorizedPeripheral">
            <summary>An uncategorized peripheral device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorPeripheralClass.KeyboardPeripheral">
            <summary>A keyboard.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorPeripheralClass.PointingDevicePeripheral">
            <summary>A pointing device, for example a mouse.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorPeripheralClass.KeyboardWithPointingDevicePeripheral">
            <summary>A keyboard with built-in pointing device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorPeripheralClass.JoystickPeripheral">
            <summary>A joystick.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorPeripheralClass.GamepadPeripheral">
            <summary>A game pad.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorPeripheralClass.RemoteControlPeripheral">
            <summary>A remote control.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorPeripheralClass.SensingDevicePeripheral">
            <summary>A sensing device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorPeripheralClass.DigitizerTabletPeripheral">
            <summary>A digitizer tablet peripheral.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorPeripheralClass.CardReaderPeripheral">
            <summary>A card reader peripheral.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceInfo.MinorImagingClass">
            <summary>
            <para>This enum describes the minor device classes for imaging devices.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorImagingClass.UncategorizedImagingDevice">
            <summary>An uncategorized imaging device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorImagingClass.ImageDisplay">
            <summary>A device capable of displaying images.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorImagingClass.ImageCamera">
            <summary>A camera.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorImagingClass.ImageScanner">
            <summary>An image scanner.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorImagingClass.ImagePrinter">
            <summary>A printer.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceInfo.MinorWearableClass">
            <summary>
            <para>This enum describes the minor device classes for wearable devices.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorWearableClass.UncategorizedWearableDevice">
            <summary>An uncategorized wearable device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorWearableClass.WearableWristWatch">
            <summary>A wristwatch.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorWearableClass.WearablePager">
            <summary>A pager.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorWearableClass.WearableJacket">
            <summary>A jacket.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorWearableClass.WearableHelmet">
            <summary>A helmet.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorWearableClass.WearableGlasses">
            <summary>A pair of glasses.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceInfo.MinorToyClass">
            <summary>
            <para>This enum describes the minor device classes for toy devices.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorToyClass.UncategorizedToy">
            <summary>An uncategorized toy.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorToyClass.ToyRobot">
            <summary>A toy robot.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorToyClass.ToyVehicle">
            <summary>A toy vehicle.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorToyClass.ToyDoll">
            <summary>A toy doll or action figure.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorToyClass.ToyController">
            <summary>A controller.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorToyClass.ToyGame">
            <summary>A game.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceInfo.MinorHealthClass">
            <summary>
            <para>This enum describes the minor device classes for health devices.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorHealthClass.UncategorizedHealthDevice">
            <summary>An uncategorized health device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorHealthClass.HealthBloodPressureMonitor">
            <summary>A blood pressure monitor.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorHealthClass.HealthThermometer">
            <summary>A Thermometer.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorHealthClass.HealthWeightScale">
            <summary>A scale.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorHealthClass.HealthGlucoseMeter">
            <summary>A glucose meter.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorHealthClass.HealthPulseOximeter">
            <summary>A blood oxygen saturation meter.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorHealthClass.HealthDataDisplay">
            <summary>A data display.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.MinorHealthClass.HealthStepCounter">
            <summary>A pedometer.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceInfo.ServiceClass">
            <summary>
            <para>This enum describes the service class of the Bluetooth device. The service class is used as a rudimentary form of service discovery. It is meant to provide a list of the types of services that the device might provide.</para>
            <para>The ServiceClasses type is a typedef for QFlags&lt;ServiceClass&gt;. It stores an OR combination of ServiceClass values.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.ServiceClass.NoService">
            <summary>The device does not provide any services.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.ServiceClass.PositioningService">
            <summary>The device provides positioning services.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.ServiceClass.NetworkingService">
            <summary>The device provides networking services.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.ServiceClass.RenderingService">
            <summary>The device provides rendering services.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.ServiceClass.CapturingService">
            <summary>The device provides capturing services.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.ServiceClass.ObjectTransferService">
            <summary>The device provides object transfer services.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.ServiceClass.AudioService">
            <summary>The device provides audio services.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.ServiceClass.TelephonyService">
            <summary>The device provides telephony services.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.ServiceClass.InformationService">
            <summary>The device provides information services.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.ServiceClass.AllServices">
            <summary>The device provides services of all types.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceInfo.DataCompleteness">
            <summary>
            <para>This enum describes the completeness of the received data.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.DataCompleteness.DataComplete">
            <summary>The data is complete.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.DataCompleteness.DataIncomplete">
            <summary>The data is incomplete. Addition datum is available via other interfaces.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.DataCompleteness.DataUnavailable">
            <summary>No data is available.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceInfo.CoreConfiguration">
            <summary>
            <para>This enum describes the configuration of the device.</para>
            <para>This enum was introduced or modified in  Qt 5.4.</para>
            <para>The CoreConfigurations type is a typedef for QFlags&lt;CoreConfiguration&gt;. It stores an OR combination of CoreConfiguration values.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.CoreConfiguration.UnknownCoreConfiguration">
            <summary>The type of the Bluetooth device cannot be determined.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.CoreConfiguration.LowEnergyCoreConfiguration">
            <summary>The device is a Bluetooth Low Energy device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.CoreConfiguration.BaseRateCoreConfiguration">
            <summary>The device is a standard Bluetooth device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceInfo.CoreConfiguration.BaseRateAndLowEnergyCoreConfiguration">
            <summary>The device is a Bluetooth Smart device with support for standard and Low Energy device.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceDiscoveryAgent">
            <summary>
            <para>The QBluetoothDeviceDiscoveryAgent class discovers the Bluetooth devices nearby.</para>
            </summary>
            <remarks>
            <para>To discover the nearby Bluetooth devices:</para>
            <para></para>
            <para>create an instance of QBluetoothDeviceDiscoveryAgent,</para>
            <para>connect to either the deviceDiscovered() or finished() signals,</para>
            <para>and call start().</para>
            <para></para>
            <para></para>
            <para></para>
            <para>  void MyClass::startDeviceDiscovery()</para>
            <para>  {</para>
            <para></para>
            <para>      // Create a discovery agent and connect to its signals</para>
            <para>      QBluetoothDeviceDiscoveryAgent *discoveryAgent = new QBluetoothDeviceDiscoveryAgent(this);</para>
            <para>      connect(discoveryAgent, SIGNAL(deviceDiscovered(QBluetoothDeviceInfo)),</para>
            <para>              this, SLOT(deviceDiscovered(QBluetoothDeviceInfo)));</para>
            <para></para>
            <para>      // Start a discovery</para>
            <para>      discoveryAgent-&gt;start();</para>
            <para></para>
            <para>      //...</para>
            <para>  }</para>
            <para></para>
            <para>  // In your local slot, read information about the found devices</para>
            <para>  void MyClass::deviceDiscovered(const QBluetoothDeviceInfo &amp;device)</para>
            <para>  {</para>
            <para>      qDebug() &lt;&lt; &quot;Found new device:&quot; &lt;&lt; device.name() &lt;&lt; '(' &lt;&lt; device.address().toString() &lt;&lt; ')';</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>To retrieve results asynchronously, connect to the deviceDiscovered() signal. To get a list of all discovered devices, call discoveredDevices() after the finished() signal.</para>
            <para>This class can be used to discover Classic and Low Energy Bluetooth devices. The individual device type can be determined via the QBluetoothDeviceInfo::coreConfigurations() attribute. In most cases the list returned by discoveredDevices() contains both types of devices. However not every platform can detect both types of devices. On platforms with this limitation (for example iOS only suports Low Energy discovery), the discovery process will limit the search to the type which is supported.</para>
            <para>Note: Since Android 6.0 the ability to detect devices requires ACCESS_COARSE_LOCATION.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QBluetoothDeviceDiscoveryAgent.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new Bluetooth device discovery agent with parent parent.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothDeviceDiscoveryAgent.#ctor(QtBluetooth.QBluetoothAddress,QtCore.QObject)">
            <summary>
            <para>Constructs a new Bluetooth device discovery agent with parent.</para>
            <para>It uses deviceAdapter for the device search. If deviceAdapter is default constructed the resulting QBluetoothDeviceDiscoveryAgent object will use the local default Bluetooth adapter.</para>
            <para>If a deviceAdapter is specified that is not a local adapter error() will be set to InvalidBluetoothAdapterError. Therefore it is recommended to test the error flag immediately after using this constructor.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothDeviceDiscoveryAgent.DeviceDiscovered">
            <summary>
            <para>This signal is emitted when the Bluetooth device described by info is discovered.</para>
            <para>The signal is emitted as soon as the most important device information has been collected. However, as long as the finished() signal has not been emitted the information collection continues even for already discovered devices. This is particularly true for signal strength information (RSSI). If signal strength information is required it is advisable to retrieve the device information via discoveredDevices() once the discovery has finished. This will yield the most recent RSSI information.</para>
            <para>See also QBluetoothDeviceInfo::rssi().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothDeviceDiscoveryAgent.Finished">
            <summary>
            <para>This signal is emitted when Bluetooth device discovery completes. The signal is not going to be emitted if the device discovery finishes with an error.</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothDeviceDiscoveryAgent.ErrorError">
            <summary>
            <para>This signal is emitted when an error occurs during Bluetooth device discovery. The error parameter describes the error that occurred.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(bluetoothDeviceDiscoveryAgent, static_cast&lt;void(QBluetoothDeviceDiscoveryAgent::*)(QBluetoothDeviceDiscoveryAgent::Error)&gt;(&amp;QBluetoothDeviceDiscoveryAgent::error),</para>
            <para>      [=](QBluetoothDeviceDiscoveryAgent::Error error){ /* ... */ });</para>
            <para></para>
            <para></para>
            <para>See also error() and errorString().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothDeviceDiscoveryAgent.Canceled">
            <summary>
            <para>This signal is emitted when device discovery is aborted by a call to stop().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothDeviceDiscoveryAgent.inquiryType">
            <summary>
            <para>This property holds type of inquiry scan to be used while discovering devices.</para>
            <para>This property affects the type of inquiry scan which is performed while discovering devices.</para>
            <para>By default, this property is set to GeneralUnlimitedInquiry.</para>
            <para>Not all platforms support LimitedInquiry.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QBluetoothDeviceDiscoveryAgent::InquiryType 	inquiryType() const</para>
            <para> void 	setInquiryType(QBluetoothDeviceDiscoveryAgent::InquiryType type)</para>
            <para></para>
            <para>See also InquiryType.</para>
            <para></para>
            <para>This property holds type of inquiry scan to be used while discovering devices.</para>
            <para>This property affects the type of inquiry scan which is performed while discovering devices.</para>
            <para>By default, this property is set to GeneralUnlimitedInquiry.</para>
            <para>Not all platforms support LimitedInquiry.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QBluetoothDeviceDiscoveryAgent::InquiryType 	inquiryType() const</para>
            <para> void 	setInquiryType(QBluetoothDeviceDiscoveryAgent::InquiryType type)</para>
            <para></para>
            <para>See also InquiryType.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothDeviceDiscoveryAgent.error">
            <summary>
            <para>Returns the last error.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothDeviceDiscoveryAgent.ErrorString">
            <summary>
            <para>Returns a human-readable description of the last error.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceDiscoveryAgent.Error">
            <summary>
            <para>Indicates all possible error conditions found during Bluetooth device discovery.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceDiscoveryAgent.Error.NoError">
            <summary>No error has occurred.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceDiscoveryAgent.Error.InputOutputError">
            <summary>Writing or reading from the device resulted in an error.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceDiscoveryAgent.Error.PoweredOffError">
            <summary>The Bluetooth adaptor is powered off, power it on before doing discovery.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceDiscoveryAgent.Error.InvalidBluetoothAdapterError">
            <summary>The passed local adapter address does not match the physical adapter address of any local Bluetooth device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceDiscoveryAgent.Error.UnsupportedPlatformError">
            <summary>Device discovery is not possible or implemented on the current platform. The error is set in response to a call to start(). An example for such cases are iOS versions below 5.0 which do not support Bluetooth device search at all. This value was introduced by Qt 5.5.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceDiscoveryAgent.Error.UnknownError">
            <summary>An unknown error has occurred.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothDeviceDiscoveryAgent.InquiryType">
            <summary>
            <para>This enum describes the inquiry type used while discovering Bluetooth devices.</para>
            <para>LimitedInquiry is not supported on all platforms. If it is requested on a platform that does not support it, GeneralUnlimitedInquiry will be used instead. Setting LimitedInquiry is useful for multi-player Bluetooth-based games that needs faster communication between the devices. The phone scans for devices in LimitedInquiry and Service Discovery is done on one or two devices to speed up the service scan. After the game has connected to the device it intended to, the device returns to GeneralUnlimitedInquiry.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceDiscoveryAgent.InquiryType.GeneralUnlimitedInquiry">
            <summary>A general unlimited inquiry. Discovers all visible Bluetooth devices in the local vicinity.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothDeviceDiscoveryAgent.InquiryType.LimitedInquiry">
            <summary>A limited inquiry discovers devices that are in limited inquiry mode.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothHostInfo">
            <summary>
            <para>The QBluetoothHostInfo class encapsulates the details of a local QBluetooth device.</para>
            </summary>
            <remarks>
            <para>This class holds the name and address of a local Bluetooth device.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QBluetoothHostInfo.#ctor">
            <summary>
            <para>Constructs a null QBluetoothHostInfo object.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothHostInfo.#ctor(QtBluetooth.QBluetoothHostInfo)">
            <summary>
            <para>Constructs a new QBluetoothHostInfo which is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothHostInfo.op_Equality(QtBluetooth.QBluetoothHostInfo,QtBluetooth.QBluetoothHostInfo)">
            <summary>
            <para>Returns true if other is equal to this QBluetoothHostInfo, otherwise false.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothHostInfo.op_Inequality(QtBluetooth.QBluetoothHostInfo,QtBluetooth.QBluetoothHostInfo)">
            <summary>
            <para>Returns true if other is not equal to this QBluetoothHostInfo, otherwise false.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothHostInfo.Address">
            <summary>
            <para>Returns the Bluetooth address as a QBluetoothAddress.</para>
            <para>See also setAddress().</para>
            <para></para>
            <para>Sets the Bluetooth address for this Bluetooth host info object.</para>
            <para>See also address().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothHostInfo.Name">
            <summary>
            <para>Returns the user visible name of the host info object.</para>
            <para>See also setName().</para>
            <para></para>
            <para>Sets the name of the host info object.</para>
            <para>See also name().</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothLocalDevice">
            <summary>
            <para>The QBluetoothLocalDevice class enables access to the local Bluetooth device.</para>
            </summary>
            <remarks>
            <para>QBluetoothLocalDevice provides functions for getting and setting the state of local Bluetooth devices.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QBluetoothLocalDevice.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QBluetoothLocalDevice with parent.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothLocalDevice.#ctor(QtBluetooth.QBluetoothAddress,QtCore.QObject)">
            <summary>
            <para>Construct new QBluetoothLocalDevice for address. If address is default constructed the resulting local device selects the local default device.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothLocalDevice.RequestPairing(QtBluetooth.QBluetoothAddress,QtBluetooth.QBluetoothLocalDevice.Pairing)">
            <summary>
            <para>Set the pairing status with address. The results are returned by the signal, pairingFinished(). On Android and OS X, AuthorizedPaired is not possible and will have the same behavior as Paired.</para>
            <para>On OS X, it is not possible to unpair a device. If Unpaired is requested, pairingFinished() is immediately emitted although the device remains paired. It is possible to request the pairing for a previously unpaired device. In addition AuthorizedPaired has the same behavior as Paired.</para>
            <para>Caution: creating a pairing may take minutes, and may require the user to acknowledge.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothLocalDevice.PairingStatus(QtBluetooth.QBluetoothAddress)">
            <summary>
            <para>Returns the current bluetooth pairing status of address, if it's unpaired, paired, or paired and authorized.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothLocalDevice.PowerOn">
            <summary>
            <para>Powers on the device after returning it to the hostMode() state, if it was powered off.</para>
            <para>Note: Due to varying security policies on the supported platforms, this method may have differing behaviors on the various platforms. For example the system may ask the user for confirmation before turning Bluetooth on or off. On OS X it is not possible to power on/off Bluetooth. Please refer to the platform specific Bluetooth documentation for details.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothLocalDevice.PairingConfirmation(System.Boolean)">
            <summary>
            <para>To be called after getting a pairingDisplayConfirmation(). The accept parameter either accepts the pairing or rejects it.</para>
            <para>Accepting a pairing always refers to the last pairing request issued via requestPairing().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothLocalDevice.HostModeStateChanged">
            <summary>
            <para>The state of the host has transitioned to a different HostMode.</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothLocalDevice.DeviceConnected">
            <summary>
            <para>This signal is emitted when the local device establishes a connection to a remote device with address.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also deviceDisconnected() and connectedDevices().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothLocalDevice.DeviceDisconnected">
            <summary>
            <para>This signal is emitted when the local device disconnects from a remote Bluetooth device with address.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also deviceConnected() and connectedDevices().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothLocalDevice.PairingFinished">
            <summary>
            <para>Pairing or unpairing has completed with address. Current pairing status is in pairing. If the pairing request was not successful, this signal will not be emitted. The error() signal is emitted if the pairing request failed. The signal is only ever emitted for pairing requests which have previously requested by calling requestPairing() of the current object instance.</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothLocalDevice.PairingDisplayPinCode">
            <summary>
            <para>Signal by some platforms to display the pin to the user for address. The pin is automatically generated, and does not need to be confirmed.</para>
            <para>This signal is only emitted for pairing requests issues by calling requestPairing().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothLocalDevice.PairingDisplayConfirmation">
            <summary>
            <para>Signal by some platforms to display a pairing confirmation dialog for address. The user is asked to confirm the pin is the same on both devices. The pairingConfirmation() function must be called to indicate if the user accepts or rejects the displayed pin.</para>
            <para>This signal is only emitted for pairing requests issues by calling requestPairing(). On OS X, this method never gets called - there is a callback with a PIN (IOBluetooth), but it expects immediate reply yes/no - and there is no time to show any dialog or compare PINs.</para>
            <para>See also pairingConfirmation().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothLocalDevice.ErrorSignal">
            <summary>
            <para>Signal emitted if there's an exceptional error while pairing.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothLocalDevice.hostMode">
            <summary>
            <para>Returns the current host mode of this local Bluetooth device. On OS X, it is either HostPoweredOff or HostConnectable.</para>
            <para>See also setHostMode().</para>
            <para></para>
            <para>Sets the host mode of this local Bluetooth device to mode.</para>
            <para>Note: Due to varying security policies on the supported platforms, this method may have differing behaviors on the various platforms. For example the system may ask the user for confirmation before turning Bluetooth on or off and not all host modes may be supported. On OS X, it is not possbile to programmatically change the hostMode(). A user can only switch Bluetooth on/off in the System Preferences. Please refer to the platform specific Bluetooth documentation for details.</para>
            <para>See also hostMode().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothLocalDevice.Name">
            <summary>
            <para>Returns the name assgined by the user to this Bluetooth device.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothLocalDevice.Address">
            <summary>
            <para>Returns the MAC address of this Bluetooth device.</para>
            <para>Note: On Android, this function always returns the constant value 02:00:00:00:00:00 as local address starting with Android 6.0. The programmatic access to the device's local MAC address was removed.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothLocalDevice.Pairing">
            <summary>
            <para>This enum describes the pairing state between the two Bluetooth devices.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothLocalDevice.Pairing.Unpaired">
            <summary>The Bluetooth devices are not paired.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothLocalDevice.Pairing.Paired">
            <summary>The Bluetooth devices are paired. The system will prompt the user for authorization when the remote device initiates a connection to the local device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothLocalDevice.Pairing.AuthorizedPaired">
            <summary>The Bluetooth devices are paired. The system will not prompt the user for authorization when the remote device initiates a connection to the local device.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothLocalDevice.HostMode">
            <summary>
            <para>This enum describes the most of the local Bluetooth device.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothLocalDevice.HostMode.HostPoweredOff">
            <summary>Power off the device</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothLocalDevice.HostMode.HostConnectable">
            <summary>Remote Bluetooth devices can connect to the local Bluetooth device if they have previously been paired with it or otherwise know its address. This powers up the device if it was powered off.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothLocalDevice.HostMode.HostDiscoverable">
            <summary>Remote Bluetooth devices can discover the presence of the local Bluetooth device. The device will also be connectable, and powered on. On Android, this mode can only be active for a maximum of 5 minutes.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothLocalDevice.HostMode.HostDiscoverableLimitedInquiry">
            <summary>Remote Bluetooth devices can discover the presence of the local Bluetooth device when performing a limited inquiry. This should be used for locating services that are only made discoverable for a limited period of time. This can speed up discovery between gaming devices, as service discovery can be skipped on devices not in LimitedInquiry mode. In this mode, the device will be connectable and powered on, if required. This mode is is not supported on Android. On OS X, it is not possible to set the hostMode() to HostConnectable or HostPoweredOff.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothLocalDevice.Error">
            <summary>
            <para>This enum describes errors that maybe returned</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothLocalDevice.Error.NoError">
            <summary>No known error</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothLocalDevice.Error.PairingError">
            <summary>Error in pairing</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothLocalDevice.Error.UnknownError">
            <summary>Unknown error</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothUuid">
            <summary>
            <para>The QBluetoothUuid class generates a UUID for each Bluetooth service.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.#ctor">
            <summary>
            <para>Constructs a new null Bluetooth UUID.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.#ctor(QtBluetooth.QBluetoothUuid.ProtocolUuid)">
            <summary>
            <para>Constructs a new Bluetooth UUID from the protocol uuid.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.#ctor(QtBluetooth.QBluetoothUuid.ServiceClassUuid)">
            <summary>
            <para>Constructs a new Bluetooth UUID from the service class uuid.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.#ctor(QtBluetooth.QBluetoothUuid.CharacteristicType)">
            <summary>
            <para>Constructs a new Bluetooth UUID from the characteristic type uuid.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.#ctor(QtBluetooth.QBluetoothUuid.DescriptorType)">
            <summary>
            <para>Constructs a new Bluetooth UUID from the descriptor type uuid.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.#ctor(System.UInt16)">
            <summary>
            <para>Constructs a new Bluetooth UUID from the 16 bit uuid.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.#ctor(System.UInt32)">
            <summary>
            <para>Constructs a new Bluetooth UUID from the 32 bit uuid.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.#ctor(QtBluetooth.Quint128)">
            <summary>
            <para>Constructs a new Bluetooth UUID from the 128 bit uuid.</para>
            <para>Note that uuid must be in big endian order.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.#ctor(System.String)">
            <summary>
            <para>Creates a QBluetoothUuid object from the string uuid, which must be formatted as five hex fields separated by '-', e.g., &quot;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&quot; where 'x' is a hex digit. The curly braces shown here are optional, but it is normal to include them. If the conversion fails, a null UUID is created. See QUuid::toString() for an explanation of how the five hex fields map to the public data members in QUuid.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.#ctor(QtCore.QUuid)">
            <summary>
            <para>Constructs a new Bluetooth UUID that is a copy of uuid.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.op_Equality(QtBluetooth.QBluetoothUuid,QtBluetooth.QBluetoothUuid)">
            <summary>
            <para>Returns true if other is equal to this Bluetooth UUID, otherwise false.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.op_Inequality(QtBluetooth.QBluetoothUuid,QtBluetooth.QBluetoothUuid)">
            <summary>
            <para>Returns true if other is not equal to this Bluetooth UUID, otherwise false.</para>
            <para>This function was introduced in  Qt 5.7.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.ToUInt16(System.Boolean@)">
            <summary>
            <para>Returns the 16 bit representation of this UUID. If ok is passed, it is set to true if the conversion is possible, otherwise it is set to false. The return value is undefined if ok is set to false.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.ToUInt32(System.Boolean@)">
            <summary>
            <para>Returns the 32 bit representation of this UUID. If ok is passed, it is set to true if the conversion is possible, otherwise it is set to false. The return value is undefined if ok is set to false.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.ToUInt128">
            <summary>
            <para>Returns the 128 bit representation of this UUID.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.ToUInt16">
            <summary>
            <para>Returns the 16 bit representation of this UUID. If ok is passed, it is set to true if the conversion is possible, otherwise it is set to false. The return value is undefined if ok is set to false.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.ToUInt32">
            <summary>
            <para>Returns the 32 bit representation of this UUID. If ok is passed, it is set to true if the conversion is possible, otherwise it is set to false. The return value is undefined if ok is set to false.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.ServiceClassToString(QtBluetooth.QBluetoothUuid.ServiceClassUuid)">
            <summary>
            <para>Returns a human-readable and translated name for the given service class represented by uuid.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also QBluetoothUuid::ServiceClassUuid.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.ProtocolToString(QtBluetooth.QBluetoothUuid.ProtocolUuid)">
            <summary>
            <para>Returns a human-readable and translated name for the given protocol represented by uuid.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also QBluetoothUuid::ProtocolUuid.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.CharacteristicToString(QtBluetooth.QBluetoothUuid.CharacteristicType)">
            <summary>
            <para>Returns a human-readable and translated name for the given characteristic type represented by uuid.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also QBluetoothUuid::CharacteristicType.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothUuid.DescriptorToString(QtBluetooth.QBluetoothUuid.DescriptorType)">
            <summary>
            <para>Returns a human-readable and translated name for the given descriptor type represented by uuid.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also QBluetoothUuid::DescriptorType.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothUuid.MinimumSize">
            <summary>
            <para>Returns the minimum size in bytes that this UUID can be represented in. For non-null UUIDs 2, 4 or 16 is returned. 0 is returned for null UUIDs.</para>
            <para>See also isNull(), toUInt16(), toUInt32(), and toUInt128().</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothUuid.ProtocolUuid">
            <summary>
            <para>This enum is a convienience type for Bluetooth protocol UUIDs. Values of this type will be implicitly converted into a QBluetoothUuid when necessary.</para>
            <para>See also QBluetoothServiceInfo::ProtocolDescriptorList.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.Sdp">
            <summary>SDP protocol UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.Udp">
            <summary>UDP protocol UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.Rfcomm">
            <summary>RFCOMM protocol UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.Tcp">
            <summary>TCP protocol UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.TcsBin">
            <summary>Telephony Control Specification UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.TcsAt">
            <summary>Telephony Control Specification AT UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.Att">
            <summary>Attribute protocol UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.Obex">
            <summary>OBEX protocol UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.Ip">
            <summary>IP protocol UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.Ftp">
            <summary>FTP protocol UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.Http">
            <summary>HTTP protocol UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.Wsp">
            <summary>WSP UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.Bnep">
            <summary>Bluetooth Network Encapsulation Protocol UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.Upnp">
            <summary>Extended Service Discovery Profile UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.Hidp">
            <summary>Human Interface Device Profile UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.HardcopyControlChannel">
            <summary>Hardcopy Cable Replacement Profile UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.HardcopyDataChannel">
            <summary>Hardcopy Cable Replacement Profile UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.HardcopyNotification">
            <summary>Hardcopy Cable Replacement Profile UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.Avctp">
            <summary>Audio/Video Control Transport Protocol UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.Avdtp">
            <summary>Audio/Video Distribution Transport Protocol UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.Cmtp">
            <summary>Common ISDN Access Profile</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.UdiCPlain">
            <summary>UDI protocol UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.McapControlChannel">
            <summary>Multi-Channel Adaptation Protocol UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.McapDataChannel">
            <summary>Multi-Channel Adaptation Protocol UUID</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ProtocolUuid.L2cap">
            <summary>L2CAP protocol UUID</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothUuid.ServiceClassUuid">
            <summary>
            <para>This enum is a convienience type for Bluetooth service class and profile UUIDs. Values of this type will be implicitly converted into a QBluetoothUuid when necessary. Some UUIDs refer to service class ids, others to profile ids and some can be used as both. In general, profile UUIDs shall only be used in a QBluetoothServiceInfo::BluetoothProfileDescriptorList attribute and service class UUIDs shall only be used in a QBluetoothServiceInfo::ServiceClassIds attribute. If the UUID is marked as profile and service class UUID it can be used as a value for either of the above service attributes. Such a dual use has historical reasons but is no longer permissible for newer UUIDs.</para>
            <para>The list below explicitly states as what type each UUID shall be used. Bluetooth Low Energy related values starting with 0x18 were introduced by Qt 5.4</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.ServiceDiscoveryServer">
            <summary>Service discovery server UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.BrowseGroupDescriptor">
            <summary>Browser group descriptor (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.PublicBrowseGroup">
            <summary>Public browse group service class. Services which have the public browse group in their browse group list are discoverable by the remote devices.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.SerialPort" -->
        <!-- Badly formed XML comment ignored for member "F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.LANAccessUsingPPP" -->
        <!-- Badly formed XML comment ignored for member "F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.DialupNetworking" -->
        <!-- Badly formed XML comment ignored for member "F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.IrMCSync" -->
        <!-- Badly formed XML comment ignored for member "F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.ObexObjectPush" -->
        <!-- Badly formed XML comment ignored for member "F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.OBEXFileTransfer" -->
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.IrMCSyncCommand">
            <summary>Synchronization Profile UUID (profile)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.Headset" -->
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.AudioSource">
            <summary>Advanced Audio Distribution Profile (A2DP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.AudioSink">
            <summary>Advanced Audio Distribution Profile (A2DP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.AV_RemoteControlTarget">
            <summary>Audio/Video Remote Control Profile (AVRCP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.AdvancedAudioDistribution">
            <summary>Advanced Audio Distribution Profile (A2DP) UUID (profile)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.AV_RemoteControl" -->
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.AV_RemoteControlController">
            <summary>Audio/Video Remote Control Profile UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.HeadsetAG">
            <summary>Headset Profile (HSP) UUID (service)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.PANU" -->
        <!-- Badly formed XML comment ignored for member "F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.NAP" -->
        <!-- Badly formed XML comment ignored for member "F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.GN" -->
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.DirectPrinting">
            <summary>Basic Printing Profile (BPP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.ReferencePrinting">
            <summary>Related to Basic Printing Profile (BPP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.BasicImage">
            <summary>Basic Imaging Profile (BIP) UUID (profile)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.ImagingResponder">
            <summary>Basic Imaging Profile (BIP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.ImagingAutomaticArchive">
            <summary>Basic Imaging Profile (BIP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.ImagingReferenceObjects">
            <summary>Basic Imaging Profile (BIP) UUID (service)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.Handsfree" -->
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.HandsfreeAudioGateway">
            <summary>Hands-Free Audio Gateway (HFP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.DirectPrintingReferenceObjectsService">
            <summary>Basic Printing Profile (BPP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.ReflectedUI">
            <summary>Basic Printing Profile (BPP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.BasicPrinting">
            <summary>Basic Printing Profile (BPP) UUID (profile)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.PrintingStatus">
            <summary>Basic Printing Profile (BPP) UUID (service)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.HumanInterfaceDeviceService" -->
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.HardcopyCableReplacement">
            <summary>Hardcopy Cable Replacement Profile (HCRP) (profile)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.HCRPrint">
            <summary>Hardcopy Cable Replacement Profile (HCRP) (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.HCRScan">
            <summary>Hardcopy Cable Replacement Profile (HCRP) (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.SIMAccess">
            <summary>SIM Access Profile (SAP) UUID (service and profile)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.PhonebookAccessPCE">
            <summary>Phonebook Access Profile (PBAP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.PhonebookAccessPSE">
            <summary>Phonebook Access Profile (PBAP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.PhonebookAccess">
            <summary>Phonebook Access Profile (PBAP) (profile)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.HeadsetHS">
            <summary>Headset Profile (HSP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.MessageAccessServer">
            <summary>Message Access Profile (MAP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.MessageNotificationServer">
            <summary>Message Access Profile (MAP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.MessageAccessProfile">
            <summary>Message Access Profile (MAP) UUID (profile)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.GNSS">
            <summary>Global Navigation Satellite System UUID (profile)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.GNSSServer">
            <summary>Global Navigation Satellite System Server (UUID) (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.Display3D">
            <summary>3D Synchronization Display UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.Glasses3D">
            <summary>3D Synchronization Glasses UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.Synchronization3D">
            <summary>3D Synchronization UUID (profile)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.MPSProfile">
            <summary>Multi-Profile Specification UUID (profile)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.MPSService">
            <summary>Multi-Profile Specification UUID (service)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.PnPInformation" -->
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.GenericNetworking">
            <summary>Generic networking UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.GenericFileTransfer">
            <summary>Generic file transfer UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.GenericAudio">
            <summary>Generic audio UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.GenericTelephony">
            <summary>Generic telephone UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.VideoSource">
            <summary>Video Distribution Profile (VDP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.VideoSink">
            <summary>Video Distribution Profile (VDP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.VideoDistribution">
            <summary>Video Distribution Profile (VDP) UUID (profile)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.HDP">
            <summary>Health Device Profile (HDP) UUID (profile)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.HDPSource">
            <summary>Health Device Profile Source (HDP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.HDPSink">
            <summary>Health Device Profile Sink (HDP) UUID (service)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.GenericAccess">
            <summary>Generic access service for Bluetooth Low Energy devices UUID (service). It contains generic information about the device. All available Characteristics are readonly.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.ImmediateAlert">
            <summary>Immediate Alert UUID (service). The service exposes a control point to allow a peer device to cause the device to immediately alert.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.LinkLoss">
            <summary>Link Loss UUID (service). The service defines behavior when a link is lost between two devices.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.TxPower">
            <summary>Transmission Power UUID (service). The service exposes a device’s current transmit power level when in a connection.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.CurrentTimeService">
            <summary>Current Time UUID (service). The service defines how the current time can be exposed using the Generic Attribute Profile (GATT).</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.ReferenceTimeUpdateService">
            <summary>Reference Time update UUID (service). The service defines how a client can request an update from a reference time source from a time server.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.NextDSTChangeService">
            <summary>Next DST change UUID (service). The service defines how the information about an upcoming DST change can be exposed.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.Glucose">
            <summary>Glucose UUID (service). The service exposes glucose and other data from a glucose sensor for use in consumer and professional healthcare applications.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.HealthThermometer">
            <summary>Health Thermometer UUID (service). The Health Thermometer service exposes temperature and other data from a thermometer intended for healthcare and fitness applications.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.DeviceInformation">
            <summary>Device Information UUID (service). The Device Information Service exposes manufacturer and/or vendor information about a device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.HeartRate">
            <summary>Heart Rate UUID (service). The service exposes the heart rate and other data from a Heart Rate Sensor intended for fitness applications.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.PhoneAlertStatusService">
            <summary>Phone Alert Status UUID (service). The service exposes the phone alert status when in a connection.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.BatteryService">
            <summary>Battery UUID (service). The Battery Service exposes the state of a battery within a device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.BloodPressure">
            <summary>Blood Pressure UUID (service). The service exposes blood pressure and other data from a blood pressure monitor intended for healthcare applications.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.AlertNotificationService">
            <summary>Alert Notification UUID (service). The Alert Notification service exposes alert information on a device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.HumanInterfaceDevice">
            <summary>Human Interface UUID (service). The service exposes the HID reports and other HID data intended for HID Hosts and HID Devices.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.ScanParameters">
            <summary>Scan Parameters UUID (service). The Scan Parameters Service enables a GATT Server device to expose a characteristic for the GATT Client to write its scan interval and scan window on the GATT Server device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.RunningSpeedAndCadence">
            <summary>Runnung Speed and Cadence UUID (service). The service exposes speed, cadence and other data from a Running Speed and Cadence Sensor intended for fitness applications.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.CyclingSpeedAndCadence">
            <summary>Cycling Speed and Cadence UUID (service). The service exposes speed-related and cadence-related data from a Cycling Speed and Cadence sensor intended for fitness applications.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.CyclingPower">
            <summary>Cycling Speed UUID (service). The service exposes power- and force-related data and optionally speed- and cadence-related data from a Cycling Power sensor intended for sports and fitness applications.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.LocationAndNavigation">
            <summary>Location Navigation UUID (service). The service exposes location and navigation-related data from a Location and Navigation sensor intended for outdoor activity applications.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.EnvironmentalSensing">
            <summary>Environmental sensor UUID (service). The service exposes data from an environmental sensor for sports and fitness applications.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.BodyComposition">
            <summary>Body composition UUID (service). The service exposes data about the body composition intended for consumer healthcare applications.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.UserData">
            <summary>User Data UUID (service). The User Data service provides user-related data such as name, gender or weight in sports and fitness environments.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.WeightScale">
            <summary>Weight Scale UUID (service). The Weight Scale service exposes weight-related data from a scale for consumer healthcare, sports and fitness applications.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.BondManagement">
            <summary>Bond Management UUID (service). The Bond Management service enables user to manage the storage of bond information on Bluetooth devices.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.ServiceClassUuid.ContinuousGlucoseMonitoring">
            <summary>Continuous Glucose Monitoring UUID (service). The Continuous Glucose Monitoring service exposes glucose data from a monitoring sensor for use in healthcare applications.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothUuid.CharacteristicType">
            <summary>
            <para>This enum is a convienience type for Bluetooth low energy service characteristics class UUIDs. Values of this type will be implicitly converted into a QBluetoothUuid when necessary. The detailed type descriptions can be found on bluetooth.org.</para>
            <para>This enum was introduced or modified in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.DeviceName">
            <summary>The Device Name characteristic contains the name of the device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.Appearance">
            <summary>The external appearance of this device. The values are composed of a category (10-bits) and sub-categories (6-bits).</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.ReconnectionAddress">
            <summary>The Information included in this page is informative. The normative descriptions are contained in the applicable specification.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.AlertLevel">
            <summary>The level of an alert a device is to sound. If this level is changed while the alert is being sounded, the new level should take effect.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.TxPowerLevel">
            <summary>The value of the characteristic is a signed 8 bit integer that has a fixed point exponent of 0.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.DateTime">
            <summary>The Date Time characteristic is used to represent time.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.DayOfWeek">
            <summary>The Day of Week characteristic describes the day of the week (Monday - Sunday).</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.DayDateTime">
            <summary>The Day Date Time characteristic presents the date, time and day of the week.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.ExactTime256">
            <summary>The Exact Time 256 characteristic describes the data, day and time with an accuracy of 1/256th of a second.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.DSTOffset">
            <summary>The DST Offset characteristic describes the offset employed by daylight-saving time.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.GlucoseMeasurement">
            <summary>The Glucose Measurement characteristic is a variable length structure containing a Flags field, a Sequence Number field, a Base Time field and, based upon the contents of the Flags field, may contain a Time Offset field, Glucose Concentration field, Type-Sample Location field and a Sensor Status Annunciation field.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.BatteryLevel">
            <summary>The current charge level of a battery. 100% represents fully charged while 0% represents fully discharged.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.TemperatureMeasurement">
            <summary>The Temperature Measurement characteristic is a variable length structure containing a Flags field, a Temperature Measurement Value field and, based upon the contents of the Flags field, optionally a Time Stamp field and/or a Temperature Type field.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.TemperatureType">
            <summary>The Temperature Type characteristic is an enumeration that indicates where the temperature was measured.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.IntermediateTemperature">
            <summary>The Intermediate Temperature characteristic has the same format as the Temperature Measurement characteristic.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.MeasurementInterval">
            <summary>The Measurement Interval characteristic defines the time between measurements.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.BootKeyboardInputReport">
            <summary>The Boot Keyboard Input Report characteristic is used to transfer fixed format and length Input Report data between a HID Host operating in Boot Protocol Mode and a HID Service corresponding to a boot keyboard.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.SystemID">
            <summary>If the system ID is based of a Bluetooth Device Address with a Company Identifier (OUI) is 0x123456 and the Company Assigned Identifier is 0x9ABCDE, then the System Identifier is required to be 0x123456FFFE9ABCDE.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.ModelNumberString">
            <summary>The value of this characteristic is a UTF-8 string representing the model number assigned by the device vendor.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.SerialNumberString">
            <summary>The value of this characteristic is a variable-length UTF-8 string representing the serial number for a particular instance of the device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.FirmwareRevisionString">
            <summary>The value of this characteristic is a UTF-8 string representing the firmware revision for the firmware within the device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.HardwareRevisionString">
            <summary>The value of this characteristic is a UTF-8 string representing the hardware revision for the hardware within the device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.SoftwareRevisionString">
            <summary>The value of this characteristic is a UTF-8 string representing the software revision for the software within the device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.ManufacturerNameString">
            <summary>The value of this characteristic is a UTF-8 string representing the name of the manufacturer of the device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.IEEE1107320601RegulatoryCertificationDataList">
            <summary>The value of the characteristic is an opaque structure listing various regulatory and/or certification compliance items to which the device claims adherence.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.CurrentTime">
            <summary>The Current Time characteristic shows the same information as the ExactTime256 characteristic and information on timezone, DST and the method of update employed.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.MagneticDeclination">
            <summary>The characteristic contains the angle on the horizontal plane between the direction of the (Geographic) True North and the Magnetic North, measured clockwise from True North to Magnetic North.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.ScanRefresh">
            <summary>The Scan Refresh characteristic is used to notify the Client that the Server requires the Scan Interval Window characteristic to be written with the latest values upon notification.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.BootKeyboardOutputReport">
            <summary>The Boot Keyboard Output Report characteristic is used to transfer fixed format and length Output Report data between a HID Host operating in Boot Protocol Mode and a HID Service corresponding to a boot keyboard.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.BootMouseInputReport">
            <summary>The Boot Mouse Input Report characteristic is used to transfer fixed format and length Input Report data between a HID Host operating in Boot Protocol Mode and a HID Service corresponding to a boot mouse.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.BloodPressureMeasurement">
            <summary>The Blood Pressure Measurement characteristic is a variable length structure containing a Flags field, a Blood Pressure Measurement Compound Value field, and contains additional fields such as Time Stamp, Pulse Rate and User ID as determined by the contents of the Flags field.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.IntermediateCuffPressure">
            <summary>This characteristic has the same format as the Blood Pressure Measurement characteristic.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.BodySensorLocation">
            <summary>The Body Sensor Location characteristic describes the location of a sensor on the body (e.g.: chest, finger or hand).</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.AlertStatus">
            <summary>The Alert Status characteristic defines the Status of alert.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.RingerControlPoint">
            <summary>The Ringer Control Point characteristic defines the Control Point of Ringer.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.RingerSetting">
            <summary>The Ringer Setting characteristic defines the Setting of the Ringer.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.AlertCategoryIDBitMask">
            <summary>Categories of alerts/messages.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.AlertCategoryID">
            <summary>Categories of alerts/messages.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.AlertNotificationControlPoint">
            <summary>Control point of the Alert Notification server. Client can write the command here to request the several functions toward the server.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.UnreadAlertStatus">
            <summary>This characteristic shows how many numbers of unread alerts exist in the specific category in the device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.NewAlert">
            <summary>This characteristic defines the category of the alert and how many new alerts of that category have occurred in the server device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.SupportedNewAlertCategory">
            <summary>Category that the server supports for new alert.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.SupportedUnreadAlertCategory">
            <summary>Category that the server supports for unread alert.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.BloodPressureFeature">
            <summary>The Blood Pressure Feature characteristic is used to describe the supported features of the Blood Pressure Sensor.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.HIDInformation">
            <summary>The HID Information Characteristic returns the HID attributes when read.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.ReportMap">
            <summary>Only a single instance of this characteristic exists as part of a HID Service.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.HIDControlPoint">
            <summary>The HID Control Point characteristic is a control-point attribute that defines the HID Commands when written.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.Report">
            <summary>The Report characteristic is used to exchange data between a HID Device and a HID Host.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.ProtocolMode">
            <summary>The Protocol Mode characteristic is used to expose the current protocol mode of the HID Service with which it is associated, or to set the desired protocol mode of the HID Service.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.ScanIntervalWindow">
            <summary>The Scan Interval Window characteristic is used to store the scan parameters of the GATT Client.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.PnPID">
            <summary>The PnP_ID characteristic returns its value when read using the GATT Characteristic Value Read procedure.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.GlucoseFeature">
            <summary>The Glucose Feature characteristic is used to describe the supported features of the Server. When read, the Glucose Feature characteristic returns a value that is used by a Client to determine the supported features of the Server.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.RecordAccessControlPoint">
            <summary>This control point is used with a service to provide basic management functionality for the Glucose Sensor patient record database.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.RSCMeasurement">
            <summary>RSC refers to Running Speed and Cadence.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.RSCFeature">
            <summary>The RSC (Running Speed and Cadence) Feature characteristic is used to describe the supported features of the Server.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.SCControlPoint">
            <summary>The SC Control Point characteristic is used to request a specific function to be executed on the receiving device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.CSCMeasurement">
            <summary>The CSC Measurement characteristic (CSC refers to Cycling Speed and Cadence) is a variable length structure containing a Flags field and, based on the contents of the Flags field, may contain one or more additional fields as shown in the tables below.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.CSCFeature">
            <summary>The CSC (Cycling Speed and Cadence) Feature characteristic is used to describe the supported features of the Server.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.SensorLocation">
            <summary>The Sensor Location characteristic is used to expose the location of the sensor.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.CyclingPowerMeasurement">
            <summary>The Cycling Power Measurement characteristic is a variable length structure containing a Flags field, an Instantaneous Power field and, based on the contents of the Flags field, may contain one or more additional fields as shown in the table below.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.CyclingPowerVector">
            <summary>The Cycling Power Vector characteristic is a variable length structure containing a Flags fieldand based on the contents of the Flags field, may contain one or more additional fields as shown in the table below.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.CyclingPowerFeature">
            <summary>The CP Feature characteristic is used to report a list of features supported by the device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.CyclingPowerControlPoint">
            <summary>The Cycling Power Control Point characteristic is used to request a specific function to be executed on the receiving device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.LocationAndSpeed">
            <summary>The Location and Speed characteristic is a variable length structure containing a Flags field and, based on the contents of the Flags field, may contain a combination of data fields.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.Navigation">
            <summary>The Navigation characteristic is a variable length structure containing a Flags field, a Bearing field, a Heading field and, based on the contents of the Flags field.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.PositionQuality">
            <summary>The Position Quality characteristic is a variable length structure containing a Flags field and at least one of the optional data.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.LNFeature">
            <summary>The LN Feature characteristic is used to report a list of features supported by the device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.LNControlPoint">
            <summary>The LN Control Point characteristic is used to request a specific function to be executed on the receiving device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.Elevation">
            <summary>The Elevation characteristic states the elevation above/below sea level.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.Pressure">
            <summary>The Pressure characteristic states the value of a pressure sensor.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.Temperature">
            <summary>The value of this characteristic states the temperature in degree Celsius.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.Humidity">
            <summary>The characteristic states the humidity in percent.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.TrueWindSpeed">
            <summary>The characteristic states the wind speed in meters per seconds.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.TrueWindDirection">
            <summary>The characteristic states the direction of the wind with an angle measured clockwise relative to (Geographic) True North. A wind coming from the east is given as 90 degrees.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.ApparentWindSpeed">
            <summary>The characteristic exposes the apparent wind speed in meters per second. The apparent wind is experienced by an observer in motion.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.ApparentWindDirection">
            <summary>The characteristic exposes the apparent wind direction. The apparent wind is experienced by an observer in motion. This characteristic states the direction of the wind with an angle measured clockwise relative to the observers heading.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.GustFactor">
            <summary>The characteristic states a factor of wind speed increase between average wind speed in maximum gust speed.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.PollenConcentration">
            <summary>The characteristic exposes the pollen concentration count per cubic meter.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.UVIndex">
            <summary>This characteristic exposes the UV index.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.Irradiance">
            <summary>This characteristic states the power of electromagnetic radiation in watt per square meter.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.Rainfall">
            <summary>This characteristic exposes the rainfall in meters.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.WindChill">
            <summary>This characteristic states the wind chill in degree Celsius</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.HeatIndex">
            <summary>This characteristic provides a heat index in degree Celsius.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.DewPoint">
            <summary>This characteristic states the dew point in degree Celsius.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.DescriptorValueChanged">
            <summary>This characteristic is related to the Environmental Sensing Service.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.AerobicHeartRateLowerLimit">
            <summary>The lower limit of the heart rate where the user improves his endurance while exercising.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.AerobicThreshold">
            <summary>This characteristic states the first metabolic threshold.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.Age">
            <summary>This characteristic states the age of the user.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.AnaerobicHeartRateLowerLimit">
            <summary>The lower limit of the heart rate where the user enhances his anaerobic tolerance while exercising.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.AnaerobicHeartRateUpperLimit">
            <summary>The upper limit of the heart rate where the user enhances his anaerobic tolerance while exercising.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.AnaerobicThreshold">
            <summary>This characteristic states the second metabolic threshold.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.AerobicHeartRateUpperLimit">
            <summary>The upper limit of the heart rate where the user improves his endurance while exercising.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.DateOfBirth">
            <summary>This characteristic states the user's date of birth.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.EmailAddress">
            <summary>This characteristic states the email of the user.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.FatBurnHeartRateLowerLimit">
            <summary>The lower limit of the heart rate where the user maximizes the fat burn while exercising.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.FatBurnHeartRateUpperLimit">
            <summary>The upper limit of the heart rate where the user maximizes the fat burn while exercising.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.FirstName">
            <summary>This characteristic exposes the user's first name.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.FiveZoneHeartRateLimits">
            <summary>This characteristic contains the limits between the heart rate zones for the 5-zone heart rate definition.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.Gender">
            <summary>This characteristic states the user's gender.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.HeartRateMax">
            <summary>This characteristic states the maximum heart rate a user can reach in beats per minute.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.Height">
            <summary>This characteristic states the user's height.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.HipCircumference">
            <summary>This characteristic states the user's hip circumference in meters.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.LastName">
            <summary>This characteristic states the user's last name.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.MaximumRecommendedHeartRate">
            <summary>This characteristic exposes the maximum recommended heart rate that limits exertion.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.RestingHeartRate">
            <summary>This characteristic exposes the lowest heart rate a user can reach.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.SportTypeForAerobicAnaerobicThresholds">
            <summary>This characteristic is used to preset the various Aerobic and Anaerobic threshold characteristics based on the to-be-performed sport type.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.ThreeZoneHeartRateLimits">
            <summary>This characteristic contains the limits between the heart rate zones for the 3-zone heart rate definition.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.TwoZoneHeartRateLimits">
            <summary>This characteristic contains the limits between the heart rate zones for the 2-zone heart rate definition.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.VO2Max">
            <summary>This characteristic exposes the maximum Oxygen uptake of a user.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.WaistCircumference">
            <summary>This characteristic states the user's waist circumference in meters.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.Weight">
            <summary>This characteristic exposes the user's weight in kilograms.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.UserIndex">
            <summary>This characteristic states the index of the user.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.BodyCompositionFeature">
            <summary>This characteristic describes the available features in the BodyCompositionMeasurement characteristic.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.BodyCompositionMeasurement">
            <summary>This characteristic describes the body composition such as muscle percentage or the body water mass.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.WeightMeasurement">
            <summary>This characteristic provides weight related data such as BMI or the user's weight.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.WeightScaleFeature">
            <summary>This characteristic describes the available data in the WeightMeasurement characteristic.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.MagneticFluxDensity2D">
            <summary>This characteristic states the magnetic flux density on an x and y axis.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.MagneticFluxDensity3D">
            <summary>This characteristic states the magnetic flux density on an x, y and z axis.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.Language">
            <summary>This characteristic contains the language definition based on ISO639-1.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.CharacteristicType.BarometricPressureTrend">
            <summary>This characteristic exposes the trend the barometric pressure is taking.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothUuid.DescriptorType">
            <summary>
            <para>Descriptors are attributes that describe Bluetooth Low Energy characteristic values.</para>
            <para>This enum is a convienience type for descriptor class UUIDs. Values of this type will be implicitly converted into a QBluetoothUuid when necessary. The detailed type specifications can be found on bluetooth.org.</para>
            <para>This enum was introduced or modified in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.DescriptorType.UnknownDescriptorType">
            <summary>The descriptor type is unknown.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.DescriptorType.CharacteristicExtendedProperties">
            <summary>Descriptor defines additional Characteristic Properties. The existence of this descriptor is indicated by the QLowEnergyCharacteristic::ExtendedProperty flag.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.DescriptorType.CharacteristicUserDescription">
            <summary>Descriptor provides a textual user description for a characteristic value.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.DescriptorType.ClientCharacteristicConfiguration">
            <summary>Descriptor defines how the characteristic may be configured by a specific client.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.DescriptorType.ServerCharacteristicConfiguration">
            <summary>Descriptor defines how the characteristic descriptor is associated with may be configured for the server.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.DescriptorType.CharacteristicPresentationFormat">
            <summary>Descriptor defines the format of the Characteristic Value.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.DescriptorType.CharacteristicAggregateFormat">
            <summary>Descriptor defines the format of an aggregated Characteristic Value.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.DescriptorType.ValidRange">
            <summary>descriptor is used for defining the range of a characteristics. Two mandatory fields are contained (upper and lower bounds) which define the range.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.DescriptorType.ExternalReportReference">
            <summary>Allows a HID Host to map information from the Report Map characteristic value for Input Report, Output Report or Feature Report data to the Characteristic UUID of external service characteristics used to transfer the associated data.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.DescriptorType.ReportReference">
            <summary>Mapping information in the form of a Report ID and Report Type which maps the current parent characteristic to the Report ID(s) and Report Type (s) defined within the Report Map characteristic.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.DescriptorType.EnvironmentalSensingConfiguration">
            <summary>Descriptor defines how multiple trigger settings descriptors are combined. Therefore this descriptor works together with the EnvironmentalSensingTriggerSetting descriptor to define the conditions under which the associated characteristic value can be notified.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.DescriptorType.EnvironmentalSensingMeasurement">
            <summary>Descriptor defines the additional information for the environmental sensing server such as the intended application, sampling functions or measurement period and uncertainty.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothUuid.DescriptorType.EnvironmentalSensingTriggerSetting">
            <summary>Descriptor defines under which conditions an environmental sensing server (ESS) should trigger notifications. Examples of such conditions are certain thresholds being reached or timers having expired. This implies that the ESS characteristic supports notifications.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothServiceInfo">
            <summary>
            <para>The QBluetoothServiceInfo class enables access to the attributes of a Bluetooth service.</para>
            </summary>
            <remarks>
            <para>QBluetoothServiceInfo provides information about a service offered by a Bluetooth device. In addition it can be used to register new services on the local device. Note that such a registration only affects the Bluetooth SDP entries. Any server listening for incoming connections (e.g an RFCOMM server) must be started before registerService() is called. Deregistration must happen in the reverse order.</para>
            <para>QBluetoothServiceInfo is not a value type in the traditional sense. All copies of the same service info object share the same data as they do not detach upon changing them. This ensures that two copies can (de)register the same Bluetooth service.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceInfo.#ctor">
            <summary>
            <para>Construct a new invalid QBluetoothServiceInfo;</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceInfo.#ctor(QtBluetooth.QBluetoothServiceInfo)">
            <summary>
            <para>Construct a new QBluetoothServiceInfo that is a copy of other.</para>
            <para>The two copies continue to share the same underlying data which does not detach upon write.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceInfo.SetAttribute(System.UInt16,QtBluetooth.QBluetoothUuid)">
            <summary>
            <para>This is a convenience function.</para>
            <para>Sets the attribute identified by attributeId to value.</para>
            <para>If the service information is already registered with the platform's SDP database, the database entry will not be updated until registerService() was called again.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceInfo.SetAttribute(System.UInt16,QtBluetooth.QBluetoothServiceInfo.Sequence)">
            <summary>
            <para>This is a convenience function.</para>
            <para>Sets the attribute identified by attributeId to value.</para>
            <para>If the service information is already registered with the platform's SDP database, the database entry will not be updated until registerService() was called again.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceInfo.SetAttribute(System.UInt16,QtBluetooth.QBluetoothServiceInfo.Alternative)">
            <summary>
            <para>This is a convenience function.</para>
            <para>Sets the attribute identified by attributeId to value.</para>
            <para>If the service information is already registered with the platform's SDP database, the database entry will not be updated until registerService() was called again.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceInfo.Attribute(System.UInt16)">
            <summary>
            <para>Returns the value of the attribute attributeId.</para>
            <para>See also setAttribute().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceInfo.Contains(System.UInt16)">
            <summary>
            <para>Returns true if the QBluetoothServiceInfo object contains the attribute attributeId, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceInfo.RemoveAttribute(System.UInt16)">
            <summary>
            <para>Removes the attribute attributeId from the QBluetoothServiceInfo object.</para>
            <para>If the service information is already registered with the platforms SDP database, the database entry will not be updated until registerService() was called again.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServiceInfo.Device">
            <summary>
            <para>Returns the address of the Bluetooth device that provides this service.</para>
            <para>See also setDevice().</para>
            <para></para>
            <para>Sets the Bluetooth device that provides this service to device.</para>
            <para>See also device().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServiceInfo.ServiceName">
            <summary>
            <para>This is a convenience function. It is equivalent to calling attribute(QBluetoothServiceInfo::ServiceName).toString().</para>
            <para>Returns the service name in the primary language.</para>
            <para>See also setServiceName() and attribute().</para>
            <para></para>
            <para>This is a convenience function. It is equivalent to calling setAttribute(QBluetoothServiceInfo::ServiceName, name).</para>
            <para>Sets the service name in the primary language to name.</para>
            <para>See also serviceName() and setAttribute().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServiceInfo.ServiceDescription">
            <summary>
            <para>This is a convenience function. It is equivalent to calling attribute(QBluetoothServiceInfo::ServiceDescription).toString().</para>
            <para>Returns the service description in the primary language.</para>
            <para>See also setServiceDescription() and attribute().</para>
            <para></para>
            <para>This is a convenience function. It is equivalent to calling setAttribute(QBluetoothServiceInfo::ServiceDescription, description).</para>
            <para>Sets the service description in the primary language to description.</para>
            <para>See also serviceDescription() and setAttribute().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServiceInfo.ServiceProvider">
            <summary>
            <para>This is a convenience function. It is equivalent to calling attribute(QBluetoothServiceInfo::ServiceProvider).toString().</para>
            <para>Returns the service provider in the primary language.</para>
            <para>See also setServiceProvider() and attribute().</para>
            <para></para>
            <para>This is a convenience function. It is equivalent to calling setAttribute(QBluetoothServiceInfo::ServiceProvider, provider).</para>
            <para>Sets the service provider in the primary language to provider.</para>
            <para>See also serviceProvider() and setAttribute().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServiceInfo.ServiceAvailability">
            <summary>
            <para>This is a convenience function. It is equivalent to calling attribute(QBluetoothServiceInfo::ServiceAvailability).toUInt().</para>
            <para>Returns the availability of the service.</para>
            <para>See also setServiceAvailability() and attribute().</para>
            <para></para>
            <para>This is a convenience function. It is equivalent to calling setAttribute(QBluetoothServiceInfo::ServiceAvailability, availability).</para>
            <para>Sets the availabiltiy of the service to availability.</para>
            <para>See also serviceAvailability() and setAttribute().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServiceInfo.ServiceUuid">
            <summary>
            <para>This is a convenience function. It is equivalent to calling attribute(QBluetoothServiceInfo::ServiceId).value&lt;QBluetoothUuid&gt;().</para>
            <para>Returns the custom UUID of the service. This UUID may be null. UUIDs based on Bluetooth SIG standards should be retrieved via serviceClassUuids().</para>
            <para>See also setServiceUuid() and attribute().</para>
            <para></para>
            <para>This is a convenience function. It is equivalent to calling setAttribute(QBluetoothServiceInfo::ServiceId, uuid).</para>
            <para>Sets the custom service UUID to uuid. This function should not be used to set a standardized service UUID.</para>
            <para>See also serviceUuid() and setAttribute().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServiceInfo.IsValid">
            <summary>
            <para>Returns true if the QBluetoothServiceInfo object is valid, otherwise returns false.</para>
            <para>An invalid QBluetoothServiceInfo object will have no attributes.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServiceInfo.IsComplete">
            <summary>
            <para>Returns true if the QBluetoothServiceInfo object is considered complete, otherwise returns false.</para>
            <para>A complete QBluetoothServiceInfo object contains a ProtocolDescriptorList attribute.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServiceInfo.SocketProtocol">
            <summary>
            <para>Returns the protocol that the QBluetoothServiceInfo object uses.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServiceInfo.ProtocolServiceMultiplexer">
            <summary>
            <para>This is a convenience function. Returns the protocol/service multiplexer for services which support the L2CAP protocol, otherwise returns -1.</para>
            <para>This function is equivalent to extracting the information from QBluetoothServiceInfo::Sequence returned by QBluetoothServiceInfo::attribute(QBluetoothServiceInfo::ProtocolDescriptorList).</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothServiceInfo.AttributeId">
            <summary>
            <para>Bluetooth service attributes. Please check the Bluetooth Core Specification for a more detailed description of these attributes.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.ServiceRecordHandle">
            <summary>Specifies a service record from which attributes can be retrieved.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.ServiceClassIds">
            <summary>UUIDs of service classes that the service conforms to. The most common service classes are defined in (QBluetoothUuid::ServiceClassUuid)</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.ServiceRecordState">
            <summary>Attibute changes when any other service attribute is added, deleted or modified.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.ServiceId">
            <summary>UUID that uniquely identifies the service.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.ProtocolDescriptorList">
            <summary>List of protocols used by the service. The most common protocol Uuids are defined in QBluetoothUuid::ProtocolUuid</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.BrowseGroupList">
            <summary>List of browse groups the service is in.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.LanguageBaseAttributeIdList">
            <summary>List of language base attribute IDs to support human-readable attributes.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.ServiceInfoTimeToLive">
            <summary>Number of seconds for which the service record is expected to remain valid and unchanged.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.ServiceAvailability">
            <summary>Value indicating the availability of the service.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.BluetoothProfileDescriptorList">
            <summary>List of profiles to which the service conforms.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.DocumentationUrl">
            <summary>URL that points to the documentation on the service..</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.ClientExecutableUrl">
            <summary>URL that refers to the location of an application that can be used to utilize the service.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.IconUrl">
            <summary>URL to the location of the icon representing the service.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.AdditionalProtocolDescriptorList">
            <summary>Additional protocols used by the service. This attribute extends ProtocolDescriptorList.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.PrimaryLanguageBase">
            <summary>Base index for primary language text descriptors.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.ServiceName">
            <summary>Name of the Bluetooth service in the primary language.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.ServiceDescription">
            <summary>Description of the Bluetooth service in the primary language.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.AttributeId.ServiceProvider">
            <summary>Name of the company / entity that provides the Bluetooth service primary language.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothServiceInfo.Protocol">
            <summary>
            <para>This enum describes the socket protocol used by the service.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.Protocol.UnknownProtocol">
            <summary>The service uses an unknown socket protocol.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.Protocol.L2capProtocol">
            <summary>The service uses the L2CAP socket protocol. This protocol is not supported for direct socket connections on Android.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceInfo.Protocol.RfcommProtocol">
            <summary>The service uses the RFCOMM socket protocol.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothServiceInfo.Sequence">
            <summary>
            <para>The Sequence class stores attributes of a Bluetooth Data Element Sequence.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceInfo.Sequence.#ctor">
            <summary>
            <para>Constructs a new empty sequence.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceInfo.Sequence.#ctor(QtBluetooth.QBluetoothServiceInfo.Sequence)">
            <summary>
            <para>Constructs a new sequence that is a copy of list.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothServiceInfo.Alternative">
            <summary>
            <para>The Alternative class stores attributes of a Bluetooth Data Element Alternative.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceInfo.Alternative.#ctor">
            <summary>
            <para>Constructs a new empty alternative.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceInfo.Alternative.#ctor(QtBluetooth.QBluetoothServiceInfo.Alternative)">
            <summary>
            <para>Constructs a new alternative that is a copy of list.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothSocket">
            <summary>
            <para>The QBluetoothSocket class enables connection to a Bluetooth device running a bluetooth server.</para>
            </summary>
            <remarks>
            <para>QBluetoothSocket supports two socket types, L2CAP and RFCOMM.</para>
            <para>L2CAP is a low level datagram-oriented Bluetooth socket. Android does not support L2CAP for socket connections.</para>
            <para>RFCOMM is a reliable, stream-oriented socket. RFCOMM sockets emulate an RS-232 serial port.</para>
            <para>To create a connection to a Bluetooth service, create a socket of the appropriate type and call connectToService() passing the Bluetooth address and port number. QBluetoothSocket will emit the connected() signal when the connection is established.</para>
            <para>If the Protocol is not supported on a platform, calling connectToService() will emit a UnsupportedProtocolError error.</para>
            <para>Note: QBluetoothSocket does not support synchronous read and write operations. Functions such as waitForReadyRead() and waitForBytesWritten() are not implemented. I/O operations should be performed using readyRead(), read() and write().</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QBluetoothSocket.#ctor(QtBluetooth.QBluetoothServiceInfo.Protocol,QtCore.QObject)">
            <summary>
            <para>Constructs a Bluetooth socket of socketType type, with parent.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothSocket.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a Bluetooth socket with parent.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothSocket.CanReadLine">
            <summary>
            <para>Reimplemented from QIODevice::canReadLine().</para>
            <para>Returns true if you can read at least one line from the device</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothSocket.ConnectToService(QtBluetooth.QBluetoothServiceInfo,QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Attempts to connect to the service described by service.</para>
            <para>The socket is opened in the given openMode. The socketType() may change depending on the protocol required by service.</para>
            <para>The socket first enters ConnectingState and attempts to connect to the device providing service. If a connection is established, QBluetoothSocket enters ConnectedState and emits connected().</para>
            <para>At any point, the socket can emit error() to signal that an error occurred.</para>
            <para>Note that most platforms require a pairing prior to connecting to the remote device. Otherwise the connection process may fail.</para>
            <para>See also state() and disconnectFromService().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothSocket.DisconnectFromService">
            <summary>
            <para>Attempts to close the socket. If there is pending data waiting to be written QBluetoothSocket will enter ClosingState and wait until all data has been written. Eventually, it will enter UnconnectedState and emit the disconnected() signal.</para>
            <para>See also connectToService().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothSocket.SetSocketDescriptor(System.Int32,QtBluetooth.QBluetoothServiceInfo.Protocol,QtBluetooth.QBluetoothSocket.SocketState,QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Set the socket to use socketDescriptor with a type of socketType, which is in state, socketState, and mode, openMode.</para>
            <para>Returns true on success</para>
            <para>See also socketDescriptor().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothSocket.SetSocketState(QtBluetooth.QBluetoothSocket.SocketState)">
            <summary>
            <para>Sets the socket state to state.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothSocket.SetSocketError(QtBluetooth.QBluetoothSocket.SocketError)">
            <summary>
            <para>Sets the type of error that last occurred to error_.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothSocket.DoDeviceDiscovery(QtBluetooth.QBluetoothServiceInfo,QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Start device discovery for service and open the socket with openMode. If the socket is created with a service uuid device address, use service discovery to find the port number to connect to.</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothSocket.Connected">
            <summary>
            <para>This signal is emitted when a connection is established.</para>
            <para>See also QBluetoothSocket::ConnectedState and stateChanged().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothSocket.Disconnected">
            <summary>
            <para>This signal is emitted when the socket is disconnected.</para>
            <para>See also QBluetoothSocket::UnconnectedState and stateChanged().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothSocket.ErrorError">
            <summary>
            <para>This signal is emitted when an error occurs.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(bluetoothSocket, static_cast&lt;void(QBluetoothSocket::*)(QBluetoothSocket::SocketError)&gt;(&amp;QBluetoothSocket::error),</para>
            <para>      [=](QBluetoothSocket::SocketError error){ /* ... */ });</para>
            <para></para>
            <para></para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothSocket.StateChanged">
            <summary>
            <para>This signal is emitted when the socket state changes to state.</para>
            <para>See also connected(), disconnected(), state(), and QBluetoothSocket::SocketState.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothSocket.PreferredSecurityFlags">
            <summary>
            <para>Returns the security parameters used for the initial connection attempt.</para>
            <para>The security parameters may be renegotiated between the two parties during or after the connection has been established. If such a change happens it is not reflected in the value of this flag.</para>
            <para>On OS X, this flag is always set to QBluetooth::Secure.</para>
            <para>This function was introduced in  Qt 5.6.</para>
            <para>See also setPreferredSecurityFlags().</para>
            <para></para>
            <para>Sets the preferred security parameter for the connection attempt to flags. This value is incorporated when calling connectToService(). Therefore it is required to reconnect to change this parameter for an existing connection.</para>
            <para>On Bluez this property is set to QBluetooth::Authorization by default.</para>
            <para>On OS X, this value is ignored as the platform does not permit access to the security parameter of the socket. By default the platform prefers secure/encrypted connections though and therefore this function always returns QBluetooth::Secure.</para>
            <para>Android only supports two levels of security (secure and non-secure). If this flag is set to QBluetooth::NoSecurity the socket object will not employ any authentication or encryption. Any other security flag combination will trigger a secure Bluetooth connection. This flag is set to QBluetooth::Secure by default.</para>
            <para>Note: A secure connection requires a pairing between the two devices. On some platforms, the pairing is automatically initiated during the establishment of the connection. Other platforms require the application to manually trigger the pairing before attempting to connect.</para>
            <para>This function was introduced in  Qt 5.6.</para>
            <para>See also preferredSecurityFlags().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothSocket.IsSequential">
            <summary>
            <para>Reimplemented from QIODevice::isSequential().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothSocket.BytesToWrite">
            <summary>
            <para>Reimplemented from QIODevice::bytesToWrite().</para>
            <para>Returns the number of bytes that are waiting to be written. The bytes are written when control goes back to the event loop.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothSocket.LocalName">
            <summary>
            <para>Returns the name of the local device.</para>
            <para>Although some platforms may differ the socket must generally be connected to guarantee the return of a valid name. In particular, this is true when dealing with platforms that support multiple local Bluetooth adapters.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothSocket.LocalAddress">
            <summary>
            <para>Returns the address of the local device.</para>
            <para>Although some platforms may differ the socket must generally be connected to guarantee the return of a valid address. In particular, this is true when dealing with platforms that support multiple local Bluetooth adapters.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothSocket.LocalPort">
            <summary>
            <para>Returns the port number of the local socket if available, otherwise returns 0. Although some platforms may differ the socket must generally be connected to guarantee the return of a valid port number.</para>
            <para>On Android and OS X, this feature is not supported and returns 0.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothSocket.SocketDescriptor">
            <summary>
            <para>Returns the platform-specific socket descriptor, if available. This function returns -1 if the descriptor is not available or an error has occurred.</para>
            <para>See also setSocketDescriptor().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothSocket.SocketType">
            <summary>
            <para>Returns the socket type. The socket automatically adjusts to the protocol offered by the remote service.</para>
            <para>Android only support RFCOMM based sockets.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothSocket.State">
            <summary>
            <para>Returns the current state of the socket.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothSocket.Error">
            <summary>
            <para>Returns the last error.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothSocket.ErrorString">
            <summary>
            <para>Returns a user displayable text string for the error.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothSocket.SocketState">
            <summary>
            <para>This enum describes the state of the Bluetooth socket.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothSocket.SocketState.UnconnectedState">
            <summary>Socket is not connected.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothSocket.SocketState.ServiceLookupState">
            <summary>Socket is querying connection parameters.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothSocket.SocketState.ConnectingState">
            <summary>Socket is attempting to connect to a device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothSocket.SocketState.ConnectedState">
            <summary>Socket is connected to a device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothSocket.SocketState.BoundState">
            <summary>Socket is bound to a local address and port.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothSocket.SocketState.ClosingState">
            <summary>Socket is connected and will be closed once all pending data is written to the socket.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothSocket.SocketState.ListeningState">
            <summary>Socket is listening for incoming connections.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothSocket.SocketError">
            <summary>
            <para>This enum describes Bluetooth socket error types.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothSocket.SocketError.NoSocketError">
            <summary>No error. Used for testing.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothSocket.SocketError.UnknownSocketError">
            <summary>An unknown error has occurred.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothSocket.SocketError.HostNotFoundError">
            <summary>Could not find the remote host.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothSocket.SocketError.ServiceNotFoundError">
            <summary>Could not find the service UUID on remote host.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothSocket.SocketError.NetworkError">
            <summary>Attempt to read or write from socket returned an error</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothSocket.SocketError.UnsupportedProtocolError">
            <summary>The Protocol is not supported on this platform.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothSocket.SocketError.OperationError">
            <summary>An operation was attempted while the socket was in a state that did not permit it.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothServer">
            <summary>
            <para>The QBluetoothServer class uses the RFCOMM or L2cap protocol to communicate with a Bluetooth device.</para>
            </summary>
            <remarks>
            <para>QBluetoothServer is used to implement Bluetooth services over RFCOMM or L2cap.</para>
            <para>Start listening for incoming connections with listen(). Wait till the newConnection() signal is emitted when a new connection is established, and call nextPendingConnection() to get a QBluetoothSocket for the new connection.</para>
            <para>To enable other devices to find your service, create a QBluetoothServiceInfo with the applicable attributes for your service and register it using QBluetoothServiceInfo::registerService(). Call serverPort() to get the channel number that is being used.</para>
            <para>If the QBluetoothServiceInfo::Protocol is not supported by a platform, listen() will return false.</para>
            <para></para>
            <para>See also QBluetoothServiceInfo and QBluetoothSocket.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QBluetoothServer.#ctor(QtBluetooth.QBluetoothServiceInfo.Protocol,QtCore.QObject)">
            <summary>
            <para>Constructs a bluetooth server with parent and serverType.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServer.Close">
            <summary>
            <para>Closes and resets the listening socket. Any already established QBluetoothSocket continues to operate and must be separately closed.</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothServer.NewConnection">
            <summary>
            <para>This signal is emitted when a new connection is available.</para>
            <para>The connected slot should call nextPendingConnection() to get a QBluetoothSocket object to send and receive data over the connection.</para>
            <para>See also nextPendingConnection() and hasPendingConnections().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothServer.ErrorError">
            <summary>
            <para>This signal is emitted when an error occurs.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(bluetoothServer, static_cast&lt;void(QBluetoothServer::*)(QBluetoothServer::Error)&gt;(&amp;QBluetoothServer::error),</para>
            <para>      [=](QBluetoothServer::Error error){ /* ... */ });</para>
            <para></para>
            <para></para>
            <para>See also error() and QBluetoothServer::Error.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServer.MaxPendingConnections">
            <summary>
            <para>Returns the maximum number of pending connections.</para>
            <para>See also setMaxPendingConnections().</para>
            <para></para>
            <para>Sets the maximum number of pending connections to numConnections. If the number of pending sockets exceeds this limit new sockets will be rejected.</para>
            <para>See also maxPendingConnections().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServer.SecurityFlags">
            <summary>
            <para>Returns the Bluetooth security flags.</para>
            <para>See also setSecurityFlags().</para>
            <para></para>
            <para>Sets the Bluetooth security flags to security. This function must be called before calling listen(). The Bluetooth link will always be encrypted when using Bluetooth 2.1 devices as encryption is mandatory.</para>
            <para>Android only supports two levels of security (secure and non-secure). If this flag is set to QBluetooth::NoSecurity the server object will not employ any authentication or encryption. Any other security flag combination will trigger a secure Bluetooth connection.</para>
            <para>On OS X, security flags are not supported and will be ignored.</para>
            <para>See also securityFlags().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServer.IsListening">
            <summary>
            <para>Returns true if the server is listening for incoming connections, otherwise false.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServer.HasPendingConnections">
            <summary>
            <para>Returns true if a connection is pending, otherwise false.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServer.NextPendingConnection">
            <summary>
            <para>Returns a pointer to the QBluetoothSocket for the next pending connection. It is the callers responsibility to delete the pointer.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServer.ServerAddress">
            <summary>
            <para>Returns the server address.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServer.ServerPort">
            <summary>
            <para>Returns the server port number.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServer.ServerType">
            <summary>
            <para>Returns the type of the QBluetoothServer.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServer.error">
            <summary>
            <para>Returns the last error of the QBluetoothServer.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothServer.Error">
            <summary>
            <para>This enum describes Bluetooth server error types.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServer.Error.NoError">
            <summary>No error.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServer.Error.UnknownError">
            <summary>An unknown error occurred.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServer.Error.PoweredOffError">
            <summary>The Bluetooth adapter is powered off.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServer.Error.InputOutputError">
            <summary>An input output error occurred.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServer.Error.ServiceAlreadyRegisteredError">
            <summary>The service or port was already registered</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServer.Error.UnsupportedProtocolError">
            <summary>The Protocol is not supported on this platform.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothServiceDiscoveryAgent">
            <summary>
            <para>The QBluetoothServiceDiscoveryAgent class enables you to query for Bluetooth services.</para>
            </summary>
            <remarks>
            <para>The discovery process relies on the Bluetooth Service Discovery Process (SDP). The following steps are required to query the services provided by all contactable Bluetooth devices:</para>
            <para></para>
            <para>create an instance of QBluetoothServiceDiscoveryAgent,</para>
            <para>connect to either the serviceDiscovered() or finished() signals,</para>
            <para>and call start().</para>
            <para></para>
            <para></para>
            <para></para>
            <para>  void MyClass::startServiceDiscovery()</para>
            <para>  {</para>
            <para></para>
            <para>      // Create a discovery agent and connect to its signals</para>
            <para>      QBluetoothServiceDiscoveryAgent *discoveryAgent = new QBluetoothServiceDiscoveryAgent(this);</para>
            <para>      connect(discoveryAgent, SIGNAL(serviceDiscovered(QBluetoothServiceInfo)),</para>
            <para>              this, SLOT(serviceDiscovered(QBluetoothServiceInfo)));</para>
            <para></para>
            <para>      // Start a discovery</para>
            <para>      discoveryAgent-&gt;start();</para>
            <para></para>
            <para>      //...</para>
            <para>  }</para>
            <para></para>
            <para>  // In your local slot, read information about the found devices</para>
            <para>  void MyClass::serviceDiscovered(const QBluetoothServiceInfo &amp;service)</para>
            <para>  {</para>
            <para>      qDebug() &lt;&lt; &quot;Found new service:&quot; &lt;&lt; service.serviceName()</para>
            <para>               &lt;&lt; '(' &lt;&lt; service.device().address().toString() &lt;&lt; ')';</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>By default a minimal service discovery is performed. In this mode, the returned QBluetoothServiceInfo objects are guaranteed to contain only device and service UUID information. Depending on platform and device capabilities, other service information may also be available. The minimal service discovery mode relies on cached SDP data of the platform. Therefore it is possible that this discovery does not find a device although it is physically available. In such cases a full discovery must be performed to force an update of the platform cache. However for most use cases a minimal discovery is adequate as it is much quicker and other classes which require up-to-date information such as QBluetoothSocket::connectToService() will perform additional discovery if required. If the full service information is required, pass FullDiscovery as the discoveryMode parameter to start().</para>
            <para>This class may internally utilize QBluetoothDeviceDiscoveryAgent to find unknown devices.</para>
            <para>The service discovery may find Bluetooth Low Energy services too if the target device is a combination of a classic and Low Energy device. Those devices are required to advertise their Low Energy services via SDP. If the target device only supports Bluetooth Low Energy services, it is likely to not advertise them via SDP. The QLowEnergyController class should be utilized to perform the service discovery on Low Energy devices.</para>
            <para></para>
            <para>See also QBluetoothDeviceDiscoveryAgent and QLowEnergyController.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceDiscoveryAgent.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QBluetoothServiceDiscoveryAgent with parent. The search is performed via the local default Bluetooth adapter.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceDiscoveryAgent.#ctor(QtBluetooth.QBluetoothAddress,QtCore.QObject)">
            <summary>
            <para>Constructs a new QBluetoothServiceDiscoveryAgent for deviceAdapter and with parent.</para>
            <para>It uses deviceAdapter for the service search. If deviceAdapter is default constructed the resulting QBluetoothServiceDiscoveryAgent object will use the local default Bluetooth adapter.</para>
            <para>If a deviceAdapter is specified that is not a local adapter error() will be set to InvalidBluetoothAdapterError. Therefore it is recommended to test the error flag immediately after using this constructor.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceDiscoveryAgent.SetUuidFilter(QtBluetooth.QBluetoothUuid)">
            <summary>
            <para>This is an overloaded member function, provided for convenience.</para>
            <para>Sets the UUID filter to a list containing the single element uuid. The matching applies to the service's ServiceId and ServiceClassIds attributes.</para>
            <para>See also uuidFilter().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceDiscoveryAgent.SetRemoteAddress(QtBluetooth.QBluetoothAddress)">
            <summary>
            <para>Sets the remote device address to address. If address is default constructed, services will be discovered on all contactable Bluetooth devices. A new remote address can only be set while there is no service discovery in progress; otherwise this function returns false.</para>
            <para>On some platforms the service discovery might lead to pairing requests. Therefore it is not recommended to do service discoveries on all devices. This function can be used to restrict the service discovery to a particular device.</para>
            <para>See also remoteAddress().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceDiscoveryAgent.Start(QtBluetooth.QBluetoothServiceDiscoveryAgent.DiscoveryMode)">
            <summary>
            <para>Starts service discovery. mode specifies the type of service discovery to perform.</para>
            <para>On some platforms, device discovery may lead to pairing requests.</para>
            <para>See also DiscoveryMode.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceDiscoveryAgent.Stop">
            <summary>
            <para>Stops the service discovery process. The canceled() signal will be emitted once the search has stopped.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothServiceDiscoveryAgent.Clear">
            <summary>
            <para>Clears the results of previous service discoveries and resets uuidFilter(). This function does nothing during an ongoing service discovery (see isActive()).</para>
            <para>See also discoveredServices().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothServiceDiscoveryAgent.ServiceDiscovered">
            <summary>
            <para>This signal is emitted when the Bluetooth service described by info is discovered.</para>
            <para>Note: The passed QBluetoothServiceInfo parameter may contain a Bluetooth Low Energy service if the target device advertises the service via SDP. This is required from device which support both, classic Bluetooth (BaseRate) and Low Energy services.</para>
            <para>See also QBluetoothDeviceInfo::coreConfigurations().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothServiceDiscoveryAgent.Finished">
            <summary>
            <para>This signal is emitted when the Bluetooth service discovery completes.</para>
            <para>Unlike the QBluetoothDeviceDiscoveryAgent::finished() signal this signal will even be emitted when an error occurred during the service discovery. Therefore it is recommended to check the error() signal to evaluate the success of the service discovery discovery.</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothServiceDiscoveryAgent.Canceled">
            <summary>
            <para>This signal is triggered when the service discovery was canceled via a call to stop().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothServiceDiscoveryAgent.ErrorError">
            <summary>
            <para>This signal is emitted when an error occurs. The error parameter describes the error that occurred.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(bluetoothServiceDiscoveryAgent, static_cast&lt;void(QBluetoothServiceDiscoveryAgent::*)(QBluetoothServiceDiscoveryAgent::Error)&gt;(&amp;QBluetoothServiceDiscoveryAgent::error),</para>
            <para>      [=](QBluetoothServiceDiscoveryAgent::Error error){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServiceDiscoveryAgent.IsActive">
            <summary>
            <para>Returns true if the service discovery is currently active; otherwise returns false. An active discovery can be stopped by calling stop().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServiceDiscoveryAgent.error">
            <summary>
            <para>Returns the type of error that last occurred. If the service discovery is done for a single remoteAddress() it will return errors that occurred while trying to discover services on that device. If the remoteAddress() is not set and devices are discovered by a scan, errors during service discovery on individual devices are not saved and no signals are emitted. In this case, errors are fairly normal as some devices may not respond to discovery or may no longer be in range. Such errors are surpressed. If no services are returned, it can be assumed no services could be discovered.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServiceDiscoveryAgent.ErrorString">
            <summary>
            <para>Returns a human-readable description of the last error that occurred during the service discovery.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothServiceDiscoveryAgent.RemoteAddress">
            <summary>
            <para>Returns the remote device address. If setRemoteAddress() is not called, the function will return a default constructed QBluetoothAddress.</para>
            <para>See also setRemoteAddress().</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothServiceDiscoveryAgent.Error">
            <summary>
            <para>This enum describes errors that can occur during service discovery.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceDiscoveryAgent.Error.NoError">
            <summary>No error has occurred.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceDiscoveryAgent.Error.InputOutputError">
            <summary>Writing or reading from the device resulted in an error.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceDiscoveryAgent.Error.PoweredOffError">
            <summary>The Bluetooth adaptor is powered off, power it on before doing discovery.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceDiscoveryAgent.Error.InvalidBluetoothAdapterError">
            <summary>The passed local adapter address does not match the physical adapter address of any local Bluetooth device. This value was introduced by Qt 5.3.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceDiscoveryAgent.Error.UnknownError">
            <summary>An unknown error has occurred.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothServiceDiscoveryAgent.DiscoveryMode">
            <summary>
            <para>This enum describes the service discovery mode.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceDiscoveryAgent.DiscoveryMode.MinimalDiscovery">
            <summary>Performs a minimal service discovery. The QBluetoothServiceInfo objects returned may be incomplete and are only guaranteed to contain device and service UUID information. Since a minimal discovery relies on cached SDP data it may not find a physically existing device until a FullDiscovery is performed.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothServiceDiscoveryAgent.DiscoveryMode.FullDiscovery">
            <summary>Performs a full service discovery.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothTransferManager">
            <summary>
            <para>The QBluetoothTransferManager class transfers data to another device using Object Push Profile (OPP).</para>
            </summary>
            <remarks>
            <para>QBluetoothTransferManager uses OBEX to send put commands to remote devices. A typical OBEX transfer is initialized as follows:</para>
            <para></para>
            <para></para>
            <para>  // Create a transfer manager</para>
            <para>  QBluetoothTransferManager *transferManager = new QBluetoothTransferManager(this);</para>
            <para></para>
            <para>  // Create the transfer request and file to be sent</para>
            <para>  QBluetoothAddress remoteAddress(&quot;00:11:22:33:44:55:66&quot;);</para>
            <para>  QBluetoothTransferRequest request(remoteAddress);</para>
            <para>  QFile *file = new QFile(&quot;testfile.txt&quot;);</para>
            <para></para>
            <para>  // Ask the transfer manager to send it</para>
            <para>  QBluetoothTransferReply *reply = transferManager-&gt;put(request, file);</para>
            <para>  if (reply-&gt;error() == QBluetoothTransferReply::NoError) {</para>
            <para></para>
            <para>      // Connect to the reply's signals to be informed about the status and do cleanups when done</para>
            <para>      QObject::connect(reply, SIGNAL(finished(QBluetoothTransferReply*)),</para>
            <para>                       this, SLOT(transferFinished(QBluetoothTransferReply*)));</para>
            <para>      QObject::connect(reply, SIGNAL(error(QBluetoothTransferReply::TransferError)),</para>
            <para>                       this, SLOT(error(QBluetoothTransferReply::TransferError)));</para>
            <para>  } else {</para>
            <para>      qWarning() &lt;&lt; &quot;Cannot push testfile.txt:&quot; &lt;&lt; reply-&gt;errorString();</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>Note that this API is not currently supported on Android.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QBluetoothTransferManager.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QBluetoothTransferManager with parent.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothTransferManager.Put(QtBluetooth.QBluetoothTransferRequest,QtCore.QIODevice)">
            <summary>
            <para>Sends the contents of data to the remote device identified by request, and returns a new QBluetoothTransferReply that can be used to track the request's progress. data must remain valid until the finished() signal is emitted.</para>
            <para>The returned QBluetoothTransferReply object must be immediately checked for its error() state. This is required in case this function detects an error during the initialization of the QBluetoothTransferReply. In such cases QBluetoothTransferReply::isFinished() returns true as well.</para>
            <para>If the platform does not support the Object Push profile, this function will return 0.</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothTransferManager.Finished">
            <summary>
            <para>This signal is emitted when the transfer for reply finishes.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothTransferRequest">
            <summary>
            <para>The QBluetoothTransferRequest class stores information about a data transfer request.</para>
            </summary>
            <remarks>
            <para>QBluetoothTransferRequest is part of the Bluetooth Transfer API and is the class holding the information necessary to initiate a transfer over Bluetooth.</para>
            <para></para>
            <para>See also QBluetoothTransferReply and QBluetoothTransferManager.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QBluetoothTransferRequest.#ctor(QtBluetooth.QBluetoothAddress)">
            <summary>
            <para>Constructs a new Bluetooth transfer request to the device with address.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothTransferRequest.#ctor(QtBluetooth.QBluetoothTransferRequest)">
            <summary>
            <para>Constructs a new Bluetooth transfer request that is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothTransferRequest.#ctor">
            <summary>
            <para>Constructs a new Bluetooth transfer request to the device with address.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothTransferRequest.attribute(QtBluetooth.QBluetoothTransferRequest.Attribute,QtCore.QVariant)">
            <summary>
            <para>Returns the attribute associated with code. If the attribute has not been set, it returns defaultValue.</para>
            <para>See also setAttribute() and QBluetoothTransferRequest::Attribute.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothTransferRequest.SetAttribute(QtBluetooth.QBluetoothTransferRequest.Attribute,QtCore.QVariant)">
            <summary>
            <para>Sets the attribute associated with code to value. If the attribute is already set, the previous value is discarded. If value is an invalid QVariant, the attribute is unset.</para>
            <para>See also attribute() and QBluetoothTransferRequest::Attribute.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothTransferRequest.op_Inequality(QtBluetooth.QBluetoothTransferRequest,QtBluetooth.QBluetoothTransferRequest)">
            <summary>
            <para>Returns true if this object is not the same as other.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothTransferRequest.op_Equality(QtBluetooth.QBluetoothTransferRequest,QtBluetooth.QBluetoothTransferRequest)">
            <summary>
            <para>Returns true if this object is the same as other.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothTransferRequest.attribute(QtBluetooth.QBluetoothTransferRequest.Attribute)">
            <summary>
            <para>Returns the attribute associated with code. If the attribute has not been set, it returns defaultValue.</para>
            <para>See also setAttribute() and QBluetoothTransferRequest::Attribute.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothTransferRequest.Address">
            <summary>
            <para>Returns the address associated with the Bluetooth transfer request.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothTransferRequest.Attribute">
            <summary>
            <para>Attribute codes for QBluetoothTransferRequest and QBluetoothTransferReply.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothTransferRequest.Attribute.DescriptionAttribute">
            <summary>A textual description of the object being transferred. May be displayed in the UI of the remote device.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothTransferRequest.Attribute.TimeAttribute">
            <summary>Time attribute of the object being transferred.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothTransferRequest.Attribute.TypeAttribute">
            <summary>MIME type of the object being transferred.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothTransferRequest.Attribute.LengthAttribute">
            <summary>Length in bytes of the object being transferred.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothTransferRequest.Attribute.NameAttribute">
            <summary>Name of the object being transferred. May be displayed in the UI of the remote device.</summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothTransferReply">
            <summary>
            <para>The QBluetoothTransferReply class stores the response for a data transfer request.</para>
            </summary>
            <remarks>
            <para>In additional to a copy of the QBluetoothTransferRequest object used to create the request, QBluetoothTransferReply contains the contents of the reply itself.</para>
            <para>After the file transfer has started, QBluetoothTransferReply emits the transferProgress() signal, which indicates the progress of the file transfer.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QBluetoothTransferReply.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QBluetoothTransferReply with parent.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QBluetoothTransferReply.Abort">
            <summary>
            <para>Aborts this reply.</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothTransferReply.Finished">
            <summary>
            <para>This signal is emitted when the transfer is complete for reply.</para>
            <para>To avoid the loss of signal emissions it is recommend to immidiately connect to this signal once a QBluetoothTransferReply instance has been created.</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothTransferReply.TransferProgress">
            <summary>
            <para>This signal is emitted whenever data is transferred. The bytesTransferred parameter contains the total number of bytes transferred so far out of bytesTotal.</para>
            <para>To avoid the loss of signal emissions it is recommend to immidiately connect to this signal once a QBluetoothTransferReply instance has been created.</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QBluetoothTransferReply.ErrorErrorType">
            <summary>
            <para>This signal is emitted whenever an error has occurred. The errorType parameter indicates the type of error.</para>
            <para>To avoid the loss of signal emissions it is recommend to immidiately connect to this signal once a QBluetoothTransferReply instance has been created.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(bluetoothTransferReply, static_cast&lt;void(QBluetoothTransferReply::*)(QBluetoothTransferReply::TransferError)&gt;(&amp;QBluetoothTransferReply::error),</para>
            <para>      [=](QBluetoothTransferReply::TransferError errorType){ /* ... */ });</para>
            <para></para>
            <para></para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also error() and errorString().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothTransferReply.Manager">
            <summary>
            <para>Returns the QBluetoothTransferManager that was used to create this QBluetoothTransferReply object. Initially, it is also the parent object.</para>
            <para>See also setManager().</para>
            <para></para>
            <para>Set the reply's manager to the manager.</para>
            <para>See also manager().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothTransferReply.Request">
            <summary>
            <para>Returns the QBluetoothTransferRequest that was used to create this QBluetoothTransferReply object.</para>
            <para>See also setRequest().</para>
            <para></para>
            <para>Set the reply's request to request.</para>
            <para>See also request().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothTransferReply.IsFinished">
            <summary>
            <para>Returns true if this reply has finished, otherwise false.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothTransferReply.IsRunning">
            <summary>
            <para>Returns true if this reply is running, otherwise false.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothTransferReply.Error">
            <summary>
            <para>The error code of the error that occurred.</para>
            <para>See also errorString().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QBluetoothTransferReply.ErrorString">
            <summary>
            <para>String describing the error. Can be displayed to the user.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QBluetoothTransferReply.TransferError">
            <summary>
            <para>This enum describes the type of error that occurred</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothTransferReply.TransferError.NoError">
            <summary>No error.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothTransferReply.TransferError.UnknownError">
            <summary>Unknown error, no better enum available.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothTransferReply.TransferError.FileNotFoundError">
            <summary>Unable to open the file specified.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothTransferReply.TransferError.HostNotFoundError">
            <summary>Unable to connect to the target host.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothTransferReply.TransferError.UserCanceledTransferError">
            <summary>User terminated the transfer.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothTransferReply.TransferError.IODeviceNotReadableError">
            <summary>File was not open before initiating the sending command.</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothTransferReply.TransferError.ResourceBusyError">
            <summary>Unable to access the resource..</summary>
        </member>
        <member name="F:QtBluetooth.QBluetoothTransferReply.TransferError.SessionError">
            <summary>An error occurred during the handling of the session. This enum was introduced by Qt 5.4.</summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyAdvertisingData">
            <summary>
            <para>The QLowEnergyAdvertisingData class represents the data to be broadcast during Bluetooth Low Energy advertising.</para>
            </summary>
            <remarks>
            <para>This data can include the device name, GATT services offered by the device, and so on. The data set via this class will be used when advertising is started by calling QLowEnergyController::startAdvertising(). Objects of this class can represent an Advertising Data packet or a Scan Response packet.</para>
            <para>Note: The actual data packets sent over the advertising channel cannot contain more than 31 bytes. If the variable-length data set via this class exceeds that limit, it will be left out of the packet or truncated, depending on the type.</para>
            <para></para>
            <para>See also QLowEnergyAdvertisingParameters and QLowEnergyController::startAdvertising().</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QLowEnergyAdvertisingData.#ctor">
            <summary>
            <para>Creates a new object of this class. All values are initialized to their defaults according to the Bluetooth Low Energy specification.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyAdvertisingData.#ctor(QtBluetooth.QLowEnergyAdvertisingData)">
            <summary>
            <para>Constructs a new object of this class that is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyAdvertisingData.SetManufacturerData(System.UInt16,QtCore.QByteArray)">
            <summary>
            <para>Sets the manufacturer id and data. The id parameter is a company identifier as assigned by the Bluetooth SIG. The data parameter is an arbitrary value.</para>
            <para>See also manufacturerData().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyAdvertisingData.Swap(QtBluetooth.QLowEnergyAdvertisingData)">
            <summary>
            <para>Swaps this object with other.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyAdvertisingData.LocalName">
            <summary>
            <para>Returns the name of the local device that is to be advertised.</para>
            <para>See also setLocalName().</para>
            <para></para>
            <para>Specifies that name should be broadcast as the name of the device. If the full name does not fit into the advertising data packet, an abbreviated name is sent, as described by the Bluetooth Low Energy specification.</para>
            <para>See also localName().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyAdvertisingData.IncludePowerLevel">
            <summary>
            <para>Returns whether to include the device's transmit power level in the advertising data. The default is false.</para>
            <para>See also setIncludePowerLevel().</para>
            <para></para>
            <para>Specifies whether to include the device's transmit power level in the advertising data. If doInclude is true, the data will be included, otherwise it will not.</para>
            <para>See also includePowerLevel().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyAdvertisingData.discoverability">
            <summary>
            <para>Returns the discoverability mode of the advertising device. The default is DiscoverabilityNone.</para>
            <para>See also setDiscoverability().</para>
            <para></para>
            <para>Sets the discoverability type of the advertising device to mode.</para>
            <para>Note: Discoverability information can only appear in an actual advertising data packet. If this object acts as scan response data, a call to this function will have no effect on the scan response sent.</para>
            <para>See also discoverability().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyAdvertisingData.RawData">
            <summary>
            <para>Returns the user-supplied raw data to be advertised. The default is an empty byte array.</para>
            <para>See also setRawData().</para>
            <para></para>
            <para>Sets the data to be advertised to data. If the value is not an empty byte array, it will be sent as-is as the advertising data and all other data in this object will be ignored. This can be used to send non-standard data.</para>
            <para>Note: If data is longer than 31 bytes, it will be truncated. It is the caller's responsibility to ensure that data is well-formed.</para>
            <para>See also rawData().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyAdvertisingData.InvalidManufacturerId">
            <summary>
            <para>Returns an invalid manufacturer id. If this value is set as the manufacturer id (which it is by default), no manufacturer data will be present in the advertising data.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyAdvertisingData.ManufacturerId">
            <summary>
            <para>Returns the manufacturer id. The default is QLowEnergyAdvertisingData::invalidManufacturerId(), which means the data will not be advertised.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyAdvertisingData.ManufacturerData">
            <summary>
            <para>Returns the manufacturer data. The default is an empty byte array.</para>
            <para>See also setManufacturerData().</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyAdvertisingData.Discoverability">
            <summary>
            <para>The discoverability of the advertising device as defined by the Generic Access Profile.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyAdvertisingData.Discoverability.DiscoverabilityNone">
            <summary>The advertising device does not wish to be discoverable by scanning devices.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyAdvertisingData.Discoverability.DiscoverabilityLimited">
            <summary>The advertising device wishes to be discoverable with a high priority. Note that this mode is not compatible with using a white list. The value of QLowEnergyAdvertisingParameters::filterPolicy() is always assumed to be QLowEnergyAdvertisingParameters::IgnoreWhiteList when limited discoverability is used.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyAdvertisingData.Discoverability.DiscoverabilityGeneral">
            <summary>The advertising device wishes to be discoverable by scanning devices.</summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyDescriptor">
            <summary>
            <para>The QLowEnergyDescriptor class stores information about the Bluetooth Low Energy descriptor.</para>
            </summary>
            <remarks>
            <para>QLowEnergyDescriptor provides information about a Bluetooth Low Energy descriptor's name(), uuid(), value() and handle(). Descriptors are encapsulated by Bluetooth Low Energy characteristics and provide additional centextual information about the characteristic (data format, notification activation and so on).</para>
            <para>The descriptor value may be written via the QLowEnergyService instance that manages the service to which this descriptor belongs. The QLowEnergyService::writeDescriptor() function writes the new value. The QLowEnergyService::descriptorWritten() signal is emitted upon success. The cahced value() of this object is updated accordingly.</para>
            <para></para>
            <para>See also QLowEnergyService and QLowEnergyCharacteristic.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QLowEnergyDescriptor.#ctor">
            <summary>
            <para>Construct a new QLowEnergyDescriptor. A default-constructed instance of this class is always invalid.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyDescriptor.#ctor(QtBluetooth.QLowEnergyDescriptor)">
            <summary>
            <para>Construct a new QLowEnergyDescriptor that is a copy of other.</para>
            <para>The two copies continue to share the same underlying data which does not detach upon write.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyDescriptor.op_Equality(QtBluetooth.QLowEnergyDescriptor,QtBluetooth.QLowEnergyDescriptor)">
            <summary>
            <para>Returns true if other is equal to this QLowEnergyCharacteristic; otherwise false.</para>
            <para>Two QLowEnergyDescriptor instances are considered to be equal if they refer to the same descriptor on the same remote Bluetooth Low Energy device or both instances have been default-constructed.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyDescriptor.op_Inequality(QtBluetooth.QLowEnergyDescriptor,QtBluetooth.QLowEnergyDescriptor)">
            <summary>
            <para>Returns true if other is not equal to this QLowEnergyCharacteristic; otherwise false.</para>
            <para>Two QLowEnergyDescriptor instances are considered to be equal if they refer to the same descriptor on the same remote Bluetooth Low Energy device or both instances have been default-constructed.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyDescriptor.IsValid">
            <summary>
            <para>Returns true if the QLowEnergyDescriptor object is valid, otherwise returns false.</para>
            <para>An invalid descriptor instance is not associated with any service (default-constructed) or the associated service is no longer valid due to a disconnect from the underlying Bluetooth Low Energy device, for example. Once the object is invalid it cannot become valid anymore.</para>
            <para>Note: If a QLowEnergyDescriptor instance turns invalid due to a disconnect from the underlying device, the information encapsulated by the current instance remains as it was at the time of the disconnect. Therefore it can be retrieved after the disconnect event.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyDescriptor.Value">
            <summary>
            <para>Returns the cached value of the descriptor.</para>
            <para>The cached descriptor value may be updated using QLowEnergyService::writeDescriptor() or QLowEnergyService::readDescriptor().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyDescriptor.Uuid">
            <summary>
            <para>Returns the UUID of this descriptor if isValid() returns true; otherwise a null UUID.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyDescriptor.Handle">
            <summary>
            <para>Returns the handle of the descriptor or 0 if the handle cannot be accessed on the platform or the descriptor is invalid.</para>
            <para>Note: On OS X and iOS handles can differ from 0, but these values have no special meaning outside of internal/private API.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyDescriptor.Name">
            <summary>
            <para>Returns the human-readable name of the descriptor.</para>
            <para>The name is based on the descriptor's type(). The complete list of descriptor types can be found under Bluetooth.org Descriptors.</para>
            <para>The returned string is empty if the type() is unknown.</para>
            <para>See also type() and QBluetoothUuid::descriptorToString().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyDescriptor.Type">
            <summary>
            <para>Returns the type of the descriptor.</para>
            <para>See also name().</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyCharacteristic">
            <summary>
            <para>The QLowEnergyCharacteristic class stores information about a Bluetooth Low Energy service characteristic.</para>
            </summary>
            <remarks>
            <para>QLowEnergyCharacteristic provides information about a Bluetooth Low Energy service characteristic's name(), uuid(), value(), properties(), handle() and descriptors(). To obtain the characteristic's specification and information, it is necessary to connect to the device using the QLowEnergyService and QLowEnergyController classes.</para>
            <para>The characteristic value may be written via the QLowEnergyService instance that manages the service to which this characteristic belongs. The QLowEnergyService::writeCharacteristic() function writes the new value. The QLowEnergyService::characteristicWritten() signal is emitted upon success. The value() of this object is automatically updated accordingly.</para>
            <para>Characteristics may contain none, one or more descriptors. They can be individually retrieved using the descriptor() function. The descriptors() function returns all descriptors as a list. The general purpose of a descriptor is to add contextual information to the characteristic. For example, the descriptor might provide format or range information specifying how the characteristic's value is to be interpreted.</para>
            <para></para>
            <para>See also QLowEnergyService and QLowEnergyDescriptor.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QLowEnergyCharacteristic.#ctor">
            <summary>
            <para>Construct a new QLowEnergyCharacteristic. A default-constructed instance of this class is always invalid.</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyCharacteristic.#ctor(QtBluetooth.QLowEnergyCharacteristic)">
            <summary>
            <para>Construct a new QLowEnergyCharacteristic that is a copy of other.</para>
            <para>The two copies continue to share the same underlying data which does not detach upon write.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyCharacteristic.op_Equality(QtBluetooth.QLowEnergyCharacteristic,QtBluetooth.QLowEnergyCharacteristic)">
            <summary>
            <para>Returns true if other is equal to this QLowEnergyCharacteristic; otherwise false.</para>
            <para>Two QLowEnergyCharacteristic instances are considered to be equal if they refer to the same characteristic on the same remote Bluetooth Low Energy device or both instances have been default-constructed.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyCharacteristic.op_Inequality(QtBluetooth.QLowEnergyCharacteristic,QtBluetooth.QLowEnergyCharacteristic)">
            <summary>
            <para>Returns true if other is not equal to this QLowEnergyCharacteristic; otherwise false.</para>
            <para>Two QLowEnergyCharcteristic instances are considered to be equal if they refer to the same characteristic on the same remote Bluetooth Low Energy device or both instances have been default-constructed.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyCharacteristic.Descriptor(QtBluetooth.QBluetoothUuid)">
            <summary>
            <para>Returns the descriptor for uuid or an invalid QLowEnergyDescriptor instance.</para>
            <para>See also descriptors().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyCharacteristic.Name">
            <summary>
            <para>Returns the human-readable name of the characteristic.</para>
            <para>The name is based on the characteristic's uuid() which must have been standardized. The complete list of characteristic types can be found under Bluetooth.org Characteristics.</para>
            <para>The returned string is empty if the uuid() is unknown.</para>
            <para>See also QBluetoothUuid::characteristicToString().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyCharacteristic.Uuid">
            <summary>
            <para>Returns the UUID of the characteristic if isValid() returns true; otherwise a null UUID.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyCharacteristic.Value">
            <summary>
            <para>Returns the cached value of the characteristic.</para>
            <para>If the characteristic's properties() permit writing of new values, the value can be updated using QLowEnergyService::writeCharacteristic().</para>
            <para>The cache is updated during the associated service's detail discovery, a successful read/write operation or when an update notification is received.</para>
            <para>The returned QByteArray always remains empty if the characteristic does not have the read permission. In such cases only the QLowEnergyService::characteristicChanged() or QLowEnergyService::characteristicWritten() may provice information about the value of this characteristic.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyCharacteristic.Properties">
            <summary>
            <para>Returns the properties of the characteristic.</para>
            <para>The properties define the access permissions for the characteristic.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyCharacteristic.Handle">
            <summary>
            <para>Returns the handle of the characteristic's value attribute; or 0 if the handle cannot be accessed on the platform or if the characteristic is invalid.</para>
            <para>Note: On OS X and iOS handles can differ from 0, but these values have no special meaning outside of internal/private API.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyCharacteristic.IsValid">
            <summary>
            <para>Returns true if the QLowEnergyCharacteristic object is valid, otherwise returns false.</para>
            <para>An invalid characteristic object is not associated with any service (default-constructed) or the associated service is no longer valid due to a disconnect from the underlying Bluetooth Low Energy device, for example. Once the object is invalid it cannot become valid anymore.</para>
            <para>Note: If a QLowEnergyCharacteristic instance turns invalid due to a disconnect from the underlying device, the information encapsulated by the current instance remains as it was at the time of the disconnect. Therefore it can be retrieved after the disconnect event.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyCharacteristic.PropertyType">
            <summary>
            <para>This enum describes the properties of a characteristic.</para>
            <para>The PropertyTypes type is a typedef for QFlags&lt;PropertyType&gt;. It stores an OR combination of PropertyType values.</para>
            <para>See also properties().</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyCharacteristic.PropertyType.Unknown">
            <summary>The type is not known.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyCharacteristic.PropertyType.Broadcasting">
            <summary>Allow for the broadcasting of Generic Attributes (GATT) characteristic values.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyCharacteristic.PropertyType.Read">
            <summary>Allow the characteristic values to be read.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyCharacteristic.PropertyType.WriteNoResponse">
            <summary>Allow characteristic values without responses to be written.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyCharacteristic.PropertyType.Write">
            <summary>Allow for characteristic values to be written.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyCharacteristic.PropertyType.Notify">
            <summary>Permits notification of characteristic values.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyCharacteristic.PropertyType.Indicate">
            <summary>Permits indications of characteristic values.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyCharacteristic.PropertyType.WriteSigned">
            <summary>Permits signed writes of the GATT characteristic values.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyCharacteristic.PropertyType.ExtendedProperty">
            <summary>Additional characteristic properties are defined in the characteristic's extended properties descriptor.</summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyService">
            <summary>
            <para>The QLowEnergyService class represents an individual service on a Bluetooth Low Energy Device.</para>
            </summary>
            <remarks>
            <para>QLowEnergyService provides access to the details of Bluetooth Low Energy services. The class facilitates the discovery and publification of service details, permits reading and writing of the contained data and notifies about data changes.</para>
            <para></para>
            <para>Service Structure</para>
            <para>A Bluetooth Low Energy peripheral device can contain multiple services. In turn each service may include further services. This class represents a single service of the peripheral device and is created via QLowEnergyController::createServiceObject(). The type() indicates whether this service is a primary (top-level) service or whether the service is part of another service. Each service may contain one or more characteristics and each characteristic may contain descriptors. The resulting structure may look like the following diagram:</para>
            <para></para>
            <para>A characteristic is the principle information carrier. It has a value() and properties() describing the access permissions for the value. The general purpose of the contained descriptor is to further define the nature of the characteristic. For example, it might specify how the value is meant to be interpreted or whether it can notify the value consumer about value changes.</para>
            <para></para>
            <para>Service Interaction</para>
            <para>Once a service object was created for the first time, its details are yet to be discovered. This is indicated by its current state() being DiscoveryRequired. It is only possible to retrieve the serviceUuid() and serviceName().</para>
            <para>The discovery of its included services, characteristics and descriptors is triggered when calling discoverDetails(). During the discovery the state() transitions from DiscoveryRequired via DiscoveringServices to its final ServiceDiscovered state. This transition is advertised via the stateChanged() signal. Once the details are known, all of the contained characteristics, descriptors and included services are known and can be read or written.</para>
            <para>The values of characteristics and descriptors can be retrieved via QLowEnergyCharacteristic and QLowEnergyDescriptor, respectively. However, direct reading or writing of these attributes requires the service object. The readCharacteristic() function attempts to re-read the value of a characteristic. Although the initial service discovery may have obtained a value already this call may be required in cases where the characteristic value constantly changes without any notifications being provided. An example might be a time characteristic that provides a continuous value. If the read attempt is successful, the characteristicRead() signal is emitted. A failure to read the value triggers the CharacteristicReadError. The writeCharacteristic() function attempts to write a new value to the given characteristic. If the write attempt is successful, the characteristicWritten() signal is emitted. A failure to write triggers the CharacteristicWriteError. Reading and writing of descriptors follows the same pattern.</para>
            <para>Every attempt is made to read or write the value of a descriptor or characteristic on the hardware. This means that meta information such as QLowEnergyCharacteristic::properties() is generally ignored when reading and writing. As an example, it is possible to call writeCharacteristic() despite the characteristic being read-only based on its meta data description. The resulting write request is forwarded to the connected device and it is up to the device to respond to the potentially invalid request. In this case the result is the emission of the CharacteristicWriteError in response to the returned device error. This behavior simplifies interaction with devices which report wrong meta information. If it was not possible to forward the request to the remote device the OperationError is set. A potential reason could be that the to-be-written characteristic object does not even belong the current service. In summary, the two types of errors permit a quick distinction of local and remote error cases.</para>
            <para>All requests are serialised based on First-In First-Out principle. For example, issuing a second write request, before the previous write request has finished, is delayed until the first write request has finished.</para>
            <para>Note: Currently, it is not possible to send signed write or reliable write requests.</para>
            <para></para>
            <para>In some cases the peripheral generates value updates which the central is interested in receiving. In order for a characteristic to support such notifications it must have the QLowEnergyCharacteristic::Notify or QLowEnergyCharacteristic::Indicate property and a descriptor of type QBluetoothUuid::ClientCharacteristicConfiguration. Provided those conditions are fulfilled notifications can be enabled as shown in the following code segment:</para>
            <para></para>
            <para></para>
            <para>      //PreCondition: service details already discovered</para>
            <para>      QLowEnergyCharacteristic batteryLevel = service-&gt;characteristic(</para>
            <para>                  QBluetoothUuid::BatteryLevel);</para>
            <para>      if (!batteryLevel.isValid())</para>
            <para>          return;</para>
            <para></para>
            <para>      QLowEnergyDescriptor notification = batteryLevel.descriptor(</para>
            <para>                  QBluetoothUuid::ClientCharacteristicConfiguration);</para>
            <para>      if (!notification.isValid())</para>
            <para>          return;</para>
            <para></para>
            <para>      // establish hook into notifications</para>
            <para>      connect(service, SIGNAL(characteristicChanged(QLowEnergyCharacteristic,QByteArray)),</para>
            <para>              this, SLOT(characteristicChanged(QLowEnergyCharacteristic,QByteArray)));</para>
            <para></para>
            <para>      // enable notification</para>
            <para>      service-&gt;writeDescriptor(notification, QByteArray::fromHex(&quot;0100&quot;));</para>
            <para></para>
            <para>      // disable notification</para>
            <para>      //service-&gt;writeDescriptor(notification, QByteArray::fromHex(&quot;0000&quot;));</para>
            <para></para>
            <para>      // wait until descriptorWritten() signal is emitted</para>
            <para>      // to confirm successful write</para>
            <para></para>
            <para></para>
            <para>The example shows a battery level characteristic which updates the central on every value change. The notifications are provided via the characteristicChanged() signal. More details about this mechanism are provided by the Bluetooth Specification.</para>
            <para></para>
            <para>Service Data Sharing</para>
            <para>Each QLowEnergyService instance shares its internal states and information with other QLowEnergyService instance of the same service. If one instance initiates the discovery of the service details, all remaining instances automatically follow. Therefore the following snippet always works:</para>
            <para></para>
            <para></para>
            <para>      QLowEnergyService *first, *second;</para>
            <para>      QLowEnergyController control(remoteDevice);</para>
            <para>      control.connectToDevice();</para>
            <para></para>
            <para>      // waiting for connection</para>
            <para></para>
            <para>      first = control.createServiceObject(QBluetoothUuid::BatteryService);</para>
            <para>      second = control.createServiceObject(QBluetoothUuid::BatteryService);</para>
            <para>      Q_ASSERT(first-&gt;state() == QLowEnergyService::DiscoveryRequired);</para>
            <para>      Q_ASSERT(first-&gt;state() == second-&gt;state());</para>
            <para></para>
            <para>      first-&gt;discoverDetails();</para>
            <para></para>
            <para>      Q_ASSERT(first-&gt;state() == QLowEnergyService::DiscoveringServices);</para>
            <para>      Q_ASSERT(first-&gt;state() == second-&gt;state());</para>
            <para></para>
            <para></para>
            <para>Other operations such as calls to readCharacteristic(), readDescriptor(), writeCharacteristic(), writeDescriptor() or the invalidation of the service due to the related QLowEnergyController disconnecting from the device are shared the same way.</para>
            <para></para>
            <para>See also QLowEnergyController, QLowEnergyCharacteristic, and QLowEnergyDescriptor.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QLowEnergyService.Characteristic(QtBluetooth.QBluetoothUuid)">
            <summary>
            <para>Returns the matching characteristic for uuid; otherwise an invalid characteristic.</para>
            <para>The returned characteristic is invalid if this service instance's discoverDetails() was not yet called or there are no characteristics with a matching uuid.</para>
            <para>See also characteristics().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyService.DiscoverDetails">
            <summary>
            <para>Initiates the discovery of the services, characteristics and descriptors contained by the service. The discovery process is indicated via the stateChanged() signal.</para>
            <para>See also state().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyService.Contains(QtBluetooth.QLowEnergyCharacteristic)">
            <summary>
            <para>Returns true if characteristic belongs to this service; otherwise false.</para>
            <para>A characteristic belongs to a service if characteristics() contains the characteristic.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyService.ReadCharacteristic(QtBluetooth.QLowEnergyCharacteristic)">
            <summary>
            <para>Reads the value of characteristic. If the operation is successful, the characteristicRead() signal is emitted; otherwise the CharacteristicReadError is set. In general, a characteristic is readable, if its QLowEnergyCharacteristic::Read property is set.</para>
            <para>All descriptor and characteristic requests towards the same remote device are serialised. A queue is employed when issuing multiple requests at the same time. The queue does not eliminate duplicated read requests for the same characteristic.</para>
            <para>A characteristic can only be read if the service is in the ServiceDiscovered state and belongs to the service. If one of these conditions is not true the QLowEnergyService::OperationError is set.</para>
            <para>Note: Calling this function despite QLowEnergyCharacteristic::properties() reporting a non-readable property always attempts to read the characteristic's value on the hardware. If the hardware returns with an error the CharacteristicReadError is set.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also characteristicRead() and writeCharacteristic().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyService.WriteCharacteristic(QtBluetooth.QLowEnergyCharacteristic,QtCore.QByteArray,QtBluetooth.QLowEnergyService.WriteMode)">
            <summary>
            <para>Writes newValue as value for the characteristic. The exact semantics depend on the role that the associated controller object is in.</para>
            <para>Central role</para>
            <para>The call results in a write request or command to a remote peripheral. If the operation is successful, the characteristicWritten() signal is emitted; otherwise the CharacteristicWriteError is set.</para>
            <para>The mode parameter determines whether the remote device should send a write confirmation. The to-be-written characteristic must support the relevant write mode. The characteristic's supported write modes are indicated by its QLowEnergyCharacteristic::Write and QLowEnergyCharacteristic::WriteNoResponse properties.</para>
            <para>All descriptor and characteristic write requests towards the same remote device are serialised. A queue is employed when issuing multiple write requests at the same time. The queue does not eliminate duplicated write requests for the same characteristic. For example, if the same descriptor is set to the value A and immediately afterwards to B, the two write request are executed in the given order.</para>
            <para>Note: Currently, it is not possible to use signed or reliable writes as defined by the Bluetooth specification.</para>
            <para>A characteristic can only be written if this service is in the ServiceDiscovered state and belongs to the service. If one of these conditions is not true the QLowEnergyService::OperationError is set.</para>
            <para>Note: Calling this function despite QLowEnergyCharacteristic::properties() reporting a non-writable property always attempts to write to the hardware. Similarly, a WriteWithoutResponse is sent to the hardware too although the characteristic may only support WriteWithResponse. If the hardware returns with an error the CharacteristicWriteError is set.</para>
            <para>Peripheral role</para>
            <para>The call results in the value of the characteristic getting updated in the local database.</para>
            <para>If a client is currently connected and it has enabled notifications or indications for the characteristic, the respective information will be sent. If a device has enabled notifications or indications for the characteristic and that device is currently not connected, but a bond exists between it and the local device, then the notification or indication will be sent on the next reconnection.</para>
            <para>If there is a constraint on the length of the characteristic value and newValue does not adhere to that constraint, the behavior is unspecified.</para>
            <para>Note: The mode argument is ignored in peripheral mode.</para>
            <para>See also QLowEnergyService::characteristicWritten() and QLowEnergyService::readCharacteristic().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyService.Contains(QtBluetooth.QLowEnergyDescriptor)">
            <summary>
            <para>Returns true if descriptor belongs to this service; otherwise false.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyService.ReadDescriptor(QtBluetooth.QLowEnergyDescriptor)">
            <summary>
            <para>Reads the value of descriptor. If the operation is successful, the descriptorRead() signal is emitted; otherwise the DescriptorReadError is set.</para>
            <para>All descriptor and characteristic requests towards the same remote device are serialised. A queue is employed when issuing multiple requests at the same time. The queue does not eliminate duplicated read requests for the same descriptor.</para>
            <para>A descriptor can only be read if the service is in the ServiceDiscovered state and the descriptor belongs to the service. If one of these conditions is not true the QLowEnergyService::OperationError is set.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also descriptorRead() and writeDescriptor().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyService.WriteDescriptor(QtBluetooth.QLowEnergyDescriptor,QtCore.QByteArray)">
            <summary>
            <para>Writes newValue as value for descriptor. The exact semantics depend on the role that the associated controller object is in.</para>
            <para>Central role</para>
            <para>A call to this function results in a write request to the remote device. If the operation is successful, the descriptorWritten() signal is emitted; otherwise the DescriptorWriteError is emitted.</para>
            <para>All descriptor and characteristic requests towards the same remote device are serialised. A queue is employed when issuing multiple write requests at the same time. The queue does not eliminate duplicated write requests for the same descriptor. For example, if the same descriptor is set to the value A and immediately afterwards to B, the two write request are executed in the given order.</para>
            <para>A descriptor can only be written if this service is in the ServiceDiscovered state, belongs to the service. If one of these conditions is not true the QLowEnergyService::OperationError is set.</para>
            <para>Peripheral Role</para>
            <para>The value is written to the local service database. If the contents of newValue are not valid for descriptor, the behavior is unspecified.</para>
            <para>See also descriptorWritten() and readDescriptor().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QLowEnergyService.StateChanged">
            <summary>
            <para>This signal is emitted when the service's state changes. The newState can also be retrieved via state().</para>
            <para>See also state().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QLowEnergyService.CharacteristicChanged">
            <summary>
            <para>If the associated controller object is in the central role, this signal is emitted when the value of characteristic is changed by an event on the peripheral. In that case, the signal emission implies that change notifications must have been activated via the characteristic's ClientCharacteristicConfiguration descriptor prior to the change event on the peripheral. More details on how this might be done can be found further above.</para>
            <para>If the controller is in the peripheral role, that is, the service object was created via QLowEnergyController::addService, the signal is emitted when a GATT client has written the value of the characteristic using a write request or command.</para>
            <para>The newValue parameter contains the updated value of the characteristic.</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QLowEnergyService.CharacteristicRead">
            <summary>
            <para>This signal is emitted when the read request for characteristic successfully returned its value. The signal might be triggered by calling characteristicRead(). If the read operation is not successful, the error() signal is emitted using the CharacteristicReadError flag.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also readCharacteristic().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QLowEnergyService.CharacteristicWritten">
            <summary>
            <para>This signal is emitted when the value of characteristic is successfully changed to newValue. The change must have been triggered by calling writeCharacteristic(). If the write operation is not successful, the error() signal is emitted using the CharacteristicWriteError flag.</para>
            <para>Since this signal is an indication of a successful write operation newValue generally matches the value that was passed to the associated writeCharacteristic() call. However, it may happen that the two values differ from each other. This can occur in cases when the written value is used by the remote device to trigger an operation and it returns some other value via the written and/or change notification. Such cases are very specific to the target device. In any case, the reception of the written signal can still be considered as a sign that the target device received the to-be-written value.</para>
            <para>Note: If writeCharacteristic() is called using the WriteWithoutResponse mode, this signal and the error() are never emitted.</para>
            <para>See also writeCharacteristic().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QLowEnergyService.DescriptorRead">
            <summary>
            <para>This signal is emitted when the read request for descriptor successfully returned its value. The signal might be triggered by calling descriptorRead(). If the read operation is not successful, the error() signal is emitted using the DescriptorReadError flag.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also readDescriptor().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QLowEnergyService.DescriptorWritten">
            <summary>
            <para>This signal is emitted when the value of descriptor is successfully changed to newValue. If the associated controller object is in the central role, the change must have been caused by calling writeDescriptor(). Otherwise, the signal is the result of a write request or command from a GATT client to the respective descriptor.</para>
            <para>See also writeDescriptor().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QLowEnergyService.ErrorNewError">
            <summary>
            <para>This signal is emitted when an error occurrs. The newError parameter describes the error that occurred.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(lowEnergyService, static_cast&lt;void(QLowEnergyService::*)(QLowEnergyService::ServiceError)&gt;(&amp;QLowEnergyService::error),</para>
            <para>      [=](QLowEnergyService::ServiceError newError){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyService.Type">
            <summary>
            <para>Returns the type of the service.</para>
            <para>Note: The type attribute cannot be relied upon until the service has reached the ServiceDiscovered state. This field is initialised with PrimaryService.</para>
            <para>Note: On Android, it is not possible to determine whether a service is a primary or secondary service. Therefore all services have the PrimaryService flag set.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyService.State">
            <summary>
            <para>Returns the current state of the service.</para>
            <para>If the device's service was instantiated for the first time, the object's state is DiscoveryRequired. The state of all service objects which point to the same service on the peripheral device are always equal. This is caused by the shared nature of the internal object data. Therefore any service object instance created after the first one has a state equal to already existing instances.</para>
            <para>A service becomes invalid if the QLowEnergyController disconnects from the remote device. An invalid service retains its internal state at the time of the disconnect event. This implies that once the service details are discovered they can even be retrieved from an invalid service. This permits scenarios where the device connection is established, the service details are retrieved and the device immediately disconnected to permit the next device to connect to the peripheral device.</para>
            <para>However, under normal circumstances the connection should remain to avoid repeated discovery of services and their details. The discovery may take a while and the client can subscribe to ongoing change notifications.</para>
            <para>See also stateChanged().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyService.ServiceUuid">
            <summary>
            <para>Returns the UUID of the service; otherwise a null UUID.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyService.ServiceName">
            <summary>
            <para>Returns the name of the service; otherwise an empty string.</para>
            <para>The returned name can only be retrieved if serviceUuid() is a well-known UUID.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyService.Error">
            <summary>
            <para>Returns the last occurred error or NoError.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyService.ServiceType">
            <summary>
            <para>This enum describes the type of the service.</para>
            <para>The ServiceTypes type is a typedef for QFlags&lt;ServiceType&gt;. It stores an OR combination of ServiceType values.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.ServiceType.PrimaryService">
            <summary>The service is a top-level/primary service. If this type flag is not set, the service is considered to be a secondary service. Each service may be included by another service which is indicated by IncludedService.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.ServiceType.IncludedService">
            <summary>The service is included by another service. On some platforms, this flag cannot be determined until the service that includes the current service was discovered.</summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyService.ServiceError">
            <summary>
            <para>This enum describes all possible error conditions during the service's existence. The error() function returns the last occurred error.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.ServiceError.NoError">
            <summary>No error has occurred.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.ServiceError.OperationError">
            <summary>An operation was attempted while the service was not ready. An example might be the attempt to write to the service while it was not yet in the ServiceDiscovered state() or the service is invalid due to a loss of connection to the peripheral device.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.ServiceError.CharacteristicWriteError">
            <summary>An attempt to write a new value to a characteristic failed. For example, it might be triggered when attempting to write to a read-only characteristic.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.ServiceError.DescriptorWriteError">
            <summary>An attempt to write a new value to a descriptor failed. For example, it might be triggered when attempting to write to a read-only descriptor.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.ServiceError.UnknownError">
            <summary>An unknown error occurred when interacting with the service. This value was introduced by Qt 5.5.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.ServiceError.CharacteristicReadError">
            <summary>An attempt to read a characteristic value failed. For example, it might be triggered in response to a call to readCharacteristic(). This value was introduced by Qt 5.5.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.ServiceError.DescriptorReadError">
            <summary>An attempt to read a descriptor value failed. For example, it might be triggered in response to a call to readDescriptor(). This value was introduced by Qt 5.5.</summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyService.ServiceState">
            <summary>
            <para>This enum describes the state() of the service object.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.ServiceState.InvalidService">
            <summary>A service can become invalid when it looses the connection to the underlying device. Even though the connection may be lost it retains its last information. An invalid service cannot become valid anymore even if the connection to the device is re-established.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.ServiceState.DiscoveryRequired">
            <summary>The service details are yet to be discovered by calling discoverDetails(). The only reliable pieces of information are its serviceUuid() and serviceName().</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.ServiceState.DiscoveringServices">
            <summary>The service details are being discovered.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.ServiceState.ServiceDiscovered">
            <summary>The service details have been discovered.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.ServiceState.LocalService">
            <summary>The service is associated with a controller object in the peripheral role. Such service objects do not change their state. This value was introduced by Qt 5.7.</summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyService.WriteMode">
            <summary>
            <para>This enum describes the mode to be used when writing a characteristic value. The characteristic advertises its supported write modes via its properties.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.WriteMode.WriteWithResponse">
            <summary>If a characteristic is written using this mode, the peripheral shall send a write confirmation. If the operation is successful, the confirmation is emitted via the characteristicWritten() signal. Otherwise the CharacteristicWriteError is emitted. A characteristic must have set the QLowEnergyCharacteristic::Write property to support this write mode.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.WriteMode.WriteWithoutResponse">
            <summary>If a characteristic is written using this mode, the remote peripheral shall not send a write confirmation. The operation's success cannot be determined and the payload must not be longer than 20 bytes. A characteristic must have set the QLowEnergyCharacteristic::WriteNoResponse property to support this write mode. Its adavantage is a quicker write operation as it may happen in between other device interactions.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyService.WriteMode.WriteSigned">
            <summary>If a characteristic is written using this mode, the remote peripheral shall not send a write confirmation. The operation's success cannot be determined and the payload must not be longer than 8 bytes. A bond must exist between the two devices and the link must not be encrypted. A characteristic must have set the QLowEnergyCharacteristic::WriteSigned property to support this write mode. This value was introduced in Qt 5.7 and is currently only supported on Android and on Linux with BlueZ 5 and a kernel version 3.7 or newer.</summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyController">
            <summary>
            <para>The QLowEnergyController class provides access to Bluetooth Low Energy Devices.</para>
            </summary>
            <remarks>
            <para>QLowEnergyController acts as the entry point for Bluetooth Low Energy development.</para>
            <para>Bluetooth Low Energy defines two types of devices; the peripheral and the central. Each role performs a different task. The peripheral device provides data which is utilized by central devices. An example might be a humidity sensor which measures the moisture in a winter garden. A device such as a mobile phone might read the sensor's value and display it to the user in the greater context of all sensors in the same environment. In this case the sensor is the peripheral device and the mobile phone acts as the central device.</para>
            <para>A controller in the central role is created via the createCentral() factory method. Such an object essentially acts as a placeholder towards a remote Low Energy peripheral device, enabling features such as service discovery and state tracking.</para>
            <para>After having created a controller object in the central role, the first step is to establish a connection via connectToDevice(). Once the connection has been established, the controller's state() changes to QLowEnergyController::ConnectedState and the connected() signal is emitted. It is important to mention that some platforms such as a BlueZ based Linux cannot maintain two connected instances of QLowEnergyController to the same remote device. In such cases the second call to connectToDevice() may fail. This limitation may disappear at some stage in the future. The disconnectFromDevice() function is used to break the existing connection.</para>
            <para>The second step after establishing the connection is to discover the services offered by the remote peripheral device. This process is started via discoverServices() and has finished once the discoveryFinished() signal has been emitted. The discovered services can be enumerated via services().</para>
            <para>The last step is to create service objects. The createServiceObject() function acts as factory for each service object and expects the service UUID as parameter. The calling context should take ownership of the returned QLowEnergyService instance.</para>
            <para>Any QLowEnergyService, QLowEnergyCharacteristic or QLowEnergyDescriptor instance which is later created from this controller's connection becomes invalid as soon as the controller disconnects from the remote Bluetooth Low Energy device.</para>
            <para>A controller in the peripheral role is created via the createPeripheral() factory method. Such an object acts as a peripheral device itself, enabling features such as advertising services and allowing clients to get notified about changes to characteristic values.</para>
            <para>After having created a controller object in the peripheral role, the first step is to populate the set of GATT services offered to client devices via calls to addService(). Afterwards, one would call startAdvertising() to let the device broadcast some data and, depending on the type of advertising being done, also listen for incoming connections from GATT clients.</para>
            <para></para>
            <para>See also QLowEnergyService, QLowEnergyCharacteristic, QLowEnergyDescriptor, QLowEnergyAdvertisingParameters, and QLowEnergyAdvertisingData.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QLowEnergyController.#ctor(QtBluetooth.QBluetoothAddress,QtBluetooth.QBluetoothAddress,QtCore.QObject)">
            <summary>
            <para>Constructs a new instance of this class with parent.</para>
            <para>The remoteDevice must contain the address of the remote Bluetooth Low Energy device to which this object should attempt to connect later on.</para>
            <para>The connection is established via localDevice. If localDevice is invalid, the local default device is automatically selected. If localDevice specifies a local device that is not a local Bluetooth adapter, error() is set to InvalidBluetoothAdapterError once connectToDevice() is called.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyController.ConnectToDevice">
            <summary>
            <para>Connects to the remote Bluetooth Low Energy device.</para>
            <para>This function does nothing if the controller's state() is not equal to UnconnectedState. The connected() signal is emitted once the connection is successfully established.</para>
            <para>On Linux/BlueZ systems, it is not possible to connect to the same remote device using two instances of this class. The second call to this function may fail with an error. This limitation may be removed in future releases.</para>
            <para>See also disconnectFromDevice().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyController.DisconnectFromDevice">
            <summary>
            <para>Disconnects from the remote device.</para>
            <para>Any QLowEnergyService, QLowEnergyCharacteristic or QLowEnergyDescriptor instance that resulted from the current connection is automatically invalidated. Once any of those objects become invalid they remain invalid even if this controller object reconnects.</para>
            <para>This function does nothing if the controller is in the UnconnectedState.</para>
            <para>See also connectToDevice().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyController.DiscoverServices">
            <summary>
            <para>Initiates the service discovery process.</para>
            <para>The discovery progress is indicated via the serviceDiscovered() signal. The discoveryFinished() signal is emitted when the process has finished.</para>
            <para>If the controller instance is not connected or the controller has performed the service discovery already this function will do nothing.</para>
            <para>Note: Some platforms internally cache the service list of a device which was discovered in the past. This can be problematic if the remote device changed its list of services or their inclusion tree. If this behavior is a problem, the best workaround is to temporarily turn Bluetooth off. This causes a reset of the cache data. Currently Android exhibits such a cache behavior.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyController.CreateServiceObject(QtBluetooth.QBluetoothUuid,QtCore.QObject)">
            <summary>
            <para>Creates an instance of the service represented by serviceUuid. The serviceUuid parameter must have been obtained via services().</para>
            <para>The caller takes ownership of the returned pointer and may pass a parent parameter as default owner.</para>
            <para>This function returns a null pointer if no service with serviceUuid can be found on the remote device or the controller is disconnected.</para>
            <para>This function can return instances for secondary services too. The include relationships between services can be expressed via QLowEnergyService::includedServices().</para>
            <para>If this function is called multiple times using the same service UUID, the returned QLowEnergyService instances share their internal data. Therefore if one of the instances initiates the discovery of the service details, the other instances automatically transition into the discovery state too.</para>
            <para>See also services().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyController.StartAdvertising(QtBluetooth.QLowEnergyAdvertisingParameters,QtBluetooth.QLowEnergyAdvertisingData,QtBluetooth.QLowEnergyAdvertisingData)">
            <summary>
            <para>Starts advertising the data given in advertisingData and scanResponseData, using the parameters set in parameters. The controller has to be in the PeripheralRole. If parameters indicates that the advertisement should be connectable, then this function also starts listening for incoming client connections.</para>
            <para>Providing scanResponseData is not required, as it is not applicable for certain configurations of parameters.</para>
            <para>If this object is currently not in the UnconnectedState, nothing happens.</para>
            <para>Note: Advertising will stop automatically once a client connects to the local device.</para>
            <para>This function was introduced in  Qt 5.7.</para>
            <para>See also stopAdvertising().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyController.StopAdvertising">
            <summary>
            <para>Stops advertising, if this object is currently in the advertising state.</para>
            <para>This function was introduced in  Qt 5.7.</para>
            <para>See also startAdvertising().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyController.AddService(QtBluetooth.QLowEnergyServiceData,QtCore.QObject)">
            <summary>
            <para>Constructs and returns a QLowEnergyService object with parent from service. The controller must be in the PeripheralRole and in the UnconnectedState. The service object must be valid.</para>
            <para>This function was introduced in  Qt 5.7.</para>
            <para>See also QLowEnergyServiceData::addIncludedService.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyController.RequestConnectionUpdate(QtBluetooth.QLowEnergyConnectionParameters)">
            <summary>
            <para>Requests the controller to update the connection according to parameters. If the request is successful, the connectionUpdated() signal will be emitted with the actual new parameters. See the QLowEnergyConnectionParameters class for more information on connection parameters.</para>
            <para>Note: Currently, this functionality is only implemented on Linux.</para>
            <para>This function was introduced in  Qt 5.7.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyController.StartAdvertising(QtBluetooth.QLowEnergyAdvertisingParameters,QtBluetooth.QLowEnergyAdvertisingData)">
            <summary>
            <para>Starts advertising the data given in advertisingData and scanResponseData, using the parameters set in parameters. The controller has to be in the PeripheralRole. If parameters indicates that the advertisement should be connectable, then this function also starts listening for incoming client connections.</para>
            <para>Providing scanResponseData is not required, as it is not applicable for certain configurations of parameters.</para>
            <para>If this object is currently not in the UnconnectedState, nothing happens.</para>
            <para>Note: Advertising will stop automatically once a client connects to the local device.</para>
            <para>This function was introduced in  Qt 5.7.</para>
            <para>See also stopAdvertising().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyController.CreateCentral(QtBluetooth.QBluetoothDeviceInfo,QtCore.QObject)">
            <summary>
            <para>Returns a new object of this class that is in the CentralRole and has the parent object parent. The remoteDevice refers to the device that a connection will be established to later.</para>
            <para>The controller uses the local default Bluetooth adapter for the connection management.</para>
            <para>This function was introduced in  Qt 5.7.</para>
            <para>See also QLowEnergyController::CentralRole.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyController.CreatePeripheral(QtCore.QObject)">
            <summary>
            <para>Returns a new object of this class that is in the PeripheralRole and has the parent object parent. Typically, the next step is to call startAdvertising() on the returned object.</para>
            <para>The controller uses the local default Bluetooth adapter for the connection management.</para>
            <para>This function was introduced in  Qt 5.7.</para>
            <para>See also QLowEnergyController::PeripheralRole.</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QLowEnergyController.Connected">
            <summary>
            <para>This signal is emitted when the controller successfully connects to the remote Low Energy device (if the controller is in the CentralRole) or if a remote Low Energy device connected to the controller (if the controller is in the PeripheralRole).</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QLowEnergyController.Disconnected">
            <summary>
            <para>This signal is emitted when the controller disconnects from the remote Low Energy device or vice versa.</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QLowEnergyController.StateChanged">
            <summary>
            <para>This signal is emitted when the controller's state changes. The new state can also be retrieved via state().</para>
            <para>See also state().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QLowEnergyController.ErrorNewError">
            <summary>
            <para>This signal is emitted when an error occurs. The newError parameter describes the error that occurred.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(lowEnergyController, static_cast&lt;void(QLowEnergyController::*)(QLowEnergyController::Error)&gt;(&amp;QLowEnergyController::error),</para>
            <para>      [=](QLowEnergyController::Error newError){ /* ... */ });</para>
            <para></para>
            <para></para>
            <para>See also error() and errorString().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QLowEnergyController.ServiceDiscovered">
            <summary>
            <para>This signal is emitted each time a new service is discovered. The newService parameter contains the UUID of the found service.</para>
            <para>This signal can only be emitted if the controller is in the CentralRole.</para>
            <para>See also discoverServices() and discoveryFinished().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QLowEnergyController.DiscoveryFinished">
            <summary>
            <para>This signal is emitted when the running service discovery finishes. The signal is not emitted if the discovery process finishes with an error.</para>
            <para>This signal can only be emitted if the controller is in the CentralRole.</para>
            <para>See also discoverServices() and error().</para>
            </summary>
        </member>
        <member name="E:QtBluetooth.QLowEnergyController.ConnectionUpdated">
            <summary>
            <para>This signal is emitted when the connection parameters change. This can happen as a result of calling requestConnectionUpdate() or due to other reasons, for instance because the other side of the connection requested new parameters. The new values can be retrieved from newParameters.</para>
            <para>This function was introduced in  Qt 5.7.</para>
            <para>See also requestConnectionUpdate().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyController.remoteAddressType">
            <summary>
            <para>Returns the type of remoteAddress(). By default, this value is initialized to PublicAddress.</para>
            <para>See also setRemoteAddressType().</para>
            <para></para>
            <para>Sets the remote address type. The type is required to connect to the remote Bluetooth Low Energy device.</para>
            <para>See also remoteAddressType().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyController.LocalAddress">
            <summary>
            <para>Returns the address of the local Bluetooth adapter being used for the communication.</para>
            <para>If this class instance was requested to use the default adapter but there was no default adapter when creating this class instance, the returned QBluetoothAddress will be null.</para>
            <para>See also QBluetoothAddress::isNull().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyController.RemoteAddress">
            <summary>
            <para>Returns the address of the remote Bluetooth Low Energy device.</para>
            <para>For a controller in the CentralRole, this value will always be the one passed in when the controller object was created. For a controller in the PeripheralRole, this value is the address of the currently connected client device. In particular, this address will be invalid if the controller is not currently in the ConnectedState.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyController.RemoteName">
            <summary>
            <para>Returns the name of the remote Bluetooth Low Energy device, if the controller is in the CentralRole. Otherwise the result is unspecified.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyController.State">
            <summary>
            <para>Returns the current state of the controller.</para>
            <para>See also stateChanged().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyController.error">
            <summary>
            <para>Returns the last occurred error or NoError.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyController.ErrorString">
            <summary>
            <para>Returns a textual representation of the last occurred error. The string is translated.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyController.role">
            <summary>
            <para>Returns the role that this controller object is in.</para>
            <para>The role is determined when constructing a QLowEnergyController instance using createCentral() or createPeripheral().</para>
            <para>This function was introduced in  Qt 5.7.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyController.Error">
            <summary>
            <para>Indicates all possible error conditions found during the controller's existence.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.Error.NoError">
            <summary>No error has occurred.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.Error.UnknownError">
            <summary>An unknown error has occurred.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.Error.UnknownRemoteDeviceError">
            <summary>The remote Bluetooth Low Energy device with the address passed to the constructor of this class cannot be found.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.Error.NetworkError">
            <summary>The attempt to read from or write to the remote device failed.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.Error.InvalidBluetoothAdapterError">
            <summary>The local Bluetooth device with the address passed to the constructor of this class cannot be found or there is no local Bluetooth device.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.Error.ConnectionError">
            <summary>The attempt to connect to the remote device failed. This value was introduced by Qt 5.5.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.Error.AdvertisingError">
            <summary>The attempt to start advertising failed. This value was introduced by Qt 5.7.</summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyController.ControllerState">
            <summary>
            <para>Indicates the state of the controller object.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.ControllerState.UnconnectedState">
            <summary>The controller is not connected to a remote device.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.ControllerState.ConnectingState">
            <summary>The controller is attempting to connect to a remote device.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.ControllerState.ConnectedState">
            <summary>The controller is connected to a remote device.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.ControllerState.DiscoveringState">
            <summary>The controller is retrieving the list of services offered by the remote device.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.ControllerState.DiscoveredState">
            <summary>The controller has discovered all services offered by the remote device.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.ControllerState.ClosingState">
            <summary>The controller is about to be disconnected from the remote device.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.ControllerState.AdvertisingState">
            <summary>The controller is currently advertising data. This value was introduced by Qt 5.7.</summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyController.RemoteAddressType">
            <summary>
            <para>Indicates what type of Bluetooth address the remote device uses.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.RemoteAddressType.PublicAddress">
            <summary>The remote device uses a public Bluetooth address.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.RemoteAddressType.RandomAddress">
            <summary>A random address is a Bluetooth Low Energy security feature. Peripherals using such addresses may frequently change their Bluetooth address. This information is needed when trying to connect to a peripheral.</summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyController.Role">
            <summary>
            <para>Indicates the role of the controller object.</para>
            <para>Note: The peripheral role is currently only supported on Linux. In addition, handling the &quot;Signed Write&quot; ATT command on the server side requires BlueZ 5 and kernel version 3.7 or newer.</para>
            <para>This enum was introduced or modified in  Qt 5.7.</para>
            <para>See also QLowEnergyController::createCentral() and QLowEnergyController::createPeripheral().</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.Role.CentralRole">
            <summary>The controller acts as a client interacting with a remote device which is in the peripheral role. The controller can initiate connections, discover services and read and write characteristics.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyController.Role.PeripheralRole">
            <summary>The controller can be used to advertise services and handle incoming connections and client requests, acting as a GATT server. A remote device connected to the controller is in the central role.</summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyAdvertisingParameters">
            <summary>
            <para>The QLowEnergyAdvertisingParameters class represents the parameters used for Bluetooth Low Energy advertising.</para>
            </summary>
            <remarks>
            <para>When running the advertising procedure, a number of parameters can be configured, such as how fast to advertise or which clients, if any, can connect to the advertising device. These parameters are set via this class, and their values will be used when advertising is started by calling QLowEnergyController::startAdvertising().</para>
            <para></para>
            <para>See also QLowEnergyAdvertisingData and QLowEnergyController::startAdvertising().</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QLowEnergyAdvertisingParameters.#ctor">
            <summary>
            <para>Constructs a new object of this class. All values are initialized to their defaults according to the Bluetooth Low Energy specification.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyAdvertisingParameters.#ctor(QtBluetooth.QLowEnergyAdvertisingParameters)">
            <summary>
            <para>Constructs a new object of this class that is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyAdvertisingParameters.SetInterval(System.UInt16,System.UInt16)">
            <summary>
            <para>Sets the advertising interval. This is a range that gives the controller an upper and a lower bound for how often to send the advertising data. Both minimum and maximum are given in milliseconds. If maximum is smaller than minimum, it will be set to the value of minimum.</para>
            <para>Note: There are limits for the minimum and maximum interval; the exact values depend on the mode. If they are exceeded, the lowest or highest possible value will be used, respectively.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyAdvertisingParameters.Swap(QtBluetooth.QLowEnergyAdvertisingParameters)">
            <summary>
            <para>Swaps this object with other.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyAdvertisingParameters.mode">
            <summary>
            <para>Returns the advertising mode. The default is QLowEnergyAdvertisingParameters::AdvInd.</para>
            <para>See also setMode().</para>
            <para></para>
            <para>Sets the advertising mode to mode.</para>
            <para>See also mode().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyAdvertisingParameters.filterPolicy">
            <summary>
            <para>Returns the filter policy that determines how the white list is used. The default is QLowEnergyAdvertisingParameters::IgnoreWhiteList.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyAdvertisingParameters.MinimumInterval">
            <summary>
            <para>Returns the minimum advertising interval in milliseconds. The default is 1280.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyAdvertisingParameters.MaximumInterval">
            <summary>
            <para>Returns the maximum advertising interval in milliseconds. The default is 1280.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyAdvertisingParameters.Mode">
            <summary>
            <para>Specifies in which way to advertise.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyAdvertisingParameters.Mode.AdvInd">
            <summary>For non-directed, connectable advertising. Advertising is not directed to one specific device and a device seeing the advertisement can connect to the advertising device or send scan requests.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyAdvertisingParameters.Mode.AdvScanInd">
            <summary>For non-directed, scannable advertising. Advertising is not directed to one specific device and a device seeing the advertisement can send a scan request to the advertising device, but cannot connect to it.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyAdvertisingParameters.Mode.AdvNonConnInd">
            <summary>For non-directed, non-connectable advertising. Advertising is not directed to one specific device. A device seeing the advertisement cannot connect to the advertising device, nor can it send a scan request. This mode thus implies pure broadcasting.</summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyAdvertisingParameters.FilterPolicy">
            <summary>
            <para>Specifies the semantics of the white list.</para>
            <para>See also QLowEnergyAdvertisingParameters::whiteList().</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyAdvertisingParameters.FilterPolicy.IgnoreWhiteList">
            <summary>The value of the white list is ignored, that is, no filtering takes place for either scan or connection requests when using undirected advertising.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyAdvertisingParameters.FilterPolicy.UseWhiteListForScanning">
            <summary>The white list is used when handling scan requests, but is ignored for connection requests.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyAdvertisingParameters.FilterPolicy.UseWhiteListForConnecting">
            <summary>The white list is used when handling connection requests, but is ignored for scan requests.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyAdvertisingParameters.FilterPolicy.UseWhiteListForScanningAndConnecting">
            <summary>The white list is used for both connection and scan requests.</summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyAdvertisingParameters.AddressInfo">
            <summary>
            <para>The QLowEnergyAdvertisingParameters::AddressInfo defines the elements of a white list.</para>
            </summary>
            <remarks>
            <para>A list of QLowEnergyAdvertisingParameters::AddressInfo instances is passed to QLowEnergyAdvertisingParameters::setWhiteList(). White lists are used to restrict the devices which have the permission to interact with the peripheral. The permitted type of interaction is defined by QLowEnergyAdvertisingParameters::FilterPolicy.</para>
            <para></para>
            <para>See also QLowEnergyAdvertisingParameters::whiteList().</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QLowEnergyAdvertisingParameters.AddressInfo.#ctor(QtBluetooth.QBluetoothAddress,QtBluetooth.QLowEnergyController.RemoteAddressType)">
            <summary>
            <para>Constructs a new AddressInfo instance. addr represents the Bluetooth address of the remote device and type the nature of the address.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyAdvertisingParameters.AddressInfo.#ctor">
            <summary>
            <para>Constructs a default constructed AddressInfo instance.</para>
            <para>By default the AddressInfo::type member is set to QLowEnergyController::PublicAddress and the AddressInfo::address member has a null address.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyAdvertisingParameters.AddressInfo.Address">
            <summary>
            <para>This is the Bluetooth address of a remote device.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyAdvertisingParameters.AddressInfo.Type">
            <summary>
            <para>The type of the address (public or private). The AddressInfo default constructor initialises this value to QLowEnergyController::PublicAddress.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyCharacteristicData">
            <summary>
            <para>The QLowEnergyCharacteristicData class is used to set up GATT service data.</para>
            </summary>
            <remarks>
            <para>An Object of this class provides a characteristic to be added to a QLowEnergyServiceData object via QLowEnergyServiceData::addCharacteristic().</para>
            <para></para>
            <para>See also QLowEnergyServiceData and QLowEnergyController::addService.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QLowEnergyCharacteristicData.#ctor">
            <summary>
            <para>Creates a new invalid object of this class.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyCharacteristicData.#ctor(QtBluetooth.QLowEnergyCharacteristicData)">
            <summary>
            <para>Constructs a new object of this class that is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyCharacteristicData.AddDescriptor(QtBluetooth.QLowEnergyDescriptorData)">
            <summary>
            <para>Adds descriptor to the list of descriptors of this characteristic, if it is valid.</para>
            <para>See also setDescriptors().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyCharacteristicData.SetValueLength(System.Int32,System.Int32)">
            <summary>
            <para>Specifies minimum and maximum to be the smallest and largest length, respectively, that the value of this characteristic can have. The unit is bytes. If minimum and maximum are equal, the characteristic has a fixed-length value.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyCharacteristicData.Swap(QtBluetooth.QLowEnergyCharacteristicData)">
            <summary>
            <para>Swaps this object with other.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyCharacteristicData.Uuid">
            <summary>
            <para>Returns the UUID of this characteristic.</para>
            <para>See also setUuid().</para>
            <para></para>
            <para>Sets the UUID of this characteristic to uuid.</para>
            <para>See also uuid().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyCharacteristicData.Value">
            <summary>
            <para>Returns the value of this characteristic.</para>
            <para>See also setValue().</para>
            <para></para>
            <para>Sets the value of this characteristic to value.</para>
            <para>See also value().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyCharacteristicData.Properties">
            <summary>
            <para>Returns the properties of this characteristic.</para>
            <para>See also setProperties().</para>
            <para></para>
            <para>Sets the properties of this characteristic to properties.</para>
            <para>See also properties().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyCharacteristicData.ReadConstraints">
            <summary>
            <para>Returns the constraints needed for a client to read the value of this characteristic. If properties() does not include QLowEnergyCharacteristic::Read, this value is irrelevant. By default, there are no read constraints.</para>
            <para>See also setReadConstraints().</para>
            <para></para>
            <para>Specifies that clients need to fulfill constraints to read the value of this characteristic.</para>
            <para>See also readConstraints().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyCharacteristicData.WriteConstraints">
            <summary>
            <para>Returns the constraints needed for a client to write the value of this characteristic. If properties() does not include either of QLowEnergyCharacteristic::Write, QLowEnergyCharacteristic::WriteNoResponse and QLowEnergyCharacteristic::WriteSigned, this value is irrelevant. By default, there are no write constraints.</para>
            <para>See also setWriteConstraints().</para>
            <para></para>
            <para>Specifies that clients need to fulfill constraints to write the value of this characteristic.</para>
            <para>See also writeConstraints().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyCharacteristicData.MinimumValueLength">
            <summary>
            <para>Returns the minimum length in bytes that the value of this characteristic can have. The default is zero.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyCharacteristicData.MaximumValueLength">
            <summary>
            <para>Returns the maximum length in bytes that the value of this characteristic can have. By default, there is no limit beyond the constraints of the data type.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyCharacteristicData.IsValid">
            <summary>
            <para>Returns true if and only if this characteristic is valid, that is, it has a non-null UUID.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyConnectionParameters">
            <summary>
            <para>The QLowEnergyConnectionParameters class is used when requesting or reporting an update of the parameters of a Bluetooth LE connection.</para>
            </summary>
            <remarks>
            <para>The connection parameters influence how often a master and a slave device synchronize with each other. In general, a lower connection interval and latency means faster communication, but also higher power consumption. How these criteria should be weighed against each other is highly dependent on the concrete use case.</para>
            <para></para>
            <para>See also QLowEnergyController::requestConnectionUpdate and QLowEnergyController::connectionUpdated.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QLowEnergyConnectionParameters.#ctor">
            <summary>
            <para>Constructs a new object of this class. All values are initialized to valid defaults.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyConnectionParameters.#ctor(QtBluetooth.QLowEnergyConnectionParameters)">
            <summary>
            <para>Constructs a new object of this class that is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyConnectionParameters.SetIntervalRange(System.Double,System.Double)">
            <summary>
            <para>Sets the range in which the connection interval should be. The actual value will be decided by the controller. Both minimum and maximum are given in milliseconds. If maximum is smaller than minimum, it will be set to the value of minimum. The smallest possible connection interval is 7.5 milliseconds, the largest one is 4000 milliseconds.</para>
            <para>See also minimumInterval() and maximumInterval().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyConnectionParameters.Swap(QtBluetooth.QLowEnergyConnectionParameters)">
            <summary>
            <para>Swaps this object with other.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyConnectionParameters.Latency">
            <summary>
            <para>Returns the slave latency of the connection.</para>
            <para>See also setLatency().</para>
            <para></para>
            <para>Sets the slave latency of the connection (that is, the number of connection events that a slave device is allowed to ignore) to latency. The minimum value is 0, the maximum is 499.</para>
            <para>See also latency().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyConnectionParameters.SupervisionTimeout">
            <summary>
            <para>Returns the link supervision timeout of the connection in milliseconds.</para>
            <para>See also setSupervisionTimeout().</para>
            <para></para>
            <para>Sets the link supervision timeout to timeout milliseconds. There are several constraints on this value: It must be in the range [100,32000] and it must be larger than (1 + latency()) * 2 * maximumInterval().</para>
            <para>See also supervisionTimeout().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyConnectionParameters.MinimumInterval">
            <summary>
            <para>Returns the minimum connection interval in milliseconds. The default is 7.5.</para>
            <para>Note: If this object was emitted via QLowEnergyController::connectionUpdated(), then this value is the same as maximumInterval() and refers to the actual connection interval.</para>
            <para>See also setIntervalRange().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyConnectionParameters.MaximumInterval">
            <summary>
            <para>Returns the maximum connection interval in milliseconds. The default is 4000.</para>
            <para>Note: If this object was emitted via QLowEnergyController::connectionUpdated(), then this value is the same as minimumInterval() and refers to the actual connection interval.</para>
            <para>See also setIntervalRange().</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyDescriptorData">
            <summary>
            <para>The QLowEnergyDescriptorData class is used to create GATT service data.</para>
            </summary>
            <remarks>
            <para>An object of this class provides a descriptor to be added to a QLowEnergyCharacteristicData object via QLowEnergyCharacteristicData::addDescriptor().</para>
            <para>Note: The member functions related to access permissions are only applicable to those types of descriptors for which the Bluetooth specification does not prescribe if and how their values can be accessed.</para>
            <para></para>
            <para>See also QLowEnergyCharacteristicData, QLowEnergyServiceData, and QLowEnergyController::addService.</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QLowEnergyDescriptorData.#ctor">
            <summary>
            <para>Creates a new invalid object of this class.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyDescriptorData.#ctor(QtBluetooth.QBluetoothUuid,QtCore.QByteArray)">
            <summary>
            <para>Creates a new object of this class with UUID and value being provided by uuid and value, respectively.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyDescriptorData.#ctor(QtBluetooth.QLowEnergyDescriptorData)">
            <summary>
            <para>Constructs a new object of this class that is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyDescriptorData.SetReadPermissions(System.Boolean,QtBluetooth.QBluetooth.AttAccessConstraint)">
            <summary>
            <para>Specifies whether the value of this descriptor is readable and if so, under which constraints.</para>
            <para>See also setWritePermissions().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyDescriptorData.ReadConstraints">
            <summary>
            <para>Returns the constraints under which the value of this descriptor can be read. This value is only relevant if isReadable() returns true.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyDescriptorData.SetWritePermissions(System.Boolean,QtBluetooth.QBluetooth.AttAccessConstraint)">
            <summary>
            <para>Specifies whether the value of this descriptor is writable and if so, under which constraints.</para>
            <para>See also setReadPermissions().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyDescriptorData.WriteConstraints">
            <summary>
            <para>Returns the constraints under which the value of this descriptor can be written. This value is only relevant if isWritable() returns true.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyDescriptorData.Swap(QtBluetooth.QLowEnergyDescriptorData)">
            <summary>
            <para>Swaps this object with other.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyDescriptorData.Value">
            <summary>
            <para>Returns the value of this descriptor.</para>
            <para>See also setValue().</para>
            <para></para>
            <para>Sets the value of this descriptor to value. It will be sent to a peer device exactly the way it is provided here, so callers need to take care of things such as endianness.</para>
            <para>See also value().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyDescriptorData.Uuid">
            <summary>
            <para>Returns the UUID of this descriptor.</para>
            <para>See also setUuid().</para>
            <para></para>
            <para>Sets the UUID of this descriptor to uuid.</para>
            <para>See also uuid().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyDescriptorData.IsValid">
            <summary>
            <para>Returns true if and only if this object has a non-null UUID.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyDescriptorData.IsReadable">
            <summary>
            <para>Returns true if the value of this descriptor is readable and false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyDescriptorData.IsWritable">
            <summary>
            <para>Returns true if the value of this descriptor is writable and false otherwise.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyServiceData">
            <summary>
            <para>The QLowEnergyServiceData class is used to set up GATT service data.</para>
            </summary>
            <remarks>
            <para>An Object of this class provides a service to be added to a GATT server via QLowEnergyController::addService().</para>
            </remarks>
        </member>
        <member name="M:QtBluetooth.QLowEnergyServiceData.#ctor">
            <summary>
            <para>Creates a new invalid object of this class.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyServiceData.#ctor(QtBluetooth.QLowEnergyServiceData)">
            <summary>
            <para>Constructs a new object of this class that is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyServiceData.AddIncludedService(QtBluetooth.QLowEnergyService)">
            <summary>
            <para>Adds service to the list of included services. The service object must have been returned from a call to QLowEnergyController::addService. This requirement prevents circular includes (which are forbidden by the Bluetooth specification), and also helps to support the use case of including more than one service of the same type.</para>
            <para>See also setIncludedServices().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyServiceData.AddCharacteristic(QtBluetooth.QLowEnergyCharacteristicData)">
            <summary>
            <para>Adds characteristic to the list of characteristics, if it is valid.</para>
            <para>See also setCharacteristics().</para>
            </summary>
        </member>
        <member name="M:QtBluetooth.QLowEnergyServiceData.Swap(QtBluetooth.QLowEnergyServiceData)">
            <summary>
            <para>Swaps this object with other.</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyServiceData.Type">
            <summary>
            <para>Returns the type of this service.</para>
            <para>See also setType().</para>
            <para></para>
            <para>Sets the type of this service to type.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyServiceData.Uuid">
            <summary>
            <para>Returns the UUID of this service.</para>
            <para>See also setUuid().</para>
            <para></para>
            <para>Sets the UUID of this service to uuid.</para>
            <para>See also uuid().</para>
            </summary>
        </member>
        <member name="P:QtBluetooth.QLowEnergyServiceData.IsValid">
            <summary>
            <para>Returns true if this service is has a non-null UUID.</para>
            </summary>
        </member>
        <member name="T:QtBluetooth.QLowEnergyServiceData.ServiceType">
            <summary>
            <para>The type of GATT service.</para>
            </summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyServiceData.ServiceType.ServiceTypePrimary">
            <summary>The service is a primary service.</summary>
        </member>
        <member name="F:QtBluetooth.QLowEnergyServiceData.ServiceType.ServiceTypeSecondary">
            <summary>The service is a secondary service. Secondary services are included by other services to implement some higher-level functionality.</summary>
        </member>
    </members>
</doc>
