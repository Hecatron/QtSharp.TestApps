<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QtNfc.Sharp</name>
    </assembly>
    <members>
        <member name="T:QtNfc.QNdefRecord">
            <summary>
            <para>The QNdefRecord class provides an NFC NDEF record.</para>
            </summary>
            <remarks>
            <para>QNdefRecord and derived classes are used to parse the contents of NDEF messages and create new NDEF messages.</para>
            <para>Use typeNameFormat() and setTypeNameFormat() to get and set the type name format of the NDEF record.</para>
            <para>Use type() and setType() to get and set the type of the NDEF record.</para>
            <para>Use id() and setId() to get and set the id of the NDEF record.</para>
            <para>Use payload() and setPayload() to get and set the NDEF record payload. isEmpty() can be used to test if the payload is empty.</para>
            <para>QNdefRecord is an implicitly shared class. This means you can efficiently convert between QNdefRecord and specialized record classes. The isRecordType() template function can be used to test if a conversion is possible. The following example shows how to test if a QNdefRecord is an NFC RTD Text record and extract the text information from it.</para>
            <para></para>
            <para></para>
            <para>  if (record.isRecordType&lt;QNdefNfcTextRecord&gt;()) {</para>
            <para>      QNdefNfcTextRecord textRecord(record);</para>
            <para></para>
            <para>      qDebug() &lt;&lt; textRecord.text();</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para></para>
            <para>Creating Specialized NDEF Record Classes</para>
            <para>Specialized NDEF record classes can be easily created with the Q_DECLARE_NDEF_RECORD() and Q_DECLARE_ISRECORDTYPE_FOR_NDEF_RECORD() macros. The following example shows the class declaration of the hypothetical example.com:f record type that encapsulates a single int property foo.</para>
            <para></para>
            <para></para>
            <para>  class ExampleComF : public QNdefRecord</para>
            <para>  {</para>
            <para>  public:</para>
            <para>      Q_DECLARE_NDEF_RECORD(ExampleComF, QNdefRecord::ExternalRtd, &quot;example.com:f&quot;,</para>
            <para>                            QByteArray(sizeof(int), char(0)))</para>
            <para></para>
            <para>      int foo() const;</para>
            <para>      void setFoo(int v);</para>
            <para>  };</para>
            <para></para>
            <para>  Q_DECLARE_ISRECORDTYPE_FOR_NDEF_RECORD(ExampleComF, QNdefRecord::ExternalRtd, &quot;example.com:f&quot;)</para>
            <para></para>
            <para></para>
            <para>The developer only needs to provide implementations for the foo() and setFoo() functions that parse and set the contents of the NDEF record's payload.</para>
            </remarks>
        </member>
        <member name="M:QtNfc.QNdefRecord.#ctor">
            <summary>
            <para>Constructs a new empty NDEF record.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefRecord.#ctor(QtNfc.QNdefRecord)">
            <summary>
            <para>Constructs a new NDEF record that is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefRecord.op_Equality(QtNfc.QNdefRecord,QtNfc.QNdefRecord)">
            <summary>
            <para>Returns true if other and this NDEF record are the same.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefRecord.op_Inequality(QtNfc.QNdefRecord,QtNfc.QNdefRecord)">
            <summary>
            <para>Returns true if this NDEF record does not equal other; otherwise return false.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefRecord.typeNameFormat">
            <summary>
            <para>Returns the type name format of the NDEF record.</para>
            <para>See also setTypeNameFormat().</para>
            <para></para>
            <para>Sets the type name format of the NDEF record to typeNameFormat.</para>
            <para>See also typeNameFormat().</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefRecord.Type">
            <summary>
            <para>Returns the type of the NDEF record.</para>
            <para>See also setType().</para>
            <para></para>
            <para>Sets the type of the NDEF record to type.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefRecord.Id">
            <summary>
            <para>Returns the id of the NDEF record.</para>
            <para>See also setId().</para>
            <para></para>
            <para>Sets the id of the NDEF record to id.</para>
            <para>See also id().</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefRecord.Payload">
            <summary>
            <para>Returns the payload of the NDEF record.</para>
            <para>See also setPayload().</para>
            <para></para>
            <para>Sets the payload of the NDEF record to payload.</para>
            <para>See also payload().</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefRecord.IsEmpty">
            <summary>
            <para>Returns true if the NDEF record contains an empty payload; otherwise return false.</para>
            <para>This is equivalent to calling payload().isEmpty().</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefRecord.IsRecordType">
            <summary>
            <para>Returns true if the NDEF record is of the specified record type; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefRecord.IsRecordType1">
            <summary>
            <para>Returns true if the NDEF record is of the specified record type; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefRecord.IsRecordType2">
            <summary>
            <para>Returns true if the NDEF record is of the specified record type; otherwise returns false.</para>
            </summary>
        </member>
        <member name="T:QtNfc.QNdefRecord.TypeNameFormat">
            <summary>
            <para>This enum describes the type name format of an NDEF record.</para>
            </summary>
        </member>
        <member name="F:QtNfc.QNdefRecord.TypeNameFormat.Empty">
            <summary>An empty NDEF record, the record does not contain a payload</summary>
        </member>
        <member name="F:QtNfc.QNdefRecord.TypeNameFormat.NfcRtd">
            <summary>The NDEF record type is defined by an NFC RTD Specification</summary>
        </member>
        <member name="F:QtNfc.QNdefRecord.TypeNameFormat.Mime">
            <summary>The NDEF record type follows the construct described in RFC 2046</summary>
        </member>
        <member name="F:QtNfc.QNdefRecord.TypeNameFormat.Uri">
            <summary>The NDEF record type follows the construct described in RFC 3986</summary>
        </member>
        <member name="F:QtNfc.QNdefRecord.TypeNameFormat.ExternalRtd">
            <summary>The NDEF record type follows the construct for external type names described the NFC RTD Specification</summary>
        </member>
        <member name="F:QtNfc.QNdefRecord.TypeNameFormat.Unknown">
            <summary>The type of the record is unknown and should be treated similar to content with MIME type 'application/octet-stream' without further context</summary>
        </member>
        <member name="T:QtNfc.QNdefFilter">
            <summary>
            <para>The QNdefFilter class provides a filter for matching NDEF messages.</para>
            </summary>
            <remarks>
            <para>The QNdefFilter encapsulates the structure of an NDEF message and is used by QNearFieldManager::registerNdefMessageHandler() to match NDEF message that have a particular structure.</para>
            <para>The following filter matches NDEF messages that contain a single smart poster record:</para>
            <para></para>
            <para></para>
            <para>  QNdefFilter filter;</para>
            <para>  filter.append(QNdefRecord::NfcRtd, &quot;Sp&quot;);</para>
            <para></para>
            <para></para>
            <para>The following filter matches NDEF messages that contain a URI, a localized piece of text and an optional JPEG image. The order of the records must be in the order specified:</para>
            <para></para>
            <para></para>
            <para>  QNdefFilter filter;</para>
            <para>  filter.setOrderMatch(true);</para>
            <para>  filter.appendRecord(QNdefRecord::NfcRtd, &quot;U&quot;);</para>
            <para>  filter.appendRecord&lt;QNdefNfcTextRecord&gt;();</para>
            <para>  filter.appendRecord(QNdefRecord::Mime, &quot;image/jpeg&quot;, 0, 1);</para>
            </remarks>
        </member>
        <member name="M:QtNfc.QNdefFilter.#ctor">
            <summary>
            <para>Constructs a new NDEF filter.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefFilter.#ctor(QtNfc.QNdefFilter)">
            <summary>
            <para>constructs a new NDEF filter that is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefFilter.Clear">
            <summary>
            <para>Clears the filter.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefFilter.AppendRecord(QtNfc.QNdefRecord.TypeNameFormat,QtCore.QByteArray,System.UInt32,System.UInt32)">
            <summary>
            <para>Appends a record with type name format typeNameFormat and type type to the NDEF filter. The record must occur between min and max times in the NDEF message.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefFilter.AppendRecord(QtNfc.QNdefFilter.Record)">
            <summary>
            <para>Appends record to the NDEF filter.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefFilter.RecordAt(System.Int32)">
            <summary>
            <para>Returns the NDEF record at index i.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefFilter.OrderMatch">
            <summary>
            <para>Returns true if the filter takes NDEF record order into account when matching; otherwise returns false.</para>
            <para>See also setOrderMatch().</para>
            <para></para>
            <para>Sets the ording requirements of the filter. If on is true the filter will only match if the order of records in the filter matches the order of the records in the NDEF message. If on is false the order of the records is not taken into account when matching.</para>
            <para>By default record order is not taken into account.</para>
            <para>See also orderMatch().</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefFilter.RecordCount">
            <summary>
            <para>Returns the number of NDEF records in the filter.</para>
            </summary>
        </member>
        <member name="T:QtNfc.QNdefMessage">
            <summary>
            <para>The QNdefMessage class provides an NFC NDEF message.</para>
            </summary>
            <remarks>
            <para>A QNdefMessage is a collection of 0 or more QNdefRecords. QNdefMessage inherits from QList&lt;QNdefRecord&gt; and therefore the standard QList functions can be used to manipulate the NDEF records in the message.</para>
            <para>NDEF messages can be parsed from a byte array conforming to the NFC Data Exchange Format technical specification by using the fromByteArray() static function. Conversely QNdefMessages can be converted into a byte array with the toByteArray() function.</para>
            </remarks>
        </member>
        <member name="M:QtNfc.QNdefMessage.#ctor">
            <summary>
            <para>Constructs a new empty NDEF message.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefMessage.#ctor(QtNfc.QNdefRecord)">
            <summary>
            <para>Constructs a new NDEF message containing a single record record.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefMessage.#ctor(QtNfc.QNdefMessage)">
            <summary>
            <para>Constructs a new NDEF message that is a copy of message.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefMessage.op_Equality(QtNfc.QNdefMessage,QtNfc.QNdefMessage)">
            <summary>
            <para>Returns true if this NDEF message is equivalent to other; otherwise returns false.</para>
            <para>An empty message (i.e. isEmpty() returns true) is equivalent to a NDEF message containing a single record of type QNdefRecord::Empty.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefMessage.ToByteArray">
            <summary>
            <para>Returns the NDEF message as a byte array.</para>
            <para>The return value of this function conforms to the format defined in the NFC Data Exchange Format technical specification.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefMessage.FromByteArray(QtCore.QByteArray)">
            <summary>
            <para>Returns an NDEF message parsed from the contents of message.</para>
            <para>The message parameter is interpreted as the raw message format defined in the NFC Data Exchange Format technical specification.</para>
            <para>If a parse error occurs an empty NDEF message is returned.</para>
            </summary>
        </member>
        <member name="T:QtNfc.QNdefNfcTextRecord">
            <summary>
            <para>The QNdefNfcTextRecord class provides an NFC RTD-Text</para>
            </summary>
            <remarks>
            <para>RTD-Text encapsulates a user displayable text record.</para>
            </remarks>
        </member>
        <member name="M:QtNfc.QNdefNfcTextRecord.#ctor">
            <summary>
            <para>Constructs an empty NFC text record of type QNdefRecord::NfcRtd.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcTextRecord.#ctor(QtNfc.QNdefRecord)">
            <summary>
            <para>Constructs a new NFC text record that is a copy of other.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefNfcTextRecord.Locale">
            <summary>
            <para>Returns the locale of the text record.</para>
            <para>See also setLocale().</para>
            <para></para>
            <para>Sets the locale of the text record to locale.</para>
            <para>See also locale().</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefNfcTextRecord.Text">
            <summary>
            <para>Returns the contents of the text record as a string.</para>
            <para>See also setText().</para>
            <para></para>
            <para>Sets the contents of the text record to text.</para>
            <para>See also text().</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefNfcTextRecord.encoding">
            <summary>
            <para>Returns the encoding of the contents.</para>
            <para>See also setEncoding().</para>
            <para></para>
            <para>Sets the enconding of the contents to encoding.</para>
            <para>See also encoding().</para>
            </summary>
        </member>
        <member name="T:QtNfc.QNdefNfcTextRecord.Encoding">
            <summary>
            <para>This enum describes the text encoding standard used.</para>
            </summary>
        </member>
        <member name="F:QtNfc.QNdefNfcTextRecord.Encoding.Utf8">
            <summary>The text is encoded with UTF-8.</summary>
        </member>
        <member name="F:QtNfc.QNdefNfcTextRecord.Encoding.Utf16">
            <summary>The text is encoding with UTF-16.</summary>
        </member>
        <member name="T:QtNfc.QNdefNfcUriRecord">
            <summary>
            <para>The QNdefNfcUriRecord class provides an NFC RTD-URI</para>
            </summary>
            <remarks>
            <para>RTD-URI encapsulates a URI.</para>
            </remarks>
        </member>
        <member name="M:QtNfc.QNdefNfcUriRecord.#ctor">
            <summary>
            <para>Constructs an empty NFC uri record.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcUriRecord.#ctor(QtNfc.QNdefRecord)">
            <summary>
            <para>Constructs a new NFC uri record that is a copy of other.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefNfcUriRecord.Uri">
            <summary>
            <para>Returns the URI of this URI record.</para>
            <para>See also setUri().</para>
            <para></para>
            <para>Sets the URI of this URI record to uri.</para>
            <para>See also uri().</para>
            </summary>
        </member>
        <member name="T:QtNfc.QNdefNfcSmartPosterRecord">
            <summary>
            <para>The QNdefNfcSmartPosterRecord class provides an NFC RTD-SmartPoster.</para>
            </summary>
            <remarks>
            <para>RTD-SmartPoster encapsulates a Smart Poster.</para>
            </remarks>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.#ctor">
            <summary>
            <para>Constructs a new empty smart poster.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.#ctor(QtNfc.QNdefRecord)">
            <summary>
            <para>Constructs a new smart poster that is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.#ctor(QtNfc.QNdefNfcSmartPosterRecord)">
            <summary>
            <para>Constructs a new smart poster that is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.HasTitle(System.String)">
            <summary>
            <para>Returns true if the smart poster contains a title record using locale locale. If locale is empty then true is returned if the smart poster contains at least one title record. In all cases false is returned.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.HasIcon(QtCore.QByteArray)">
            <summary>
            <para>Returns true if the smart poster contains an icon record using type mimetype. If mimetype is empty then true is returned if the smart poster contains at least one icon record. In all other cases false is returned.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.TitleRecord(System.Int32)">
            <summary>
            <para>Returns the title record corresponding to the index index inside the smart poster, where index is a value between 0 and titleCount() - 1. Values outside of this range return an empty record.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.Title(System.String)">
            <summary>
            <para>Returns the title record text associated with locale locale if available. If locale is empty then the title text of the first available record is returned. In all other cases an empty string is returned.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.AddTitle(QtNfc.QNdefNfcTextRecord)">
            <summary>
            <para>Attempts to add a title record text to the smart poster. If the smart poster does not already contain a title record with the same locale as title record text, then the title record is added and the function returns true. Otherwise false is returned.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.AddTitle(System.String,System.String,QtNfc.QNdefNfcTextRecord.Encoding)">
            <summary>
            <para>Attempts to add a new title record with title text, locale locale and encoding encoding. If the smart poster does not already contain a title record with locale locale, then the title record is added and the function returns true. Otherwise false is returned.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.RemoveTitle(QtNfc.QNdefNfcTextRecord)">
            <summary>
            <para>Attempts to remove the title record text from the smart poster. Removes the record and returns true if the smart poster contains a matching record, otherwise false.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.RemoveTitle(System.String)">
            <summary>
            <para>Attempts to remove a title record with locale locale from the smart poster. Removes the record and returns true if the smart poster contains a matching record, otherwise false.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.SetUri(QtNfc.QNdefNfcUriRecord)">
            <summary>
            <para>Sets the URI record to url</para>
            <para>See also uri().</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.IconRecord(System.Int32)">
            <summary>
            <para>Returns the icon record corresponding to the index index inside the smart poster, where index is a value between 0 and iconCount() - 1. Values outside of this range return an empty record.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.Icon(QtCore.QByteArray)">
            <summary>
            <para>Returns the associated icon record data if the smart poster contains an icon record with MIME type mimetype. If mimetype is omitted or empty then the first icon's record data is returned. In all other cases, an empty array is returned.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.AddIcon(QtNfc.QNdefNfcIconRecord)">
            <summary>
            <para>Adds an icon record icon to the smart poster. If the smart poster already contains an icon record with the same type then the existing icon record is replaced.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.AddIcon(QtCore.QByteArray,QtCore.QByteArray)">
            <summary>
            <para>Adds an icon record with type type and data data to the smart poster. If the smart poster already contains an icon record with the same type then the existing icon record is replaced.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.RemoveIcon(QtNfc.QNdefNfcIconRecord)">
            <summary>
            <para>Attempts to remove the icon record icon from the smart poster. Removes the record and returns true if the smart poster contains a matching record, otherwise false.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.RemoveIcon(QtCore.QByteArray)">
            <summary>
            <para>Attempts to remove the icon record with type type from the smart poster. Removes the record and returns true if the smart poster contains a matching record, otherwise false.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.HasIcon">
            <summary>
            <para>Returns true if the smart poster contains an icon record using type mimetype. If mimetype is empty then true is returned if the smart poster contains at least one icon record. In all other cases false is returned.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNdefNfcSmartPosterRecord.Icon">
            <summary>
            <para>Returns the associated icon record data if the smart poster contains an icon record with MIME type mimetype. If mimetype is omitted or empty then the first icon's record data is returned. In all other cases, an empty array is returned.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefNfcSmartPosterRecord.Uri">
            <summary>
            <para>Returns the URI from the smart poster's URI record if set. Otherwise an empty URI is returned.</para>
            <para>See also setUri().</para>
            <para></para>
            <para>Constructs a URI record and sets its content inside the smart poster to url</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefNfcSmartPosterRecord.action">
            <summary>
            <para>Returns the action from the action record if available. Otherwise UnspecifiedAction is returned.</para>
            <para>See also setAction().</para>
            <para></para>
            <para>Sets the action record to act</para>
            <para>See also action().</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefNfcSmartPosterRecord.Size">
            <summary>
            <para>Returns the size from the size record if available; otherwise returns 0.</para>
            <para>The value is optional and contains the size in bytes of the object that the URI refers to. It may be used by the device to determine whether it can accommodate the object.</para>
            <para>See also setSize().</para>
            <para></para>
            <para>Sets the record size. The value contains the size in bytes of the object that the URI refers to.</para>
            <para>See also size() and hasSize().</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefNfcSmartPosterRecord.TypeInfo">
            <summary>
            <para>Returns the UTF-8 encoded MIME type that describes the type of the objects that can be reached via uri().</para>
            <para>If the type is not known the return QByteArray is empty.</para>
            <para>See also setTypeInfo() and hasTypeInfo().</para>
            <para></para>
            <para>Sets the type record to type. type must be UTF-8 encoded and describes the type of the object referenced by uri()</para>
            <para>See also typeInfo().</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefNfcSmartPosterRecord.HasAction">
            <summary>
            <para>Returns true if the smart poster contains an action record, otherwise false.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefNfcSmartPosterRecord.HasSize">
            <summary>
            <para>Returns true if the smart poster contains a size record, otherwise false.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefNfcSmartPosterRecord.HasTypeInfo">
            <summary>
            <para>Returns true if the smart poster contains a type record, otherwise false.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefNfcSmartPosterRecord.TitleCount">
            <summary>
            <para>Returns the number of title records contained inside the smart poster.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefNfcSmartPosterRecord.UriRecord">
            <summary>
            <para>Returns the smart poster's URI record if set. Otherwise an empty URI is returned.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNdefNfcSmartPosterRecord.IconCount">
            <summary>
            <para>Returns the number of icon records contained inside the smart poster.</para>
            </summary>
        </member>
        <member name="T:QtNfc.QNdefNfcSmartPosterRecord.Action">
            <summary>
            <para>This enum describes the course of action that a device should take with the content.</para>
            </summary>
        </member>
        <member name="F:QtNfc.QNdefNfcSmartPosterRecord.Action.UnspecifiedAction">
            <summary>The action is not defined.</summary>
        </member>
        <member name="F:QtNfc.QNdefNfcSmartPosterRecord.Action.DoAction">
            <summary>Do the action (send the SMS, launch the browser, make the telephone call).</summary>
        </member>
        <member name="F:QtNfc.QNdefNfcSmartPosterRecord.Action.SaveAction">
            <summary>Save for later (store the SMS in INBOX, put the URI in a bookmark, save the telephone number in contacts).</summary>
        </member>
        <member name="F:QtNfc.QNdefNfcSmartPosterRecord.Action.EditAction">
            <summary>Open for editing (open an SMS in the SMS editor, open the URI in a URI editor, open the telephone number for editing).</summary>
        </member>
        <member name="T:QtNfc.QNearFieldTarget">
            <summary>
            <para>The QNearFieldTarget class provides an interface for communicating with a target device.</para>
            </summary>
            <remarks>
            <para>QNearFieldTarget provides a generic interface for communicating with an NFC target device. Both NFC Forum devices and NFC Forum Tag targets are supported by this class. All target specific classes subclass this class.</para>
            <para>The type() function can be used to get the type of the target device. The uid() function returns the unique identifier of the target. The AccessMethods flags returns from the accessMethods() function can be tested to determine which access methods are supported by the target.</para>
            <para>If the target supports NdefAccess, hasNdefMessage() can be called to test if the target has a stored NDEF message, readNdefMessages() and writeNdefMessages() functions can be used to get and set the NDEF message.</para>
            <para>If the target supports TagTypeSpecificAccess, sendCommand() can be used to send a single proprietary command to the target and retrieve the response. sendCommands() can be used to send multiple proprietary commands to the target and retrieve all of the responses.</para>
            <para>If the target supports LlcpAccess, the QLlcpSocket class can be used to connected to a service provided by the target.</para>
            </remarks>
        </member>
        <member name="M:QtNfc.QNearFieldTarget.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new near field target with parent.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNearFieldTarget.ReadNdefMessages">
            <summary>
            <para>Starts reading NDEF messages stored on the near field target. Returns a request id which can be used to track the completion status of the request. An invalid request id will be returned if the target does not support reading NDEF messages.</para>
            <para>An ndefMessageRead() signal will be emitted for each NDEF message. The requestCompleted() signal will be emitted was all NDEF messages have been read. The error() signal is emitted if an error occurs.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNearFieldTarget.SendCommand(QtCore.QByteArray)">
            <summary>
            <para>Sends command to the near field target. Returns a request id which can be used to track the completion status of the request. An invalid request id will be returned if the target does not support sending tag type specific commands.</para>
            <para>The requestCompleted() signal will be emitted on successful completion of the request; otherwise the error() signal will be emitted.</para>
            <para>Once the request completes successfully the response can be retrieved from the requestResponse() function. The response of this request will be a QByteArray.</para>
            <para>See also requestCompleted() and waitForRequestCompleted().</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNearFieldTarget.WaitForRequestCompleted(QtNfc.QNearFieldTarget.RequestId,System.Int32)">
            <summary>
            <para>Waits up to msecs milliseconds for the request id to complete. Returns true if the request completes successfully and the requestCompeted() signal is emitted; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNearFieldTarget.RequestResponse(QtNfc.QNearFieldTarget.RequestId)">
            <summary>
            <para>Returns the decoded response for request id. If the request is unknown or has not yet been completed an invalid QVariant is returned.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNearFieldTarget.SetResponseForRequest(QtNfc.QNearFieldTarget.RequestId,QtCore.QVariant,System.Boolean)">
            <summary>
            <para>Sets the decoded response for request id to response. If emitRequestCompleted is true the requestCompleted() signal will be emitted for id; otherwise no signal will be emitted.</para>
            <para>See also requestResponse().</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNearFieldTarget.HandleResponse(QtNfc.QNearFieldTarget.RequestId,QtCore.QByteArray)">
            <summary>
            <para>Handles the response received for the request id. Returns true if the response is handled; otherwise returns false.</para>
            <para>Classes reimplementing this virtual function should call the base class implementation to ensure that requests initiated by those classes are handled correctly.</para>
            <para>The default implementation stores the response such that it can be retrieved by requestResponse().</para>
            </summary>
        </member>
        <member name="E:QtNfc.QNearFieldTarget.Disconnected">
            <summary>
            <para>This signal is emitted when the near field target moves out of proximity.</para>
            </summary>
        </member>
        <member name="E:QtNfc.QNearFieldTarget.NdefMessageRead">
            <summary>
            <para>This signal is emitted when a complete NDEF message has been read from the target.</para>
            <para>See also readNdefMessages().</para>
            </summary>
        </member>
        <member name="E:QtNfc.QNearFieldTarget.NdefMessagesWritten">
            <summary>
            <para>This signal is emitted when NDEF messages have been successfully written to the target.</para>
            <para>See also writeNdefMessages().</para>
            </summary>
        </member>
        <member name="E:QtNfc.QNearFieldTarget.RequestCompleted">
            <summary>
            <para>This signal is emitted when a request id completes.</para>
            <para>See also sendCommand().</para>
            </summary>
        </member>
        <member name="E:QtNfc.QNearFieldTarget.ErrorSignal">
            <summary>
            <para>This signal is emitted when an error occurs while processing request id. The error parameter describes the error.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNearFieldTarget.Uid">
            <summary>
            <para>Returns the UID of the near field target.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNearFieldTarget.Url">
            <summary>
            <para>Returns the URL of the near field target.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNearFieldTarget.type">
            <summary>
            <para>Returns the type of tag type of this near field target.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNearFieldTarget.AccessMethods">
            <summary>
            <para>Returns the access methods support by this near field target.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNearFieldTarget.IsProcessingCommand">
            <summary>
            <para>Returns true if the target is processing commands; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNearFieldTarget.HasNdefMessage">
            <summary>
            <para>Returns true if at least one NDEF message is stored on the near field target; otherwise returns false.</para>
            </summary>
        </member>
        <member name="T:QtNfc.QNearFieldTarget.Type">
            <summary>
            <para>This enum describes the type of tag the target is detected as.</para>
            </summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.Type.ProprietaryTag">
            <summary>An unidentified proprietary target tag.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.Type.NfcTagType1">
            <summary>An NFC tag type 1 target.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.Type.NfcTagType2">
            <summary>An NFC tag type 2 target.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.Type.NfcTagType3">
            <summary>An NFC tag type 3 target.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.Type.NfcTagType4">
            <summary>An NFC tag type 4 target.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.Type.MifareTag">
            <summary>A Mifare target.</summary>
        </member>
        <member name="T:QtNfc.QNearFieldTarget.AccessMethod">
            <summary>
            <para>This enum describes the access methods a near field target supports.</para>
            <para>The AccessMethods type is a typedef for QFlags&lt;AccessMethod&gt;. It stores an OR combination of AccessMethod values.</para>
            </summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.AccessMethod.UnknownAccess">
            <summary>The target supports an unknown access type.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.AccessMethod.NdefAccess">
            <summary>The target supports reading and writing NDEF messages using readNdefMessages() and writeNdefMessages().</summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.AccessMethod.TagTypeSpecificAccess">
            <summary>The target supports sending tag type specific commands using sendCommand() and sendCommands().</summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.AccessMethod.LlcpAccess">
            <summary>The target supports peer-to-peer LLCP communication.</summary>
        </member>
        <member name="T:QtNfc.QNearFieldTarget.Error">
            <summary>
            <para>This enum describes the error codes that that a near field target reports.</para>
            </summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.Error.NoError">
            <summary>No error has occurred.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.Error.UnknownError">
            <summary>An unidentified error occurred.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.Error.UnsupportedError">
            <summary>The requested operation is unsupported by this near field target.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.Error.TargetOutOfRangeError">
            <summary>The target is no longer within range.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.Error.NoResponseError">
            <summary>The target did not respond.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.Error.ChecksumMismatchError">
            <summary>The checksum has detected a corrupted response.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.Error.InvalidParametersError">
            <summary>Invalid parameters were passed to a tag type specific function.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.Error.NdefReadError">
            <summary>Failed to read NDEF messages from the target.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldTarget.Error.NdefWriteError">
            <summary>Failed to write NDEF messages to the target.</summary>
        </member>
        <member name="M:QtNfc.QNearFieldTarget.RequestId.#ctor">
            <summary>
            <para>Constructs a new invalid request id handle.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNearFieldTarget.RequestId.#ctor(QtNfc.QNearFieldTarget.RequestId)">
            <summary>
            <para>Constructs a new request id handle that is a copy of other.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNearFieldTarget.RequestId.IsValid">
            <summary>
            <para>Returns true if this is a valid request id; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNearFieldTarget.RequestId.RefCount">
            <summary>
            <para>Returns the current reference count of the request id.</para>
            </summary>
        </member>
        <member name="T:QtNfc.QNearFieldManager">
            <summary>
            <para>The QNearFieldManager class provides access to notifications for NFC events.</para>
            </summary>
            <remarks>
            <para>NFC Forum devices support two modes of communications. The first mode, peer-to-peer communications, is used to communicate between two NFC Forum devices. The second mode, master/slave communications, is used to communicate between an NFC Forum device and an NFC Forum Tag or Contactless Card. The targetDetected() signal is emitted when a target device enters communications range. Communications can be initiated from the slot connected to this signal.</para>
            <para>NFC Forum devices generally operate as the master in master/slave communications. Some devices are also capable of operating as the slave, so called Card Emulation mode. In this mode the local NFC device emulates a NFC Forum Tag or Contactless Card.</para>
            <para>NFC Forum Tags can contain one or more messages in a standardized format. These messages are encapsulated by the QNdefMessage class. Use the registerNdefMessageHandler() functions to register message handlers with particular criteria. Handlers can be unregistered with the unregisterNdefMessageHandler() function.</para>
            <para>Applications can connect to the targetDetected() and targetLost() signals to get notified when an NFC Forum Tag enters or leaves proximity. Before these signals are emitted target detection must be started with the startTargetDetection() function. Target detection can be stopped with the stopTargetDetection() function. Before a detected target can be accessed it is necessary to request access rights. This must be done before the target device is touched. The setTargetAccessModes() function is used to set the types of access the application wants to perform on the detected target. When access is no longer required the target access modes should be set to NoTargetAccess as other applications may be blocked from accessing targets. The current target access modes can be retried with the targetAccessModes() function.</para>
            <para></para>
            <para>Automatically launching NDEF message handlers</para>
            <para>On some platforms it is possible to pre-register an application to receive NDEF messages matching a given criteria. This is useful to get the system to automatically launch your application when a matching NDEF message is received. This removes the need to have the user manually launch NDEF handling applications, prior to touching a tag, or to have those applications always running and using system resources.</para>
            <para>The process of registering the handler is different for each platform. Please refer to the platform documentation on how such a registration may be done. If the application has been registered as an NDEF message handler, the application only needs to call the registerNdefMessageHandler() function:</para>
            <para></para>
            <para></para>
            <para>  QNearFieldManager *manager = new QNearFieldManager(this);</para>
            <para>  manager-&gt;registerNdefMessageHandler(this,</para>
            <para>              SLOT(handleNdefMessage(QNdefMessage,QNearFieldTarget*)));</para>
            <para></para>
            <para></para>
            <para>Automatically launching NDEF message handlers is supported on Android.</para>
            <para></para>
            <para>NFC on Linux</para>
            <para>The Linux NFC project provides software to support NFC on Linux platforms. The neard daemon will allow access to the supported hardware via DBus interfaces. QtNfc requires neard version 0.14 which can be built from source or installed via the appropriate Linux package manager. Not all API features are currently supported. To allow QtNfc to access the DBus interfaces the neard daemon has to be running. In case of problems debug output can be enabled by enabling categorized logging for 'qt.nfc.neard'.</para>
            </remarks>
        </member>
        <member name="M:QtNfc.QNearFieldManager.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new near field manager with parent.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNearFieldManager.StartTargetDetection">
            <summary>
            <para>Starts detecting targets and returns true if target detection is successfully started; otherwise returns false. Causes the targetDetected() signal to be emitted when a target is within proximity.</para>
            <para>Note: For platforms using neard: target detection will stop as soon as a tag has been detected.</para>
            <para>See also stopTargetDetection().</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNearFieldManager.StopTargetDetection">
            <summary>
            <para>Stops detecting targets. The targetDetected() signal will no longer be emitted until another call to startTargetDetection() is made.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNearFieldManager.RegisterNdefMessageHandler(QtCore.QObject,System.String)">
            <summary>
            <para>Registers object to receive notifications on method when a tag has been detected and has an NDEF message that matches a pre-registered message format. The method on object should have the prototype 'void targetDetected(const QNdefMessage &amp;message, QNearFieldTarget *target)'.</para>
            <para>Returns an identifier, which can be used to unregister the handler, on success; otherwise returns -1.</para>
            <para>This function is used to register a QNearFieldManager instance to receive notifications when a NDEF message matching a pre-registered message format is received. See the section on Automatically launching NDEF message handlers.</para>
            <para>Note: The target parameter of method may not be available on all platforms, in which case target will be 0.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNearFieldManager.RegisterNdefMessageHandler(QtNfc.QNdefRecord.TypeNameFormat,QtCore.QByteArray,QtCore.QObject,System.String)">
            <summary>
            <para>Registers object to receive notifications on method when a tag has been detected and has an NDEF record that matches typeNameFormat and type. The method on object should have the prototype 'void targetDetected(const QNdefMessage &amp;message, QNearFieldTarget *target)'.</para>
            <para>Returns an identifier, which can be used to unregister the handler, on success; otherwise returns -1.</para>
            <para>Note: The target parameter of method may not be available on all platforms, in which case target will be 0.</para>
            <para>Note: On platforms using neard registering message handlers is not supported.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNearFieldManager.RegisterNdefMessageHandler(QtNfc.QNdefFilter,QtCore.QObject,System.String)">
            <summary>
            <para>Registers object to receive notifications on method when a tag has been detected and has an NDEF message that matches filter is detected. The method on object should have the prototype 'void targetDetected(const QNdefMessage &amp;message, QNearFieldTarget *target)'.</para>
            <para>Returns an identifier, which can be used to unregister the handler, on success; otherwise returns -1.</para>
            <para>Note: The target parameter of method may not be available on all platforms, in which case target will be 0.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNearFieldManager.UnregisterNdefMessageHandler(System.Int32)">
            <summary>
            <para>Unregisters the target detect handler identified by handlerId.</para>
            <para>Returns true on success; otherwise returns false.</para>
            </summary>
        </member>
        <member name="E:QtNfc.QNearFieldManager.TargetDetected">
            <summary>
            <para>This signal is emitted whenever a target is detected. The target parameter represents the detected target.</para>
            <para>This signal will be emitted for all detected targets.</para>
            <para>QNearFieldManager maintains ownership of target, however, it will not be destroyed until the QNearFieldManager destructor is called. Ownership may be transferred by calling setParent().</para>
            <para>Do not delete target from the slot connected to this signal, instead call deleteLater().</para>
            <para>Note: that if target is deleted before it moves out of proximity the targetLost() signal will not be emitted.</para>
            <para>See also targetLost().</para>
            </summary>
        </member>
        <member name="E:QtNfc.QNearFieldManager.TargetLost">
            <summary>
            <para>This signal is emitted whenever a target moves out of proximity. The target parameter represents the lost target.</para>
            <para>Do not delete target from the slot connected to this signal, instead use deleteLater().</para>
            <para>See also QNearFieldTarget::disconnected().</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNearFieldManager.TargetAccessModes">
            <summary>
            <para>Returns current requested target access modes.</para>
            <para>See also setTargetAccessModes().</para>
            <para></para>
            <para>Sets the requested target access modes to accessModes.</para>
            <para>See also targetAccessModes().</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNearFieldManager.IsAvailable">
            <summary>
            <para>Returns true if NFC functionality is available; otherwise returns false.</para>
            </summary>
        </member>
        <member name="T:QtNfc.QNearFieldManager.TargetAccessMode">
            <summary>
            <para>This enum describes the different access modes an application can have.</para>
            <para>The TargetAccessModes type is a typedef for QFlags&lt;TargetAccessMode&gt;. It stores an OR combination of TargetAccessMode values.</para>
            </summary>
        </member>
        <member name="F:QtNfc.QNearFieldManager.TargetAccessMode.NoTargetAccess">
            <summary>The application cannot access NFC capabilities.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldManager.TargetAccessMode.NdefReadTargetAccess">
            <summary>The application can read NDEF messages from targets by calling QNearFieldTarget::readNdefMessages().</summary>
        </member>
        <member name="F:QtNfc.QNearFieldManager.TargetAccessMode.NdefWriteTargetAccess">
            <summary>The application can write NDEF messages to targets by calling QNearFieldTarget::writeNdefMessages().</summary>
        </member>
        <member name="F:QtNfc.QNearFieldManager.TargetAccessMode.TagTypeSpecificTargetAccess">
            <summary>The application can access targets using raw commands by calling QNearFieldTarget::sendCommand().</summary>
        </member>
        <member name="T:QtNfc.QNearFieldShareManager">
            <summary>
            <para>The QNearFieldShareManager class manages all interactions related to sharing files and data over NFC.</para>
            </summary>
            <remarks>
            <para>Applications can share NDEF data or file content using NFC technology by tapping two NFC-enabled devices together. The QNearFieldShareManager provides a high level entry point to access this functionality.</para>
            <para>The class allows both NDEF data and/or files to be shared between two devices by calling the setShareModes() method. This method specifies either an NDEF Data and/or a File transfer. The targetDetected() signal is emitted each time a share target is detected. A QNearFieldShareTarget pointer is passed with the signal, which can be used to share either an NDEF message or one or more files.</para>
            <para>The process of sharing files via NFC involves other underlying communication transports such as Bluetooth or Wi-Fi Direct. It is implementation specific how and what type of transports are used to perform file transfer. The overall time taken to transfer content depends on the maximum speed of the transport used. Note that the process of sharing NDEF message/data does not require the use of other transports outside NFC.</para>
            <para>If an error occurs, shareError() returns the error type.</para>
            <para>Platforms that do not support both NDEF data and file content sharing modes can return the supported subset in the supportedShareModes() method. Applications that call setShareModes() with an unsupported mode will receive an error signal with a UnsupportedShareModeError.</para>
            <para>Since sharing data over NFC is effectively a data pipe between two processes (one on the sender and one of the receiver), the application developer should only create a single instance of QNearFieldShareManager per application. This avoids the possibility that different parts of the same application attempt to all consume data transferred over NFC.</para>
            </remarks>
        </member>
        <member name="M:QtNfc.QNearFieldShareManager.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new near field share manager with parent.</para>
            </summary>
        </member>
        <member name="E:QtNfc.QNearFieldShareManager.TargetDetected">
            <summary>
            <para>This signal is emitted whenever a shareTarget is detected. The shareTarget instance is owned by QNearFieldShareManager and must not be deleted by the application.</para>
            </summary>
        </member>
        <member name="E:QtNfc.QNearFieldShareManager.ShareModesChanged">
            <summary>
            <para>This signal is emitted whenever the share modes are changed.</para>
            </summary>
        </member>
        <member name="E:QtNfc.QNearFieldShareManager.Error">
            <summary>
            <para>This signal is emitted whenever an error occurs related to a share request.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNearFieldShareManager.ShareModes">
            <summary>
            <para>Returns which shared modes are set.</para>
            <para>See also setShareModes().</para>
            <para></para>
            <para>Initializes the NFC share mode to detect a QNearFieldShareTarget for data and/or file sharing. Calls to this method will overwrite previous share modes.</para>
            <para>A shareModesChanged() signal will be emitted when share modes are different from previous modes. A targetDetected() signal will be emitted if a share target is detected.</para>
            <para>See also shareModes().</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNearFieldShareManager.SupportedShareModes">
            <summary>
            <para>Returns the shared modes supported by NFC.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNearFieldShareManager.shareError">
            <summary>
            <para>Returns the error code of the error that occurred.</para>
            </summary>
        </member>
        <member name="T:QtNfc.QNearFieldShareManager.ShareError">
            <summary>
            <para>This enum specifies the share error type.</para>
            </summary>
        </member>
        <member name="F:QtNfc.QNearFieldShareManager.ShareError.NoError">
            <summary>No error.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldShareManager.ShareError.UnknownError">
            <summary>Unknown or internal error occurred.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldShareManager.ShareError.InvalidShareContentError">
            <summary>Invalid content was provided for sharing.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldShareManager.ShareError.ShareCanceledError">
            <summary>Data or file sharing is canceled on the local or remote device.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldShareManager.ShareError.ShareInterruptedError">
            <summary>Data or file sharing is interrupted due to an I/O error.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldShareManager.ShareError.ShareRejectedError">
            <summary>Data or file sharing is rejected by the remote device.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldShareManager.ShareError.UnsupportedShareModeError">
            <summary>Data or file sharing is not supported by the share target.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldShareManager.ShareError.ShareAlreadyInProgressError">
            <summary>Data or file sharing is already in progress.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldShareManager.ShareError.SharePermissionDeniedError">
            <summary>File sharing is denied due to insufficient permission.</summary>
        </member>
        <member name="T:QtNfc.QNearFieldShareManager.ShareMode">
            <summary>
            <para>This enum specifies the content type to be shared.</para>
            <para>The ShareModes type is a typedef for QFlags&lt;ShareMode&gt;. It stores an OR combination of ShareMode values.</para>
            </summary>
        </member>
        <member name="F:QtNfc.QNearFieldShareManager.ShareMode.NoShare">
            <summary>No content is currently set to be shared.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldShareManager.ShareMode.NdefShare">
            <summary>Share NDEF message with target.</summary>
        </member>
        <member name="F:QtNfc.QNearFieldShareManager.ShareMode.FileShare">
            <summary>Share file with target.</summary>
        </member>
        <member name="T:QtNfc.QNearFieldShareTarget">
            <summary>
            <para>The QNearFieldShareTarget class transfers data to remote device over NFC.</para>
            </summary>
            <remarks>
            <para>The QNearFieldShareTarget class can be used for sharing NDEF message or files to a remote NFC enabled device supporting the same protocol.</para>
            <para></para>
            <para>See also QNearFieldShareManager.</para>
            </remarks>
        </member>
        <member name="M:QtNfc.QNearFieldShareTarget.Share(QtNfc.QNdefMessage)">
            <summary>
            <para>Share the NDEF message via the share target. This method starts sharing asynchronously and returns immediately. The method returns true if the request is accepted, otherwise returns false. Sharing is completed when the shareFinished() signal is emitted.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QNearFieldShareTarget.Cancel">
            <summary>
            <para>Cancel the data or file sharing in progress.</para>
            </summary>
        </member>
        <member name="E:QtNfc.QNearFieldShareTarget.Error">
            <summary>
            <para>This signal is emitted whenever an error occurs during transfer.</para>
            </summary>
        </member>
        <member name="E:QtNfc.QNearFieldShareTarget.ShareFinished">
            <summary>
            <para>This signal is emitted whenever a data or file transfer has completed successfully.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNearFieldShareTarget.ShareModes">
            <summary>
            <para>Returns the share mode supported by the share target.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNearFieldShareTarget.IsShareInProgress">
            <summary>
            <para>Returns true if data or file sharing is in progress, otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QNearFieldShareTarget.ShareError">
            <summary>
            <para>Returns the error code of the error that occurred.</para>
            </summary>
        </member>
        <member name="T:QtNfc.QQmlNdefRecord">
            <summary>
            <para>The QQmlNdefRecord class implements the NdefRecord type in QML.</para>
            </summary>
            <remarks>
            <para>The QQmlNdefRecord class is the base class for all NdefRecord types in QML. To support a new NDEF record type in QML subclass this class and expose new properties, member functions and signals appropriate for the new record type. The following must be done to create a new NDEF record type in QML:</para>
            <para></para>
            <para>The subclass must have a Q_OBJECT macro in its declaration.</para>
            <para>The subclass must have an invokable constructor that takes a QNdefRecord and a QObject pointer.</para>
            <para>The subclass must be declared as an NDEF record by expanding the Q_DECLARE_NDEFRECORD() macro in the implementation file of the subclass.</para>
            <para>The subclass must be registered with QML.</para>
            <para></para>
            <para>For example the declaration of such a class may look like the following.</para>
            <para></para>
            <para></para>
            <para>  class QQmlNdefFooRecord : public QQmlNdefRecord</para>
            <para>  {</para>
            <para>      Q_OBJECT</para>
            <para></para>
            <para>      Q_PROPERTY(int foo READ foo WRITE setFoo NOTIFY fooChanged)</para>
            <para></para>
            <para>  public:</para>
            <para>      explicit QQmlNdefFooRecord(QObject *parent = 0);</para>
            <para>      Q_INVOKABLE QQmlNdefFooRecord(const QNdefRecord &amp;record, QObject *parent = 0);</para>
            <para>      ~QQmlNdefFooRecord();</para>
            <para></para>
            <para>      int foo() const;</para>
            <para>      void setFoo(int value);</para>
            <para></para>
            <para>  signals:</para>
            <para>      void fooChanged();</para>
            <para>  };</para>
            <para></para>
            <para></para>
            <para>Within the implementation file the Q_DECLARE_NDEFRECORD() macro is expanded:</para>
            <para></para>
            <para></para>
            <para>  Q_DECLARE_NDEFRECORD(QQmlNdefFooRecord, QNdefRecord::ExternalRtd, &quot;com.example:f&quot;)</para>
            <para></para>
            <para></para>
            <para>Finially the application or plugin code calls qmlRegisterType():</para>
            <para></para>
            <para></para>
            <para>  qmlRegisterType&lt;QQmlNdefFooRecord&gt;(uri, 1, 0, &quot;NdefFooRecord&quot;);</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also NdefRecord.</para>
            </remarks>
        </member>
        <member name="M:QtNfc.QQmlNdefRecord.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new empty QQmlNdefRecord with parent.</para>
            </summary>
        </member>
        <member name="M:QtNfc.QQmlNdefRecord.#ctor(QtNfc.QNdefRecord,QtCore.QObject)">
            <summary>
            <para>Constructs a new QQmlNdefRecord representing record. The parent of the newly constructed object will be set to parent.</para>
            </summary>
        </member>
        <member name="E:QtNfc.QQmlNdefRecord.TypeChanged">
            <summary>
            <para>This signal is emitted when the record type changes.</para>
            <para>Note: Notifier signal for property type. </para>
            </summary>
        </member>
        <member name="E:QtNfc.QQmlNdefRecord.TypeNameFormatChanged">
            <summary>
            <para>This property hold the TNF of the NDEF record.</para>
            <para>Access functions:</para>
            <para></para>
            <para> TypeNameFormat 	typeNameFormat() const</para>
            <para> void 	setTypeNameFormat(TypeNameFormat newTypeNameFormat)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	typeNameFormatChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtNfc.QQmlNdefRecord.RecordChanged">
            <summary>
            <para>This property hold the NDEF record that this class represents.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QNdefRecord 	record() const</para>
            <para> void 	setRecord(const QNdefRecord &amp;record)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	recordChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtNfc.QQmlNdefRecord.Type">
            <summary>
            <para>This property hold the type of the NDEF record.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QQmlNdefRecord.typeNameFormat">
            <summary>
            <para>This property hold the TNF of the NDEF record.</para>
            </summary>
        </member>
        <member name="P:QtNfc.QQmlNdefRecord.Record">
            <summary>
            <para>This property hold the NDEF record that this class represents.</para>
            </summary>
        </member>
        <member name="T:QtNfc.QQmlNdefRecord.TypeNameFormat">
            <summary>
            <para>This enum describes the type name format of an NDEF record. The values of this enum are according to QNdefRecord::TypeNameFormat</para>
            </summary>
        </member>
        <member name="F:QtNfc.QQmlNdefRecord.TypeNameFormat.Empty">
            <summary>An empty NDEF record, the record does not contain a payload.</summary>
        </member>
        <member name="F:QtNfc.QQmlNdefRecord.TypeNameFormat.NfcRtd">
            <summary>The NDEF record type is defined by an NFC RTD Specification.</summary>
        </member>
        <member name="F:QtNfc.QQmlNdefRecord.TypeNameFormat.Mime">
            <summary>The NDEF record type follows the construct described in RFC 2046.</summary>
        </member>
        <member name="F:QtNfc.QQmlNdefRecord.TypeNameFormat.Uri">
            <summary>The NDEF record type follows the construct described in RFC 3986.</summary>
        </member>
        <member name="F:QtNfc.QQmlNdefRecord.TypeNameFormat.ExternalRtd">
            <summary>The NDEF record type follows the construct for external type names described the NFC RTD Specification.</summary>
        </member>
        <member name="F:QtNfc.QQmlNdefRecord.TypeNameFormat.Unknown">
            <summary>The NDEF record type is unknown.</summary>
        </member>
    </members>
</doc>
