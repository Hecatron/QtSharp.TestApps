<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QtQuickWidgetsSharp</name>
    </assembly>
    <members>
        <member name="T:QtQuickWidgets.QQuickWidget">
            <summary>
            <para>The QQuickWidget class provides a widget for displaying a Qt Quick user interface.</para>
            </summary>
            <remarks>
            <para>This is a convenience wrapper for QQuickWindow which will automatically load and display a QML scene when given the URL of the main source file. Alternatively, you can instantiate your own objects using QQmlComponent and place them in a manually set up QQuickWidget.</para>
            <para>Typical usage:</para>
            <para></para>
            <para></para>
            <para>  QQuickWidget *view = new QQuickWidget;</para>
            <para>  view-&gt;setSource(QUrl::fromLocalFile(&quot;myqmlfile.qml&quot;));</para>
            <para>  view-&gt;show();</para>
            <para></para>
            <para></para>
            <para>To receive errors related to loading and executing QML with QQuickWidget, you can connect to the statusChanged() signal and monitor for QQuickWidget::Error. The errors are available via QQuickWidget::errors().</para>
            <para>QQuickWidget also manages sizing of the view and root object. By default, the resizeMode is SizeViewToRootObject, which will load the component and resize it to the size of the view. Alternatively the resizeMode may be set to SizeRootObjectToView which will resize the view to the size of the root object.</para>
            <para>Note: QQuickWidget is an alternative to using QQuickView and QWidget::createWindowContainer(). The restrictions on stacking order do not apply, making QQuickWidget the more flexible alternative, behaving more like an ordinary widget. This comes at the expense of performance. Unlike QQuickWindow and QQuickView, QQuickWidget involves rendering into OpenGL framebuffer objects. This will naturally carry a minor performance hit.</para>
            <para>Note: Using QQuickWidget disables the threaded render loop on all platforms. This means that some of the benefits of threaded rendering, for example Animator classes and vsync driven animations, will not be available.</para>
            <para>Note: Avoid calling winId() on a QQuickWidget. This function triggers the creation of a native window, resulting in reduced performance and possibly rendering glitches. The entire purpose of QQuickWidget is to render Quick scenes without a separate native window, hence making it a native widget should always be avoided.</para>
            <para></para>
            <para>Limitations</para>
            <para>Putting other widgets underneath and making the QQuickWidget transparent will not lead to the expected results: the widgets underneath will not be visible. This is because in practice the QQuickWidget is drawn before all other regular, non-OpenGL widgets, and so see-through types of solutions are not feasible. Other type of layouts, like having widgets on top of the QQuickWidget, will function as expected.</para>
            <para>When absolutely necessary, this limitation can be overcome by setting the Qt::WA_AlwaysStackOnTop attribute on the QQuickWidget. Be aware, however that this breaks stacking order. For example it will not be possible to have other widgets on top of the QQuickWidget, so it should only be used in situations where a semi-transparent QQuickWidget with other widgets visible underneath is required.</para>
            <para>This limitation only applies when there are other widgets underneath the QQuickWidget inside the same window. Making the window semi-transparent, with other applications and the desktop visible in the background, is done in the traditional way: Set Qt::WA_TranslucentBackground on the top-level window, request an alpha channel, and change the Qt Quick Scenegraph's clear color to Qt::transparent via setClearColor().</para>
            <para></para>
            <para>See also Exposing Attributes of C++ Types to QML, Qt Quick Widgets Example, and QQuickView.</para>
            </remarks>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a QQuickWidget with the given parent. The default value of parent is 0.</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.#ctor(QtQml.QQmlEngine,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a QQuickWidget with the given QML engine and parent.</para>
            <para>Note: In this case, the QQuickWidget does not own the given engine object; it is the caller's responsibility to destroy the engine. If the engine is deleted before the view, status() will return QQuickWidget::Error.</para>
            <para>See also Status, status(), and errors().</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.#ctor(QtCore.QUrl,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a QQuickWidget with the given QML source and parent. The default value of parent is 0.</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.SetClearColor(QtGui.QColor)">
            <summary>
            <para>Sets the clear color. By default this is an opaque color.</para>
            <para>To get a semi-transparent QQuickWidget, call this function with color set to Qt::transparent, set the Qt::WA_TranslucentBackground widget attribute on the top-level window, and request an alpha channel via setFormat().</para>
            <para>See also QQuickWindow::setColor().</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.OnKeyReleaseEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Reimplemented from QWidget::keyReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.OnMouseDoubleClickEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Reimplemented from QWidget::mouseDoubleClickEvent().</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Reimplemented from QWidget::showEvent().</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.OnHideEvent(QtGui.QHideEvent)">
            <summary>
            <para>Reimplemented from QWidget::hideEvent().</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Reimplemented from QWidget::focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.OnWheelEvent(QtGui.QWheelEvent)">
            <summary>
            <para>Reimplemented from QWidget::wheelEvent().</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.OnDragEnterEvent(QtGui.QDragEnterEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragEnterEvent().</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.OnDragMoveEvent(QtGui.QDragMoveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragMoveEvent().</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.OnDragLeaveEvent(QtGui.QDragLeaveEvent)">
            <summary>
            <para>Reimplemented from QWidget::dragLeaveEvent().</para>
            </summary>
        </member>
        <member name="M:QtQuickWidgets.QQuickWidget.OnDropEvent(QtGui.QDropEvent)">
            <summary>
            <para>Reimplemented from QWidget::dropEvent().</para>
            </summary>
        </member>
        <member name="E:QtQuickWidgets.QQuickWidget.StatusChanged">
            <summary>
            <para>This signal is emitted when the component's current status changes.</para>
            <para>Note: Notifier signal for property status. </para>
            </summary>
        </member>
        <member name="E:QtQuickWidgets.QQuickWidget.SceneGraphError">
            <summary>
            <para>This signal is emitted when an error occurred during scene graph initialization.</para>
            <para>Applications should connect to this signal if they wish to handle errors, like OpenGL context creation failures, in a custom way. When no slot is connected to the signal, the behavior will be different: Quick will print the message, or show a message box, and terminate the application.</para>
            <para>This signal will be emitted from the gui thread.</para>
            <para>See also QQuickWindow::sceneGraphError().</para>
            </summary>
        </member>
        <member name="P:QtQuickWidgets.QQuickWidget.resizeMode">
            <summary>
            <para>This property determines whether the view should resize the window contents.</para>
            <para>If this property is set to SizeViewToRootObject (the default), the view resizes to the size of the root item in the QML.</para>
            <para>If this property is set to SizeRootObjectToView, the view will automatically resize the root item to the size of the view.</para>
            <para>Regardless of this property, the sizeHint of the view is the initial size of the root item. Note though that since QML may load dynamically, that size may change.</para>
            <para>See also initialSize().</para>
            </summary>
        </member>
        <member name="P:QtQuickWidgets.QQuickWidget.Format">
            <summary>
            <para>Returns the actual surface format.</para>
            <para>If the widget has not yet been shown, the requested format is returned.</para>
            <para>See also setFormat().</para>
            <para></para>
            <para>Sets the surface format for the context and offscreen surface used by this widget.</para>
            <para>Call this function when there is a need to request a context for a given OpenGL version or profile. The sizes for depth, stencil and alpha buffers are taken care of automatically and there is no need to request those explicitly.</para>
            <para>See also QWindow::setFormat(), QWindow::format(), and format().</para>
            </summary>
        </member>
        <member name="P:QtQuickWidgets.QQuickWidget.Source">
            <summary>
            <para>This property holds the URL of the source of the QML component.</para>
            <para>Ensure that the URL provided is full and correct, in particular, use QUrl::fromLocalFile() when loading a file from the local filesystem.</para>
            <para>Note: Setting a source URL will result in the QML component being instantiated, even if the URL is unchanged from the current value.</para>
            </summary>
        </member>
        <member name="P:QtQuickWidgets.QQuickWidget.Engine">
            <summary>
            <para>Returns a pointer to the QQmlEngine used for instantiating QML Components.</para>
            </summary>
        </member>
        <member name="P:QtQuickWidgets.QQuickWidget.RootContext">
            <summary>
            <para>This function returns the root of the context hierarchy. Each QML component is instantiated in a QQmlContext. QQmlContext's are essential for passing data to QML components. In QML, contexts are arranged hierarchically and this hierarchy is managed by the QQmlEngine.</para>
            </summary>
        </member>
        <member name="P:QtQuickWidgets.QQuickWidget.RootObject">
            <summary>
            <para>Returns the view's root item.</para>
            </summary>
        </member>
        <member name="P:QtQuickWidgets.QQuickWidget.status">
            <summary>
            <para>The component's current status.</para>
            </summary>
        </member>
        <member name="P:QtQuickWidgets.QQuickWidget.InitialSize">
            <summary>
            <para>Returns the initial size of the root object.</para>
            <para>If resizeMode is SizeRootObjectToView, the root object will be resized to the size of the view. This function returns the size of the root object before it was resized.</para>
            </summary>
        </member>
        <member name="P:QtQuickWidgets.QQuickWidget.GrabFramebuffer">
            <summary>
            <para>Renders a frame and reads it back into an image.</para>
            <para>Note: This is a potentially expensive operation.</para>
            </summary>
        </member>
        <member name="P:QtQuickWidgets.QQuickWidget.QuickWindow">
            <summary>
            <para>Returns the offscreen QQuickWindow which is used by this widget to drive the Qt Quick rendering. This is useful if you want to use QQuickWindow APIs that are not currently exposed by QQuickWidget, for instance connecting to the QQuickWindow::beforeRendering() signal in order to draw native OpenGL content below Qt Quick's own rendering.</para>
            <para>Warning: Use the return value of this function with caution. In particular, do not ever attempt to show the QQuickWindow, and be very careful when using other QWindow-only APIs.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="T:QtQuickWidgets.QQuickWidget.ResizeMode">
            <summary>
            <para>This enum specifies how to resize the view.</para>
            </summary>
        </member>
        <member name="F:QtQuickWidgets.QQuickWidget.ResizeMode.SizeViewToRootObject">
            <summary>The view resizes with the root item in the QML.</summary>
        </member>
        <member name="F:QtQuickWidgets.QQuickWidget.ResizeMode.SizeRootObjectToView">
            <summary>The view will automatically resize the root item to the size of the view.</summary>
        </member>
        <member name="T:QtQuickWidgets.QQuickWidget.Status">
            <summary>
            <para>Specifies the loading status of the QQuickWidget.</para>
            </summary>
        </member>
        <member name="F:QtQuickWidgets.QQuickWidget.Status.Null">
            <summary>This QQuickWidget has no source set.</summary>
        </member>
        <member name="F:QtQuickWidgets.QQuickWidget.Status.Ready">
            <summary>This QQuickWidget has loaded and created the QML component.</summary>
        </member>
        <member name="F:QtQuickWidgets.QQuickWidget.Status.Loading">
            <summary>This QQuickWidget is loading network data.</summary>
        </member>
        <member name="F:QtQuickWidgets.QQuickWidget.Status.Error">
            <summary>One or more errors occurred. Call errors() to retrieve a list of errors.</summary>
        </member>
    </members>
</doc>
