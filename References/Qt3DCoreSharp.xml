<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qt3DCoreSharp</name>
    </assembly>
    <members>
        <member name="M:Qt3DCore.Qt3DCore.QNodeId.#ctor">
            <summary>
            <para>Default constructs an instance of QNodeId.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.Qt3DCore.ChangeFlag">
            <summary>
            <para>The types of change that can be sent and received by Qt3D's change notification system.</para>
            <para>The ChangeFlags type is a typedef for QFlags&lt;ChangeFlag&gt;. It stores an OR combination of ChangeFlag values.</para>
            </summary>
        </member>
        <member name="F:Qt3DCore.Qt3DCore.ChangeFlag.NodeCreated">
            <summary>A new instance of a QNode subclass has been created.</summary>
        </member>
        <member name="F:Qt3DCore.Qt3DCore.ChangeFlag.NodeAboutToBeDeleted">
            <summary>A QNode is about to be deleted from the scene.</summary>
        </member>
        <member name="F:Qt3DCore.Qt3DCore.ChangeFlag.NodeDeleted">
            <summary>A QNode has been deleted.</summary>
        </member>
        <member name="F:Qt3DCore.Qt3DCore.ChangeFlag.NodeUpdated">
            <summary>A QNode property has been updated.</summary>
        </member>
        <member name="F:Qt3DCore.Qt3DCore.ChangeFlag.NodeAdded">
            <summary>A QNode has been added to the scene.</summary>
        </member>
        <member name="F:Qt3DCore.Qt3DCore.ChangeFlag.NodeRemoved">
            <summary>A QNode has been removed from the scene.</summary>
        </member>
        <member name="F:Qt3DCore.Qt3DCore.ChangeFlag.ComponentAdded">
            <summary>A QComponent has been added to a QEntity.</summary>
        </member>
        <member name="F:Qt3DCore.Qt3DCore.ChangeFlag.ComponentRemoved">
            <summary>A QComponent has been removed from a QEntity.</summary>
        </member>
        <member name="F:Qt3DCore.Qt3DCore.ChangeFlag.AllChanges">
            <summary>Allows an observer to monitor for any of the above changes.</summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QSceneChange.#ctor(Qt3DCore.Qt3DCore.ChangeFlag,Qt3DCore.Qt3DCore.QSceneChange.ObservableType,Qt3DCore.Qt3DCore.QNodeId,Qt3DCore.Qt3DCore.QSceneChange.Priority)">
            <summary>
            <para>Default constructs an instance of QSceneChange.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QScenePropertyChange.#ctor(Qt3DCore.Qt3DCore.ChangeFlag,Qt3DCore.Qt3DCore.QSceneChange.ObservableType,Qt3DCore.Qt3DCore.QNodeId,Qt3DCore.Qt3DCore.QSceneChange.Priority)">
            <summary>
            <para>Default constructs an instance of QScenePropertyChange.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.Qt3DCore.QScenePropertyChange.PropertyName">
            <summary>
            <para>See also setPropertyName().</para>
            <para></para>
            <para>See also propertyName().</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.Qt3DCore.QScenePropertyChange.Value">
            <summary>
            <para>See also setValue().</para>
            <para></para>
            <para>See also value().</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QBackendScenePropertyChange.#ctor(Qt3DCore.Qt3DCore.ChangeFlag,Qt3DCore.Qt3DCore.QNodeId,Qt3DCore.Qt3DCore.QSceneChange.Priority)">
            <summary>
            <para>Default constructs an instance of QBackendScenePropertyChange.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.Qt3DCore.QBackendScenePropertyChange.TargetNode">
            <summary>
            <para>See also setTargetNode().</para>
            <para></para>
            <para>See also targetNode().</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.Qt3DCore.QRay3D">
            <summary>
            <para>The QRay3D class defines a directional line in 3D space extending through an origin point.</para>
            </summary>
            <remarks>
            <para>A ray is defined by the origin() point and the direction() vector. Rays are infinite in length, extending out from origin() in both directions. If the direction() is zero length, then the behavior of the class is undefined.</para>
            <para>A ray can be thought of as a one-dimensional co-ordinate system. If the co-ordinate is t then the origin() point is at t = 0, the point origin() + direction() is at t = 1, and the point origin() - direction() is at t = -1. The point() method can be used to obtain the position of a point within this one-dimensional co-ordinate system. The projectedDistance() method can be used to convert a point into a value in this one-dimensional co-ordinate system.</para>
            </remarks>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QRay3D.#ctor">
            <summary>
            <para>Construct a default ray with an origin() of (0, 0, 0), a direction() of (0, 0, 1) and a distance of 1.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QRay3D.#ctor(QtGui.QVector3D,QtGui.QVector3D,System.Single)">
            <summary>
            <para>Construct a ray given its defining origin, direction and distance. The direction does not need to be normalized.</para>
            <para>To construct a ray that passes through two points, use the following:</para>
            <para></para>
            <para></para>
            <para>  QRay3D thruAB(pointA, pointB - pointA);</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QRay3D.#ctor(QtGui.QVector3D)">
            <summary>
            <para>Construct a ray given its defining origin, direction and distance. The direction does not need to be normalized.</para>
            <para>To construct a ray that passes through two points, use the following:</para>
            <para></para>
            <para></para>
            <para>  QRay3D thruAB(pointA, pointB - pointA);</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QRay3D.Contains(QtGui.QVector3D)">
            <summary>
            <para>Returns true if point lies on this ray; false otherwise.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QRay3D.Contains(Qt3DCore.Qt3DCore.QRay3D)">
            <summary>
            <para>Returns true if ray lies on this ray; false otherwise. If true, this implies that the two rays are actually the same, but with different origin() points or an inverted direction().</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QRay3D.Point(System.Single)">
            <summary>
            <para>Returns the point on the ray defined by moving t units along the ray in the direction of the direction() vector. Note that t may be negative in which case the point returned will lie behind the origin() point with respect to the direction() vector.</para>
            <para>The units for t are defined by direction(). The return value is precisely origin() + t * direction().</para>
            <para>See also projectedDistance() and distance().</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QRay3D.ProjectedDistance(QtGui.QVector3D)">
            <summary>
            <para>Returns the number of direction() units along the ray from origin() to point. Essentially, this function computes the value t, where point = origin() + t * direction(). If point is not on the ray, then the closest point that is on the ray will be used instead.</para>
            <para>If the return value is positive, then point lies in front of the origin() with respect to the direction() vector. If the return value is negative, then point lies behind the origin() with respect to the direction() vector.</para>
            <para>See also point() and project().</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QRay3D.Project(QtGui.QVector3D)">
            <summary>
            <para>Returns the projection of vector onto this ray. In the following diagram, the dotted line is the ray, and V is the vector. The return value will be the vector V':</para>
            <para>[Missing image qray3d-project.png]</para>
            <para>See also projectedDistance().</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QRay3D.GetDistance(QtGui.QVector3D)">
            <summary>
            <para>Returns the minimum distance from this ray to point, or equivalently the length of a line perpendicular to this ray which passes through point. If point is on the ray, then this function will return zero.</para>
            <para>See also point().</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QRay3D.Transform(QtGui.QMatrix4x4)">
            <summary>
            <para>Transforms this ray using matrix, replacing origin() and direction() with the transformed versions.</para>
            <para>See also transformed().</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QRay3D.Transformed(QtGui.QMatrix4x4)">
            <summary>
            <para>Returns a new ray that is formed by transforming origin() and direction() using matrix.</para>
            <para>See also transform().</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QRay3D.op_Equality(Qt3DCore.Qt3DCore.QRay3D,Qt3DCore.Qt3DCore.QRay3D)">
            <summary>
            <para>Returns true if this ray is the same as other; false otherwise.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QRay3D.op_Inequality(Qt3DCore.Qt3DCore.QRay3D,Qt3DCore.Qt3DCore.QRay3D)">
            <summary>
            <para>Returns true if this ray is not the same as other; false otherwise.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QRay3D.QFuzzyCompare(Qt3DCore.Qt3DCore.QRay3D,Qt3DCore.Qt3DCore.QRay3D)">
            <summary>
            <para>Returns true if ray1 and ray2 are almost equal; false otherwise.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.Qt3DCore.QRay3D.Origin">
            <summary>
            <para>Returns the origin of this ray. The default value is (0, 0, 0).</para>
            <para>See also setOrigin() and direction().</para>
            <para></para>
            <para>Sets the origin point of this ray to value.</para>
            <para>See also origin() and setDirection().</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.Qt3DCore.QRay3D.Direction">
            <summary>
            <para>Returns the direction vector of this ray. The default value is (0, 0, 1).</para>
            <para>See also setDirection() and origin().</para>
            <para></para>
            <para>Sets the direction vector of this ray to direction.</para>
            <para>See also direction() and setOrigin().</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.Qt3DCore.QRay3D.Distance">
            <summary>
            <para>See also setDistance().</para>
            <para></para>
            <para>See also distance().</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.Qt3DCore.QAbstractAspect">
            <summary>
            <para>QAbstractAspect is the base class for aspects that provide a vertical slice of behavior.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QAbstractAspect.#ctor(QtCore.QObject)">
            <summary>
            <para>Default constructs an instance of QAbstractAspect.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QAspectEngine.#ctor(QtCore.QObject)">
            <summary>
            <para>Default constructs an instance of QAspectEngine.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QAspectEngine.SetRootEntity(Qt3DCore.Qt3DCore.QEntity)">
            <summary>
            <para>See also rootEntity().</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.Qt3DCore.QNode">
            <summary>
            <para>QNode is the base class of all Qt3D node classes used to build a Qt3D scene.</para>
            </summary>
            <remarks>
            <para>The owernship of QNode is determined by the QObject parent/child relationship between nodes. By itself, a QNode has no visual appearance and no particular meaning, it is there as a way of building a node based tree structure.</para>
            <para>The parent of a QNode instance can only be another QNode instance.</para>
            <para>Each QNode instance has a unique id that allows it to be recognizable from other instances.</para>
            <para>When properties are defined on a QNode subclass, their NOTIFY signal will automatically generate notifications that the Qt3D backend aspects will receive.</para>
            <para>When subclassing QNode, make sure to call QNode::cleanup() from your subclass's destructor to ensure proper notification to backend aspects. Faiure to do so will result in crashes when one of your QNode subclass instance is eventually destroyed.</para>
            <para></para>
            <para>See also QEntity and QComponent.</para>
            </remarks>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QNode.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Creates a new QNode instance with parent parent.</para>
            <para>Note: The backend aspects will be notified that a QNode instance is part of the scene only if it has a parent; unless this is the root node of the Qt3D scene.</para>
            <para>See also setParent().</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QNode.BlockNotifications(System.Boolean)">
            <summary>
            <para>If block is true, property change notifications sent by this object to aspects are blocked. If block is false, no such blocking will occur.</para>
            <para>The return value is the previous value of notificationsBlocked().</para>
            <para>Note that the other notification types will be sent even if the notifications for this object have been blocked.</para>
            <para>See also notificationsBlocked().</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QNode.SetParent(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Sets the parent node of the current QNode instance to parent. Setting the parent will notify the backend aspects about current QNode instance's parent change.</para>
            <para>Note: if parent happens to be null, this will actually notify that the current QNode instance was removed from the scene.</para>
            <para>Note: Setter function for property parent. </para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QNode.Copy(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Copies all the attributes from ref to the current Qt3DCore::QNode instance.</para>
            <para>Note: When subclassing QNode, you should reimplement this method and always call the copy method on the base class. This will ensure that when cloned, the QNode is properly initialized.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QNode.Cleanup">
            <summary>
            <para>This methods can only be called once and takes care of notyfing the backend aspects that the current Qt3DCore::QNode instance is about to be destroyed.</para>
            <para>Note: It must be called by the destructor of every class subclassing QNode that is clonable (using the QT3D_CLONEABLE macro).</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QNode.Clone(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Returns a clone of node. All the children of node are cloned as well.</para>
            <para>Note: This is the only way to create two nodes with the same id.</para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QNode.ParentChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QNode *	parentNode() const</para>
            <para> virtual void 	setParent(QNode *parent)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	parentChanged(QObject *parent)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QNode.EnabledChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isEnabled() const</para>
            <para> void 	setEnabled(bool isEnabled)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	enabledChanged(bool enabled)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DCore.Qt3DCore.QNode.Id">
            <summary>
            <para>Returns the id that uniquely identifies the QNode instance.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.Qt3DCore.QNode.ParentNode">
            <summary>
            <para>Returns the immediate QNode parent, or null if the node has no parent.</para>
            <para>Note: Getter function for property parent. </para>
            </summary>
        </member>
        <member name="P:Qt3DCore.Qt3DCore.QNode.NotificationsBlocked">
            <summary>
            <para>Returns true if aspect notifications are blocked; otherwise returns false. By default, notifications are not blocked.</para>
            <para>See also blockNotifications().</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.Qt3DCore.QEntity">
            <summary>
            <para>Qt3DCore::QEntity is a Qt3DCore::QNode subclass that can aggregate several Qt3DCore::QComponent instances that will specify its behavior.</para>
            </summary>
            <remarks>
            <para>By itself a Qt3DCore::QEntity is an empty shell. The behavior of a Qt3DCore::QEntity object is defined by the Qt3DCore::QComponent objects it references. Each Qt3D backend aspect will be able to interpret and process an Entity by recognizing which components it is made up of. One aspect may decide to only process entities composed of a single Qt3DCore::QTransform component whilst another may focus on Qt3DCore::QMouseInput.</para>
            <para></para>
            <para>See also Qt3DCore::QComponent and Qt3DCore::QTransform.</para>
            </remarks>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QEntity.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new Qt3DCore::QEntity instance with parent as parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QEntity.AddComponent(Qt3DCore.Qt3DCore.QComponent)">
            <summary>
            <para>Adds a new reference to the component comp.</para>
            <para>Note: If the Qt3DCore::QComponent has no parent, the Qt3DCore::QEntity will set itself as its parent thereby taking ownership of the component.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QEntity.RemoveComponent(Qt3DCore.Qt3DCore.QComponent)">
            <summary>
            <para>Removes the reference to comp.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QEntity.RemoveAllComponents">
            <summary>
            <para>Remove all references to the components.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QEntity.Copy(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Reimplemented from QNode::copy().</para>
            <para>Copies all the properties and components of the Qt3DCore::QEntity ref to the current instance.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.Qt3DCore.QEntity.ParentEntity">
            <summary>
            <para>Returns the parent Qt3DCore::QEntity instance of this entity. If the immediate parent isn't a Qt3DCore::QEntity, this function traverses up the scene hierarchy until a parent Qt3DCore::QEntity is found. If no Qt3DCore::QEntity parent can be found, returns null.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.Qt3DCore.QComponent">
            <summary>
            <para>The base class of scene nodes that can be aggregated by Qt3DCore::QEntity instances as a component.</para>
            </summary>
            <remarks>
            <para>A Qt3DCore::QComponent provides a vertical slice of behavior that can be assigned to and sometimes shared across Qt3DCore::QEntity instances.</para>
            <para>Qt3DCore::QComponent subclasses are often aggregated in groups that impart useful behavior to the aggregating entity. For example, to have an Entity that gets drawn by the Qt3D renderer aspect, an entity would most likely aggregate Qt3DCore::QTransform, Qt3DRender::QMesh, and Qt3DRender::QMaterial components.</para>
            <para></para>
            <para>See also Qt3DCore::QEntity.</para>
            </remarks>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QComponent.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QComponent instance with parent as the parent.</para>
            <para>Note: a QComponent should never be instanced directly, instance one of the subclasses instead.</para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QComponent.ShareableChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	shareable() const</para>
            <para> void 	setShareable(bool shareable)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	shareableChanged(bool shareable)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QComponent.EnabledChanged">
            <summary>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DCore.Qt3DCore.QCameraLens">
            <summary>
            <para>Qt3DCore::QCameraLens specifies the projection matrix that will be used to define a Camera for a 3D scene.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QCameraLens.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QCameraLens.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QCameraLens.SetOrthographicProjection(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Defines an orthographic projection based on left, right, bottom, top, nearPlane, farPlane.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QCameraLens.SetFrustumProjection(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Defines an orthographic projection based on left, right, bottom, top, nearPlane, farPlane.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QCameraLens.SetPerspectiveProjection(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Defines a perspective projection based on fieldOfView, aspectRatio, nearPlane, farPlane.</para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCameraLens.ProjectionTypeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> ProjectionType 	projectionType() const</para>
            <para> void 	setProjectionType(ProjectionType projectionType)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	projectionTypeChanged(QCameraLens::ProjectionType projectionType)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCameraLens.NearPlaneChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	nearPlane() const</para>
            <para> void 	setNearPlane(float nearPlane)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	nearPlaneChanged(float nearPlane)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCameraLens.FarPlaneChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	farPlane() const</para>
            <para> void 	setFarPlane(float farPlane)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	farPlaneChanged(float farPlane)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCameraLens.FieldOfViewChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	fieldOfView() const</para>
            <para> void 	setFieldOfView(float fieldOfView)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	fieldOfViewChanged(float fieldOfView)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCameraLens.AspectRatioChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	aspectRatio() const</para>
            <para> void 	setAspectRatio(float aspectRatio)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	aspectRatioChanged(float aspectRatio)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCameraLens.LeftChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	left() const</para>
            <para> void 	setLeft(float left)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	leftChanged(float left)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCameraLens.RightChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	right() const</para>
            <para> void 	setRight(float right)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	rightChanged(float right)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCameraLens.BottomChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	bottom() const</para>
            <para> void 	setBottom(float bottom)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	bottomChanged(float bottom)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCameraLens.TopChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	top() const</para>
            <para> void 	setTop(float top)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	topChanged(float top)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCameraLens.ProjectionMatrixChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QMatrix4x4 	projectionMatrix() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	projectionMatrixChanged(const QMatrix4x4 &amp;projectionMatrix)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DCore.Qt3DCore.QCamera">
            <summary>
            <para>The QCamera class provides interface for system camera devices.</para>
            </summary>
            <remarks>
            <para>QCamera can be used with QCameraViewfinder for viewfinder display, QMediaRecorder for video recording and QCameraImageCapture for image taking.</para>
            <para>You can use QCameraInfo to list available cameras and choose which one to use.</para>
            <para></para>
            <para></para>
            <para>  QList&lt;QCameraInfo&gt; cameras = QCameraInfo::availableCameras();</para>
            <para>  foreach (const QCameraInfo &amp;cameraInfo, cameras) {</para>
            <para>      if (cameraInfo.deviceName() == &quot;mycamera&quot;)</para>
            <para>          camera = new QCamera(cameraInfo);</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>See the camera overview for more information.</para>
            </remarks>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QCamera.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QCamera.</para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCamera.ProjectionTypeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QCameraLens::ProjectionType 	projectionType() const</para>
            <para> void 	setProjectionType(QCameraLens::ProjectionType type)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	projectionTypeChanged(QCameraLens::ProjectionType projectionType)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCamera.NearPlaneChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	nearPlane() const</para>
            <para> void 	setNearPlane(float nearPlane)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	nearPlaneChanged(float nearPlane)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCamera.FarPlaneChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	farPlane() const</para>
            <para> void 	setFarPlane(float farPlane)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	farPlaneChanged(float farPlane)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCamera.FieldOfViewChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	fieldOfView() const</para>
            <para> void 	setFieldOfView(float fieldOfView)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	fieldOfViewChanged(float fieldOfView)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCamera.AspectRatioChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	aspectRatio() const</para>
            <para> void 	setAspectRatio(float aspectRatio)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	aspectRatioChanged(float aspectRatio)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCamera.LeftChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	left() const</para>
            <para> void 	setLeft(float left)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	leftChanged(float left)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCamera.RightChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	right() const</para>
            <para> void 	setRight(float right)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	rightChanged(float right)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCamera.BottomChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	bottom() const</para>
            <para> void 	setBottom(float bottom)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	bottomChanged(float bottom)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCamera.TopChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	top() const</para>
            <para> void 	setTop(float top)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	topChanged(float top)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCamera.ProjectionMatrixChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QMatrix4x4 	projectionMatrix() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	projectionMatrixChanged(const QMatrix4x4 &amp;projectionMatrix)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCamera.PositionChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	position() const</para>
            <para> void 	setPosition(const QVector3D &amp;position)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	positionChanged(const QVector3D &amp;position)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCamera.UpVectorChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	upVector() const</para>
            <para> void 	setUpVector(const QVector3D &amp;upVector)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	upVectorChanged(const QVector3D &amp;upVector)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCamera.ViewCenterChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	viewCenter() const</para>
            <para> void 	setViewCenter(const QVector3D &amp;viewCenter)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	viewCenterChanged(const QVector3D &amp;viewCenter)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCamera.ViewVectorChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	viewVector() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	viewVectorChanged(const QVector3D &amp;viewVector)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QCamera.ViewMatrixChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QMatrix4x4 	viewMatrix() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	viewMatrixChanged(const QMatrix4x4 &amp;viewMatrix)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QAspectJob.#ctor">
            <summary>
            <para>Default constructs an instance of QAspectJob.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QBackendNode.#ctor(Qt3DCore.Qt3DCore.QBackendNode.Mode)">
            <summary>
            <para>Default constructs an instance of QBackendNode.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.Qt3DCore.QTransform">
            <summary>
            <para>The QTransform class specifies 2D transformations of a coordinate system.</para>
            </summary>
            <remarks>
            <para>A transformation specifies how to translate, scale, shear, rotate or project the coordinate system, and is typically used when rendering graphics.</para>
            <para>QTransform differs from QMatrix in that it is a true 3x3 matrix, allowing perspective transformations. QTransform's toAffine() method allows casting QTransform to QMatrix. If a perspective transformation has been specified on the matrix, then the conversion will cause loss of data.</para>
            <para>QTransform is the recommended transformation class in Qt.</para>
            <para>A QTransform object can be built using the setMatrix(), scale(), rotate(), translate() and shear() functions. Alternatively, it can be built by applying basic matrix operations. The matrix can also be defined when constructed, and it can be reset to the identity matrix (the default) using the reset() function.</para>
            <para>The QTransform class supports mapping of graphic primitives: A given point, line, polygon, region, or painter path can be mapped to the coordinate system defined by this matrix using the map() function. In case of a rectangle, its coordinates can be transformed using the mapRect() function. A rectangle can also be transformed into a polygon (mapped to the coordinate system defined by this matrix), using the mapToPolygon() function.</para>
            <para>QTransform provides the isIdentity() function which returns true if the matrix is the identity matrix, and the isInvertible() function which returns true if the matrix is non-singular (i.e. AB = BA = I). The inverted() function returns an inverted copy of this matrix if it is invertible (otherwise it returns the identity matrix), and adjoint() returns the matrix's classical adjoint. In addition, QTransform provides the determinant() function which returns the matrix's determinant.</para>
            <para>Finally, the QTransform class supports matrix multiplication, addition and subtraction, and objects of the class can be streamed as well as compared.</para>
            <para></para>
            <para>Rendering Graphics</para>
            <para>When rendering graphics, the matrix defines the transformations but the actual transformation is performed by the drawing routines in QPainter.</para>
            <para>By default, QPainter operates on the associated device's own coordinate system. The standard coordinate system of a QPaintDevice has its origin located at the top-left position. The x values increase to the right; y values increase downward. For a complete description, see the coordinate system documentation.</para>
            <para>QPainter has functions to translate, scale, shear and rotate the coordinate system without using a QTransform. For example:</para>
            <para></para>
            <para>	</para>
            <para></para>
            <para>  void SimpleTransformation::paintEvent(QPaintEvent *)</para>
            <para>  {</para>
            <para>      QPainter painter(this);</para>
            <para>      painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));</para>
            <para>      painter.drawRect(0, 0, 100, 100);</para>
            <para></para>
            <para>      painter.rotate(45);</para>
            <para></para>
            <para>      painter.setFont(QFont(&quot;Helvetica&quot;, 24));</para>
            <para>      painter.setPen(QPen(Qt::black, 1));</para>
            <para>      painter.drawText(20, 10, &quot;QTransform&quot;);</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para></para>
            <para></para>
            <para>Although these functions are very convenient, it can be more efficient to build a QTransform and call QPainter::setTransform() if you want to perform more than a single transform operation. For example:</para>
            <para></para>
            <para>	</para>
            <para></para>
            <para>  void CombinedTransformation::paintEvent(QPaintEvent *)</para>
            <para>  {</para>
            <para>      QPainter painter(this);</para>
            <para>      painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));</para>
            <para>      painter.drawRect(0, 0, 100, 100);</para>
            <para></para>
            <para>      QTransform transform;</para>
            <para>      transform.translate(50, 50);</para>
            <para>      transform.rotate(45);</para>
            <para>      transform.scale(0.5, 1.0);</para>
            <para>      painter.setTransform(transform);</para>
            <para></para>
            <para>      painter.setFont(QFont(&quot;Helvetica&quot;, 24));</para>
            <para>      painter.setPen(QPen(Qt::black, 1));</para>
            <para>      painter.drawText(20, 10, &quot;QTransform&quot;);</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para></para>
            <para></para>
            <para></para>
            <para>Basic Matrix Operations</para>
            <para></para>
            <para>A QTransform object contains a 3 x 3 matrix. The m31 (dx) and m32 (dy) elements specify horizontal and vertical translation. The m11 and m22 elements specify horizontal and vertical scaling. The m21 and m12 elements specify horizontal and vertical shearing. And finally, the m13 and m23 elements specify horizontal and vertical projection, with m33 as an additional projection factor.</para>
            <para>QTransform transforms a point in the plane to another point using the following formulas:</para>
            <para></para>
            <para></para>
            <para>  x' = m11*x + m21*y + dx</para>
            <para>  y' = m22*y + m12*x + dy</para>
            <para>  if (is not affine) {</para>
            <para>      w' = m13*x + m23*y + m33</para>
            <para>      x' /= w'</para>
            <para>      y' /= w'</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>The point (x, y) is the original point, and (x', y') is the transformed point. (x', y') can be transformed back to (x, y) by performing the same operation on the inverted() matrix.</para>
            <para>The various matrix elements can be set when constructing the matrix, or by using the setMatrix() function later on. They can also be manipulated using the translate(), rotate(), scale() and shear() convenience functions. The currently set values can be retrieved using the m11(), m12(), m13(), m21(), m22(), m23(), m31(), m32(), m33(), dx() and dy() functions.</para>
            <para>Translation is the simplest transformation. Setting dx and dy will move the coordinate system dx units along the X axis and dy units along the Y axis. Scaling can be done by setting m11 and m22. For example, setting m11 to 2 and m22 to 1.5 will double the height and increase the width by 50%. The identity matrix has m11, m22, and m33 set to 1 (all others are set to 0) mapping a point to itself. Shearing is controlled by m12 and m21. Setting these elements to values different from zero will twist the coordinate system. Rotation is achieved by setting both the shearing factors and the scaling factors. Perspective transformation is achieved by setting both the projection factors and the scaling factors.</para>
            <para>Here's the combined transformations example using basic matrix operations:</para>
            <para></para>
            <para>	</para>
            <para></para>
            <para>  void BasicOperations::paintEvent(QPaintEvent *)</para>
            <para>  {</para>
            <para>      double pi = 3.14;</para>
            <para></para>
            <para>      double a    = pi/180 * 45.0;</para>
            <para>      double sina = sin(a);</para>
            <para>      double cosa = cos(a);</para>
            <para></para>
            <para>      QTransform translationTransform(1, 0, 0, 1, 50.0, 50.0);</para>
            <para>      QTransform rotationTransform(cosa, sina, -sina, cosa, 0, 0);</para>
            <para>      QTransform scalingTransform(0.5, 0, 0, 1.0, 0, 0);</para>
            <para></para>
            <para>      QTransform transform;</para>
            <para>      transform = scalingTransform * rotationTransform * translationTransform;</para>
            <para></para>
            <para>      QPainter painter(this);</para>
            <para>      painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));</para>
            <para>      painter.drawRect(0, 0, 100, 100);</para>
            <para></para>
            <para>      painter.setTransform(transform);</para>
            <para></para>
            <para>      painter.setFont(QFont(&quot;Helvetica&quot;, 24));</para>
            <para>      painter.setPen(QPen(Qt::black, 1));</para>
            <para>      painter.drawText(20, 10, &quot;QTransform&quot;);</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QPainter, Coordinate System, Affine Transformations Example, and Transformations Example.</para>
            </remarks>
        </member>
        <member name="M:Qt3DCore.Qt3DCore.QTransform.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTransform.</para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QTransform.ScaleChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	scale() const</para>
            <para> void 	setScale(float scale)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	scaleChanged(float scale)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QTransform.Scale3DChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	scale3D() const</para>
            <para> void 	setScale3D(const QVector3D &amp;scale)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	scale3DChanged(const QVector3D &amp;scale)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QTransform.RotationChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QQuaternion 	rotation() const</para>
            <para> void 	setRotation(const QQuaternion &amp;rotation)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	rotationChanged(const QQuaternion &amp;rotation)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QTransform.RotationXChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	rotationX() const</para>
            <para> void 	setRotationX(float rotationX)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	rotationXChanged(float rotationX)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QTransform.RotationYChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	rotationY() const</para>
            <para> void 	setRotationY(float rotationY)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	rotationYChanged(float rotationY)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QTransform.RotationZChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	rotationZ() const</para>
            <para> void 	setRotationZ(float rotationZ)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	rotationZChanged(float rotationZ)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QTransform.TranslationChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	translation() const</para>
            <para> void 	setTranslation(const QVector3D &amp;translation)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	translationChanged(const QVector3D &amp;translation)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.Qt3DCore.QTransform.MatrixChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QMatrix4x4 	matrix() const</para>
            <para> void 	setMatrix(const QMatrix4x4 &amp;matrix)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	matrixChanged(const QMatrix4x4 &amp;matrix)</para>
            <para></para>
            </summary>
        </member>
    </members>
</doc>
