<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QtMultimedia.Sharp</name>
    </assembly>
    <members>
        <member name="T:QtMultimedia.QMultimedia.SupportEstimate">
            <summary>
            <para>Enumerates the levels of support a media service provider may have for a feature.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QMultimedia.SupportEstimate.NotSupported">
            <summary>The feature is not supported.</summary>
        </member>
        <member name="F:QtMultimedia.QMultimedia.SupportEstimate.MaybeSupported">
            <summary>The feature may be supported.</summary>
        </member>
        <member name="F:QtMultimedia.QMultimedia.SupportEstimate.ProbablySupported">
            <summary>The feature is probably supported.</summary>
        </member>
        <member name="F:QtMultimedia.QMultimedia.SupportEstimate.PreferredService">
            <summary>The service is the preferred provider of a service.</summary>
        </member>
        <member name="T:QtMultimedia.QMultimedia.EncodingQuality">
            <summary>
            <para>Enumerates quality encoding levels.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMultimedia.EncodingMode">
            <summary>
            <para>Enumerates encoding modes.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QMultimedia.EncodingMode.ConstantQualityEncoding">
            <summary>Encoding will aim to have a constant quality, adjusting bitrate to fit.</summary>
        </member>
        <member name="F:QtMultimedia.QMultimedia.EncodingMode.ConstantBitRateEncoding">
            <summary>Encoding will use a constant bit rate, adjust quality to fit.</summary>
        </member>
        <member name="F:QtMultimedia.QMultimedia.EncodingMode.AverageBitRateEncoding">
            <summary>Encoding will try to keep an average bitrate setting, but will use more or less as needed.</summary>
        </member>
        <member name="F:QtMultimedia.QMultimedia.EncodingMode.TwoPassEncoding">
            <summary>The media will first be processed to determine the characteristics, and then processed a second time allocating more bits to the areas that need it.</summary>
        </member>
        <member name="T:QtMultimedia.QMultimedia.AvailabilityStatus">
            <summary>
            <para>Enumerates Service status errors.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QMultimedia.AvailabilityStatus.Available">
            <summary>The service is operating correctly.</summary>
        </member>
        <member name="F:QtMultimedia.QMultimedia.AvailabilityStatus.ServiceMissing">
            <summary>There is no service available to provide the requested functionality.</summary>
        </member>
        <member name="F:QtMultimedia.QMultimedia.AvailabilityStatus.Busy">
            <summary>The service must wait for access to necessary resources.</summary>
        </member>
        <member name="F:QtMultimedia.QMultimedia.AvailabilityStatus.ResourceError">
            <summary>The service could not allocate resources required to function correctly.</summary>
        </member>
        <member name="T:QtMultimedia.QMediaObject">
            <summary>
            <para>The QMediaObject class provides a common base for multimedia objects.</para>
            </summary>
            <remarks>
            <para>It provides some basic functionality that is common to other high level classes like QMediaPlayer, QAudioDecoder and QCamera, including availability and meta-data functionality, as well as functionality to connect media objects with support classes like QMediaPlaylist.</para>
            <para>The higher level QMediaObject derived classes provide the actual multimedia functionality, by internally using a QMediaService. Each media object hosts a QMediaService and uses the QMediaControl interfaces implemented by the service to implement its API. These controls can be accessed from the media object if necessary, but in general the useful functionality can be accessed from the higher level classes.</para>
            <para>Most media objects when constructed will request a new QMediaService instance, but some like QMediaRecorder and QAudioRecorder will share a service with another object.</para>
            <para></para>
            <para>See also QMediaService and QMediaControl.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaObject.#ctor(QtCore.QObject,QtMultimedia.QMediaService)">
            <summary>
            <para>Constructs a media object which uses the functionality provided by a media service.</para>
            <para>The parent is passed to QObject.</para>
            <para>This class is meant as a base class for multimedia objects so this constructor is protected.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaObject.Bind(QtCore.QObject)">
            <summary>
            <para>Bind object to this QMediaObject instance.</para>
            <para>This method establishes a relationship between this media object and a helper object. The nature of the relationship depends on both parties. This methods returns true if the helper was successfully bound, false otherwise.</para>
            <para>Most subclasses of QMediaObject provide more convenient functions that wrap this functionality, so this function rarely needs to be called directly.</para>
            <para>The object passed must implement the QMediaBindableInterface interface.</para>
            <para>See also QMediaBindableInterface.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaObject.Unbind(QtCore.QObject)">
            <summary>
            <para>Detach object from the QMediaObject instance.</para>
            <para>Unbind the helper object from this media object. A warning will be generated if the object was not previously bound to this object.</para>
            <para>See also QMediaBindableInterface.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaObject.MetaData(System.String)">
            <summary>
            <para>Returns the value associated with a meta-data key.</para>
            <para>See the list of predefined meta-data keys.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaObject.AddPropertyWatch(QtCore.QByteArray)">
            <summary>
            <para>Watch the property name. The property's notify signal will be emitted once every notifyInterval milliseconds.</para>
            <para>See also notifyInterval.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaObject.RemovePropertyWatch(QtCore.QByteArray)">
            <summary>
            <para>Remove property name from the list of properties whose changes are regularly signaled.</para>
            <para>See also notifyInterval.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaObject.NotifyIntervalChanged">
            <summary>
            <para>Signal a change in the notify interval period to milliseconds.</para>
            <para>Note: Notifier signal for property notifyInterval. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaObject.MetaDataAvailableChanged">
            <summary>
            <para>Signals that the available state of a media object's meta-data has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaObject.MetaDataChanged">
            <summary>
            <para>Signals that this media object's meta-data has changed.</para>
            <para>If multiple meta-data elements are changed, metaDataChanged(const QString &amp;key, const QVariant &amp;value) signal is emitted for each of them with metaDataChanged() changed emitted once.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>metaDataChanged</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(mediaObject, static_cast&lt;void(QMediaObject::*)()&gt;(&amp;QMediaObject::metaDataChanged),</para>
            <para>      [=](){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaObject.MetaDataChangedValue">
            <summary>
            <para>Signal the changes of one meta-data element value with the given key.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>metaDataChanged</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(mediaObject, static_cast&lt;void(QMediaObject::*)(const QString &amp;, const QVariant &amp;)&gt;(&amp;QMediaObject::metaDataChanged),</para>
            <para>      [=](const QString &amp;key, const QVariant &amp;value){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaObject.AvailabilityChanged">
            <summary>
            <para>Signal emitted when the availability state has changed to available.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>availabilityChanged</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(mediaObject, static_cast&lt;void(QMediaObject::*)(bool)&gt;(&amp;QMediaObject::availabilityChanged),</para>
            <para>      [=](bool available){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaObject.AvailabilityChangedAvailability">
            <summary>
            <para>Signal emitted when the availability of the service has changed to availability.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>availabilityChanged</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(mediaObject, static_cast&lt;void(QMediaObject::*)(QMultimedia::AvailabilityStatus)&gt;(&amp;QMediaObject::availabilityChanged),</para>
            <para>      [=](QMultimedia::AvailabilityStatus availability){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaObject.NotifyInterval">
            <summary>
            <para>The interval at which notifiable properties will update.</para>
            <para>The interval is expressed in milliseconds, the default value is 1000.</para>
            <para>See also addPropertyWatch() and removePropertyWatch().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaObject.IsAvailable">
            <summary>
            <para>Returns true if the service is available for use.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaObject.Availability">
            <summary>
            <para>Returns the availability of the functionality offered by this object.</para>
            <para>In some cases the functionality may not be available (for example, if the current operating system or platform does not provide the required functionality), or it may be temporarily unavailable (for example, audio playback during a phone call or similar).</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaObject.Service">
            <summary>
            <para>Returns the media service that provides the functionality of this multimedia object.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaObject.IsMetaDataAvailable">
            <summary>
            <para>Returns true if there is meta-data associated with this media object, else false.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaObject.AvailableMetaData">
            <summary>
            <para>Returns a list of keys there is meta-data available for.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaBindableInterface">
            <summary>
            <para>The QMediaBindableInterface class is the base class for objects extending media objects functionality.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.IQMediaBindableInterface">
            <summary>
            <para>The QMediaBindableInterface class is the base class for objects extending media objects functionality.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.IQMediaBindableInterface.MediaObject">
            <summary>
            <para>Return the currently attached media object.</para>
            <para>See also setMediaObject().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaBindableInterface.SetMediaObject(QtMultimedia.QMediaObject)">
            <summary>
            <para>Attaches to the media object. Returns true if attached successfully, otherwise returns false.</para>
            <para>See also mediaObject().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaBindableInterface.MediaObject">
            <summary>
            <para>Return the currently attached media object.</para>
            <para>See also setMediaObject().</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaControl">
            <summary>
            <para>The QMediaControl class provides a base interface for media service controls.</para>
            </summary>
            <remarks>
            <para>Media controls provide an interface to individual features provided by a media service. Most services implement a principal control which exposes the core functionality of the service and a number of optional controls which expose any additional functionality.</para>
            <para>A pointer to a control implemented by a media service can be obtained using the QMediaService::requestControl() member of QMediaService. If the service doesn't implement a control it will instead return a null pointer.</para>
            <para></para>
            <para></para>
            <para>  QMediaPlayerControl *control = qobject_cast&lt;QMediaPlayerControl *&gt;(</para>
            <para>          mediaService-&gt;requestControl(&quot;org.qt-project.qt.mediaplayercontrol/5.0&quot;));</para>
            <para></para>
            <para></para>
            <para>Alternatively if the IId of the control has been declared using Q_MEDIA_DECLARE_CONTROL the template version of QMediaService::requestControl() can be used to request the service without explicitly passing the IId or using qobject_cast().</para>
            <para></para>
            <para></para>
            <para>  QMediaPlayerControl *control = mediaService-&gt;requestControl&lt;QMediaPlayerControl *&gt;();</para>
            <para></para>
            <para></para>
            <para>Most application code will not interface directly with a media service's controls, instead the QMediaObject which owns the service acts as an intermediary between one or more controls and the application.</para>
            <para></para>
            <para>See also QMediaService and QMediaObject.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a media control with the given parent.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaService">
            <summary>
            <para>The QMediaService class provides a common base class for media service implementations.</para>
            </summary>
            <remarks>
            <para>Media services provide implementations of the functionality promised by media objects, and allow multiple providers to implement a QMediaObject.</para>
            <para>To provide the functionality of a QMediaObject media services implement QMediaControl interfaces. Services typically implement one core media control which provides the core feature of a media object, and some number of additional controls which provide either optional features of the media object, or features of a secondary media object or peripheral object.</para>
            <para>A pointer to media service's QMediaControl implementation can be obtained by passing the control's interface name to the requestControl() function.</para>
            <para></para>
            <para></para>
            <para>  QMediaPlayerControl *control = qobject_cast&lt;QMediaPlayerControl *&gt;(</para>
            <para>          mediaService-&gt;requestControl(&quot;org.qt-project.qt.mediaplayercontrol/5.0&quot;));</para>
            <para></para>
            <para></para>
            <para>Media objects can use services loaded dynamically from plug-ins or implemented statically within an applications. Plug-in based services should also implement the QMediaServiceProviderPlugin interface. Static services should implement the QMediaServiceProvider interface. In general, implementing a QMediaService is outside of the scope of this documentation and support on the relevant mailing lists or IRC channels should be sought.</para>
            <para></para>
            <para>See also QMediaObject and QMediaControl.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaService.#ctor(QtCore.QObject)">
            <summary>
            <para>Construct a media service with the given parent. This class is meant as a base class for Multimedia services so this constructor is protected.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaService.RequestControl(System.String)">
            <summary>
            <para>Returns a pointer to the media control implementing interface.</para>
            <para>If the service does not implement the control, or if it is unavailable a null pointer is returned instead.</para>
            <para>Controls must be returned to the service when no longer needed using the releaseControl() function.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaService.ReleaseControl(QtMultimedia.QMediaControl)">
            <summary>
            <para>Releases a control back to the service.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCameraExposure">
            <summary>
            <para>The QCameraExposure class provides interface for exposure related camera settings.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraExposure.IsFlashModeSupported(QtMultimedia.QCameraExposure.FlashMode)">
            <summary>
            <para>Returns true if the flash mode is supported.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraExposure.IsExposureModeSupported(QtMultimedia.QCameraExposure.ExposureMode)">
            <summary>
            <para>Returns true if the exposure mode is supported.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraExposure.IsMeteringModeSupported(QtMultimedia.QCameraExposure.MeteringMode)">
            <summary>
            <para>Returns true if the metering mode is supported.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraExposure.SetManualIsoSensitivity(System.Int32)">
            <summary>
            <para>Sets the manual sensitivity to iso</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraExposure.SetAutoIsoSensitivity">
            <summary>
            <para>Turn on auto sensitivity</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraExposure.SetManualAperture(System.Double)">
            <summary>
            <para>Sets the manual camera aperture value.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraExposure.SetAutoAperture">
            <summary>
            <para>Turn on auto aperture</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraExposure.SetManualShutterSpeed(System.Double)">
            <summary>
            <para>Set the manual shutter speed to seconds</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraExposure.SetAutoShutterSpeed">
            <summary>
            <para>Turn on auto shutter speed</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraExposure.FlashReady">
            <summary>
            <para>Signal the flash ready status has changed.</para>
            <para>Note: Notifier signal for property flashReady. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraExposure.ApertureChanged">
            <summary>
            <para>Signal emitted when aperature changes to value.</para>
            <para>Note: Notifier signal for property aperture. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraExposure.ApertureRangeChanged">
            <summary>
            <para>Signal emitted when aperature range has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraExposure.ShutterSpeedChanged">
            <summary>
            <para>Signals that a camera's shutter speed has changed.</para>
            <para>Note: Notifier signal for property shutterSpeed. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraExposure.ShutterSpeedRangeChanged">
            <summary>
            <para>Signal emitted when the shutter speed range has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraExposure.IsoSensitivityChanged">
            <summary>
            <para>Signal emitted when sensitivity changes to value.</para>
            <para>Note: Notifier signal for property isoSensitivity. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraExposure.ExposureCompensationChanged">
            <summary>
            <para>Signal emitted when the exposure compensation changes to value.</para>
            <para>Note: Notifier signal for property exposureCompensation. </para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraExposure.SpotMeteringPoint">
            <summary>
            <para>When supported, the spot metering point is the (normalized) position of the point of the image where exposure metering will be performed. This is typically used to indicate an &quot;interesting&quot; area of the image that should be exposed properly.</para>
            <para>The coordinates are relative frame coordinates: QPointF(0,0) points to the left top frame point, QPointF(0.5,0.5) points to the frame center, which is typically the default spot metering point.</para>
            <para>The spot metering point is only used with spot metering mode.</para>
            <para>See also setSpotMeteringPoint().</para>
            <para></para>
            <para>Allows setting the spot metering point to point.</para>
            <para>See also spotMeteringPoint().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraExposure.flashMode">
            <summary>
            <para>This property holds the flash mode being used.</para>
            <para>Usually the single QCameraExposure::FlashMode flag is used, but some non conflicting flags combination are also allowed, like QCameraExposure::FlashManual | QCameraExposure::FlashSlowSyncRearCurtain.</para>
            <para>See also QCameraExposure::isFlashModeSupported() and QCameraExposure::isFlashReady().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraExposure.exposureMode">
            <summary>
            <para>This property holds the exposure mode being used.</para>
            <para>See also QCameraExposure::isExposureModeSupported().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraExposure.meteringMode">
            <summary>
            <para>This property holds the metering mode being used.</para>
            <para>See also QCameraExposure::isMeteringModeSupported().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraExposure.ExposureCompensation">
            <summary>
            <para>This property holds exposure compensation in EV units.</para>
            <para>Exposure compensation property allows to adjust the automatically calculated exposure.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraExposure.IsAvailable">
            <summary>
            <para>Returns true if exposure settings are supported by this camera.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraExposure.IsFlashReady">
            <summary>
            <para>Returns true if flash is charged.</para>
            <para>Note: Getter function for property flashReady. </para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraExposure.IsoSensitivity">
            <summary>
            <para>This property holds the sensor ISO sensitivity.</para>
            <para>See also supportedIsoSensitivities(), setAutoIsoSensitivity(), and setManualIsoSensitivity().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraExposure.Aperture">
            <summary>
            <para>This property holds lens aperture is specified as an F number, the ratio of the focal length to effective aperture diameter.</para>
            <para>See also supportedApertures(), setAutoAperture(), setManualAperture(), and requestedAperture().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraExposure.ShutterSpeed">
            <summary>
            <para>This property holds camera's shutter speed in seconds.</para>
            <para>See also supportedShutterSpeeds(), setAutoShutterSpeed(), and setManualShutterSpeed().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraExposure.RequestedIsoSensitivity">
            <summary>
            <para>Returns the requested ISO sensitivity or -1 if automatic ISO is turned on.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraExposure.RequestedAperture">
            <summary>
            <para>Returns the requested manual aperture or -1.0 if automatic aperture is turned on.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraExposure.RequestedShutterSpeed">
            <summary>
            <para>Returns the requested manual shutter speed in seconds or -1.0 if automatic shutter speed is turned on.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCameraExposure.FlashMode">
            <summary>
            <para>The FlashModes type is a typedef for QFlags&lt;FlashMode&gt;. It stores an OR combination of FlashMode values.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.FlashMode.FlashAuto">
            <summary>Automatic flash.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.FlashMode.FlashOff">
            <summary>Flash is Off.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.FlashMode.FlashOn">
            <summary>Flash is On.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.FlashMode.FlashRedEyeReduction">
            <summary>Red eye reduction flash.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.FlashMode.FlashFill">
            <summary>Use flash to fillin shadows.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.FlashMode.FlashTorch">
            <summary>Constant light source. If supported, torch can be enabled without loading the camera.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.FlashMode.FlashVideoLight">
            <summary>Constant light source, useful for video capture. The light is turned on only while camera is active.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.FlashMode.FlashSlowSyncFrontCurtain">
            <summary>Use the flash in conjunction with a slow shutter speed. This mode allows better exposure of distant objects and/or motion blur effect.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.FlashMode.FlashSlowSyncRearCurtain">
            <summary>The similar mode to FlashSlowSyncFrontCurtain but flash is fired at the end of exposure.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.FlashMode.FlashManual">
            <summary>Flash power is manualy set.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureAuto">
            <summary>Automatic mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureManual">
            <summary>Manual mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposurePortrait">
            <summary>Portrait exposure mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureNight">
            <summary>Night mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureBacklight">
            <summary>Backlight exposure mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureSpotlight">
            <summary>Spotlight exposure mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureSports">
            <summary>Spots exposure mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureSnow">
            <summary>Snow exposure mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureBeach">
            <summary>Beach exposure mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureLargeAperture">
            <summary>Use larger aperture with small depth of field.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureSmallAperture">
            <summary>Use smaller aperture.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureAction">
            <summary>Action mode. Since 5.5</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureLandscape">
            <summary>Landscape mode. Since 5.5</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureNightPortrait">
            <summary>Night portrait mode. Since 5.5</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureTheatre">
            <summary>Theatre mode. Since 5.5</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureSunset">
            <summary>Sunset mode. Since 5.5</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureSteadyPhoto">
            <summary>Steady photo mode. Since 5.5</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureFireworks">
            <summary>Fireworks mode. Since 5.5</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureParty">
            <summary>Party mode. Since 5.5</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureCandlelight">
            <summary>Candlelight mode. Since 5.5</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureBarcode">
            <summary>Barcode mode. Since 5.5</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.ExposureMode.ExposureModeVendor">
            <summary>The base value for device specific exposure modes.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.MeteringMode.MeteringMatrix">
            <summary>Matrix metering mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.MeteringMode.MeteringAverage">
            <summary>Center weighted average metering mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposure.MeteringMode.MeteringSpot">
            <summary>Spot metering mode.</summary>
        </member>
        <member name="T:QtMultimedia.QCameraFocusZone">
            <summary>
            <para>The QCameraFocusZone class provides information on zones used for autofocusing a camera.</para>
            </summary>
            <remarks>
            <para>For cameras that support autofocusing, in order for a camera to autofocus on part of a sensor frame, it considers different zones within the frame. Which zones to use, and where the zones are located vary between different cameras.</para>
            <para>This class exposes what zones are used by a particular camera, and a list of the zones can be retrieved by a QCameraFocus instance.</para>
            <para>You can use this information to present visual feedback - for example, drawing rectangles around areas of the camera frame that are in focus, or changing the color of a zone as it comes into focus.</para>
            <para></para>
            <para></para>
            <para>  focus-&gt;setFocusPointMode(QCameraFocus::FocusPointAuto);</para>
            <para>  QList&lt;QCameraFocusZone&gt; zones = focus-&gt;focusZones();</para>
            <para>  foreach (QCameraFocusZone zone, zones) {</para>
            <para>      if (zone.status() == QCameraFocusZone::Focused) {</para>
            <para>          // Draw a green box at zone.area()</para>
            <para>      } else if (zone.status() == QCameraFocusZone::Selected) {</para>
            <para>          // This area is selected for autofocusing, but is not in focus</para>
            <para>          // Draw a yellow box at zone.area()</para>
            <para>      }</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QCameraFocus.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraFocusZone.#ctor(QtMultimedia.QCameraFocusZone)">
            <summary>
            <para>Creates a new QCameraFocusZone as a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraFocusZone.op_Equality(QtMultimedia.QCameraFocusZone,QtMultimedia.QCameraFocusZone)">
            <summary>
            <para>Returns true if this focus zone is the same as other.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraFocusZone.op_Inequality(QtMultimedia.QCameraFocusZone,QtMultimedia.QCameraFocusZone)">
            <summary>
            <para>Returns true if this focus zone is not the same as other.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraFocusZone.Status">
            <summary>
            <para>Returns the current status of this focus zone.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraFocusZone.IsValid">
            <summary>
            <para>Returns true if this focus zone has a valid area and status.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraFocusZone.Area">
            <summary>
            <para>Returns the area of the camera frame that this focus zone encompasses.</para>
            <para>Coordinates are in frame relative coordinates - QPointF(0,0) is the top left of the frame, and QPointF(1,1) is the bottom right.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCameraFocusZone.FocusZoneStatus.Invalid">
            <summary>This zone is not valid</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFocusZone.FocusZoneStatus.Unused">
            <summary>This zone may be used for autofocusing, but is not currently.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFocusZone.FocusZoneStatus.Selected">
            <summary>This zone is currently being used for autofocusing, but is not in focus.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFocusZone.FocusZoneStatus.Focused">
            <summary>This zone is being used for autofocusing and is currently in focus.</summary>
        </member>
        <member name="T:QtMultimedia.QCameraFocus">
            <summary>
            <para>The QCameraFocus class provides an interface for focus and zoom related camera settings.</para>
            </summary>
            <remarks>
            <para>On hardware that supports it, this class lets you adjust the focus or zoom (both optical and digital). This also includes things like &quot;Macro&quot; mode for close up work (e.g. reading barcodes, or recognising letters), or &quot;touch to focus&quot; - indicating an interesting area of the viewfinder for the hardware to attempt to focus on.</para>
            <para></para>
            <para></para>
            <para>  QCameraFocus *focus = camera-&gt;focus();</para>
            <para>  focus-&gt;setFocusPointMode(QCameraFocus::FocusPointCustom);</para>
            <para>  focus-&gt;setCustomFocusPoint(QPointF(0.25f, 0.75f)); // A point near the bottom left, 25% away from the corner, near that shiny vase</para>
            <para></para>
            <para></para>
            <para>Zooming can be accomplished in a number of ways - usually the more expensive but higher quality approach is an optical zoom, which allows using the full extent of the camera sensor to gather image pixels. In addition it is possible to digitally zoom, which will generally just enlarge part of the sensor frame and throw away other parts. If the camera hardware supports optical zoom this should generally always be used first. The maximumOpticalZoom() method allows this to be checked. The zoomTo() method allows changing both optical and digital zoom at once.</para>
            <para></para>
            <para></para>
            <para>  focus-&gt;zoomTo(3.0, 4.0); // Super zoom!</para>
            <para></para>
            <para></para>
            <para></para>
            <para>Some notes on autofocus</para>
            <para>Some hardware supports a movable focus lens assembly, and typically this hardware also supports automatically focusing via some heuristic. You can influence this via the FocusPointMode setting - typically the center of the frame is brought into focus, but some hardware also supports focusing on any faces detected in the frame, or on a specific point (usually provided by a user in a &quot;touch to focus&quot; scenario).</para>
            <para>This class (in combination with QCameraFocusZone) can expose information on what parts of the camera sensor image are in focus or are being used for autofocusing via the focusZones() property:</para>
            <para></para>
            <para></para>
            <para>  focus-&gt;setFocusPointMode(QCameraFocus::FocusPointAuto);</para>
            <para>  QList&lt;QCameraFocusZone&gt; zones = focus-&gt;focusZones();</para>
            <para>  foreach (QCameraFocusZone zone, zones) {</para>
            <para>      if (zone.status() == QCameraFocusZone::Focused) {</para>
            <para>          // Draw a green box at zone.area()</para>
            <para>      } else if (zone.status() == QCameraFocusZone::Selected) {</para>
            <para>          // This area is selected for autofocusing, but is not in focus</para>
            <para>          // Draw a yellow box at zone.area()</para>
            <para>      }</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QCameraFocusZone.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraFocus.IsFocusModeSupported(QtMultimedia.QCameraFocus.FocusMode)">
            <summary>
            <para>Returns true if the focus mode is supported by camera.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraFocus.IsFocusPointModeSupported(QtMultimedia.QCameraFocus.FocusPointMode)">
            <summary>
            <para>Returns true if focus point mode is supported.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraFocus.ZoomTo(System.Double,System.Double)">
            <summary>
            <para>Set the camera optical and digital zoom values.</para>
            <para>Since there may be a physical component to move, the change in zoom value may not be instantaneous.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraFocus.OpticalZoomChanged">
            <summary>
            <para>Signal emitted when optical zoom value changes to new value.</para>
            <para>Note: Notifier signal for property opticalZoom. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraFocus.DigitalZoomChanged">
            <summary>
            <para>Signal emitted when digital zoom value changes to new value.</para>
            <para>Note: Notifier signal for property digitalZoom. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraFocus.FocusZonesChanged">
            <summary>
            <para>This signal is emitted when the set of zones used in autofocusing is changed.</para>
            <para>This can change when a zone is focused or loses focus, or new focus zones have been detected.</para>
            <para>Note: Notifier signal for property focusZones. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraFocus.MaximumOpticalZoomChanged">
            <summary>
            <para>Signal emitted when the maximum supported optical zoom value changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraFocus.MaximumDigitalZoomChanged">
            <summary>
            <para>Signal emitted when the maximum supported digital zoom value changed.</para>
            <para>The maximum supported zoom value can depend on other camera settings, like capture mode or resolution.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraFocus.focusMode">
            <summary>
            <para>This property holds the current camera focus mode.</para>
            <para>This controls the way the camera lens assembly is configured.</para>
            <para>See also QCameraFocus::isFocusModeSupported().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraFocus.focusPointMode">
            <summary>
            <para>This property holds the current camera focus point selection mode.</para>
            <para>If the camera focus mode is set to use an autofocusing mode, this property controls the way the camera will select areas of the frame to use for autofocusing.</para>
            <para>See also QCameraFocus::isFocusPointModeSupported().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraFocus.CustomFocusPoint">
            <summary>
            <para>This property represents the position of the custom focus point, in relative frame coordinates: QPointF(0,0) points to the left top frame point, QPointF(0.5,0.5) points to the frame center.</para>
            <para>The custom focus point property is used only in FocusPointCustom focus mode.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraFocus.IsAvailable">
            <summary>
            <para>Returns true if focus related settings are supported by this camera.</para>
            <para>You may need to also check if any specific features are supported.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraFocus.MaximumOpticalZoom">
            <summary>
            <para>Returns the maximum optical zoom.</para>
            <para>This will be 1.0 on cameras that do not support optical zoom.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraFocus.MaximumDigitalZoom">
            <summary>
            <para>Returns the maximum digital zoom</para>
            <para>This will be 1.0 on cameras that do not support digital zoom.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraFocus.OpticalZoom">
            <summary>
            <para>This property holds the current optical zoom value.</para>
            <para>See also QCameraFocus::digitalZoom.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraFocus.DigitalZoom">
            <summary>
            <para>This property holds the current digital zoom value.</para>
            <para>See also QCameraFocus::opticalZoom.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCameraFocus.FocusMode">
            <summary>
            <para>The FocusModes type is a typedef for QFlags&lt;FocusMode&gt;. It stores an OR combination of FocusMode values.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCameraFocus.FocusMode.ManualFocus">
            <summary>Manual or fixed focus mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFocus.FocusMode.HyperfocalFocus">
            <summary>Focus to hyperfocal distance, with the maximum depth of field achieved. All objects at distances from half of this distance out to infinity will be acceptably sharp.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFocus.FocusMode.InfinityFocus">
            <summary>Focus strictly to infinity.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFocus.FocusMode.AutoFocus">
            <summary>One-shot auto focus mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFocus.FocusMode.ContinuousFocus">
            <summary>Continuous auto focus mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFocus.FocusMode.MacroFocus">
            <summary>One shot auto focus to objects close to camera.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFocus.FocusPointMode.FocusPointAuto">
            <summary>Automatically select one or multiple focus points.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFocus.FocusPointMode.FocusPointCenter">
            <summary>Focus to the frame center.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFocus.FocusPointMode.FocusPointFaceDetection">
            <summary>Focus on faces in the frame.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFocus.FocusPointMode.FocusPointCustom">
            <summary>Focus to the custom point, defined by QCameraFocus::customFocusPoint property.</summary>
        </member>
        <member name="T:QtMultimedia.QCameraImageProcessing">
            <summary>
            <para>The QCameraImageProcessing class provides an interface for image processing related camera settings.</para>
            </summary>
            <remarks>
            <para>After capturing the data for a camera frame, the camera hardware and software performs various image processing tasks to produce a final image. This includes compensating for ambient light color, reducing noise, as well as making some other adjustments to the image.</para>
            <para>You can retrieve this class from an instance of a QCamera object.</para>
            <para>For example, you can set the white balance (or color temperature) used for processing images:</para>
            <para></para>
            <para></para>
            <para>  camera = new QCamera;</para>
            <para>  QCameraImageProcessing *imageProcessing = camera-&gt;imageProcessing();</para>
            <para></para>
            <para>  if (imageProcessing-&gt;isAvailable()) {</para>
            <para>      imageProcessing-&gt;setWhiteBalanceMode(QCameraImageProcessing::WhiteBalanceFluorescent);</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>Or adjust the amount of denoising performed:</para>
            <para></para>
            <para></para>
            <para>  imageProcessing-&gt;setDenoisingLevel(-0.3); //reduce the amount of denoising applied</para>
            <para></para>
            <para></para>
            <para>In some cases changing these settings may result in a longer delay before an image is ready.</para>
            <para>For more information on image processing of camera frames, see Camera Image Processing.</para>
            <para></para>
            <para>See also QCameraImageProcessingControl.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraImageProcessing.IsWhiteBalanceModeSupported(QtMultimedia.QCameraImageProcessing.WhiteBalanceMode)">
            <summary>
            <para>Returns true if the white balance mode is supported.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraImageProcessing.IsColorFilterSupported(QtMultimedia.QCameraImageProcessing.ColorFilter)">
            <summary>
            <para>Returns true if a color filter is supported.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageProcessing.whiteBalanceMode">
            <summary>
            <para>Returns the white balance mode being used.</para>
            <para>See also setWhiteBalanceMode().</para>
            <para></para>
            <para>Sets the white balance to mode.</para>
            <para>See also whiteBalanceMode().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageProcessing.ManualWhiteBalance">
            <summary>
            <para>Returns the current color temperature if the current white balance mode is WhiteBalanceManual. For other modes the return value is undefined.</para>
            <para>See also setManualWhiteBalance().</para>
            <para></para>
            <para>Sets manual white balance to colorTemperature. This is used when whiteBalanceMode() is set to WhiteBalanceManual. The units are Kelvin.</para>
            <para>See also manualWhiteBalance().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageProcessing.Brightness">
            <summary>
            <para>Returns the brightness adjustment setting.</para>
            <para>See also setBrightness().</para>
            <para></para>
            <para>Set the brightness adjustment to value.</para>
            <para>Valid brightness adjustment values range between -1.0 and 1.0, with a default of 0.</para>
            <para>See also brightness().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageProcessing.Contrast">
            <summary>
            <para>Returns the contrast adjustment setting.</para>
            <para>See also setContrast().</para>
            <para></para>
            <para>Set the contrast adjustment to value.</para>
            <para>Valid contrast adjustment values range between -1.0 and 1.0, with a default of 0.</para>
            <para>See also contrast().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageProcessing.Saturation">
            <summary>
            <para>Returns the saturation adjustment value.</para>
            <para>See also setSaturation().</para>
            <para></para>
            <para>Sets the saturation adjustment value to value.</para>
            <para>Valid saturation values range between -1.0 and 1.0, with a default of 0.</para>
            <para>See also saturation().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageProcessing.SharpeningLevel">
            <summary>
            <para>Returns the sharpening adjustment level.</para>
            <para>See also setSharpeningLevel().</para>
            <para></para>
            <para>Sets the sharpening adjustment level.</para>
            <para>Valid sharpening values range between -1.0 and 1.0, with a default of 0.</para>
            <para>See also sharpeningLevel().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageProcessing.DenoisingLevel">
            <summary>
            <para>Returns the denoising adjustment level.</para>
            <para>See also setDenoisingLevel().</para>
            <para></para>
            <para>Sets the denoising adjustment level.</para>
            <para>Valid sharpening values range between -1.0 and 1.0, with a default of 0.</para>
            <para>If the parameter value is set to 0, the amount of denoising applied is selected by camera and depends on camera capabilities and settings. Changing value in -1.0..1.0 range adjusts the amount of denoising applied within the supported range.</para>
            <para>See also denoisingLevel().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageProcessing.colorFilter">
            <summary>
            <para>Returns the color filter which will be applied to image data captured by the camera.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also setColorFilter().</para>
            <para></para>
            <para>Sets the color filter which will be applied to image data captured by the camera.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also colorFilter().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageProcessing.IsAvailable">
            <summary>
            <para>Returns true if image processing related settings are supported by this camera.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.WhiteBalanceMode.WhiteBalanceAuto">
            <summary>Auto white balance mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.WhiteBalanceMode.WhiteBalanceManual">
            <summary>Manual white balance. In this mode the white balance should be set with setManualWhiteBalance()</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.WhiteBalanceMode.WhiteBalanceSunlight">
            <summary>Sunlight white balance mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.WhiteBalanceMode.WhiteBalanceCloudy">
            <summary>Cloudy white balance mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.WhiteBalanceMode.WhiteBalanceShade">
            <summary>Shade white balance mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.WhiteBalanceMode.WhiteBalanceTungsten">
            <summary>Tungsten (incandescent) white balance mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.WhiteBalanceMode.WhiteBalanceFluorescent">
            <summary>Fluorescent white balance mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.WhiteBalanceMode.WhiteBalanceFlash">
            <summary>Flash white balance mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.WhiteBalanceMode.WhiteBalanceSunset">
            <summary>Sunset white balance mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.WhiteBalanceMode.WhiteBalanceVendor">
            <summary>Base value for vendor defined white balance modes.</summary>
        </member>
        <member name="T:QtMultimedia.QCameraImageProcessing.ColorFilter">
            <summary>
            <para>This enum was introduced or modified in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.ColorFilter.ColorFilterNone">
            <summary>No filter is applied to images.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.ColorFilter.ColorFilterGrayscale">
            <summary>A grayscale filter.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.ColorFilter.ColorFilterNegative">
            <summary>A negative filter.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.ColorFilter.ColorFilterSolarize">
            <summary>A solarize filter.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.ColorFilter.ColorFilterSepia">
            <summary>A sepia filter.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.ColorFilter.ColorFilterPosterize">
            <summary>A posterize filter.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.ColorFilter.ColorFilterWhiteboard">
            <summary>A whiteboard filter.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.ColorFilter.ColorFilterBlackboard">
            <summary>A blackboard filter.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.ColorFilter.ColorFilterAqua">
            <summary>An aqua filter.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessing.ColorFilter.ColorFilterVendor">
            <summary>The base value for vendor defined filters.</summary>
        </member>
        <member name="T:QtMultimedia.QAbstractVideoBuffer">
            <summary>
            <para>The QAbstractVideoBuffer class is an abstraction for video data.</para>
            </summary>
            <remarks>
            <para>The QVideoFrame class makes use of a QAbstractVideoBuffer internally to reference a buffer of video data. Quite often video data buffers may reside in video memory rather than system memory, and this class provides an abstraction of the location.</para>
            <para>In addition, creating a subclass of QAbstractVideoBuffer will allow you to construct video frames from preallocated or static buffers, in cases where the QVideoFrame constructors taking a QByteArray or a QImage do not suffice. This may be necessary when implementing a new hardware accelerated video system, for example.</para>
            <para>The contents of a buffer can be accessed by mapping the buffer to memory using the map() function, which returns a pointer to memory containing the contents of the video buffer. The memory returned by map() is released by calling the unmap() function.</para>
            <para>The handle() of a buffer may also be used to manipulate its contents using type specific APIs. The type of a buffer's handle is given by the handleType() function.</para>
            <para></para>
            <para>See also QVideoFrame.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QAbstractVideoBuffer.#ctor(QtMultimedia.QAbstractVideoBuffer.HandleType)">
            <summary>
            <para>Constructs an abstract video buffer of the given type.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAbstractVideoBuffer.Release">
            <summary>
            <para>Releases the video buffer.</para>
            <para>QVideoFrame calls QAbstractVideoBuffer::release when the buffer is not used any more and can be destroyed or returned to the buffer pool.</para>
            <para>The default implementation deletes the buffer instance.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAbstractVideoBuffer.Map(QtMultimedia.QAbstractVideoBuffer.MapMode,System.Int32@,System.Int32@)">
            <summary>
            <para>Maps the contents of a video buffer to memory.</para>
            <para>In some cases the video buffer might be stored in video memory or otherwise inaccessible memory, so it is necessary to map the buffer before accessing the pixel data. This may involve copying the contents around, so avoid mapping and unmapping unless required.</para>
            <para>The map mode indicates whether the contents of the mapped memory should be read from and/or written to the buffer. If the map mode includes the QAbstractVideoBuffer::ReadOnly flag the mapped memory will be populated with the content of the buffer when initially mapped. If the map mode includes the QAbstractVideoBuffer::WriteOnly flag the content of the possibly modified mapped memory will be written back to the buffer when unmapped.</para>
            <para>When access to the data is no longer needed be sure to call the unmap() function to release the mapped memory and possibly update the buffer contents.</para>
            <para>Returns a pointer to the mapped memory region, or a null pointer if the mapping failed. The size in bytes of the mapped memory region is returned in numBytes, and the line stride in bytesPerLine.</para>
            <para>Note: Writing to memory that is mapped as read-only is undefined, and may result in changes to shared data or crashes.</para>
            <para>See also unmap() and mapMode().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAbstractVideoBuffer.Unmap">
            <summary>
            <para>Releases the memory mapped by the map() function.</para>
            <para>If the MapMode included the QAbstractVideoBuffer::WriteOnly flag this will write the current content of the mapped memory back to the video frame.</para>
            <para>See also map().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAbstractVideoBuffer.handleType">
            <summary>
            <para>Returns the type of a video buffer's handle.</para>
            <para>See also handle().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAbstractVideoBuffer.mapMode">
            <summary>
            <para>Returns the mode a video buffer is mapped in.</para>
            <para>See also map().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAbstractVideoBuffer.Handle">
            <summary>
            <para>Returns a type specific handle to the data buffer.</para>
            <para>The type of the handle is given by handleType() function.</para>
            <para>See also handleType().</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QAbstractVideoBuffer.HandleType">
            <summary>
            <para>Identifies the type of a video buffers handle.</para>
            <para>See also handleType().</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QAbstractVideoBuffer.HandleType.NoHandle">
            <summary>The buffer has no handle, its data can only be accessed by mapping the buffer.</summary>
        </member>
        <member name="F:QtMultimedia.QAbstractVideoBuffer.HandleType.GLTextureHandle">
            <summary>The handle of the buffer is an OpenGL texture ID.</summary>
        </member>
        <member name="F:QtMultimedia.QAbstractVideoBuffer.HandleType.XvShmImageHandle">
            <summary>The handle contains pointer to shared memory XVideo image.</summary>
        </member>
        <member name="F:QtMultimedia.QAbstractVideoBuffer.HandleType.CoreImageHandle">
            <summary>The handle contains pointer to OS X CIImage.</summary>
        </member>
        <member name="F:QtMultimedia.QAbstractVideoBuffer.HandleType.QPixmapHandle">
            <summary>The handle of the buffer is a QPixmap.</summary>
        </member>
        <member name="F:QtMultimedia.QAbstractVideoBuffer.HandleType.EGLImageHandle">
            <summary>The handle of the buffer is an EGLImageKHR.</summary>
        </member>
        <member name="F:QtMultimedia.QAbstractVideoBuffer.HandleType.UserHandle">
            <summary>Start value for user defined handle types.</summary>
        </member>
        <member name="T:QtMultimedia.QAbstractVideoBuffer.MapMode">
            <summary>
            <para>Enumerates how a video buffer's data is mapped to system memory.</para>
            <para>See also mapMode() and map().</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QAbstractVideoBuffer.MapMode.NotMapped">
            <summary>The video buffer is not mapped to memory.</summary>
        </member>
        <member name="F:QtMultimedia.QAbstractVideoBuffer.MapMode.ReadOnly">
            <summary>The mapped memory is populated with data from the video buffer when mapped, but the content of the mapped memory may be discarded when unmapped.</summary>
        </member>
        <member name="F:QtMultimedia.QAbstractVideoBuffer.MapMode.WriteOnly">
            <summary>The mapped memory is uninitialized when mapped, but the possibly modified content will be used to populate the video buffer when unmapped.</summary>
        </member>
        <member name="F:QtMultimedia.QAbstractVideoBuffer.MapMode.ReadWrite">
            <summary>The mapped memory is populated with data from the video buffer, and the video buffer is repopulated with the content of the mapped memory when it is unmapped.</summary>
        </member>
        <member name="T:QtMultimedia.QVideoFrame">
            <summary>
            <para>The QVideoFrame class represents a frame of video data.</para>
            </summary>
            <remarks>
            <para>A QVideoFrame encapsulates the pixel data of a video frame, and information about the frame.</para>
            <para>Video frames can come from several places - decoded media, a camera, or generated programmatically. The way pixels are described in these frames can vary greatly, and some pixel formats offer greater compression opportunities at the expense of ease of use.</para>
            <para>The pixel contents of a video frame can be mapped to memory using the map() function. While mapped, the video data can accessed using the bits() function, which returns a pointer to a buffer. The total size of this buffer is given by the mappedBytes() function, and the size of each line is given by bytesPerLine(). The return value of the handle() function may also be used to access frame data using the internal buffer's native APIs (for example - an OpenGL texture handle).</para>
            <para>A video frame can also have timestamp information associated with it. These timestamps can be used by an implementation of QAbstractVideoSurface to determine when to start and stop displaying the frame, but not all surfaces might respect this setting.</para>
            <para>The video pixel data in a QVideoFrame is encapsulated in a QAbstractVideoBuffer. A QVideoFrame may be constructed from any buffer type by subclassing the QAbstractVideoBuffer class.</para>
            <para>Note: Since video frames can be expensive to copy, QVideoFrame is explicitly shared, so any change made to a video frame will also apply to any copies.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.#ctor">
            <summary>
            <para>Constructs a null video frame.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.#ctor(QtMultimedia.QAbstractVideoBuffer,QtCore.QSize,QtMultimedia.QVideoFrame.PixelFormat)">
            <summary>
            <para>Constructs a video frame from a buffer with the given pixel format and size in pixels.</para>
            <para>Note: This doesn't increment the reference count of the video buffer.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.#ctor(System.Int32,QtCore.QSize,System.Int32,QtMultimedia.QVideoFrame.PixelFormat)">
            <summary>
            <para>Constructs a video frame of the given pixel format and size in pixels.</para>
            <para>The bytesPerLine (stride) is the length of each scan line in bytes, and bytes is the total number of bytes that must be allocated for the frame.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.#ctor(QtGui.QImage)">
            <summary>
            <para>Constructs a video frame from an image.</para>
            <para>Note: This will construct an invalid video frame if there is no frame type equivalent to the image format.</para>
            <para>See also pixelFormatFromImageFormat().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.#ctor(QtMultimedia.QVideoFrame)">
            <summary>
            <para>Constructs a shallow copy of other. Since QVideoFrame is explicitly shared, these two instances will reflect the same frame.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.op_Equality(QtMultimedia.QVideoFrame,QtMultimedia.QVideoFrame)">
            <summary>
            <para>Returns true if this QVideoFrame and other reflect the same frame.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.op_Inequality(QtMultimedia.QVideoFrame,QtMultimedia.QVideoFrame)">
            <summary>
            <para>Returns true if this QVideoFrame and other do not reflect the same frame.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.Map(QtMultimedia.QAbstractVideoBuffer.MapMode)">
            <summary>
            <para>Maps the contents of a video frame to system (CPU addressable) memory.</para>
            <para>In some cases the video frame data might be stored in video memory or otherwise inaccessible memory, so it is necessary to map a frame before accessing the pixel data. This may involve copying the contents around, so avoid mapping and unmapping unless required.</para>
            <para>The map mode indicates whether the contents of the mapped memory should be read from and/or written to the frame. If the map mode includes the QAbstractVideoBuffer::ReadOnly flag the mapped memory will be populated with the content of the video frame when initially mapped. If the map mode includes the QAbstractVideoBuffer::WriteOnly flag the content of the possibly modified mapped memory will be written back to the frame when unmapped.</para>
            <para>While mapped the contents of a video frame can be accessed directly through the pointer returned by the bits() function.</para>
            <para>When access to the data is no longer needed, be sure to call the unmap() function to release the mapped memory and possibly update the video frame contents.</para>
            <para>If the video frame has been mapped in read only mode, it is permissible to map it multiple times in read only mode (and unmap it a corresponding number of times). In all other cases it is necessary to unmap the frame first before mapping a second time.</para>
            <para>Note: Writing to memory that is mapped as read-only is undefined, and may result in changes to shared data or crashes.</para>
            <para>Returns true if the frame was mapped to memory in the given mode and false otherwise.</para>
            <para>See also unmap(), mapMode(), and bits().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.Unmap">
            <summary>
            <para>Releases the memory mapped by the map() function.</para>
            <para>If the MapMode included the QAbstractVideoBuffer::WriteOnly flag this will persist the current content of the mapped memory to the video frame.</para>
            <para>unmap() should not be called if map() function failed.</para>
            <para>See also map().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.BytesPerLine">
            <summary>
            <para>Returns the number of bytes in a scan line.</para>
            <para>Note: For planar formats this is the bytes per line of the first plane only. The bytes per line of subsequent planes should be calculated as per the frame pixel format.</para>
            <para>This value is only valid while the frame data is mapped.</para>
            <para>See also bits(), map(), and mappedBytes().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.BytesPerLine(System.Int32)">
            <summary>
            <para>Returns the number of bytes in a scan line of a plane.</para>
            <para>This value is only valid while the frame data is mapped.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also bits(), map(), mappedBytes(), and planeCount().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.Bits">
            <summary>
            <para>Returns a pointer to the start of the frame data buffer.</para>
            <para>This value is only valid while the frame data is mapped.</para>
            <para>Changes made to data accessed via this pointer (when mapped with write access) are only guaranteed to have been persisted when unmap() is called and when the buffer has been mapped for writing.</para>
            <para>See also map(), mappedBytes(), and bytesPerLine().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.Bits(System.Int32)">
            <summary>
            <para>Returns a pointer to the start of the frame data buffer for a plane.</para>
            <para>This value is only valid while the frame data is mapped.</para>
            <para>Changes made to data accessed via this pointer (when mapped with write access) are only guaranteed to have been persisted when unmap() is called and when the buffer has been mapped for writing.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also map(), mappedBytes(), bytesPerLine(), and planeCount().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.MetaData(System.String)">
            <summary>
            <para>Returns any metadata for this frame for the given key.</para>
            <para>This might include frame specific information from a camera, or subtitles from a decoded video stream.</para>
            <para>See the documentation for the relevant video frame producer for further information about available metadata.</para>
            <para>See also setMetaData().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.SetMetaData(System.String,QtCore.QVariant)">
            <summary>
            <para>Sets the metadata for the given key to value.</para>
            <para>If value is a null variant, any metadata for this key will be removed.</para>
            <para>The producer of the video frame might use this to associate certain data with this frame, or for an intermediate processor to add information for a consumer of this frame.</para>
            <para>See also metaData().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.PixelFormatFromImageFormat(QtGui.QImage.Format)">
            <summary>
            <para>Returns a video pixel format equivalent to an image format. If there is no equivalent format QVideoFrame::InvalidType is returned instead.</para>
            <para>Note: In general QImage does not handle YUV formats.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoFrame.ImageFormatFromPixelFormat(QtMultimedia.QVideoFrame.PixelFormat)">
            <summary>
            <para>Returns an image format equivalent to a video frame pixel format. If there is no equivalent format QImage::Format_Invalid is returned instead.</para>
            <para>Note: In general QImage does not handle YUV formats.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoFrame.fieldType">
            <summary>
            <para>Returns the field an interlaced video frame belongs to.</para>
            <para>If the video is not interlaced this will return WholeFrame.</para>
            <para>See also setFieldType().</para>
            <para></para>
            <para>Sets the field an interlaced video frame belongs to.</para>
            <para>See also fieldType().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoFrame.StartTime">
            <summary>
            <para>Returns the presentation time (in microseconds) when the frame should be displayed.</para>
            <para>An invalid time is represented as -1.</para>
            <para>See also setStartTime().</para>
            <para></para>
            <para>Sets the presentation time (in microseconds) when the frame should initially be displayed.</para>
            <para>An invalid time is represented as -1.</para>
            <para>See also startTime().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoFrame.EndTime">
            <summary>
            <para>Returns the presentation time (in microseconds) when a frame should stop being displayed.</para>
            <para>An invalid time is represented as -1.</para>
            <para>See also setEndTime().</para>
            <para></para>
            <para>Sets the presentation time (in microseconds) when a frame should stop being displayed.</para>
            <para>An invalid time is represented as -1.</para>
            <para>See also endTime().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoFrame.IsValid">
            <summary>
            <para>Identifies whether a video frame is valid.</para>
            <para>An invalid frame has no video buffer associated with it.</para>
            <para>Returns true if the frame is valid, and false if it is not.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoFrame.pixelFormat">
            <summary>
            <para>Returns the color format of a video frame.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoFrame.HandleType">
            <summary>
            <para>Returns the type of a video frame's handle.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoFrame.Size">
            <summary>
            <para>Returns the dimensions of a video frame.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoFrame.Width">
            <summary>
            <para>Returns the width of a video frame.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoFrame.Height">
            <summary>
            <para>Returns the height of a video frame.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoFrame.IsMapped">
            <summary>
            <para>Identifies if a video frame's contents are currently mapped to system memory.</para>
            <para>This is a convenience function which checks that the MapMode of the frame is not equal to QAbstractVideoBuffer::NotMapped.</para>
            <para>Returns true if the contents of the video frame are mapped to system memory, and false otherwise.</para>
            <para>See also mapMode() and QAbstractVideoBuffer::MapMode.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoFrame.IsReadable">
            <summary>
            <para>Identifies if the mapped contents of a video frame were read from the frame when it was mapped.</para>
            <para>This is a convenience function which checks if the MapMode contains the QAbstractVideoBuffer::WriteOnly flag.</para>
            <para>Returns true if the contents of the mapped memory were read from the video frame, and false otherwise.</para>
            <para>See also mapMode() and QAbstractVideoBuffer::MapMode.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoFrame.IsWritable">
            <summary>
            <para>Identifies if the mapped contents of a video frame will be persisted when the frame is unmapped.</para>
            <para>This is a convenience function which checks if the MapMode contains the QAbstractVideoBuffer::WriteOnly flag.</para>
            <para>Returns true if the video frame will be updated when unmapped, and false otherwise.</para>
            <para>Note: The result of altering the data of a frame that is mapped in read-only mode is undefined. Depending on the buffer implementation the changes may be persisted, or worse alter a shared buffer.</para>
            <para>See also mapMode() and QAbstractVideoBuffer::MapMode.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoFrame.MapMode">
            <summary>
            <para>Returns the mode a video frame was mapped to system memory in.</para>
            <para>See also map() and QAbstractVideoBuffer::MapMode.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoFrame.MappedBytes">
            <summary>
            <para>Returns the number of bytes occupied by the mapped frame data.</para>
            <para>This value is only valid while the frame data is mapped.</para>
            <para>See also map().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoFrame.PlaneCount">
            <summary>
            <para>Returns the number of planes in the video frame.</para>
            <para>This value is only valid while the frame data is mapped.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also map().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoFrame.Handle">
            <summary>
            <para>Returns a type specific handle to a video frame's buffer.</para>
            <para>For an OpenGL texture this would be the texture ID.</para>
            <para>See also QAbstractVideoBuffer::handle().</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QVideoFrame.FieldType">
            <summary>
            <para>Specifies the field an interlaced video frame belongs to.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.FieldType.ProgressiveFrame">
            <summary>The frame is not interlaced.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.FieldType.TopField">
            <summary>The frame contains a top field.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.FieldType.BottomField">
            <summary>The frame contains a bottom field.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.FieldType.InterlacedFrame">
            <summary>The frame contains a merged top and bottom field.</summary>
        </member>
        <member name="T:QtMultimedia.QVideoFrame.PixelFormat">
            <summary>
            <para>Enumerates video data types.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_Invalid">
            <summary>The frame is invalid.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_ARGB32">
            <summary>The frame is stored using a 32-bit ARGB format (0xAARRGGBB). This is equivalent to QImage::Format_ARGB32.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_ARGB32_Premultiplied">
            <summary>The frame stored using a premultiplied 32-bit ARGB format (0xAARRGGBB). This is equivalent to QImage::Format_ARGB32_Premultiplied.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_RGB32">
            <summary>The frame stored using a 32-bit RGB format (0xffRRGGBB). This is equivalent to QImage::Format_RGB32</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_RGB24">
            <summary>The frame is stored using a 24-bit RGB format (8-8-8). This is equivalent to QImage::Format_RGB888</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_RGB565">
            <summary>The frame is stored using a 16-bit RGB format (5-6-5). This is equivalent to QImage::Format_RGB16.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_RGB555">
            <summary>The frame is stored using a 16-bit RGB format (5-5-5). This is equivalent to QImage::Format_RGB555.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_ARGB8565_Premultiplied">
            <summary>The frame is stored using a 24-bit premultiplied ARGB format (8-5-6-5).</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_BGRA32">
            <summary>The frame is stored using a 32-bit BGRA format (0xBBGGRRAA).</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_BGRA32_Premultiplied">
            <summary>The frame is stored using a premultiplied 32bit BGRA format.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_BGR32">
            <summary>The frame is stored using a 32-bit BGR format (0xBBGGRRff).</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_BGR24">
            <summary>The frame is stored using a 24-bit BGR format (0xBBGGRR).</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_BGR565">
            <summary>The frame is stored using a 16-bit BGR format (5-6-5).</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_BGR555">
            <summary>The frame is stored using a 16-bit BGR format (5-5-5).</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_BGRA5658_Premultiplied">
            <summary>The frame is stored using a 24-bit premultiplied BGRA format (5-6-5-8).</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_AYUV444">
            <summary>The frame is stored using a packed 32-bit AYUV format (0xAAYYUUVV).</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_AYUV444_Premultiplied">
            <summary>The frame is stored using a packed premultiplied 32-bit AYUV format (0xAAYYUUVV).</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_YUV444">
            <summary>The frame is stored using a 24-bit packed YUV format (8-8-8).</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_YUV420P">
            <summary>The frame is stored using an 8-bit per component planar YUV format with the U and V planes horizontally and vertically sub-sampled, i.e. the height and width of the U and V planes are half that of the Y plane.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_YV12">
            <summary>The frame is stored using an 8-bit per component planar YVU format with the V and U planes horizontally and vertically sub-sampled, i.e. the height and width of the V and U planes are half that of the Y plane.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_UYVY">
            <summary>The frame is stored using an 8-bit per component packed YUV format with the U and V planes horizontally sub-sampled (U-Y-V-Y), i.e. two horizontally adjacent pixels are stored as a 32-bit macropixel which has a Y value for each pixel and common U and V values.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_YUYV">
            <summary>The frame is stored using an 8-bit per component packed YUV format with the U and V planes horizontally sub-sampled (Y-U-Y-V), i.e. two horizontally adjacent pixels are stored as a 32-bit macropixel which has a Y value for each pixel and common U and V values.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_NV12">
            <summary>The frame is stored using an 8-bit per component semi-planar YUV format with a Y plane (Y) followed by a horizontally and vertically sub-sampled, packed UV plane (U-V).</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_NV21">
            <summary>The frame is stored using an 8-bit per component semi-planar YUV format with a Y plane (Y) followed by a horizontally and vertically sub-sampled, packed VU plane (V-U).</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_IMC1">
            <summary>The frame is stored using an 8-bit per component planar YUV format with the U and V planes horizontally and vertically sub-sampled. This is similar to the Format_YUV420P type, except that the bytes per line of the U and V planes are padded out to the same stride as the Y plane.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_IMC2">
            <summary>The frame is stored using an 8-bit per component planar YUV format with the U and V planes horizontally and vertically sub-sampled. This is similar to the Format_YUV420P type, except that the lines of the U and V planes are interleaved, i.e. each line of U data is followed by a line of V data creating a single line of the same stride as the Y data.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_IMC3">
            <summary>The frame is stored using an 8-bit per component planar YVU format with the V and U planes horizontally and vertically sub-sampled. This is similar to the Format_YV12 type, except that the bytes per line of the V and U planes are padded out to the same stride as the Y plane.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_IMC4">
            <summary>The frame is stored using an 8-bit per component planar YVU format with the V and U planes horizontally and vertically sub-sampled. This is similar to the Format_YV12 type, except that the lines of the V and U planes are interleaved, i.e. each line of V data is followed by a line of U data creating a single line of the same stride as the Y data.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_Y8">
            <summary>The frame is stored using an 8-bit greyscale format.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_Y16">
            <summary>The frame is stored using a 16-bit linear greyscale format. Little endian.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_Jpeg">
            <summary>The frame is stored in compressed Jpeg format.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_CameraRaw">
            <summary>The frame is stored using a device specific camera raw format.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_AdobeDng">
            <summary>The frame is stored using raw Adobe Digital Negative (DNG) format.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoFrame.PixelFormat.Format_User">
            <summary>Start value for user defined pixel formats.</summary>
        </member>
        <member name="T:QtMultimedia.QCameraViewfinderSettings">
            <summary>
            <para>The QCameraViewfinderSettings class provides a set of viewfinder settings.</para>
            </summary>
            <remarks>
            <para>A viewfinder settings object is used to specify the viewfinder settings used by QCamera. Viewfinder settings are selected by constructing a QCameraViewfinderSettings object, setting the desired properties and then passing it to a QCamera instance using the QCamera::setViewfinderSettings() function.</para>
            <para></para>
            <para></para>
            <para>  QCameraViewfinderSettings viewfinderSettings;</para>
            <para>  viewfinderSettings.setResolution(640, 480);</para>
            <para>  viewfinderSettings.setMinimumFrameRate(15.0);</para>
            <para>  viewfinderSettings.setMaximumFrameRate(30.0);</para>
            <para></para>
            <para>  camera-&gt;setViewfinderSettings(viewfinderSettings);</para>
            <para></para>
            <para></para>
            <para>Different cameras may have different capabilities. The application should query the camera capabilities before setting parameters. For example, the application should call QCamera::supportedViewfinderResolutions() before calling setResolution().</para>
            <para></para>
            <para>See also QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraViewfinderSettings.#ctor">
            <summary>
            <para>Constructs a null viewfinder settings object.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraViewfinderSettings.#ctor(QtMultimedia.QCameraViewfinderSettings)">
            <summary>
            <para>Constructs a copy of the viewfinder settings object other.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraViewfinderSettings.Swap(QtMultimedia.QCameraViewfinderSettings)">
            <summary>
            <para>Swaps this viewfinder settings object with other. This function is very fast and never fails.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraViewfinderSettings.SetResolution(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the width and height of the viewfinder resolution.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraViewfinderSettings.SetPixelAspectRatio(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the horizontal and vertical elements of the viewfinder's pixel aspect ratio.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraViewfinderSettings.op_Inequality(QtMultimedia.QCameraViewfinderSettings,QtMultimedia.QCameraViewfinderSettings)">
            <summary>
            <para>Determines if lhs is of equal value to rhs.</para>
            <para>Returns true if the settings objects are not of equal value, and false if they are of equal value.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraViewfinderSettings.Resolution">
            <summary>
            <para>Returns the viewfinder resolution.</para>
            <para>See also setResolution().</para>
            <para></para>
            <para>Sets the viewfinder resolution.</para>
            <para>If the given resolution is empty, the backend makes an optimal choice based on the supported resolutions and the other viewfinder settings.</para>
            <para>If the camera is used to capture videos or images, the viewfinder resolution might be ignored if it conflicts with the capture resolution.</para>
            <para>See also resolution(), QVideoEncoderSettings::setResolution(), QImageEncoderSettings::setResolution(), and QCamera::supportedViewfinderResolutions().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraViewfinderSettings.MinimumFrameRate">
            <summary>
            <para>Returns the viewfinder minimum frame rate in frames per second.</para>
            <para>See also setMinimumFrameRate() and maximumFrameRate().</para>
            <para></para>
            <para>Sets the viewfinder minimum frame rate in frames per second.</para>
            <para>If the minimum frame rate is equal to the maximum frame rate, the frame rate is fixed. If not, the actual frame rate fluctuates between the minimum and the maximum.</para>
            <para>If the given rate equals to 0, the backend makes an optimal choice based on the supported frame rates and the other viewfinder settings.</para>
            <para>See also minimumFrameRate(), setMaximumFrameRate(), and QCamera::supportedViewfinderFrameRateRanges().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraViewfinderSettings.MaximumFrameRate">
            <summary>
            <para>Returns the viewfinder maximum frame rate in frames per second.</para>
            <para>See also setMaximumFrameRate() and minimumFrameRate().</para>
            <para></para>
            <para>Sets the viewfinder maximum frame rate in frames per second.</para>
            <para>If the maximum frame rate is equal to the minimum frame rate, the frame rate is fixed. If not, the actual frame rate fluctuates between the minimum and the maximum.</para>
            <para>If the given rate equals to 0, the backend makes an optimal choice based on the supported frame rates and the other viewfinder settings.</para>
            <para>See also maximumFrameRate(), setMinimumFrameRate(), and QCamera::supportedViewfinderFrameRateRanges().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraViewfinderSettings.PixelFormat">
            <summary>
            <para>Returns the viewfinder pixel format.</para>
            <para>See also setPixelFormat().</para>
            <para></para>
            <para>Sets the viewfinder pixel format.</para>
            <para>If the given format is equal to QVideoFrame::Format_Invalid, the backend uses the default format.</para>
            <para>See also pixelFormat() and QCamera::supportedViewfinderPixelFormats().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraViewfinderSettings.PixelAspectRatio">
            <summary>
            <para>Returns the viewfinder pixel aspect ratio.</para>
            <para>See also setPixelAspectRatio().</para>
            <para></para>
            <para>Sets the viewfinder pixel aspect ratio.</para>
            <para>See also pixelAspectRatio().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraViewfinderSettings.IsNull">
            <summary>
            <para>Identifies if a viewfinder settings object is uninitalized.</para>
            <para>Returns true if the settings are null, and false if they are not.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCamera">
            <summary>
            <para>The QCamera class provides interface for system camera devices.</para>
            </summary>
            <remarks>
            <para>QCamera can be used with QCameraViewfinder for viewfinder display, QMediaRecorder for video recording and QCameraImageCapture for image taking.</para>
            <para>You can use QCameraInfo to list available cameras and choose which one to use.</para>
            <para></para>
            <para></para>
            <para>  QList&lt;QCameraInfo&gt; cameras = QCameraInfo::availableCameras();</para>
            <para>  foreach (const QCameraInfo &amp;cameraInfo, cameras) {</para>
            <para>      if (cameraInfo.deviceName() == &quot;mycamera&quot;)</para>
            <para>          camera = new QCamera(cameraInfo);</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>See the camera overview for more information.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCamera.#ctor(QtCore.QObject)">
            <summary>
            <para>Construct a QCamera with a parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.#ctor(QtCore.QByteArray,QtCore.QObject)">
            <summary>
            <para>Construct a QCamera from deviceName and parent.</para>
            <para>If no camera with that deviceName exists, the camera object will be invalid.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.#ctor(QtMultimedia.QCameraInfo,QtCore.QObject)">
            <summary>
            <para>Construct a QCamera from a camera description cameraInfo and parent.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.#ctor(QtMultimedia.QCamera.Position,QtCore.QObject)">
            <summary>
            <para>Construct a QCamera which uses a hardware camera located a the specified position.</para>
            <para>For example on a mobile phone it can be used to easily choose between front-facing and back-facing cameras.</para>
            <para>If no camera is available at the specified position or if position is QCamera::UnspecifiedPosition, the default camera is used.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.IsCaptureModeSupported(QtMultimedia.QCamera.CaptureMode)">
            <summary>
            <para>Returns true if the capture mode is suported.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.Focus">
            <summary>
            <para>Returns the camera focus control object.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.SetViewfinder(QtMultimedia.QAbstractVideoSurface)">
            <summary>
            <para>Sets a video surface as the viewfinder of a camera.</para>
            <para>If a viewfinder has already been set on the camera the new surface will replace it.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.lockStatus">
            <summary>
            <para>Returns the status of requested camera settings locks.</para>
            <para>Note: Getter function for property lockStatus. </para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.lockStatus(QtMultimedia.QCamera.LockType)">
            <summary>
            <para>Returns the lock status for a given lockType.</para>
            <para>Note: Getter function for property lockStatus. </para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.Load">
            <summary>
            <para>Open the camera device. The camera state is changed to QCamera::LoadedStatus.</para>
            <para>It's not necessary to explcitly load the camera, unless unless the application have to read the supported camera settings and change the default depending on the camera capabilities.</para>
            <para>In all the other cases it's possible to start the camera directly from unloaded state.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.Unload">
            <summary>
            <para>Close the camera device and deallocate the related resources. The camera state is changed to QCamera::UnloadedStatus.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.Start">
            <summary>
            <para>Starts the camera.</para>
            <para>State is changed to QCamera::ActiveState if camera is started successfully, otherwise error() signal is emitted.</para>
            <para>While the camera state is changed to QCamera::ActiveState, starting the camera service can be asynchronous with the actual status reported with QCamera::status property.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.Stop">
            <summary>
            <para>Stops the camera. The camera state is changed from QCamera::ActiveState to QCamera::LoadedState.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.SearchAndLock">
            <summary>
            <para>Lock all the supported camera settings.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.Unlock">
            <summary>
            <para>Unlock all the requested camera locks.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.SearchAndLock(QtMultimedia.QCamera.LockType)">
            <summary>
            <para>Locks the camera settings with the requested locks, including focusing in the single autofocus mode, exposure and white balance if the exposure and white balance modes are not manual.</para>
            <para>The camera settings are usually locked before taking one or multiple still images, in responce to the shutter button being half pressed.</para>
            <para>The QCamera::locked() signal is emitted when camera settings are successfully locked, otherwise QCamera::lockFailed() is emitted.</para>
            <para>QCamera also emits lockStatusChanged(QCamera::LockType, QCamera::LockStatus) on individual lock status changes and lockStatusChanged(QCamera::LockStatus) signal on composite status changes.</para>
            <para>Locking serves two roles: it initializes calculation of automatic parameter (focusing, calculating the correct exposure and white balance) and allows to keep some or all of those parameters during number of shots.</para>
            <para>If the camera doesn't support keeping one of parameters between shots, the related lock state changes to QCamera::Unlocked.</para>
            <para>It's also acceptable to relock already locked settings, depending on the lock parameter this initiates new focusing, exposure or white balance calculation.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.Unlock(QtMultimedia.QCamera.LockType)">
            <summary>
            <para>Unlocks the camera settings specified with locks or cancel the current locking if one is active.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.DeviceDescription(QtCore.QByteArray)">
            <summary>
            <para>Returns the description of the device.</para>
            <para>See also QCameraInfo::availableCameras() and QCameraInfo::description().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCamera.StateChanged">
            <summary>
            <para>Signals the camera state has changed.</para>
            <para>Usually the state changes is caused by calling load(), unload(), start() and stop(), but the state can also be changed change as a result of camera error.</para>
            <para>Note: Notifier signal for property state. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCamera.CaptureModeChanged">
            <summary>
            <para>Signals the capture mode has changed.</para>
            <para>Note: Notifier signal for property captureMode. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCamera.StatusChanged">
            <summary>
            <para>Signals the camera status has changed.</para>
            <para>Note: Notifier signal for property status. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCamera.Locked">
            <summary>
            <para>Signals all the requested camera settings are locked.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCamera.LockFailed">
            <summary>
            <para>Signals locking of at least one requested camera settings failed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCamera.LockStatusChanged">
            <summary>
            <para>Signals the overall status for all the requested camera locks was changed with specified reason.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>lockStatusChanged</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(camera, static_cast&lt;void(QCamera::*)(QCamera::LockStatus, QCamera::LockChangeReason)&gt;(&amp;QCamera::lockStatusChanged),</para>
            <para>      [=](QCamera::LockStatus status, QCamera::LockChangeReason reason){ /* ... */ });</para>
            <para></para>
            <para></para>
            <para>Note: Notifier signal for property lockStatus. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCamera.LockStatusChangedReason">
            <summary>
            <para>Signals the lock status was changed with specified reason.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>lockStatusChanged</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(camera, static_cast&lt;void(QCamera::*)(QCamera::LockType, QCamera::LockStatus, QCamera::LockChangeReason)&gt;(&amp;QCamera::lockStatusChanged),</para>
            <para>      [=](QCamera::LockType lock, QCamera::LockStatus status, QCamera::LockChangeReason reason){ /* ... */ });</para>
            <para></para>
            <para></para>
            <para>Note: Notifier signal for property lockStatus. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCamera.ErrorValue">
            <summary>
            <para>Signal emitted when error state changes to value.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(camera, static_cast&lt;void(QCamera::*)(QCamera::Error)&gt;(&amp;QCamera::error),</para>
            <para>      [=](QCamera::Error value){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCamera.ViewfinderSettings">
            <summary>
            <para>Returns the viewfinder settings being used by the camera.</para>
            <para>Settings may change when the camera is started, for example if the viewfinder settings are undefined or if unsupported values are set.</para>
            <para>If viewfinder settings are not supported by the camera, it always returns a null QCameraViewfinderSettings object.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also setViewfinderSettings().</para>
            <para></para>
            <para>Sets the viewfinder settings.</para>
            <para>If some parameters are not specified, or null settings are passed, the camera will choose default values.</para>
            <para>If the camera is used to capture videos or images, the viewfinder settings might be ignored if they conflict with the capture settings. You can check the actual viewfinder settings once the camera is in the QCamera::ActiveStatus status.</para>
            <para>Changing the viewfinder settings while the camera is in the QCamera::ActiveState state may cause the camera to be restarted.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also viewfinderSettings(), supportedViewfinderResolutions(), supportedViewfinderFrameRateRanges(), and supportedViewfinderPixelFormats().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCamera.captureMode">
            <summary>
            <para>The type of media (video or still images), the camera is configured to capture.</para>
            <para>It's allowed to change capture mode in any camera state, but if the camera is currently active, chaging capture mode is likely to lead to camera status chaged to QCamera::LoadedStatus, QCamera::LoadingStatus, and when the camera is ready to QCamera::ActiveStatus.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCamera.Availability">
            <summary>
            <para>Reimplemented from QMediaObject::availability().</para>
            <para>Returns the availability state of the camera service.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCamera.state">
            <summary>
            <para>This property holds the current state of the camera object.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCamera.status">
            <summary>
            <para>This property holds the current status of the camera object.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCamera.Exposure">
            <summary>
            <para>Returns the camera exposure control object.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCamera.ImageProcessing">
            <summary>
            <para>Returns the camera image processing control object.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCamera.error">
            <summary>
            <para>Returns the error state of the object.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCamera.ErrorString">
            <summary>
            <para>Returns a string describing a camera's error state.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCamera.SupportedLocks">
            <summary>
            <para>Returns the lock types, camera supports.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCamera.RequestedLocks">
            <summary>
            <para>Returns the requested lock types.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCamera.Status">
            <summary>
            <para>Depending on backend, changing some camera settings like capture mode, codecs or resolution in ActiveState may lead to changing the camera status to LoadedStatus and StartingStatus while the settings are applied and back to ActiveStatus when the camera is ready.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Status.UnavailableStatus">
            <summary>The camera or camera backend is not available.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Status.UnloadedStatus">
            <summary>The initial camera status, with camera not loaded. The camera capabilities including supported capture settings may be unknown.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Status.LoadingStatus">
            <summary>The camera device loading in result of state transition from QCamera::UnloadedState to QCamera::LoadedState or QCamera::ActiveState.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Status.UnloadingStatus">
            <summary>The camera device is unloading in result of state transition from QCamera::LoadedState or QCamera::ActiveState to QCamera::UnloadedState.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Status.LoadedStatus">
            <summary>The camera is loaded and ready to be configured. This status indicates the camera device is opened and it's possible to query for supported image and video capture settings, like resolution, framerate and codecs.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Status.StandbyStatus">
            <summary>The camera is in the power saving standby mode. The camera may come to the standby mode after some time of inactivity in the QCamera::LoadedState state.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Status.StartingStatus">
            <summary>The camera is starting in result of state transition to QCamera::ActiveState. The camera service is not ready to capture yet.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Status.StoppingStatus">
            <summary>The camera is stopping in result of state transition from QCamera::ActiveState to QCamera::LoadedState or QCamera::UnloadedState.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Status.ActiveStatus">
            <summary>The camera has been started and can produce data. The viewfinder displays video frames in active state.</summary>
        </member>
        <member name="T:QtMultimedia.QCamera.State">
            <summary>
            <para>While the supported settings are unknown in this state, it's allowed to set the camera capture settings like codec, resolution, or frame rate.</para>
            <para>In the Idle state it's allowed to query camera capabilities, set capture resolution, codecs, etc.</para>
            <para>The viewfinder is not active in the loaded state.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCamera.State.UnloadedState">
            <summary>The initial camera state, with camera not loaded, the camera capabilities except of supported capture modes are unknown.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.State.LoadedState">
            <summary>The camera is loaded and ready to be configured.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.State.ActiveState">
            <summary>In the active state as soon as camera is started the viewfinder displays video frames and the camera is ready for capture.</summary>
        </member>
        <member name="T:QtMultimedia.QCamera.CaptureMode">
            <summary>
            <para>The CaptureModes type is a typedef for QFlags&lt;CaptureMode&gt;. It stores an OR combination of CaptureMode values.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCamera.CaptureMode.CaptureViewfinder">
            <summary>Camera is only configured to display viewfinder.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.CaptureMode.CaptureStillImage">
            <summary>Camera is configured for still frames capture.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.CaptureMode.CaptureVideo">
            <summary>Camera is configured for video capture.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Error.NoError">
            <summary>No errors have occurred.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Error.CameraError">
            <summary>An error has occurred.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Error.InvalidRequestError">
            <summary>System resource doesn't support requested functionality.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Error.ServiceMissingError">
            <summary>No camera service available.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Error.NotSupportedFeatureError">
            <summary>The feature is not supported.</summary>
        </member>
        <member name="T:QtMultimedia.QCamera.LockStatus">
            <summary>
            <para>The locked state usually means the requested parameter stays the same, except of the cases when the parameter is requested to be constantly updated. For example in continuous focusing mode, the focus is considered locked as long and the object is in focus, even while the actual focusing distance may be constantly changing.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCamera.LockStatus.Unlocked">
            <summary>The application is not interested in camera settings value. The camera may keep this parameter without changes, this is common with camera focus, or adjust exposure and white balance constantly to keep the viewfinder image nice.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.LockStatus.Searching">
            <summary>The application has requested the camera focus, exposure or white balance lock with QCamera::searchAndLock(). This state indicates the camera is focusing or calculating exposure and white balance.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.LockStatus.Locked">
            <summary>The camera focus, exposure or white balance is locked. The camera is ready to capture, application may check the exposure parameters.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.LockChangeReason.UserRequest">
            <summary>The lock status changed in result of user request, usually to unlock camera settings.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.LockChangeReason.LockAcquired">
            <summary>The lock status successfuly changed to QCamera::Locked.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.LockChangeReason.LockFailed">
            <summary>The camera failed to acquire the requested lock in result of autofocus failure, exposure out of supported range, etc.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.LockChangeReason.LockLost">
            <summary>The camera is not able to maintain the requested lock any more. Lock status is changed to QCamera::Unlocked.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.LockChangeReason.LockTemporaryLost">
            <summary>The lock is lost, but the camera is working hard to reacquire it. This value may be used in continuous focusing mode, when the camera loses the focus, the focus lock state is changed to Qcamera::Searching with LockTemporaryLost reason.</summary>
        </member>
        <member name="T:QtMultimedia.QCamera.LockType">
            <summary>
            <para>The LockTypes type is a typedef for QFlags&lt;LockType&gt;. It stores an OR combination of LockType values.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCamera.LockType.LockExposure">
            <summary>Lock camera exposure.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.LockType.LockWhiteBalance">
            <summary>Lock the white balance.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.LockType.LockFocus">
            <summary>Lock camera focus.</summary>
        </member>
        <member name="T:QtMultimedia.QCamera.Position">
            <summary>
            <para>This enum specifies the physical position of the camera on the system hardware.</para>
            <para>This enum was introduced or modified in  Qt 5.3.</para>
            <para>See also QCameraInfo::position().</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Position.UnspecifiedPosition">
            <summary>The camera position is unspecified or unknown.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Position.BackFace">
            <summary>The camera is on the back face of the system hardware. For example on a mobile device, it means it is on the opposite side to that of the screen.</summary>
        </member>
        <member name="F:QtMultimedia.QCamera.Position.FrontFace">
            <summary>The camera is on the front face of the system hardware. For example on a mobile device, it means it is on the same side as that of the screen. Viewfinder frames of front-facing cameras are mirrored horizontally, so the users can see themselves as looking into a mirror. Captured images or videos are not mirrored.</summary>
        </member>
        <member name="T:QtMultimedia.QCamera.FrameRateRange">
            <summary>
            <para>A FrameRateRange represents a range of frame rates as minimum and maximum rate.</para>
            </summary>
            <remarks>
            <para>If the minimum frame rate is equal to the maximum frame rate, the frame rate is fixed. If not, the actual frame rate fluctuates between the minimum and the maximum.</para>
            <para></para>
            <para>See also QCamera::supportedViewfinderFrameRateRanges() and QCameraViewfinderSettings.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCamera.FrameRateRange.#ctor">
            <summary>
            <para>Constructs a null frame rate range, with both minimumFrameRate and maximumFrameRate equal to 0.0.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCamera.FrameRateRange.#ctor(System.Double,System.Double)">
            <summary>
            <para>Constructs a frame rate range with the given minimum and maximum frame rates.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCamera.FrameRateRange.MinimumFrameRate">
            <summary>
            <para>The minimum frame rate supported by the range, in frames per second.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCamera.FrameRateRange.MaximumFrameRate">
            <summary>
            <para>The maximum frame rate supported by the range, in frames per second.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaServiceSupportedFormatsInterface">
            <summary>
            <para>The QMediaServiceSupportedFormatsInterface class interface identifies if a media service plug-in supports a media format.</para>
            </summary>
            <remarks>
            <para>A QMediaServiceProviderPlugin may implement this interface.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaServiceSupportedFormatsInterface.HasSupport(System.String,QtCore.QStringList)">
            <summary>
            <para>Returns the level of support a media service plug-in has for a mimeType and set of codecs.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaServiceSupportedFormatsInterface.SupportedMimeTypes">
            <summary>
            <para>Returns a list of MIME types supported by the media service plug-in.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaServiceSupportedDevicesInterface">
            <summary>
            <para>The QMediaServiceSupportedDevicesInterface class interface identifies the devices supported by a media service plug-in.</para>
            </summary>
            <remarks>
            <para>A QMediaServiceProviderPlugin may implement this interface.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaServiceSupportedDevicesInterface.DeviceDescription(QtCore.QByteArray,QtCore.QByteArray)">
            <summary>
            <para>Returns the description of a device available for a service type.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaServiceDefaultDeviceInterface">
            <summary>
            <para>The QMediaServiceDefaultDeviceInterface class interface identifies the default device used by a media service plug-in.</para>
            </summary>
            <remarks>
            <para>A QMediaServiceProviderPlugin may implement this interface.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaServiceDefaultDeviceInterface.DefaultDevice(QtCore.QByteArray)">
            <summary>
            <para>Returns the default device for a service type.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaServiceCameraInfoInterface">
            <summary>
            <para>The QMediaServiceCameraInfoInterface class interface provides camera-specific information about devices supported by a camera service plug-in.</para>
            </summary>
            <remarks>
            <para>A QMediaServiceProviderPlugin may implement this interface, in that case it also needs to implement the QMediaServiceSupportedDevicesInterface.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaServiceCameraInfoInterface.CameraPosition(QtCore.QByteArray)">
            <summary>
            <para>Returns the physical position of a camera device supported by a camera service plug-in.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaServiceCameraInfoInterface.CameraOrientation(QtCore.QByteArray)">
            <summary>
            <para>Returns the physical orientation of a camera device supported by a camera service plug-in.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaServiceFeaturesInterface">
            <summary>
            <para>The QMediaServiceFeaturesInterface class interface identifies features supported by a media service plug-in.</para>
            </summary>
            <remarks>
            <para>A QMediaServiceProviderPlugin may implement this interface.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaServiceFeaturesInterface.SupportedFeatures(QtCore.QByteArray)">
            <summary>
            <para>Returns a set of features supported by a plug-in service.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaServiceProviderPlugin">
            <summary>
            <para>The QMediaServiceProviderPlugin class interface provides an interface for QMediaService plug-ins.</para>
            </summary>
            <remarks>
            <para>A media service provider plug-in may implement one or more of QMediaServiceSupportedFormatsInterface, QMediaServiceSupportedDevicesInterface, and QMediaServiceFeaturesInterface to identify the features it supports.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaServiceProviderPlugin.Create(System.String)">
            <summary>
            <para>Constructs a new instance of the QMediaService identified by key.</para>
            <para>The QMediaService returned must be destroyed with release().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaServiceProviderPlugin.Release(QtMultimedia.QMediaService)">
            <summary>
            <para>Destroys a media service constructed with create().</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaTimeInterval">
            <summary>
            <para>The QMediaTimeInterval class represents a time interval with integer precision.</para>
            </summary>
            <remarks>
            <para>An interval is specified by an inclusive start() and end() time. These must be set in the constructor, as this is an immutable class. The specific units of time represented by the class have not been defined - it is suitable for any times which can be represented by a signed 64 bit integer.</para>
            <para>The isNormal() method determines if a time interval is normal (a normal time interval has start() &lt;= end()). A normal interval can be received from an abnormal interval by calling the normalized() method.</para>
            <para>The contains() method determines if a specified time lies within the time interval.</para>
            <para>The translated() method returns a time interval which has been translated forwards or backwards through time by a specified offset.</para>
            <para></para>
            <para>See also QMediaTimeRange.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaTimeInterval.#ctor">
            <summary>
            <para>Constructs an empty interval.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeInterval.#ctor(System.Int64,System.Int64)">
            <summary>
            <para>Constructs an interval with the specified start and end times.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeInterval.#ctor(QtMultimedia.QMediaTimeInterval)">
            <summary>
            <para>Constructs an interval by taking a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeInterval.Start">
            <summary>
            <para>Returns the start time of the interval.</para>
            <para>See also end().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeInterval.End">
            <summary>
            <para>Returns the end time of the interval.</para>
            <para>See also start().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeInterval.Contains(System.Int64)">
            <summary>
            <para>Returns true if the time interval contains the specified time. That is, start() &lt;= time &lt;= end().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeInterval.Translated(System.Int64)">
            <summary>
            <para>Returns a copy of this time interval, translated by a value of offset. An interval can be moved forward through time with a positive offset, or backward through time with a negative offset.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeInterval.op_Equality(QtMultimedia.QMediaTimeInterval,QtMultimedia.QMediaTimeInterval)">
            <summary>
            <para>Returns true if a is exactly equal to b.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeInterval.op_Inequality(QtMultimedia.QMediaTimeInterval,QtMultimedia.QMediaTimeInterval)">
            <summary>
            <para>Returns true if a is not exactly equal to b.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaTimeInterval.IsNormal">
            <summary>
            <para>Returns true if this time interval is normal. A normal time interval has start() &lt;= end().</para>
            <para>See also normalized().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaTimeInterval.Normalized">
            <summary>
            <para>Returns a normalized version of this interval.</para>
            <para>If the start() time of the interval is greater than the end() time, then the returned interval has the start and end times swapped.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaTimeRange">
            <summary>
            <para>The QMediaTimeRange class represents a set of zero or more disjoint time intervals.</para>
            </summary>
            <remarks>
            <para>The earliestTime(), latestTime(), intervals() and isEmpty() methods are used to get information about the current time range.</para>
            <para>The addInterval(), removeInterval() and clear() methods are used to modify the current time range.</para>
            <para>When adding or removing intervals from the time range, existing intervals within the range may be expanded, trimmed, deleted, merged or split to ensure that all intervals within the time range remain distinct and disjoint. As a consequence, all intervals added or removed from a time range must be normal.</para>
            <para></para>
            <para>See also QMediaTimeInterval.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaTimeRange.#ctor">
            <summary>
            <para>Constructs an empty time range.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeRange.#ctor(System.Int64,System.Int64)">
            <summary>
            <para>Constructs a time range that contains an initial interval from start to end inclusive.</para>
            <para>If the interval is not normal, the resulting time range will be empty.</para>
            <para>See also addInterval().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeRange.#ctor(QtMultimedia.QMediaTimeInterval)">
            <summary>
            <para>Constructs a time range that contains an initial interval, interval.</para>
            <para>If interval is not normal, the resulting time range will be empty.</para>
            <para>See also addInterval().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeRange.#ctor(QtMultimedia.QMediaTimeRange)">
            <summary>
            <para>Constructs a time range by copying another time range.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeRange.Contains(System.Int64)">
            <summary>
            <para>Returns true if the specified time lies within the time range.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeRange.AddInterval(System.Int64,System.Int64)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Adds the interval specified by start and end to the time range.</para>
            <para>See also addInterval().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeRange.AddInterval(QtMultimedia.QMediaTimeInterval)">
            <summary>
            <para>Adds the specified interval to the time range.</para>
            <para>Adding intervals which are not normal is invalid, and will be ignored.</para>
            <para>If the specified interval is adjacent to, or overlaps existing intervals within the time range, these intervals will be merged.</para>
            <para>This operation takes linear time.</para>
            <para>See also removeInterval().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeRange.AddTimeRange(QtMultimedia.QMediaTimeRange)">
            <summary>
            <para>Adds each of the intervals in range to this time range.</para>
            <para>Equivalent to calling addInterval() for each interval in range.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeRange.RemoveInterval(System.Int64,System.Int64)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Removes the interval specified by start and end from the time range.</para>
            <para>See also removeInterval().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeRange.RemoveInterval(QtMultimedia.QMediaTimeInterval)">
            <summary>
            <para>Removes the specified interval from the time range.</para>
            <para>Removing intervals which are not normal is invalid, and will be ignored.</para>
            <para>Intervals within the time range will be trimmed, split or deleted such that no intervals within the time range include any part of the target interval.</para>
            <para>This operation takes linear time.</para>
            <para>See also addInterval().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeRange.RemoveTimeRange(QtMultimedia.QMediaTimeRange)">
            <summary>
            <para>Removes each of the intervals in range from this time range.</para>
            <para>Equivalent to calling removeInterval() for each interval in range.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeRange.Clear">
            <summary>
            <para>Removes all intervals from the time range.</para>
            <para>See also removeInterval().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeRange.op_Equality(QtMultimedia.QMediaTimeRange,QtMultimedia.QMediaTimeRange)">
            <summary>
            <para>Returns true if all intervals in a are present in b.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeRange.op_Inequality(QtMultimedia.QMediaTimeRange,QtMultimedia.QMediaTimeRange)">
            <summary>
            <para>Returns true if one or more intervals in a are not present in b.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeRange.op_Addition(QtMultimedia.QMediaTimeRange,QtMultimedia.QMediaTimeRange)">
            <summary>
            <para>Returns a time range containing the union between r1 and r2.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaTimeRange.op_Subtraction(QtMultimedia.QMediaTimeRange,QtMultimedia.QMediaTimeRange)">
            <summary>
            <para>Returns a time range containing r2 subtracted from r1.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaTimeRange.EarliestTime">
            <summary>
            <para>Returns the earliest time within the time range.</para>
            <para>For empty time ranges, this value is equal to zero.</para>
            <para>See also latestTime().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaTimeRange.LatestTime">
            <summary>
            <para>Returns the latest time within the time range.</para>
            <para>For empty time ranges, this value is equal to zero.</para>
            <para>See also earliestTime().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaTimeRange.IsEmpty">
            <summary>
            <para>Returns true if there are no intervals within the time range.</para>
            <para>See also intervals().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaTimeRange.IsContinuous">
            <summary>
            <para>Returns true if the time range consists of a continuous interval. That is, there is one or fewer disjoint intervals within the time range.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Error.NoError">
            <summary>No errors have occurred</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Error.OpenError">
            <summary>An error occurred opening the audio device</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Error.IOError">
            <summary>An error occurred during read/write of audio device</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Error.UnderrunError">
            <summary>Audio data is not being fed to the audio device at a fast enough rate</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Error.FatalError">
            <summary>A non-recoverable error has occurred, the audio device is not usable at this time.</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.State.ActiveState">
            <summary>Audio data is being processed, this state is set after start() is called and while audio data is available to be processed.</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.State.SuspendedState">
            <summary>The audio device is in a suspended state, this state will only be entered after suspend() is called.</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.State.StoppedState">
            <summary>The audio device is closed, and is not processing any audio data</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.State.IdleState">
            <summary>The QIODevice passed in has no data and audio system's buffer is empty, this state is set after start() is called and while no audio data is available to be processed.</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Mode.AudioInput">
            <summary>audio input device</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Mode.AudioOutput">
            <summary>audio output device</summary>
        </member>
        <member name="T:QtMultimedia.QAudio.Role">
            <summary>
            <para>This enum describes the role of an audio stream.</para>
            <para>This enum was introduced or modified in  Qt 5.6.</para>
            <para>See also QMediaPlayer::setAudioRole().</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Role.UnknownRole">
            <summary>The role is unknown or undefined</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Role.MusicRole">
            <summary>Music</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Role.VideoRole">
            <summary>Soundtrack from a movie or a video</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Role.VoiceCommunicationRole">
            <summary>Voice communications, such as telephony</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Role.AlarmRole">
            <summary>Alarm</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Role.NotificationRole">
            <summary>Notification, such as an incoming e-mail or a chat request</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Role.RingtoneRole">
            <summary>Ringtone</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Role.AccessibilityRole">
            <summary>For accessibility, such as with a screen reader</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Role.SonificationRole">
            <summary>Sonification, such as with user interface sounds</summary>
        </member>
        <member name="F:QtMultimedia.QAudio.Role.GameRole">
            <summary>Game audio</summary>
        </member>
        <member name="T:QtMultimedia.QAudioFormat">
            <summary>
            <para>The QAudioFormat class stores audio stream parameter information.</para>
            </summary>
            <remarks>
            <para>An audio format specifies how data in an audio stream is arranged, i.e, how the stream is to be interpreted. The encoding itself is specified by the codec() used for the stream.</para>
            <para>In addition to the encoding, QAudioFormat contains other parameters that further specify how the audio sample data is arranged. These are the frequency, the number of channels, the sample size, the sample type, and the byte order. The following table describes these in more detail.</para>
            <para></para>
            <para>ParameterDescription</para>
            <para>Sample Rate	Samples per second of audio data in Hertz.</para>
            <para>Number of channels	The number of audio channels (typically one for mono or two for stereo)</para>
            <para>Sample size	How much data is stored in each sample (typically 8 or 16 bits)</para>
            <para>Sample type	Numerical representation of sample (typically signed integer, unsigned integer or float)</para>
            <para>Byte order	Byte ordering of sample (typically little endian, big endian)</para>
            <para></para>
            <para>This class is typically used in conjunction with QAudioInput or QAudioOutput to allow you to specify the parameters of the audio stream being read or written, or with QAudioBuffer when dealing with samples in memory.</para>
            <para>You can obtain audio formats compatible with the audio device used through functions in QAudioDeviceInfo. This class also lets you query available parameter values for a device, so that you can set the parameters yourself. See the QAudioDeviceInfo class description for details. You need to know the format of the audio streams you wish to play or record.</para>
            <para>In the common case of interleaved linear PCM data, the codec will be &quot;audio/pcm&quot;, and the samples for all channels will be interleaved. One sample for each channel for the same instant in time is referred to as a frame in Qt Multimedia (and other places).</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QAudioFormat.#ctor">
            <summary>
            <para>Construct a new audio format.</para>
            <para>Values are initialized as follows:</para>
            <para></para>
            <para>sampleRate() = -1</para>
            <para>channelCount() = -1</para>
            <para>sampleSize() = -1</para>
            <para>byteOrder() = QAudioFormat::Endian(QSysInfo::ByteOrder)</para>
            <para>sampleType() = QAudioFormat::Unknown codec() = &quot;&quot;</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioFormat.#ctor(QtMultimedia.QAudioFormat)">
            <summary>
            <para>Construct a new audio format using other.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioFormat.op_Equality(QtMultimedia.QAudioFormat,QtMultimedia.QAudioFormat)">
            <summary>
            <para>Returns true if this QAudioFormat is equal to the other QAudioFormat; otherwise returns false.</para>
            <para>All elements of QAudioFormat are used for the comparison.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioFormat.op_Inequality(QtMultimedia.QAudioFormat,QtMultimedia.QAudioFormat)">
            <summary>
            <para>Returns true if this QAudioFormat is not equal to the other QAudioFormat; otherwise returns false.</para>
            <para>All elements of QAudioFormat are used for the comparison.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioFormat.BytesForDuration(System.Int64)">
            <summary>
            <para>Returns the number of bytes required for this audio format for duration microseconds.</para>
            <para>Returns 0 if this format is not valid.</para>
            <para>Note that some rounding may occur if duration is not an exact fraction of the sampleRate().</para>
            <para>See also durationForBytes().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioFormat.DurationForBytes(System.Int32)">
            <summary>
            <para>Returns the number of microseconds represented by bytes in this format.</para>
            <para>Returns 0 if this format is not valid.</para>
            <para>Note that some rounding may occur if bytes is not an exact multiple of the number of bytes per frame.</para>
            <para>See also bytesForDuration().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioFormat.BytesForFrames(System.Int32)">
            <summary>
            <para>Returns the number of bytes required for frameCount frames of this format.</para>
            <para>Returns 0 if this format is not valid.</para>
            <para>See also bytesForDuration().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioFormat.FramesForBytes(System.Int32)">
            <summary>
            <para>Returns the number of frames represented by byteCount in this format.</para>
            <para>Note that some rounding may occur if byteCount is not an exact multiple of the number of bytes per frame.</para>
            <para>Each frame has one sample per channel.</para>
            <para>See also framesForDuration().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioFormat.FramesForDuration(System.Int64)">
            <summary>
            <para>Returns the number of frames required to represent duration microseconds in this format.</para>
            <para>Note that some rounding may occur if duration is not an exact fraction of the sampleRate().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioFormat.DurationForFrames(System.Int32)">
            <summary>
            <para>Return the number of microseconds represented by frameCount frames in this format.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioFormat.SampleRate">
            <summary>
            <para>Returns the current sample rate in Hertz.</para>
            <para>See also setSampleRate().</para>
            <para></para>
            <para>Sets the sample rate to samplerate Hertz.</para>
            <para>See also sampleRate().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioFormat.ChannelCount">
            <summary>
            <para>Returns the current channel count value.</para>
            <para>See also setChannelCount().</para>
            <para></para>
            <para>Sets the channel count to channels.</para>
            <para>See also channelCount().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioFormat.SampleSize">
            <summary>
            <para>Returns the current sample size value, in bits.</para>
            <para>See also setSampleSize() and bytesPerFrame().</para>
            <para></para>
            <para>Sets the sample size to the sampleSize specified, in bits.</para>
            <para>This is typically 8 or 16, but some systems may support higher sample sizes.</para>
            <para>See also sampleSize().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioFormat.Codec">
            <summary>
            <para>Returns the current codec identifier.</para>
            <para>See also setCodec() and QAudioDeviceInfo::supportedCodecs().</para>
            <para></para>
            <para>Sets the codec to codec.</para>
            <para>The parameter to this function should be one of the types reported by the QAudioDeviceInfo::supportedCodecs() function for the audio device you are working with.</para>
            <para>See also codec() and QAudioDeviceInfo::supportedCodecs().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioFormat.ByteOrder">
            <summary>
            <para>Returns the current byteOrder value.</para>
            <para>See also setByteOrder().</para>
            <para></para>
            <para>Sets the byteOrder to byteOrder.</para>
            <para>See also byteOrder().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioFormat.sampleType">
            <summary>
            <para>Returns the current SampleType value.</para>
            <para>See also setSampleType().</para>
            <para></para>
            <para>Sets the sampleType to sampleType.</para>
            <para>See also sampleType().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioFormat.IsValid">
            <summary>
            <para>Returns true if all of the parameters are valid.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioFormat.BytesPerFrame">
            <summary>
            <para>Returns the number of bytes required to represent one frame (a sample in each channel) in this format.</para>
            <para>Returns 0 if this format is invalid.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QAudioFormat.SampleType.Unknown">
            <summary>Not Set</summary>
        </member>
        <member name="F:QtMultimedia.QAudioFormat.SampleType.SignedInt">
            <summary>Samples are signed integers</summary>
        </member>
        <member name="F:QtMultimedia.QAudioFormat.SampleType.UnSignedInt">
            <summary>Samples are unsigned intergers</summary>
        </member>
        <member name="F:QtMultimedia.QAudioFormat.SampleType.Float">
            <summary>Samples are floats</summary>
        </member>
        <member name="F:QtMultimedia.QAudioFormat.Endian.BigEndian">
            <summary>Samples are big endian byte order</summary>
        </member>
        <member name="F:QtMultimedia.QAudioFormat.Endian.LittleEndian">
            <summary>Samples are little endian byte order</summary>
        </member>
        <member name="T:QtMultimedia.QAudioBuffer">
            <summary>
            <para>The QAudioBuffer class represents a collection of audio samples with a specific format and sample rate.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioBuffer.#ctor">
            <summary>
            <para>Create a new, empty, invalid buffer.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioBuffer.#ctor(QtMultimedia.QAudioBuffer)">
            <summary>
            <para>Creates a new audio buffer from other. Generally this will have copy-on-write semantics - a copy will only be made when it has to be.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioBuffer.#ctor(QtCore.QByteArray,QtMultimedia.QAudioFormat,System.Int64)">
            <summary>
            <para>Creates a new audio buffer from the supplied data, in the given format. The format will determine how the number and sizes of the samples are interpreted from the data.</para>
            <para>If the supplied data is not an integer multiple of the calculated frame size, the excess data will not be used.</para>
            <para>This audio buffer will copy the contents of data.</para>
            <para>startTime (in microseconds) indicates when this buffer starts in the stream. If this buffer is not part of a stream, set it to -1.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioBuffer.#ctor(System.Int32,QtMultimedia.QAudioFormat,System.Int64)">
            <summary>
            <para>Creates a new audio buffer with space for numFrames frames of the given format. The individual samples will be initialized to the default for the format.</para>
            <para>startTime (in microseconds) indicates when this buffer starts in the stream. If this buffer is not part of a stream, set it to -1.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioBuffer.StartTime">
            <summary>
            <para>Returns the time in a stream that this buffer starts at (in microseconds).</para>
            <para>If this buffer is not part of a stream, this will return -1.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioBuffer.IsValid">
            <summary>
            <para>Returns true if this is a valid buffer. A valid buffer has more than zero frames in it and a valid format.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioBuffer.Format">
            <summary>
            <para>Returns the format of this buffer.</para>
            <para>Several properties of this format influence how the duration() or byteCount() are calculated from the frameCount().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioBuffer.FrameCount">
            <summary>
            <para>Returns the number of complete audio frames in this buffer.</para>
            <para>An audio frame is an interleaved set of one sample per channel for the same instant in time.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioBuffer.SampleCount">
            <summary>
            <para>Returns the number of samples in this buffer.</para>
            <para>If the format of this buffer has multiple channels, then this count includes all channels. This means that a stereo buffer with 1000 samples in total will have 500 left samples and 500 right samples (interleaved), and this function will return 1000.</para>
            <para>See also frameCount().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioBuffer.ByteCount">
            <summary>
            <para>Returns the size of this buffer, in bytes.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioBuffer.Duration">
            <summary>
            <para>Returns the duration of audio in this buffer, in microseconds.</para>
            <para>This depends on the /l format(), and the frameCount().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioBuffer.ConstData">
            <summary>
            <para>Returns a pointer to this buffer's data. You can only read it.</para>
            <para>This method is preferred over the const version of data() to prevent unnecessary copying.</para>
            <para>There is also a templatized version of this constData() function that allows you to retrieve a specific type of read-only pointer to the data. Note that there is no checking done on the format of the audio buffer - this is simply a convenience function.</para>
            <para></para>
            <para></para>
            <para>  // With a 16bit sample buffer:</para>
            <para>  const quint16 *data = buffer-&gt;constData&lt;quint16&gt;();</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioBuffer.Data">
            <summary>
            <para>Returns a pointer to this buffer's data. You can modify the data through the returned pointer.</para>
            <para>Since QAudioBuffers can share the actual sample data, calling this function will result in a deep copy being made if there are any other buffers using the sample. You should avoid calling this unless you really need to modify the data.</para>
            <para>This pointer will remain valid until the underlying storage is detached. In particular, if you obtain a pointer, and then copy this audio buffer, changing data through this pointer may change both buffer instances. Calling data() on either instance will again cause a deep copy to be made, which may invalidate the pointers returned from this function previously.</para>
            <para>There is also a templatized version of data() allows you to retrieve a specific type of pointer to the data. Note that there is no checking done on the format of the audio buffer - this is simply a convenience function.</para>
            <para></para>
            <para></para>
            <para>  // With a 16bit sample buffer:</para>
            <para>  quint16 *data = buffer-&gt;data&lt;quint16&gt;(); // May cause deep copy</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QAudioDecoder">
            <summary>
            <para>The QAudioDecoder class allows decoding audio.</para>
            </summary>
            <remarks>
            <para>The QAudioDecoder class is a high level class for decoding local audio media files. It is similar to the QMediaPlayer class except that audio is provided back through this API rather than routed directly to audio hardware, and playlists and network and streaming based media is not supported.</para>
            <para></para>
            <para>See also QAudioBuffer.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QAudioDecoder.#ctor(QtCore.QObject)">
            <summary>
            <para>Construct an QAudioDecoder instance parented to parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioDecoder.Read">
            <summary>
            <para>Read a buffer from the decoder, if one is available. Returns an invalid buffer if there are no decoded buffers currently available, or on failure. In both cases this function will not block.</para>
            <para>You should either respond to the bufferReady() signal or check the bufferAvailable() function before calling read() to make sure you get useful data.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioDecoder.Start">
            <summary>
            <para>Starts decoding the audio resource.</para>
            <para>As data gets decoded, the bufferReady() signal will be emitted when enough data has been decoded. Calling read() will then return an audio buffer without blocking.</para>
            <para>If you call read() before a buffer is ready, an invalid buffer will be returned, again without blocking.</para>
            <para>See also read().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioDecoder.Stop">
            <summary>
            <para>Stop decoding audio. Calling start() again will resume decoding from the beginning.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioDecoder.HasSupport(System.String,QtCore.QStringList)">
            <summary>
            <para>Returns the level of support an audio decoder has for a mimeType and a set of codecs.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioDecoder.HasSupport(System.String)">
            <summary>
            <para>Returns the level of support an audio decoder has for a mimeType and a set of codecs.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoder.BufferAvailableChanged">
            <summary>
            <para>Signals the availability (if available is true) of a new buffer.</para>
            <para>If available is false, there are no buffers available.</para>
            <para>Note: Notifier signal for property bufferAvailable. </para>
            <para>See also bufferAvailable() and bufferReady().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoder.BufferReady">
            <summary>
            <para>Signals that a new decoded audio buffer is available to be read.</para>
            <para>See also read() and bufferAvailable().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoder.Finished">
            <summary>
            <para>Signals that the decoding has finished successfully. If decoding fails, error signal is emitted instead.</para>
            <para>See also start(), stop(), and error().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoder.StateChanged">
            <summary>
            <para>Signal the state of the decoder object has changed.</para>
            <para>Note: Notifier signal for property state. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoder.FormatChanged">
            <summary>
            <para>Signals that the current audio format of the decoder has changed to format.</para>
            <para>See also audioFormat() and setAudioFormat().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoder.ErrorError">
            <summary>
            <para>Signals that an error condition has occurred.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(audioDecoder, static_cast&lt;void(QAudioDecoder::*)(QAudioDecoder::Error)&gt;(&amp;QAudioDecoder::error),</para>
            <para>      [=](QAudioDecoder::Error error){ /* ... */ });</para>
            <para></para>
            <para></para>
            <para>See also errorString().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoder.SourceChanged">
            <summary>
            <para>Signals that the current source of the decoder has changed.</para>
            <para>Note: Notifier signal for property sourceFilename. </para>
            <para>See also sourceFilename() and sourceDevice().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoder.PositionChanged">
            <summary>
            <para>Signals that the current position of the decoder has changed.</para>
            <para>See also durationChanged().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoder.DurationChanged">
            <summary>
            <para>Signals that the estimated duration of the decoded data has changed.</para>
            <para>See also positionChanged().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDecoder.SourceFilename">
            <summary>
            <para>This property holds the active filename being decoded by the decoder object.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDecoder.SourceDevice">
            <summary>
            <para>Returns the current source QIODevice, if one was set. If setSourceFilename() was called, this will be 0.</para>
            <para>See also setSourceDevice().</para>
            <para></para>
            <para>Sets the current audio QIODevice to device.</para>
            <para>When this property is set any current decoding is stopped, and any audio buffers are discarded.</para>
            <para>You can only specify either a source filename or a source QIODevice. Setting one will unset the other.</para>
            <para>See also sourceDevice().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDecoder.AudioFormat">
            <summary>
            <para>Returns the current audio format of the decoded stream.</para>
            <para>Any buffers returned should have this format.</para>
            <para>See also setAudioFormat() and formatChanged().</para>
            <para></para>
            <para>Set the desired audio format for decoded samples to format.</para>
            <para>This property can only be set while the decoder is stopped. Setting this property at other times will be ignored.</para>
            <para>If the decoder does not support this format, error() will be set to FormatError.</para>
            <para>If you do not specify a format, the format of the decoded audio itself will be used. Otherwise, some format conversion will be applied.</para>
            <para>If you wish to reset the decoded format to that of the original audio file, you can specify an invalid format.</para>
            <para>See also audioFormat().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDecoder.state">
            <summary>
            <para>This property holds the audio decoder's playback state.</para>
            <para>By default this property is QAudioDecoder::Stopped</para>
            <para>See also start() and stop().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDecoder.error">
            <summary>
            <para>This property holds a string describing the last error condition.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDecoder.ErrorString">
            <summary>
            <para>This property holds a string describing the last error condition.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDecoder.BufferAvailable">
            <summary>
            <para>This property holds whether there is a decoded audio buffer available.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDecoder.Position">
            <summary>
            <para>Returns position (in milliseconds) of the last buffer read from the decoder or -1 if no buffers have been read.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDecoder.Duration">
            <summary>
            <para>Returns total duration (in milliseconds) of the audio stream or -1 if not available.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QAudioDecoder.State">
            <summary>
            <para>Defines the current state of a media player.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QAudioDecoder.State.StoppedState">
            <summary>The decoder is not decoding. Decoding will start at the start of the media.</summary>
        </member>
        <member name="F:QtMultimedia.QAudioDecoder.State.DecodingState">
            <summary>The audio player is currently decoding media.</summary>
        </member>
        <member name="T:QtMultimedia.QAudioDecoder.Error">
            <summary>
            <para>Defines a media player error condition.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QAudioDecoder.Error.NoError">
            <summary>No error has occurred.</summary>
        </member>
        <member name="F:QtMultimedia.QAudioDecoder.Error.ResourceError">
            <summary>A media resource couldn't be resolved.</summary>
        </member>
        <member name="F:QtMultimedia.QAudioDecoder.Error.FormatError">
            <summary>The format of a media resource isn't supported.</summary>
        </member>
        <member name="F:QtMultimedia.QAudioDecoder.Error.AccessDeniedError">
            <summary>There are not the appropriate permissions to play a media resource.</summary>
        </member>
        <member name="F:QtMultimedia.QAudioDecoder.Error.ServiceMissingError">
            <summary>A valid playback service was not found, playback cannot proceed.</summary>
        </member>
        <member name="T:QtMultimedia.QAudioDeviceInfo">
            <summary>
            <para>The QAudioDeviceInfo class provides an interface to query audio devices and their functionality.</para>
            </summary>
            <remarks>
            <para>QAudioDeviceInfo lets you query for audio devices--such as sound cards and USB headsets--that are currently available on the system. The audio devices available are dependent on the platform or audio plugins installed.</para>
            <para>A QAudioDeviceInfo is used by Qt to construct classes that communicate with the device--such as QAudioInput, and QAudioOutput.</para>
            <para>You can also query each device for the formats it supports. A format in this context is a set consisting of a specific byte order, channel, codec, frequency, sample rate, and sample type. A format is represented by the QAudioFormat class.</para>
            <para>The values supported by the device for each of these parameters can be fetched with supportedByteOrders(), supportedChannelCounts(), supportedCodecs(), supportedSampleRates(), supportedSampleSizes(), and supportedSampleTypes(). The combinations supported are dependent on the platform, audio plugins installed and the audio device capabilities. If you need a specific format, you can check if the device supports it with isFormatSupported(), or fetch a supported format that is as close as possible to the format with nearestFormat(). For instance:</para>
            <para></para>
            <para></para>
            <para>  QAudioFormat format;</para>
            <para>  format.setSampleRate(44100);</para>
            <para>  // ... other format parameters</para>
            <para>  format.setSampleType(QAudioFormat::SignedInt);</para>
            <para></para>
            <para>  QAudioDeviceInfo info(QAudioDeviceInfo::defaultOutputDevice());</para>
            <para></para>
            <para>  if (!info.isFormatSupported(format))</para>
            <para>      format = info.nearestFormat(format);</para>
            <para></para>
            <para></para>
            <para>The static functions defaultInputDevice(), defaultOutputDevice(), and availableDevices() let you get a list of all available devices. Devices are fetched according to the value of mode this is specified by the QAudio::Mode enum. The QAudioDeviceInfo returned are only valid for the QAudio::Mode.</para>
            <para>For instance:</para>
            <para></para>
            <para></para>
            <para>  foreach (const QAudioDeviceInfo &amp;deviceInfo, QAudioDeviceInfo::availableDevices(QAudio::AudioOutput))</para>
            <para>      qDebug() &lt;&lt; &quot;Device name: &quot; &lt;&lt; deviceInfo.deviceName();</para>
            <para></para>
            <para></para>
            <para>In this code sample, we loop through all devices that are able to output sound, i.e., play an audio stream in a supported format. For each device we find, we simply print the deviceName().</para>
            <para></para>
            <para>See also QAudioOutput and QAudioInput.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QAudioDeviceInfo.#ctor">
            <summary>
            <para>Constructs an empty QAudioDeviceInfo object.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioDeviceInfo.#ctor(QtMultimedia.QAudioDeviceInfo)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioDeviceInfo.op_Equality(QtMultimedia.QAudioDeviceInfo,QtMultimedia.QAudioDeviceInfo)">
            <summary>
            <para>Returns true if this QAudioDeviceInfo class represents the same audio device as other.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioDeviceInfo.op_Inequality(QtMultimedia.QAudioDeviceInfo,QtMultimedia.QAudioDeviceInfo)">
            <summary>
            <para>Returns true if this QAudioDeviceInfo class represents a different audio device than other</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioDeviceInfo.IsFormatSupported(QtMultimedia.QAudioFormat)">
            <summary>
            <para>Returns true if the supplied settings are supported by the audio device described by this QAudioDeviceInfo.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioDeviceInfo.NearestFormat(QtMultimedia.QAudioFormat)">
            <summary>
            <para>Returns the closest QAudioFormat to the supplied settings that the system supports.</para>
            <para>These settings are provided by the platform/audio plugin being used.</para>
            <para>They are also dependent on the QAudio::Mode being used.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDeviceInfo.IsNull">
            <summary>
            <para>Returns whether this QAudioDeviceInfo object holds a valid device definition.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDeviceInfo.DeviceName">
            <summary>
            <para>Returns the human readable name of the audio device.</para>
            <para>Device names vary depending on the platform/audio plugin being used.</para>
            <para>They are a unique string identifier for the audio device.</para>
            <para>eg. default, Intel, U0x46d0x9a4</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDeviceInfo.PreferredFormat">
            <summary>
            <para>Returns the default audio format settings for this device.</para>
            <para>These settings are provided by the platform/audio plugin being used.</para>
            <para>They are also dependent on the QAudio::Mode being used.</para>
            <para>A typical audio system would provide something like:</para>
            <para></para>
            <para>Input settings: 8000Hz mono 8 bit.</para>
            <para>Output settings: 44100Hz stereo 16 bit little endian.</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDeviceInfo.SupportedCodecs">
            <summary>
            <para>Returns a list of supported codecs.</para>
            <para>All platform and plugin implementations should provide support for:</para>
            <para>&quot;audio/pcm&quot; - Linear PCM</para>
            <para>For writing plugins to support additional codecs refer to:</para>
            <para>http://www.iana.org/assignments/media-types/audio/</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDeviceInfo.DefaultInputDevice">
            <summary>
            <para>Returns the information for the default input audio device. All platform and audio plugin implementations provide a default audio device to use.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDeviceInfo.DefaultOutputDevice">
            <summary>
            <para>Returns the information for the default output audio device. All platform and audio plugin implementations provide a default audio device to use.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QAudioInput">
            <summary>
            <para>The QAudioInput class provides an interface for receiving audio data from an audio input device.</para>
            </summary>
            <remarks>
            <para>You can construct an audio input with the system's default audio input device. It is also possible to create QAudioInput with a specific QAudioDeviceInfo. When you create the audio input, you should also send in the QAudioFormat to be used for the recording (see the QAudioFormat class description for details).</para>
            <para>To record to a file:</para>
            <para>QAudioInput lets you record audio with an audio input device. The default constructor of this class will use the systems default audio device, but you can also specify a QAudioDeviceInfo for a specific device. You also need to pass in the QAudioFormat in which you wish to record.</para>
            <para>Starting up the QAudioInput is simply a matter of calling start() with a QIODevice opened for writing. For instance, to record to a file, you can:</para>
            <para></para>
            <para></para>
            <para>  QFile destinationFile;   // Class member</para>
            <para>  QAudioInput* audio; // Class member</para>
            <para>  {</para>
            <para>      destinationFile.setFileName(&quot;/tmp/test.raw&quot;);</para>
            <para>      destinationFile.open( QIODevice::WriteOnly | QIODevice::Truncate );</para>
            <para></para>
            <para>      QAudioFormat format;</para>
            <para>      // Set up the desired format, for example:</para>
            <para>      format.setSampleRate(8000);</para>
            <para>      format.setChannelCount(1);</para>
            <para>      format.setSampleSize(8);</para>
            <para>      format.setCodec(&quot;audio/pcm&quot;);</para>
            <para>      format.setByteOrder(QAudioFormat::LittleEndian);</para>
            <para>      format.setSampleType(QAudioFormat::UnSignedInt);</para>
            <para></para>
            <para>      QAudioDeviceInfo info = QAudioDeviceInfo::defaultInputDevice();</para>
            <para>      if (!info.isFormatSupported(format)) {</para>
            <para>          qWarning() &lt;&lt; &quot;Default format not supported, trying to use the nearest.&quot;;</para>
            <para>          format = info.nearestFormat(format);</para>
            <para>      }</para>
            <para></para>
            <para>      audio = new QAudioInput(format, this);</para>
            <para>      connect(audio, SIGNAL(stateChanged(QAudio::State)), this, SLOT(handleStateChanged(QAudio::State)));</para>
            <para></para>
            <para>      QTimer::singleShot(3000, this, SLOT(stopRecording()));</para>
            <para>      audio-&gt;start(&amp;destinationFile);</para>
            <para>      // Records audio for 3000ms</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>This will start recording if the format specified is supported by the input device (you can check this with QAudioDeviceInfo::isFormatSupported(). In case there are any snags, use the error() function to check what went wrong. We stop recording in the stopRecording() slot.</para>
            <para></para>
            <para></para>
            <para>  void AudioInputExample::stopRecording()</para>
            <para>  {</para>
            <para>      audio-&gt;stop();</para>
            <para>      destinationFile.close();</para>
            <para>      delete audio;</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>At any point in time, QAudioInput will be in one of four states: active, suspended, stopped, or idle. These states are specified by the QAudio::State enum. You can request a state change directly through suspend(), resume(), stop(), reset(), and start(). The current state is reported by state(). QAudioOutput will also signal you when the state changes (stateChanged()).</para>
            <para>QAudioInput provides several ways of measuring the time that has passed since the start() of the recording. The processedUSecs() function returns the length of the stream in microseconds written, i.e., it leaves out the times the audio input was suspended or idle. The elapsedUSecs() function returns the time elapsed since start() was called regardless of which states the QAudioInput has been in.</para>
            <para>If an error should occur, you can fetch its reason with error(). The possible error reasons are described by the QAudio::Error enum. The QAudioInput will enter the StoppedState when an error is encountered. Connect to the stateChanged() signal to handle the error:</para>
            <para></para>
            <para></para>
            <para>  void AudioInputExample::handleStateChanged(QAudio::State newState)</para>
            <para>  {</para>
            <para>      switch (newState) {</para>
            <para>          case QAudio::StoppedState:</para>
            <para>              if (audio-&gt;error() != QAudio::NoError) {</para>
            <para>                  // Error handling</para>
            <para>              } else {</para>
            <para>                  // Finished recording</para>
            <para>              }</para>
            <para>              break;</para>
            <para></para>
            <para>          case QAudio::ActiveState:</para>
            <para>              // Started recording - read from IO device</para>
            <para>              break;</para>
            <para></para>
            <para>          default:</para>
            <para>              // ... other cases as appropriate</para>
            <para>              break;</para>
            <para>      }</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QAudioOutput and QAudioDeviceInfo.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QAudioInput.#ctor(QtMultimedia.QAudioFormat,QtCore.QObject)">
            <summary>
            <para>Construct a new audio input and attach it to parent. The default audio input device is used with the output format parameters.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioInput.#ctor(QtMultimedia.QAudioDeviceInfo,QtMultimedia.QAudioFormat,QtCore.QObject)">
            <summary>
            <para>Construct a new audio input and attach it to parent. The device referenced by audioDevice is used with the input format parameters.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioInput.#ctor">
            <summary>
            <para>Construct a new audio input and attach it to parent. The default audio input device is used with the output format parameters.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioInput.#ctor(QtMultimedia.QAudioDeviceInfo)">
            <summary>
            <para>Construct a new audio input and attach it to parent. The device referenced by audioDevice is used with the input format parameters.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioInput.Start(QtCore.QIODevice)">
            <summary>
            <para>Starts transferring audio data from the system's audio input to the device. The device must have been opened in the WriteOnly, Append or ReadWrite modes.</para>
            <para>If the QAudioInput is able to successfully get audio data, state() returns either QAudio::ActiveState or QAudio::IdleState, error() returns QAudio::NoError and the stateChanged() signal is emitted.</para>
            <para>If a problem occurs during this process, error() returns QAudio::OpenError, state() returns QAudio::StoppedState and the stateChanged() signal is emitted.</para>
            <para>See also QIODevice.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioInput.Start">
            <summary>
            <para>Returns a pointer to the internal QIODevice being used to transfer data from the system's audio input. The device will already be open and read() can read data directly from it.</para>
            <para>Note: The pointer will become invalid after the stream is stopped or if you start another stream.</para>
            <para>If the QAudioInput is able to access the system's audio device, state() returns QAudio::IdleState, error() returns QAudio::NoError and the stateChanged() signal is emitted.</para>
            <para>If a problem occurs during this process, error() returns QAudio::OpenError, state() returns QAudio::StoppedState and the stateChanged() signal is emitted.</para>
            <para>See also QIODevice.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioInput.Stop">
            <summary>
            <para>Stops the audio input, detaching from the system resource.</para>
            <para>Sets error() to QAudio::NoError, state() to QAudio::StoppedState and emit stateChanged() signal.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioInput.Reset">
            <summary>
            <para>Drops all audio data in the buffers, resets buffers to zero.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioInput.Suspend">
            <summary>
            <para>Stops processing audio data, preserving buffered audio data.</para>
            <para>Sets error() to QAudio::NoError, state() to QAudio::SuspendedState and emit stateChanged() signal.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioInput.Resume">
            <summary>
            <para>Resumes processing audio data after a suspend().</para>
            <para>Sets error() to QAudio::NoError. Sets state() to QAudio::ActiveState if you previously called start(QIODevice*). Sets state() to QAudio::IdleState if you previously called start(). emits stateChanged() signal.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioInput.StateChanged">
            <summary>
            <para>This signal is emitted when the device state has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioInput.Notify">
            <summary>
            <para>This signal is emitted when x ms of audio data has been processed the interval set by setNotifyInterval(x).</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioInput.BufferSize">
            <summary>
            <para>Returns the audio buffer size in bytes.</para>
            <para>If called before start(), returns platform default value. If called before start() but setBufferSize() was called prior, returns value set by setBufferSize(). If called after start(), returns the actual buffer size being used. This may not be what was set previously by setBufferSize().</para>
            <para>See also setBufferSize().</para>
            <para></para>
            <para>Sets the audio buffer size to value bytes.</para>
            <para>Note: This function can be called anytime before start(), calls to this are ignored after start(). It should not be assumed that the buffer size set is the actual buffer size used, calling bufferSize() anytime after start() will return the actual buffer size being used.</para>
            <para>See also bufferSize().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioInput.NotifyInterval">
            <summary>
            <para>Returns the notify interval in milliseconds.</para>
            <para>See also setNotifyInterval().</para>
            <para></para>
            <para>Sets the interval for notify() signal to be emitted. This is based on the ms of audio data processed not on actual real-time. The minimum resolution of the timer is platform specific and values should be checked with notifyInterval() to confirm actual value being used.</para>
            <para>See also notifyInterval().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioInput.Volume">
            <summary>
            <para>Returns the input volume (gain).</para>
            <para>If the device does not support adjusting the input volume the returned value will be 1.0.</para>
            <para>See also setVolume().</para>
            <para></para>
            <para>Sets the input volume to volume.</para>
            <para>If the device does not support adjusting the input volume then volume will be ignored and the input volume will remain at 1.0.</para>
            <para>Note: Adjustments to the volume will change the volume of this audio stream, not the global volume.</para>
            <para>See also volume().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioInput.Format">
            <summary>
            <para>Returns the QAudioFormat being used.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioInput.BytesReady">
            <summary>
            <para>Returns the amount of audio data available to read in bytes.</para>
            <para>Note: returned value is only valid while in QAudio::ActiveState or QAudio::IdleState state, otherwise returns zero.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioInput.PeriodSize">
            <summary>
            <para>Returns the period size in bytes.</para>
            <para>Note: This is the recommended read size in bytes.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioInput.ProcessedUSecs">
            <summary>
            <para>Returns the amount of audio data processed since start() was called in microseconds.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioInput.ElapsedUSecs">
            <summary>
            <para>Returns the microseconds since start() was called, including time in Idle and Suspend states.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioInput.Error">
            <summary>
            <para>Returns the error state.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioInput.State">
            <summary>
            <para>Returns the state of audio processing.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QAudioOutput">
            <summary>
            <para>The QAudioOutput class provides an interface for sending audio data to an audio output device.</para>
            </summary>
            <remarks>
            <para>You can construct an audio output with the system's default audio output device. It is also possible to create QAudioOutput with a specific QAudioDeviceInfo. When you create the audio output, you should also send in the QAudioFormat to be used for the playback (see the QAudioFormat class description for details).</para>
            <para>To play a file:</para>
            <para>Starting to play an audio stream is simply a matter of calling start() with a QIODevice. QAudioOutput will then fetch the data it needs from the io device. So playing back an audio file is as simple as:</para>
            <para></para>
            <para></para>
            <para>  QFile sourceFile;   // class member.</para>
            <para>  QAudioOutput* audio; // class member.</para>
            <para>  {</para>
            <para>      sourceFile.setFileName(&quot;/tmp/test.raw&quot;);</para>
            <para>      sourceFile.open(QIODevice::ReadOnly);</para>
            <para></para>
            <para>      QAudioFormat format;</para>
            <para>      // Set up the format, eg.</para>
            <para>      format.setSampleRate(8000);</para>
            <para>      format.setChannelCount(1);</para>
            <para>      format.setSampleSize(8);</para>
            <para>      format.setCodec(&quot;audio/pcm&quot;);</para>
            <para>      format.setByteOrder(QAudioFormat::LittleEndian);</para>
            <para>      format.setSampleType(QAudioFormat::UnSignedInt);</para>
            <para></para>
            <para>      QAudioDeviceInfo info(QAudioDeviceInfo::defaultOutputDevice());</para>
            <para>      if (!info.isFormatSupported(format)) {</para>
            <para>          qWarning() &lt;&lt; &quot;Raw audio format not supported by backend, cannot play audio.&quot;;</para>
            <para>          return;</para>
            <para>      }</para>
            <para></para>
            <para>      audio = new QAudioOutput(format, this);</para>
            <para>      connect(audio, SIGNAL(stateChanged(QAudio::State)), this, SLOT(handleStateChanged(QAudio::State)));</para>
            <para>      audio-&gt;start(&amp;sourceFile);</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>The file will start playing assuming that the audio system and output device support it. If you run out of luck, check what's up with the error() function.</para>
            <para>After the file has finished playing, we need to stop the device:</para>
            <para></para>
            <para></para>
            <para>  void AudioOutputExample::handleStateChanged(QAudio::State newState)</para>
            <para>  {</para>
            <para>      switch (newState) {</para>
            <para>          case QAudio::IdleState:</para>
            <para>              // Finished playing (no more data)</para>
            <para>              audio-&gt;stop();</para>
            <para>              sourceFile.close();</para>
            <para>              delete audio;</para>
            <para>              break;</para>
            <para></para>
            <para>          case QAudio::StoppedState:</para>
            <para>              // Stopped for other reasons</para>
            <para>              if (audio-&gt;error() != QAudio::NoError) {</para>
            <para>                  // Error handling</para>
            <para>              }</para>
            <para>              break;</para>
            <para></para>
            <para>          default:</para>
            <para>              // ... other cases as appropriate</para>
            <para>              break;</para>
            <para>      }</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>At any given time, the QAudioOutput will be in one of four states: active, suspended, stopped, or idle. These states are described by the QAudio::State enum. State changes are reported through the stateChanged() signal. You can use this signal to, for instance, update the GUI of the application; the mundane example here being changing the state of a play/pause button. You request a state change directly with suspend(), stop(), reset(), resume(), and start().</para>
            <para>While the stream is playing, you can set a notify interval in milliseconds with setNotifyInterval(). This interval specifies the time between two emissions of the notify() signal. This is relative to the position in the stream, i.e., if the QAudioOutput is in the SuspendedState or the IdleState, the notify() signal is not emitted. A typical use-case would be to update a slider that allows seeking in the stream. If you want the time since playback started regardless of which states the audio output has been in, elapsedUSecs() is the function for you.</para>
            <para>If an error occurs, you can fetch the error type with the error() function. Please see the QAudio::Error enum for a description of the possible errors that are reported. When an error is encountered, the state changes to QAudio::StoppedState. You can check for errors by connecting to the stateChanged() signal:</para>
            <para></para>
            <para></para>
            <para>  void AudioOutputExample::handleStateChanged(QAudio::State newState)</para>
            <para>  {</para>
            <para>      switch (newState) {</para>
            <para>          case QAudio::IdleState:</para>
            <para>              // Finished playing (no more data)</para>
            <para>              audio-&gt;stop();</para>
            <para>              sourceFile.close();</para>
            <para>              delete audio;</para>
            <para>              break;</para>
            <para></para>
            <para>          case QAudio::StoppedState:</para>
            <para>              // Stopped for other reasons</para>
            <para>              if (audio-&gt;error() != QAudio::NoError) {</para>
            <para>                  // Error handling</para>
            <para>              }</para>
            <para>              break;</para>
            <para></para>
            <para>          default:</para>
            <para>              // ... other cases as appropriate</para>
            <para>              break;</para>
            <para>      }</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QAudioInput and QAudioDeviceInfo.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QAudioOutput.#ctor(QtMultimedia.QAudioFormat,QtCore.QObject)">
            <summary>
            <para>Construct a new audio output and attach it to parent. The default audio output device is used with the output format parameters.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioOutput.#ctor(QtMultimedia.QAudioDeviceInfo,QtMultimedia.QAudioFormat,QtCore.QObject)">
            <summary>
            <para>Construct a new audio output and attach it to parent. The device referenced by audioDevice is used with the output format parameters.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioOutput.#ctor">
            <summary>
            <para>Construct a new audio output and attach it to parent. The default audio output device is used with the output format parameters.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioOutput.#ctor(QtMultimedia.QAudioDeviceInfo)">
            <summary>
            <para>Construct a new audio output and attach it to parent. The device referenced by audioDevice is used with the output format parameters.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioOutput.Start(QtCore.QIODevice)">
            <summary>
            <para>Starts transferring audio data from the device to the system's audio output. The device must have been opened in the ReadOnly or ReadWrite modes.</para>
            <para>If the QAudioOutput is able to successfully output audio data, state() returns QAudio::ActiveState, error() returns QAudio::NoError and the stateChanged() signal is emitted.</para>
            <para>If a problem occurs during this process, error() returns QAudio::OpenError, state() returns QAudio::StoppedState and the stateChanged() signal is emitted.</para>
            <para>See also QIODevice.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioOutput.Start">
            <summary>
            <para>Returns a pointer to the internal QIODevice being used to transfer data to the system's audio output. The device will already be open and write() can write data directly to it.</para>
            <para>Note: The pointer will become invalid after the stream is stopped or if you start another stream.</para>
            <para>If the QAudioOutput is able to access the system's audio device, state() returns QAudio::IdleState, error() returns QAudio::NoError and the stateChanged() signal is emitted.</para>
            <para>If a problem occurs during this process, error() returns QAudio::OpenError, state() returns QAudio::StoppedState and the stateChanged() signal is emitted.</para>
            <para>See also QIODevice.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioOutput.Stop">
            <summary>
            <para>Stops the audio output, detaching from the system resource.</para>
            <para>Sets error() to QAudio::NoError, state() to QAudio::StoppedState and emit stateChanged() signal.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioOutput.Reset">
            <summary>
            <para>Drops all audio data in the buffers, resets buffers to zero.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioOutput.Suspend">
            <summary>
            <para>Stops processing audio data, preserving buffered audio data.</para>
            <para>Sets error() to QAudio::NoError, state() to QAudio::SuspendedState and emits stateChanged() signal.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioOutput.Resume">
            <summary>
            <para>Resumes processing audio data after a suspend().</para>
            <para>Sets error() to QAudio::NoError. Sets state() to QAudio::ActiveState if you previously called start(QIODevice*). Sets state() to QAudio::IdleState if you previously called start(). emits stateChanged() signal.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioOutput.StateChanged">
            <summary>
            <para>This signal is emitted when the device state has changed. This is the current state of the audio output.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioOutput.Notify">
            <summary>
            <para>This signal is emitted when a certain interval of milliseconds of audio data has been processed. The interval is set by setNotifyInterval().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioOutput.BufferSize">
            <summary>
            <para>Returns the audio buffer size in bytes.</para>
            <para>If called before start(), returns platform default value. If called before start() but setBufferSize() was called prior, returns value set by setBufferSize(). If called after start(), returns the actual buffer size being used. This may not be what was set previously by setBufferSize().</para>
            <para>See also setBufferSize().</para>
            <para></para>
            <para>Sets the audio buffer size to value in bytes.</para>
            <para>Note: This function can be called anytime before start(). Calls to this are ignored after start(). It should not be assumed that the buffer size set is the actual buffer size used - call bufferSize() anytime after start() to return the actual buffer size being used.</para>
            <para>See also bufferSize().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioOutput.NotifyInterval">
            <summary>
            <para>Returns the notify interval in milliseconds.</para>
            <para>See also setNotifyInterval().</para>
            <para></para>
            <para>Sets the interval for notify() signal to be emitted. This is based on the ms of audio data processed, not on wall clock time. The minimum resolution of the timer is platform specific and values should be checked with notifyInterval() to confirm the actual value being used.</para>
            <para>See also notifyInterval().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioOutput.Volume">
            <summary>
            <para>Returns the volume between 0.0 and 1.0 inclusive.</para>
            <para>See also setVolume().</para>
            <para></para>
            <para>Sets the volume. Where volume is between 0.0 and 1.0 inclusive. Note: Adjustments to the volume will change the volume of this audio stream, not the global volume.</para>
            <para>See also volume().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioOutput.Category">
            <summary>
            <para>Returns the audio category of this audio stream.</para>
            <para>Some platforms can group audio streams into categories and manage their volumes independently, or display them in a system mixer control. You can set this property to allow the platform to distinguish the purpose of your streams.</para>
            <para>See also setCategory().</para>
            <para></para>
            <para>Sets the audio category of this audio stream to category.</para>
            <para>Some platforms can group audio streams into categories and manage their volumes independently, or display them in a system mixer control. You can set this property to allow the platform to distinguish the purpose of your streams.</para>
            <para>Not all platforms support audio stream categorization. In this case, the function call will be ignored.</para>
            <para>Changing an audio output stream's category while it is opened will not take effect until it is reopened.</para>
            <para>See also category().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioOutput.Format">
            <summary>
            <para>Returns the QAudioFormat being used.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioOutput.BytesFree">
            <summary>
            <para>Returns the number of free bytes available in the audio buffer.</para>
            <para>Note: The returned value is only valid while in QAudio::ActiveState or QAudio::IdleState state, otherwise returns zero.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioOutput.PeriodSize">
            <summary>
            <para>Returns the period size in bytes. This is the amount of data required each period to prevent buffer underrun, and to ensure uninterrupted playback.</para>
            <para>Note: It is recommended to provide at least enough data for a full period with each write operation.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioOutput.ProcessedUSecs">
            <summary>
            <para>Returns the amount of audio data processed since start() was called (in microseconds).</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioOutput.ElapsedUSecs">
            <summary>
            <para>Returns the microseconds since start() was called, including time in Idle and Suspend states.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioOutput.Error">
            <summary>
            <para>Returns the error state.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioOutput.State">
            <summary>
            <para>Returns the state of audio processing.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QAudioProbe">
            <summary>
            <para>The QAudioProbe class allows you to monitor audio being played or recorded.</para>
            </summary>
            <remarks>
            <para>  QAudioRecorder *recorder = new QAudioRecorder();</para>
            <para>  QAudioProbe *probe = new QAudioProbe;</para>
            <para></para>
            <para>  // ... configure the audio recorder (skipped)</para>
            <para></para>
            <para>  connect(probe, SIGNAL(audioBufferProbed(QAudioBuffer)), this, SLOT(processBuffer(QAudioBuffer)));</para>
            <para></para>
            <para>  probe-&gt;setSource(recorder); // Returns true, hopefully.</para>
            <para></para>
            <para>  recorder-&gt;record(); // Now we can do things like calculating levels or performing an FFT</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QVideoProbe, QMediaPlayer, and QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QAudioProbe.#ctor(QtCore.QObject)">
            <summary>
            <para>Creates a new QAudioProbe class with a parent. After setting the source to monitor with setSource(), the audioBufferProbed() signal will be emitted when audio buffers are flowing in the source media object.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioProbe.SetSource(QtMultimedia.QMediaObject)">
            <summary>
            <para>Sets the media object to monitor to source.</para>
            <para>If source is zero, this probe will be deactivated and this function wil return true.</para>
            <para>If the media object does not support monitoring audio, this function will return false.</para>
            <para>The previous object will no longer be monitored. Passing in the same object will be ignored, but monitoring will continue.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioProbe.SetSource(QtMultimedia.QMediaRecorder)">
            <summary>
            <para>Starts monitoring the given mediaRecorder.</para>
            <para>Returns true on success.</para>
            <para>If there is no mediaObject associated with mediaRecorder, or if it is zero, this probe will be deactivated and this function wil return true.</para>
            <para>If the media recorder instance does not support monitoring audio, this function will return false.</para>
            <para>Any previously monitored objects will no longer be monitored. Passing in the same (valid) object will be ignored, but monitoring will continue.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioProbe.AudioBufferProbed">
            <summary>
            <para>This signal should be emitted when an audio buffer is processed in the media service.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioProbe.Flush">
            <summary>
            <para>This signal should be emitted when it is required to release all buffers. Application must release all outstanding references to audio buffers.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioProbe.IsActive">
            <summary>
            <para>Returns true if this probe is monitoring something, or false otherwise.</para>
            <para>The source being monitored does not need to be active.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QSound">
            <summary>
            <para>The QSound class provides a method to play .wav sound files.</para>
            </summary>
            <remarks>
            <para>Qt provides the most commonly required audio operation in GUI applications: asynchronously playing a sound file. This is most easily accomplished using the static play() function:</para>
            <para></para>
            <para></para>
            <para>  QSound::play(&quot;mysounds/bells.wav&quot;);</para>
            <para></para>
            <para></para>
            <para>Alternatively, create a QSound object from the sound file first and then call the play() slot:</para>
            <para></para>
            <para></para>
            <para>  QSound bells(&quot;mysounds/bells.wav&quot;);</para>
            <para>  bells.play();</para>
            <para></para>
            <para></para>
            <para>Once created a QSound object can be queried for its fileName() and total number of loops() (i.e. the number of times the sound will play). The number of repetitions can be altered using the setLoops() function. While playing the sound, the loopsRemaining() function returns the remaining number of repetitions. Use the isFinished() function to determine whether the sound has finished playing.</para>
            <para>Sounds played using a QSound object may use more memory than the static play() function, but it may also play more immediately (depending on the underlying platform audio facilities).</para>
            <para>If you require finer control over playing sounds, consider the QSoundEffect or QAudioOutput classes.</para>
            <para></para>
            <para>See also QSoundEffect.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QSound.#ctor(System.String,QtCore.QObject)">
            <summary>
            <para>Constructs a QSound object from the file specified by the given filename and with the given parent.</para>
            <para>See also play().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QSound.Play">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Starts playing the sound specified by this QSound object.</para>
            <para>The function returns immediately. Depending on the platform audio facilities, other sounds may stop or be mixed with the new sound. The sound can be played again at any time, possibly mixing or replacing previous plays of the sound.</para>
            <para>See also fileName().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QSound.Stop">
            <summary>
            <para>Stops the sound playing.</para>
            <para>See also play().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QSound.Play(System.String)">
            <summary>
            <para>Plays the sound stored in the file specified by the given filename.</para>
            <para>See also stop(), loopsRemaining(), and isFinished().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QSound.Loops">
            <summary>
            <para>Returns the number of times the sound will play. Return value of QSound::Infinite indicates infinite number of loops</para>
            <para>See also loopsRemaining() and setLoops().</para>
            <para></para>
            <para>Sets the sound to repeat the given number of times when it is played.</para>
            <para>Note that passing the value QSound::Infinite will cause the sound to loop indefinitely.</para>
            <para>See also loops().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QSound.LoopsRemaining">
            <summary>
            <para>Returns the remaining number of times the sound will loop (for all positive values this value decreases each time the sound is played). Return value of QSound::Infinite indicates infinite number of loops</para>
            <para>See also loops() and isFinished().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QSound.FileName">
            <summary>
            <para>Returns the filename associated with this QSound object.</para>
            <para>See also QSound().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QSound.IsFinished">
            <summary>
            <para>Returns true if the sound has finished playing; otherwise returns false.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QSound.Loop.Infinite">
            <summary>Can be used as a parameter to setLoops() to loop infinitely.</summary>
        </member>
        <member name="T:QtMultimedia.QSoundEffect">
            <summary>
            <para>The QSoundEffect class provides a way to play low latency sound effects.</para>
            </summary>
            <remarks>
            <para>This class allows you to play uncompressed audio files (typically WAV files) in a generally lower latency way, and is suitable for &quot;feedback&quot; type sounds in response to user actions (e.g. virtual keyboard sounds, positive or negative feedback for popup dialogs, or game sounds). If low latency is not important, consider using the QMediaPlayer class instead, since it supports a wider variety of media formats and is less resource intensive.</para>
            <para>This example shows how a looping, somewhat quiet sound effect can be played:</para>
            <para></para>
            <para></para>
            <para>  QSoundEffect effect;</para>
            <para>  effect.setSource(QUrl::fromLocalFile(&quot;engine.wav&quot;));</para>
            <para>  effect.setLoopCount(QSoundEffect::Infinite);</para>
            <para>  effect.setVolume(0.25f);</para>
            <para>  effect.play();</para>
            <para></para>
            <para></para>
            <para>Typically the sound effect should be reused, which allows all the parsing and preparation to be done ahead of time, and only triggered when necessary. This assists with lower latency audio playback.</para>
            <para></para>
            <para></para>
            <para>  MyGame()</para>
            <para>      : m_explosion(this)</para>
            <para>  {</para>
            <para>      m_explosion.setSource(QUrl::fromLocalFile(&quot;explosion.wav&quot;));</para>
            <para>      m_explosion.setVolume(0.25f);</para>
            <para></para>
            <para>      // Set up click handling etc.</para>
            <para>      connect(clickSource, SIGNAL(clicked()), &amp;m_explosion, SLOT(play()));</para>
            <para>  }</para>
            <para>  private:</para>
            <para>  QSoundEffect m_explosion;</para>
            <para></para>
            <para></para>
            <para>Since QSoundEffect requires slightly more resources to achieve lower latency playback, the platform may limit the number of simultaneously playing sound effects.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QSoundEffect.#ctor(QtCore.QObject)">
            <summary>
            <para>Creates a QSoundEffect with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QSoundEffect.Play">
            <summary>
            <para>Start playback of the sound effect, looping the effect for the number of times as specified in the loops property.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QSoundEffect.Stop">
            <summary>
            <para>Stop current playback.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QSoundEffect.SourceChanged">
            <summary>
            <para>The sourceChanged signal is emitted when the source has been changed.</para>
            <para>Note: Notifier signal for property source. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QSoundEffect.LoopCountChanged">
            <summary>
            <para>The loopCountChanged signal is emitted when the initial number of loops has changed.</para>
            <para>Note: Notifier signal for property loops. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QSoundEffect.LoopsRemainingChanged">
            <summary>
            <para>The loopsRemainingChanged signal is emitted when the remaining number of loops has changed.</para>
            <para>Note: Notifier signal for property loopsRemaining. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QSoundEffect.VolumeChanged">
            <summary>
            <para>The volumeChanged signal is emitted when the volume has changed.</para>
            <para>Note: Notifier signal for property volume. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QSoundEffect.MutedChanged">
            <summary>
            <para>The mutedChanged signal is emitted when the mute state has changed.</para>
            <para>Note: Notifier signal for property muted. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QSoundEffect.LoadedChanged">
            <summary>
            <para>The loadedChanged signal is emitted when the loading state has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QSoundEffect.PlayingChanged">
            <summary>
            <para>The playingChanged signal is emitted when the playing property has changed.</para>
            <para>Note: Notifier signal for property playing. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QSoundEffect.StatusChanged">
            <summary>
            <para>The statusChanged signal is emitted when the status property has changed.</para>
            <para>Note: Notifier signal for property status. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QSoundEffect.CategoryChanged">
            <summary>
            <para>The categoryChanged signal is emitted when the category property has changed.</para>
            <para>Note: Notifier signal for property category. </para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QSoundEffect.Source">
            <summary>
            <para>This property holds the url for the sound to play. For the SoundEffect to attempt to load the source, the URL must exist and the application must have read permission in the specified directory.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QSoundEffect.LoopCount">
            <summary>
            <para>Returns the total number of times that this sound effect will be played before stopping.</para>
            <para>See the loopsRemaining() method for the number of loops currently remaining.</para>
            <para>Note: Getter function for property loops. </para>
            <para>See also setLoopCount().</para>
            <para></para>
            <para>Set the total number of times to play this sound effect to loopCount.</para>
            <para>Setting the loop count to 0 or 1 means the sound effect will be played only once; pass QSoundEffect::Infinite to repeat indefinitely. The loop count can be changed while the sound effect is playing, in which case it will update the remaining loops to the new loopCount.</para>
            <para>Note: Setter function for property loops. </para>
            <para>See also loopCount() and loopsRemaining().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QSoundEffect.Volume">
            <summary>
            <para>This property holds the volume of the sound effect playback, from 0.0 (silent) to 1.0 (maximum volume).</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QSoundEffect.Muted">
            <summary>
            <para>This property provides a way to control muting. A value of true will mute this effect.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QSoundEffect.Category">
            <summary>
            <para>This property contains the category of this sound effect.</para>
            <para>Some platforms can perform different audio routing for different categories, or may allow the user to set different volume levels for different categories.</para>
            <para>This setting will be ignored on platforms that do not support audio categories.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QSoundEffect.SupportedMimeTypes">
            <summary>
            <para>Returns a list of the supported mime types for this platform.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QSoundEffect.LoopsRemaining">
            <summary>
            <para>This property contains the number of loops remaining before the sound effect stops by itself, or QSoundEffect::Infinite if that's what has been set in loops.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QSoundEffect.IsLoaded">
            <summary>
            <para>Returns whether the sound effect has finished loading the source().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QSoundEffect.IsPlaying">
            <summary>
            <para>Returns true if the sound effect is currently playing, or false otherwise</para>
            <para>Note: Getter function for property playing. </para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QSoundEffect.status">
            <summary>
            <para>This property indicates the current status of the sound effect from the QSoundEffect::Status enumeration.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QSoundEffect.Loop.Infinite">
            <summary>Used as a parameter to setLoopCount() for infinite looping</summary>
        </member>
        <member name="F:QtMultimedia.QSoundEffect.Status.Null">
            <summary>No source has been set or the source is null.</summary>
        </member>
        <member name="F:QtMultimedia.QSoundEffect.Status.Loading">
            <summary>The SoundEffect is trying to load the source.</summary>
        </member>
        <member name="F:QtMultimedia.QSoundEffect.Status.Ready">
            <summary>The source is loaded and ready for play.</summary>
        </member>
        <member name="F:QtMultimedia.QSoundEffect.Status.Error">
            <summary>An error occurred during operation, such as failure of loading the source.</summary>
        </member>
        <member name="T:QtMultimedia.QAudioEncoderSettings">
            <summary>
            <para>The QAudioEncoderSettings class provides a set of audio encoder settings.</para>
            </summary>
            <remarks>
            <para>A audio encoder settings object is used to specify the audio encoder settings used by QMediaRecorder. Audio encoder settings are selected by constructing a QAudioEncoderSettings object, setting the desired properties and then passing it to a QMediaRecorder instance using the QMediaRecorder::setEncodingSettings() function.</para>
            <para></para>
            <para></para>
            <para>  QAudioEncoderSettings audioSettings;</para>
            <para>  audioSettings.setCodec(&quot;audio/mpeg&quot;);</para>
            <para>  audioSettings.setChannelCount(2);</para>
            <para></para>
            <para>  recorder-&gt;setAudioSettings(audioSettings);</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QMediaRecorder and QAudioEncoderSettingsControl.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QAudioEncoderSettings.#ctor">
            <summary>
            <para>Construct a null audio encoder settings object.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioEncoderSettings.#ctor(QtMultimedia.QAudioEncoderSettings)">
            <summary>
            <para>Constructs a copy of the audio encoder settings object other.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioEncoderSettings.op_Equality(QtMultimedia.QAudioEncoderSettings,QtMultimedia.QAudioEncoderSettings)">
            <summary>
            <para>Determines if other is of equal value to an audio encoder settings object.</para>
            <para>Returns true if the settings objects are of equal value, and false if they are not of equal value.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioEncoderSettings.op_Inequality(QtMultimedia.QAudioEncoderSettings,QtMultimedia.QAudioEncoderSettings)">
            <summary>
            <para>Determines if other is of equal value to an audio encoder settings object.</para>
            <para>Returns true if the settings objects are not of equal value, and true if they are of equal value.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioEncoderSettings.EncodingOption(System.String)">
            <summary>
            <para>Returns the value of encoding option.</para>
            <para>See also setEncodingOption() and encodingOptions().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioEncoderSettings.SetEncodingOption(System.String,QtCore.QVariant)">
            <summary>
            <para>Set the encoding option to value.</para>
            <para>The supported set and meaning of encoding options are system and selected codec specific.</para>
            <para>See also encodingOption() and setEncodingOptions().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioEncoderSettings.EncodingMode">
            <summary>
            <para>Returns the audio encoding mode.</para>
            <para>See also setEncodingMode() and QMultimedia::EncodingMode.</para>
            <para></para>
            <para>Sets the audio encoding mode setting.</para>
            <para>If QMultimedia::ConstantQualityEncoding is set, the quality encoding parameter is used and bit rate is ignored, otherwise the bitrate is used.</para>
            <para>The audio codec, channels count and sample rate settings are used in all the encoding modes.</para>
            <para>See also encodingMode() and QMultimedia::EncodingMode.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioEncoderSettings.Codec">
            <summary>
            <para>Returns the audio codec.</para>
            <para>See also setCodec().</para>
            <para></para>
            <para>Sets the audio codec.</para>
            <para>See also codec().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioEncoderSettings.BitRate">
            <summary>
            <para>Returns the bit rate of the compressed audio stream in bits per second.</para>
            <para>See also setBitRate().</para>
            <para></para>
            <para>Sets the audio bit rate in bits per second.</para>
            <para>See also bitRate().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioEncoderSettings.ChannelCount">
            <summary>
            <para>Returns the number of audio channels.</para>
            <para>See also setChannelCount().</para>
            <para></para>
            <para>Sets the number of audio channels.</para>
            <para>A value of -1 indicates the encoder should make an optimal choice based on what is available from the audio source and the limitations of the codec.</para>
            <para>See also channelCount().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioEncoderSettings.SampleRate">
            <summary>
            <para>Returns the audio sample rate in Hz.</para>
            <para>See also setSampleRate().</para>
            <para></para>
            <para>Sets the audio sample rate in Hz.</para>
            <para>A value of -1 indicates the encoder should make an optimal choice based on what is avaialbe from the audio source and the limitations of the codec.</para>
            <para>See also sampleRate().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioEncoderSettings.Quality">
            <summary>
            <para>Returns the audio encoding quality.</para>
            <para>See also setQuality().</para>
            <para></para>
            <para>Set the audio encoding quality.</para>
            <para>Setting the audio quality parameter allows backend to choose the balanced set of encoding parameters to achieve the desired quality level.</para>
            <para>The quality settings parameter is only used in the constant quality encoding mode.</para>
            <para>See also quality().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioEncoderSettings.IsNull">
            <summary>
            <para>Identifies if an audio settings object is initialized.</para>
            <para>Returns true if the settings object is null, and false if it is not.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QVideoEncoderSettings">
            <summary>
            <para>The QVideoEncoderSettings class provides a set of video encoder settings.</para>
            </summary>
            <remarks>
            <para>A video encoder settings object is used to specify the video encoder settings used by QMediaRecorder. Video encoder settings are selected by constructing a QVideoEncoderSettings object, setting the desired properties and then passing it to a QMediaRecorder instance using the QMediaRecorder::setEncodingSettings() function.</para>
            <para></para>
            <para></para>
            <para>  QVideoEncoderSettings videoSettings;</para>
            <para>  videoSettings.setCodec(&quot;video/mpeg2&quot;);</para>
            <para>  videoSettings.setResolution(640, 480);</para>
            <para></para>
            <para>  recorder-&gt;setVideoSettings(videoSettings);</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QMediaRecorder and QVideoEncoderSettingsControl.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QVideoEncoderSettings.#ctor">
            <summary>
            <para>Constructs a null video encoder settings object.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoEncoderSettings.#ctor(QtMultimedia.QVideoEncoderSettings)">
            <summary>
            <para>Constructs a copy of the video encoder settings object other.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoEncoderSettings.op_Equality(QtMultimedia.QVideoEncoderSettings,QtMultimedia.QVideoEncoderSettings)">
            <summary>
            <para>Determines if other is of equal value to a video encoder settings object.</para>
            <para>Returns true if the settings objects are of equal value, and false if they are not of equal value.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoEncoderSettings.op_Inequality(QtMultimedia.QVideoEncoderSettings,QtMultimedia.QVideoEncoderSettings)">
            <summary>
            <para>Determines if other is of equal value to a video encoder settings object.</para>
            <para>Returns true if the settings objects are not of equal value, and false if they are of equal value.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoEncoderSettings.SetResolution(System.Int32,System.Int32)">
            <summary>
            <para>Sets the width and height of the resolution of the encoded video.</para>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoEncoderSettings.EncodingOption(System.String)">
            <summary>
            <para>Returns the value of encoding option.</para>
            <para>See also setEncodingOption() and encodingOptions().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoEncoderSettings.SetEncodingOption(System.String,QtCore.QVariant)">
            <summary>
            <para>Set the encoding option value.</para>
            <para>The supported set and meaning of encoding options are system and selected codec specific.</para>
            <para>See also encodingOption() and setEncodingOptions().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoEncoderSettings.EncodingMode">
            <summary>
            <para>Returns the video encoding mode.</para>
            <para>See also setEncodingMode() and QMultimedia::EncodingMode.</para>
            <para></para>
            <para>Sets the video encoding mode.</para>
            <para>If QMultimedia::ConstantQualityEncoding is set, the quality encoding parameter is used and bit rate is ignored, otherwise the bitrate is used.</para>
            <para>The rest of encoding settings are respected regardless of encoding mode.</para>
            <para>See also encodingMode() and QMultimedia::EncodingMode.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoEncoderSettings.Codec">
            <summary>
            <para>Returns the video codec.</para>
            <para>See also setCodec().</para>
            <para></para>
            <para>Sets the video codec.</para>
            <para>See also codec().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoEncoderSettings.Resolution">
            <summary>
            <para>Returns the resolution of the encoded video.</para>
            <para>See also setResolution().</para>
            <para></para>
            <para>Sets the resolution of the encoded video.</para>
            <para>An empty QSize indicates the encoder should make an optimal choice based on what is available from the video source and the limitations of the codec.</para>
            <para>See also resolution().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoEncoderSettings.FrameRate">
            <summary>
            <para>Returns the video frame rate.</para>
            <para>See also setFrameRate().</para>
            <para></para>
            <para>Sets the video frame rate.</para>
            <para>A value of 0 indicates the encoder should make an optimal choice based on what is available from the video source and the limitations of the codec.</para>
            <para>See also frameRate().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoEncoderSettings.BitRate">
            <summary>
            <para>Returns bit rate of the encoded video stream in bits per second.</para>
            <para>See also setBitRate().</para>
            <para></para>
            <para>Sets the bit rate of the encoded video stream to value.</para>
            <para>See also bitRate().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoEncoderSettings.Quality">
            <summary>
            <para>Returns the video encoding quality.</para>
            <para>See also setQuality().</para>
            <para></para>
            <para>Sets the video encoding quality.</para>
            <para>Setting the video quality parameter allows backend to choose the balanced set of encoding parameters to achieve the desired quality level.</para>
            <para>The quality settings parameter is only used in the constant quality encoding mode. The quality settings parameter is only used in the constant quality encoding mode.</para>
            <para>See also quality().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoEncoderSettings.IsNull">
            <summary>
            <para>Identifies if a video encoder settings object is uninitalized.</para>
            <para>Returns true if the settings are null, and false if they are not.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QImageEncoderSettings">
            <summary>
            <para>The QImageEncoderSettings class provides a set of image encoder settings.</para>
            </summary>
            <remarks>
            <para>A image encoder settings object is used to specify the image encoder settings used by QCameraImageCapture. Image encoder settings are selected by constructing a QImageEncoderSettings object, setting the desired properties and then passing it to a QCameraImageCapture instance using the QCameraImageCapture::setImageSettings() function.</para>
            <para></para>
            <para></para>
            <para>  QImageEncoderSettings imageSettings;</para>
            <para>  imageSettings.setCodec(&quot;image/jpeg&quot;);</para>
            <para>  imageSettings.setResolution(1600, 1200);</para>
            <para></para>
            <para>  imageCapture-&gt;setEncodingSettings(imageSettings);</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QImageEncoderControl.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QImageEncoderSettings.#ctor">
            <summary>
            <para>Constructs a null image encoder settings object.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QImageEncoderSettings.#ctor(QtMultimedia.QImageEncoderSettings)">
            <summary>
            <para>Constructs a copy of the image encoder settings object other.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QImageEncoderSettings.op_Equality(QtMultimedia.QImageEncoderSettings,QtMultimedia.QImageEncoderSettings)">
            <summary>
            <para>Determines if other is of equal value to a image encoder settings object.</para>
            <para>Returns true if the settings objects are of equal value, and false if they are not of equal value.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QImageEncoderSettings.op_Inequality(QtMultimedia.QImageEncoderSettings,QtMultimedia.QImageEncoderSettings)">
            <summary>
            <para>Determines if other is of equal value to a image encoder settings object.</para>
            <para>Returns true if the settings objects are not of equal value, and false if they are of equal value.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QImageEncoderSettings.SetResolution(System.Int32,System.Int32)">
            <summary>
            <para>Sets the width and height of the resolution of the encoded image.</para>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QImageEncoderSettings.EncodingOption(System.String)">
            <summary>
            <para>Returns the value of encoding option.</para>
            <para>See also setEncodingOption() and encodingOptions().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QImageEncoderSettings.SetEncodingOption(System.String,QtCore.QVariant)">
            <summary>
            <para>Set the encoding option value.</para>
            <para>The supported set and meaning of encoding options are system and selected codec specific.</para>
            <para>See also encodingOption() and setEncodingOptions().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QImageEncoderSettings.Codec">
            <summary>
            <para>Returns the image codec.</para>
            <para>See also setCodec().</para>
            <para></para>
            <para>Sets the image codec.</para>
            <para>See also codec().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QImageEncoderSettings.Resolution">
            <summary>
            <para>Returns the resolution of the encoded image.</para>
            <para>See also setResolution().</para>
            <para></para>
            <para>Sets the resolution of the encoded image.</para>
            <para>An empty QSize indicates the encoder should make an optimal choice based on what is available from the image source and the limitations of the codec.</para>
            <para>See also resolution().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QImageEncoderSettings.Quality">
            <summary>
            <para>Returns the image encoding quality.</para>
            <para>See also setQuality().</para>
            <para></para>
            <para>Sets the image encoding quality.</para>
            <para>See also quality().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QImageEncoderSettings.IsNull">
            <summary>
            <para>Identifies if a image encoder settings object is uninitalized.</para>
            <para>Returns true if the settings are null, and false if they are not.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCameraImageCapture">
            <summary>
            <para>The QCameraImageCapture class is used for the recording of media content.</para>
            </summary>
            <remarks>
            <para>The QCameraImageCapture class is a high level images recording class. It's not intended to be used alone but for accessing the media recording functions of other media objects, like QCamera.</para>
            <para></para>
            <para></para>
            <para>  camera = new QCamera;</para>
            <para></para>
            <para>  viewfinder = new QCameraViewfinder();</para>
            <para>  viewfinder-&gt;show();</para>
            <para></para>
            <para>  camera-&gt;setViewfinder(viewfinder);</para>
            <para></para>
            <para>  imageCapture = new QCameraImageCapture(camera);</para>
            <para></para>
            <para>  camera-&gt;setCaptureMode(QCamera::CaptureStillImage);</para>
            <para>  camera-&gt;start();</para>
            <para>  //on half pressed shutter button</para>
            <para>  camera-&gt;searchAndLock();</para>
            <para></para>
            <para>  //on shutter button pressed</para>
            <para>  imageCapture-&gt;capture();</para>
            <para></para>
            <para>  //on shutter button released</para>
            <para>  camera-&gt;unlock();</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraImageCapture.#ctor(QtMultimedia.QMediaObject,QtCore.QObject)">
            <summary>
            <para>Constructs a media recorder which records the media produced by mediaObject.</para>
            <para>The parent is passed to QMediaObject.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraImageCapture.ImageCodecDescription(System.String)">
            <summary>
            <para>Returns a description of an image codec.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraImageCapture.IsCaptureDestinationSupported(QtMultimedia.QCameraImageCapture.CaptureDestination)">
            <summary>
            <para>Returns true if the image capture destination is supported; otherwise returns false.</para>
            <para>See also captureDestination() and setCaptureDestination().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraImageCapture.Capture(System.String)">
            <summary>
            <para>Capture the image and save it to file. This operation is asynchronous in majority of cases, followed by signals QCameraImageCapture::imageExposed(), QCameraImageCapture::imageCaptured(), QCameraImageCapture::imageSaved() or QCameraImageCapture::error().</para>
            <para>If an empty file is passed, the camera backend choses the default location and naming scheme for photos on the system, if only file name without full path is specified, the image will be saved to the default directory, with a full path reported with imageCaptured() and imageSaved() signals.</para>
            <para>QCamera saves all the capture parameters like exposure settings or image processing parameters, so changes to camera parameters after capture() is called do not affect previous capture requests.</para>
            <para>QCameraImageCapture::capture returns the capture Id parameter, used with imageExposed(), imageCaptured() and imageSaved() signals.</para>
            <para>See also isReadyForCapture().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraImageCapture.CancelCapture">
            <summary>
            <para>Cancel incomplete capture requests. Already captured and queused for proicessing images may be discarded.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraImageCapture.SetMediaObject(QtMultimedia.QMediaObject)">
            <summary>
            <para>Reimplemented from QMediaBindableInterface::setMediaObject().</para>
            <para>See also mediaObject().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraImageCapture.ErrorErrorString">
            <summary>
            <para>Signals that the capture request id has failed with an error and errorString description.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(cameraImageCapture, static_cast&lt;void(QCameraImageCapture::*)(int, QCameraImageCapture::Error, const QString &amp;)&gt;(&amp;QCameraImageCapture::error),</para>
            <para>      [=](int id, QCameraImageCapture::Error error, const QString &amp;errorString){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraImageCapture.ReadyForCaptureChanged">
            <summary>
            <para>Signals that a camera's ready for capture state has changed.</para>
            <para>Note: Notifier signal for property readyForCapture. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraImageCapture.BufferFormatChanged">
            <summary>
            <para>Signal emitted when the buffer format for the buffer image capture has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraImageCapture.CaptureDestinationChanged">
            <summary>
            <para>Signal emitted when the capture destination has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraImageCapture.ImageExposed">
            <summary>
            <para>Signal emitted when the frame with request id was exposed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraImageCapture.ImageCaptured">
            <summary>
            <para>Signal emitted when the frame with request id was captured, but not processed and saved yet. Frame preview can be displayed to user.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraImageCapture.ImageMetadataAvailable">
            <summary>
            <para>Signals that a metadata for an image with request id is available. Also includes the key and value of the metadata.</para>
            <para>This signal is emitted between imageExposed and imageSaved signals.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraImageCapture.ImageAvailable">
            <summary>
            <para>Signal emitted when the frame with request id is available as buffer.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraImageCapture.ImageSaved">
            <summary>
            <para>Signal emitted when the frame with request id was saved to fileName.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageCapture.EncodingSettings">
            <summary>
            <para>Returns the image encoder settings being used.</para>
            <para>See also setEncodingSettings().</para>
            <para></para>
            <para>Sets the image encoding settings.</para>
            <para>If some parameters are not specified, or null settings are passed, the encoder choose the default encoding parameters.</para>
            <para>See also encodingSettings().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageCapture.BufferFormat">
            <summary>
            <para>Returns the buffer image capture format being used.</para>
            <para>See also supportedBufferFormats() and setBufferFormat().</para>
            <para></para>
            <para>Sets the buffer image capture format to be used.</para>
            <para>See also bufferFormat(), supportedBufferFormats(), and captureDestination().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageCapture.captureDestination">
            <summary>
            <para>Returns the image capture destination being used.</para>
            <para>See also isCaptureDestinationSupported() and setCaptureDestination().</para>
            <para></para>
            <para>Sets the capture destination to be used.</para>
            <para>See also isCaptureDestinationSupported() and captureDestination().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageCapture.MediaObject">
            <summary>
            <para>Reimplemented from QMediaBindableInterface::mediaObject().</para>
            <para>See also setMediaObject().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageCapture.IsAvailable">
            <summary>
            <para>Returns true if the images capture service ready to use.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageCapture.Availability">
            <summary>
            <para>Returns the availability of this functionality.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageCapture.error">
            <summary>
            <para>Returns the current error state.</para>
            <para>See also errorString().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageCapture.ErrorString">
            <summary>
            <para>Returns a string describing the current error state.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageCapture.IsReadyForCapture">
            <summary>
            <para>This property holds whether the service is ready to capture a an image immediately.</para>
            <para>Calling capture() while readyForCapture is false is not permitted and results in an error.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isReadyForCapture() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	readyForCaptureChanged(bool ready)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageCapture.SupportedImageCodecs">
            <summary>
            <para>Returns a list of supported image codecs.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageCapture.Error.NoError">
            <summary>No Errors.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageCapture.Error.NotReadyError">
            <summary>The service is not ready for capture yet.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageCapture.Error.ResourceError">
            <summary>Device is not ready or not available.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageCapture.Error.OutOfSpaceError">
            <summary>No space left on device.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageCapture.Error.NotSupportedFeatureError">
            <summary>Device does not support stillimages capture.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageCapture.Error.FormatError">
            <summary>Current format is not supported.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageCapture.DriveMode.SingleImageCapture">
            <summary>Drive mode is capturing a single picture.</summary>
        </member>
        <member name="T:QtMultimedia.QCameraImageCapture.CaptureDestination">
            <summary>
            <para>The CaptureDestinations type is a typedef for QFlags&lt;CaptureDestination&gt;. It stores an OR combination of CaptureDestination values.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageCapture.CaptureDestination.CaptureToFile">
            <summary>Capture the image to a file.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageCapture.CaptureDestination.CaptureToBuffer">
            <summary>Capture the image to a buffer for further processing.</summary>
        </member>
        <member name="T:QtMultimedia.QCameraInfo">
            <summary>
            <para>The QCameraInfo class provides general information about camera devices.</para>
            </summary>
            <remarks>
            <para>QCameraInfo lets you query for camera devices that are currently available on the system.</para>
            <para>The static functions defaultCamera() and availableCameras() provide you a list of all available cameras.</para>
            <para>This example prints the name of all available cameras:</para>
            <para></para>
            <para></para>
            <para>  QList&lt;QCameraInfo&gt; cameras = QCameraInfo::availableCameras();</para>
            <para>  foreach (const QCameraInfo &amp;cameraInfo, cameras)</para>
            <para>      qDebug() &lt;&lt; cameraInfo.deviceName();</para>
            <para></para>
            <para></para>
            <para>A QCameraInfo can be used to construct a QCamera. The following example instantiates a QCamera whose camera device is named 'mycamera':</para>
            <para></para>
            <para></para>
            <para>  QList&lt;QCameraInfo&gt; cameras = QCameraInfo::availableCameras();</para>
            <para>  foreach (const QCameraInfo &amp;cameraInfo, cameras) {</para>
            <para>      if (cameraInfo.deviceName() == &quot;mycamera&quot;)</para>
            <para>          camera = new QCamera(cameraInfo);</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>You can also use QCameraInfo to get general information about a camera device such as description, physical position on the system, or camera sensor orientation.</para>
            <para></para>
            <para></para>
            <para>  QCamera myCamera;</para>
            <para>  QCameraInfo cameraInfo(myCamera);</para>
            <para></para>
            <para>  if (cameraInfo.position() == QCamera::FrontFace)</para>
            <para>      qDebug() &lt;&lt; &quot;The camera is on the front face of the hardware system.&quot;;</para>
            <para>  else if (cameraInfo.position() == QCamera::BackFace)</para>
            <para>      qDebug() &lt;&lt; &quot;The camera is on the back face of the hardware system.&quot;;</para>
            <para></para>
            <para>  qDebug() &lt;&lt; &quot;The camera sensor orientation is &quot; &lt;&lt; cameraInfo.orientation() &lt;&lt; &quot; degrees.&quot;;</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraInfo.#ctor(QtCore.QByteArray)">
            <summary>
            <para>Constructs a camera info object from a camera device name.</para>
            <para>If no such device exists, the QCameraInfo object will be invalid and isNull() will return true.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraInfo.#ctor(QtMultimedia.QCamera)">
            <summary>
            <para>Constructs a camera info object for camera.</para>
            <para>You can use it to query information about the camera object passed as argument.</para>
            <para>If the camera is invalid, for example when no camera device is available on the system, the QCameraInfo object will be invalid and isNull() will return true.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraInfo.#ctor(QtMultimedia.QCameraInfo)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraInfo.#ctor">
            <summary>
            <para>Constructs a camera info object from a camera device name.</para>
            <para>If no such device exists, the QCameraInfo object will be invalid and isNull() will return true.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraInfo.op_Equality(QtMultimedia.QCameraInfo,QtMultimedia.QCameraInfo)">
            <summary>
            <para>Returns true if this QCameraInfo is equal to other.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraInfo.op_Inequality(QtMultimedia.QCameraInfo,QtMultimedia.QCameraInfo)">
            <summary>
            <para>Returns true if this QCameraInfo is different from other.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraInfo.IsNull">
            <summary>
            <para>Returns true if this QCameraInfo is null or invalid.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraInfo.DeviceName">
            <summary>
            <para>Returns the device name of the camera</para>
            <para>This is a unique ID to identify the camera and may not be human-readable.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraInfo.Description">
            <summary>
            <para>Returns the human-readable description of the camera.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraInfo.Position">
            <summary>
            <para>Returns the physical position of the camera on the hardware system.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraInfo.Orientation">
            <summary>
            <para>Returns the physical orientation of the camera sensor.</para>
            <para>The value is the orientation angle (clockwise, in steps of 90 degrees) of the camera sensor in relation to the display in its natural orientation.</para>
            <para>You can show the camera image in the correct orientation by rotating it by this value in the anti-clockwise direction.</para>
            <para>For example, suppose a mobile device which is naturally in portrait orientation. The back-facing camera is mounted in landscape. If the top side of the camera sensor is aligned with the right edge of the screen in natural orientation, the value should be 270. If the top side of a front-facing camera sensor is aligned with the right of the screen, the value should be 90.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraInfo.DefaultCamera">
            <summary>
            <para>Returns the default camera on the system.</para>
            <para>The returned object should be checked using isNull() before being used, in case there is no default camera or no cameras at all.</para>
            <para>See also availableCameras().</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QAudioDecoderControl">
            <summary>
            <para>The QAudioDecoderControl class provides access to the audio decoding functionality of a QMediaService.</para>
            </summary>
            <remarks>
            <para>The functionality provided by this control is exposed to application code through the QAudioDecoder class.</para>
            <para>The interface name of QAudioDecoderControl is org.qt-project.qt.audiodecodercontrol/5.0 as defined in QAudioDecoderControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QAudioDecoder.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QAudioDecoderControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new audio decoder control with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioDecoderControl.Start">
            <summary>
            <para>Starts decoding the current media.</para>
            <para>If successful the player control will immediately enter the decoding state.</para>
            <para>See also state() and read().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioDecoderControl.Stop">
            <summary>
            <para>Stops playback of the current media and discards any buffers.</para>
            <para>If successful the player control will immediately enter the stopped state.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioDecoderControl.Read">
            <summary>
            <para>Attempts to read a buffer from the decoder, without blocking. Returns invalid buffer if there are no decoded buffers available, or on error.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoderControl.StateChanged">
            <summary>
            <para>Signals that the state of a player control has changed.</para>
            <para>See also state().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoderControl.FormatChanged">
            <summary>
            <para>Signals that the current audio format of the decoder has changed to format.</para>
            <para>See also audioFormat() and setAudioFormat().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoderControl.SourceChanged">
            <summary>
            <para>Signals that the current source of the decoder has changed.</para>
            <para>See also sourceFilename() and sourceDevice().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoderControl.Error">
            <summary>
            <para>Signals that an error has occurred. The errorString provides a more detailed explanation.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoderControl.BufferReady">
            <summary>
            <para>Signals that a new buffer is ready for reading.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoderControl.BufferAvailableChanged">
            <summary>
            <para>Signals that the bufferAvailable property has changed to available.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoderControl.Finished">
            <summary>
            <para>Signals that the decoding has finished successfully. If decoding fails, error signal is emitted instead.</para>
            <para>See also start(), stop(), and error().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoderControl.PositionChanged">
            <summary>
            <para>Signals that the current position of the decoder has changed.</para>
            <para>See also durationChanged().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioDecoderControl.DurationChanged">
            <summary>
            <para>Signals that the estimated duration of the decoded data has changed.</para>
            <para>See also positionChanged().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDecoderControl.SourceFilename">
            <summary>
            <para>Returns the current media source filename, or a null QString if none (or a device)</para>
            <para>See also setSourceFilename().</para>
            <para></para>
            <para>Sets the current source to fileName. Changing the source will stop any current decoding and discard any buffers.</para>
            <para>Sources are exclusive, so only one can be set.</para>
            <para>See also sourceFilename().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDecoderControl.SourceDevice">
            <summary>
            <para>Returns the current media source QIODevice, or 0 if none (or a file).</para>
            <para>See also setSourceDevice().</para>
            <para></para>
            <para>Sets the current source to device. Changing the source will stop any current decoding and discard any buffers.</para>
            <para>Sources are exclusive, so only one can be set.</para>
            <para>See also sourceDevice().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDecoderControl.AudioFormat">
            <summary>
            <para>Returns the current audio format of the decoded stream.</para>
            <para>Any buffers returned should have this format.</para>
            <para>See also setAudioFormat() and formatChanged().</para>
            <para></para>
            <para>Set the desired audio format for decoded samples to format.</para>
            <para>If the decoder does not support this format, error() will be set to FormatError.</para>
            <para>If you do not specify a format, the format of the decoded audio itself will be used. Otherwise, some format conversion will be applied.</para>
            <para>If you wish to reset the decoded format to that of the original audio file, you can specify an invalid format.</para>
            <para>See also audioFormat().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDecoderControl.State">
            <summary>
            <para>Returns the state of a player control.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDecoderControl.BufferAvailable">
            <summary>
            <para>Returns true if a buffer is available to be read, and false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDecoderControl.Position">
            <summary>
            <para>Returns position (in milliseconds) of the last buffer read from the decoder or -1 if no buffers have been read.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioDecoderControl.Duration">
            <summary>
            <para>Returns total duration (in milliseconds) of the audio stream or -1 if not available.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaRecorder">
            <summary>
            <para>The QMediaRecorder class is used for the recording of media content.</para>
            </summary>
            <remarks>
            <para>The QMediaRecorder class is a high level media recording class. It's not intended to be used alone but for accessing the media recording functions of other media objects, like QRadioTuner, or QCamera.</para>
            <para></para>
            <para></para>
            <para>  recorder = new QMediaRecorder(camera);</para>
            <para></para>
            <para>  QAudioEncoderSettings audioSettings;</para>
            <para>  audioSettings.setCodec(&quot;audio/amr&quot;);</para>
            <para>  audioSettings.setQuality(QMultimedia::HighQuality);</para>
            <para></para>
            <para>  recorder-&gt;setAudioSettings(audioSettings);</para>
            <para></para>
            <para>  recorder-&gt;setOutputLocation(QUrl::fromLocalFile(fileName));</para>
            <para>  recorder-&gt;record();</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QAudioRecorder.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaRecorder.#ctor(QtMultimedia.QMediaObject,QtCore.QObject)">
            <summary>
            <para>Constructs a media recorder which records the media produced by mediaObject.</para>
            <para>The parent is passed to QMediaObject.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaRecorder.SetOutputLocation(QtCore.QUrl)">
            <summary>
            <para>This property holds the destination location of media content.</para>
            <para>Setting the location can fail, for example when the service supports only local file system locations but a network URL was passed. If the service does not support media recording this setting the output location will always fail.</para>
            <para>The location can be relative or empty; in this case the recorder uses the system specific place and file naming scheme. After recording has stated, QMediaRecorder::outputLocation() returns the actual output location.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaRecorder.ContainerDescription(System.String)">
            <summary>
            <para>Returns a description of a container format.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaRecorder.AudioCodecDescription(System.String)">
            <summary>
            <para>Returns a description of an audio codec.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaRecorder.VideoCodecDescription(System.String)">
            <summary>
            <para>Returns a description of a video codec.</para>
            <para>See also setEncodingSettings().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaRecorder.SetEncodingSettings(QtMultimedia.QAudioEncoderSettings,QtMultimedia.QVideoEncoderSettings,System.String)">
            <summary>
            <para>Sets the audio and video encoder settings and container format.</para>
            <para>If some parameters are not specified, or null settings are passed, the encoder will choose default encoding parameters, depending on media source properties.</para>
            <para>It's only possible to change settings when the encoder is in the QMediaEncoder::StoppedState state.</para>
            <para>See also audioSettings(), videoSettings(), and containerFormat().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaRecorder.MetaData(System.String)">
            <summary>
            <para>Returns the value associated with a meta-data key.</para>
            <para>See also setMetaData().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaRecorder.SetMetaData(System.String,QtCore.QVariant)">
            <summary>
            <para>Sets a value for a meta-data key.</para>
            <para>Note: To ensure that meta data is set corretly, it should be set before starting the recording. Once the recording is stopped, any meta data set will be attached to the next recording.</para>
            <para>See also metaData().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaRecorder.Record">
            <summary>
            <para>Start recording.</para>
            <para>While the recorder state is changed immediately to QMediaRecorder::RecordingState, recording may start asynchronously, with statusChanged(QMediaRecorder::RecordingStatus) signal emitted when recording starts.</para>
            <para>If recording fails error() signal is emitted with recorder state being reset back to QMediaRecorder::StoppedState.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaRecorder.Pause">
            <summary>
            <para>Pause recording.</para>
            <para>The recorder state is changed to QMediaRecorder::PausedState.</para>
            <para>Depending on platform recording pause may be not supported, in this case the recorder state stays unchanged.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaRecorder.Stop">
            <summary>
            <para>Stop recording.</para>
            <para>The recorder state is changed to QMediaRecorder::StoppedState.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaRecorder.SetEncodingSettings(QtMultimedia.QAudioEncoderSettings)">
            <summary>
            <para>Sets the audio and video encoder settings and container format.</para>
            <para>If some parameters are not specified, or null settings are passed, the encoder will choose default encoding parameters, depending on media source properties.</para>
            <para>It's only possible to change settings when the encoder is in the QMediaEncoder::StoppedState state.</para>
            <para>See also audioSettings(), videoSettings(), and containerFormat().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorder.StateChanged">
            <summary>
            <para>Signals that a media recorder's state has changed.</para>
            <para>Note: Notifier signal for property state. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorder.StatusChanged">
            <summary>
            <para>This property holds the current status of the media recorder.</para>
            <para>The status is changed asynchronously and represents the actual status of media recorder.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Status 	status() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	statusChanged(QMediaRecorder::Status status)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorder.DurationChanged">
            <summary>
            <para>Signals that the duration of the recorded media has changed.</para>
            <para>Note: Notifier signal for property duration. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorder.MutedChanged">
            <summary>
            <para>Signals that the muted state has changed. If true the recording is being muted.</para>
            <para>Note: Notifier signal for property muted. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorder.VolumeChanged">
            <summary>
            <para>This property holds the linear audio gain of media recorder.</para>
            <para>Access functions:</para>
            <para></para>
            <para> qreal 	volume() const</para>
            <para> void 	setVolume(qreal volume)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	volumeChanged(qreal volume)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorder.ActualLocationChanged">
            <summary>
            <para>Signals that the actual location of the recorded media has changed. This signal is usually emitted when recording starts.</para>
            <para>Note: Notifier signal for property actualLocation. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorder.ErrorError">
            <summary>
            <para>Signals that an error has occurred.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(mediaRecorder, static_cast&lt;void(QMediaRecorder::*)(QMediaRecorder::Error)&gt;(&amp;QMediaRecorder::error),</para>
            <para>      [=](QMediaRecorder::Error error){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorder.MetaDataAvailableChanged">
            <summary>
            <para>Signals that the available state of a media object's meta-data has changed.</para>
            <para>Note: Notifier signal for property metaDataAvailable. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorder.MetaDataWritableChanged">
            <summary>
            <para>Signals that the writable state of a media object's meta-data has changed.</para>
            <para>Note: Notifier signal for property metaDataWritable. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorder.MetaDataChanged">
            <summary>
            <para>Signals that a media object's meta-data has changed.</para>
            <para>If multiple meta-data elements are changed, metaDataChanged(const QString &amp;key, const QVariant &amp;value) signal is emitted for each of them with metaDataChanged() changed emitted once.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>metaDataChanged</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(mediaRecorder, static_cast&lt;void(QMediaRecorder::*)()&gt;(&amp;QMediaRecorder::metaDataChanged),</para>
            <para>      [=](){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorder.MetaDataChangedValue">
            <summary>
            <para>Signal the changes of one meta-data element value with the given key.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>metaDataChanged</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(mediaRecorder, static_cast&lt;void(QMediaRecorder::*)(const QString &amp;, const QVariant &amp;)&gt;(&amp;QMediaRecorder::metaDataChanged),</para>
            <para>      [=](const QString &amp;key, const QVariant &amp;value){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorder.AvailabilityChanged">
            <summary>
            <para>Signals that the media recorder is now available (if available is true), or not.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>availabilityChanged</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(mediaRecorder, static_cast&lt;void(QMediaRecorder::*)(bool)&gt;(&amp;QMediaRecorder::availabilityChanged),</para>
            <para>      [=](bool available){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorder.AvailabilityChangedAvailability">
            <summary>
            <para>Signals that the service availability has changed to availability.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>availabilityChanged</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(mediaRecorder, static_cast&lt;void(QMediaRecorder::*)(QMultimedia::AvailabilityStatus)&gt;(&amp;QMediaRecorder::availabilityChanged),</para>
            <para>      [=](QMultimedia::AvailabilityStatus availability){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.AudioSettings">
            <summary>
            <para>Returns the audio encoder settings being used.</para>
            <para>See also setAudioSettings() and setEncodingSettings().</para>
            <para></para>
            <para>Sets the audio encoder settings.</para>
            <para>If some parameters are not specified, or null settings are passed, the encoder will choose default encoding parameters, depending on media source properties.</para>
            <para>It's only possible to change settings when the encoder is in the QMediaEncoder::StoppedState state.</para>
            <para>See also audioSettings(), videoSettings(), and containerFormat().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.VideoSettings">
            <summary>
            <para>Returns the video encoder settings being used.</para>
            <para>See also setVideoSettings() and setEncodingSettings().</para>
            <para></para>
            <para>Sets the video encoder settings.</para>
            <para>If some parameters are not specified, or null settings are passed, the encoder will choose default encoding parameters, depending on media source properties.</para>
            <para>It's only possible to change settings when the encoder is in the QMediaEncoder::StoppedState state.</para>
            <para>See also audioSettings(), videoSettings(), and containerFormat().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.ContainerFormat">
            <summary>
            <para>Returns the selected container format.</para>
            <para>See also setContainerFormat().</para>
            <para></para>
            <para>Sets the media container format.</para>
            <para>If the container format is not specified, the encoder will choose format, depending on media source properties and encoding settings selected.</para>
            <para>It's only possible to change settings when the encoder is in the QMediaEncoder::StoppedState state.</para>
            <para>See also audioSettings(), videoSettings(), and containerFormat().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.Muted">
            <summary>
            <para>This property holds whether a recording audio stream is muted.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.Volume">
            <summary>
            <para>This property holds the linear audio gain of media recorder.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.MediaObject">
            <summary>
            <para>Reimplemented from QMediaBindableInterface::mediaObject().</para>
            <para>Returns the QMediaObject instance that this QMediaRecorder is bound too, or 0 otherwise.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.IsAvailable">
            <summary>
            <para>Returns true if media recorder service ready to use.</para>
            <para>See also availabilityChanged().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.Availability">
            <summary>
            <para>Returns the availability of this functionality.</para>
            <para>See also availabilityChanged().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.OutputLocation">
            <summary>
            <para>This property holds the destination location of media content.</para>
            <para>Setting the location can fail, for example when the service supports only local file system locations but a network URL was passed. If the service does not support media recording this setting the output location will always fail.</para>
            <para>The location can be relative or empty; in this case the recorder uses the system specific place and file naming scheme. After recording has stated, QMediaRecorder::outputLocation() returns the actual output location.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.ActualLocation">
            <summary>
            <para>This property holds the actual location of the last media content.</para>
            <para>The actual location is usually available after recording starts, and reset when new location is set or new recording starts.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.state">
            <summary>
            <para>This property holds the current state of the media recorder.</para>
            <para>The state property represents the user request and is changed synchronously during record(), pause() or stop() calls. Recorder state may also change asynchronously when recording fails.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.status">
            <summary>
            <para>This property holds the current status of the media recorder.</para>
            <para>The status is changed asynchronously and represents the actual status of media recorder.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.error">
            <summary>
            <para>Returns the current error state.</para>
            <para>See also errorString().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.ErrorString">
            <summary>
            <para>Returns a string describing the current error state.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.Duration">
            <summary>
            <para>This property holds the recorded media duration in milliseconds.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.SupportedContainers">
            <summary>
            <para>Returns a list of supported container formats.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.SupportedAudioCodecs">
            <summary>
            <para>Returns a list of supported audio codecs.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.SupportedVideoCodecs">
            <summary>
            <para>Returns a list of supported video codecs.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.IsMetaDataAvailable">
            <summary>
            <para>This property holds whether access to a media object's meta-data is available.</para>
            <para>If this is true there is meta-data available, otherwise there is no meta-data available.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isMetaDataAvailable() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	metaDataAvailableChanged(bool available)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.IsMetaDataWritable">
            <summary>
            <para>This property holds whether a media object's meta-data is writable.</para>
            <para>If this is true the meta-data is writable, otherwise the meta-data is read-only.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isMetaDataWritable() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	metaDataWritableChanged(bool writable)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorder.AvailableMetaData">
            <summary>
            <para>Returns a list of keys there is meta-data available for.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QMediaRecorder.State.StoppedState">
            <summary>The recorder is not active.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaRecorder.State.RecordingState">
            <summary>The recording is requested.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaRecorder.State.PausedState">
            <summary>The recorder is paused.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaRecorder.Status.UnavailableStatus">
            <summary>The recorder is not available or not supported by connected media object.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaRecorder.Status.UnloadedStatus">
            <summary>The recorder is avilable but not loaded.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaRecorder.Status.LoadingStatus">
            <summary>The recorder is initializing.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaRecorder.Status.LoadedStatus">
            <summary>The recorder is initialized and ready to record media.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaRecorder.Status.StartingStatus">
            <summary>Recording is requested but not active yet.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaRecorder.Status.RecordingStatus">
            <summary>Recording is active.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaRecorder.Status.PausedStatus">
            <summary>Recording is paused.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaRecorder.Status.FinalizingStatus">
            <summary>Recording is stopped with media being finalized.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaRecorder.Error.NoError">
            <summary>No Errors.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaRecorder.Error.ResourceError">
            <summary>Device is not ready or not available.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaRecorder.Error.FormatError">
            <summary>Current format is not supported.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaRecorder.Error.OutOfSpaceError">
            <summary>No space left on device.</summary>
        </member>
        <member name="T:QtMultimedia.QAudioEncoderSettingsControl">
            <summary>
            <para>The QAudioEncoderSettingsControl class provides access to the settings of a media service that performs audio encoding.</para>
            </summary>
            <remarks>
            <para>If a QMediaService supports encoding audio data it will implement QAudioEncoderSettingsControl. This control provides information about the limits of restricted audio encoder options and allows the selection of a set of audio encoder settings as specified in a QAudioEncoderSettings object.</para>
            <para>The functionality provided by this control is exposed to application code through the QMediaRecorder class.</para>
            <para>The interface name of QAudioEncoderSettingsControl is org.qt-project.qt.audioencodersettingscontrol/5.0 as defined in QAudioEncoderSettingsControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QMediaRecorder.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QAudioEncoderSettingsControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Create a new audio encoder settings control object with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioEncoderSettingsControl.CodecDescription(System.String)">
            <summary>
            <para>Returns description of audio codec.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioEncoderSettingsControl.AudioSettings">
            <summary>
            <para>Returns the audio encoder settings.</para>
            <para>The returned value may be different tha passed to QAudioEncoderSettingsControl::setAudioSettings() if the settings contains the default or undefined parameters. In this case if the undefined parameters are already resolved, they should be returned.</para>
            <para>See also setAudioSettings().</para>
            <para></para>
            <para>Sets the selected audio settings.</para>
            <para>See also audioSettings().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioEncoderSettingsControl.SupportedAudioCodecs">
            <summary>
            <para>Returns the list of supported audio codec names.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QAudioInputSelectorControl">
            <summary>
            <para>The QAudioInputSelectorControl class provides an audio input selector media control.</para>
            </summary>
            <remarks>
            <para>The QAudioInputSelectorControl class provides descriptions of the audio inputs available on a system and allows one to be selected as the audio input of a media service.</para>
            <para>The interface name of QAudioInputSelectorControl is org.qt-project.qt.audioinputselectorcontrol/5.0 as defined in QAudioInputSelectorControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl().</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QAudioInputSelectorControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new audio input selector control with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioInputSelectorControl.InputDescription(System.String)">
            <summary>
            <para>Returns the description of the input name.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioInputSelectorControl.ActiveInputChanged">
            <summary>
            <para>Signals that the audio input has changed to name.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioInputSelectorControl.AvailableInputsChanged">
            <summary>
            <para>Signals that list of available inputs has changed.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioInputSelectorControl.ActiveInput">
            <summary>
            <para>Returns the name of the currently selected audio input.</para>
            <para>See also setActiveInput().</para>
            <para></para>
            <para>Set the active audio input to name.</para>
            <para>See also activeInput().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioInputSelectorControl.DefaultInput">
            <summary>
            <para>Returns the name of the default audio input.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QAudioOutputSelectorControl">
            <summary>
            <para>The QAudioOutputSelectorControl class provides an audio output selector media control.</para>
            </summary>
            <remarks>
            <para>The QAudioOutputSelectorControl class provides descriptions of the audio outputs available on a system and allows one to be selected as the audio output of a media service.</para>
            <para>The interface name of QAudioOutputSelectorControl is org.qt-project.qt.audiooutputselectorcontrol/5.0 as defined in QAudioOutputSelectorControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl().</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QAudioOutputSelectorControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new audio output selector control with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioOutputSelectorControl.OutputDescription(System.String)">
            <summary>
            <para>Returns the description of the output name.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioOutputSelectorControl.ActiveOutputChanged">
            <summary>
            <para>Signals that the audio output has changed to name.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioOutputSelectorControl.AvailableOutputsChanged">
            <summary>
            <para>Signals that list of available outputs has changed.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioOutputSelectorControl.ActiveOutput">
            <summary>
            <para>Returns the name of the currently selected audio output.</para>
            <para>See also setActiveOutput().</para>
            <para></para>
            <para>Set the active audio output to name.</para>
            <para>See also activeOutput().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioOutputSelectorControl.DefaultOutput">
            <summary>
            <para>Returns the name of the default audio output.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QAudioRoleControl">
            <summary>
            <para>The QAudioRoleControl class provides control over the audio role of a media object.</para>
            </summary>
            <remarks>
            <para>If a QMediaService supports audio roles it will implement QAudioRoleControl.</para>
            <para>The functionality provided by this control is exposed to application code through the QMediaPlayer class.</para>
            <para>The interface name of QAudioRoleControl is org.qt-project.qt.audiorolecontrol/5.6 as defined in QAudioRoleControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QMediaPlayer.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QAudioRoleControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Construct a QAudioRoleControl with the given parent.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioRoleControl.AudioRoleChanged">
            <summary>
            <para>Signal emitted when the audio role has changed.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioRoleControl.AudioRole">
            <summary>
            <para>Returns the audio role of the media played by the media service.</para>
            <para>See also setAudioRole().</para>
            <para></para>
            <para>Sets the audio role of the media played by the media service.</para>
            <para>See also audioRole().</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCameraCaptureBufferFormatControl">
            <summary>
            <para>The QCameraCaptureBufferFormatControl class provides a control for setting the capture buffer format.</para>
            </summary>
            <remarks>
            <para>The format is of type QVideoFrame::PixelFormat.</para>
            <para>The interface name of QCameraCaptureBufferFormatControl is org.qt-project.qt.cameracapturebufferformatcontrol/5.0 as defined in QCameraCaptureBufferFormatControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl().</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraCaptureBufferFormatControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new image buffer capture format control object with the given parent</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraCaptureBufferFormatControl.BufferFormatChanged">
            <summary>
            <para>Signals the buffer image capture format changed to format.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraCaptureBufferFormatControl.BufferFormat">
            <summary>
            <para>Returns the current buffer capture format.</para>
            <para>See also setBufferFormat().</para>
            <para></para>
            <para>Sets the buffer capture format.</para>
            <para>See also bufferFormat().</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCameraCaptureDestinationControl">
            <summary>
            <para>The QCameraCaptureDestinationControl class provides a control for setting capture destination.</para>
            </summary>
            <remarks>
            <para>Depending on backend capabilities capture to file, buffer or both can be supported.</para>
            <para>The interface name of QCameraCaptureDestinationControl is org.qt-project.qt.cameracapturedestinationcontrol/5.0 as defined in QCameraCaptureDestinationControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl().</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraCaptureDestinationControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new image capture destination control object with the given parent</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraCaptureDestinationControl.IsCaptureDestinationSupported(QtMultimedia.QCameraImageCapture.CaptureDestination)">
            <summary>
            <para>Returns true if the capture destination is supported; and false if it is not.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraCaptureDestinationControl.CaptureDestinationChanged">
            <summary>
            <para>Signals the image capture destination changed.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraCaptureDestinationControl.CaptureDestination">
            <summary>
            <para>Returns the current capture destination. The default destination is QCameraImageCapture::CaptureToFile.</para>
            <para>See also setCaptureDestination().</para>
            <para></para>
            <para>Sets the capture destination.</para>
            <para>See also captureDestination().</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCameraControl">
            <summary>
            <para>The QCameraControl class is an abstract base class for classes that control still cameras or video cameras.</para>
            </summary>
            <remarks>
            <para>This service is provided by a QMediaService object via QMediaService::control(). It is used by QCamera.</para>
            <para>The interface name of QCameraControl is org.qt-project.qt.cameracontrol/5.0 as defined in QCameraControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a camera control object with parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraControl.IsCaptureModeSupported(QtMultimedia.QCamera.CaptureMode)">
            <summary>
            <para>Returns true if the capture mode is suported.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraControl.CanChangeProperty(QtMultimedia.QCameraControl.PropertyChangeType,QtMultimedia.QCamera.Status)">
            <summary>
            <para>Returns true if backend can effectively apply changing camera properties of changeType type while the camera state is QCamera::Active and camera status matches status parameter.</para>
            <para>If backend doesn't support applying this change in the active state, it will be stopped before the settings are changed and restarted after. Otherwise the backend should apply the change in the current state, with the camera status indicating the progress, if necessary.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraControl.StateChanged">
            <summary>
            <para>Signal emitted when the camera state changes.</para>
            <para>In most cases the state chage is caused by QCameraControl::setState(), but if critical error has occurred the state changes to QCamera::UnloadedState.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraControl.StatusChanged">
            <summary>
            <para>Signal emitted when the camera status changes.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraControl.Error">
            <summary>
            <para>Signal emitted when an error occurs with error code error and a description of the error errorString.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraControl.CaptureModeChanged">
            <summary>
            <para>Signal emitted when the camera capture mode changes.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraControl.State">
            <summary>
            <para>Returns the state of the camera service.</para>
            <para>See also setState() and QCamera::state.</para>
            <para></para>
            <para>Sets the camera state.</para>
            <para>State changes are synchronous and indicate user intention, while camera status is used as a feedback mechanism to inform application about backend status. Status changes are reported asynchronously with QCameraControl::statusChanged() signal.</para>
            <para>See also state() and QCamera::State.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraControl.CaptureMode">
            <summary>
            <para>Returns the current capture mode.</para>
            <para>See also setCaptureMode().</para>
            <para></para>
            <para>Sets the current capture mode.</para>
            <para>The capture mode changes are synchronous and allowed in any camera state.</para>
            <para>If the capture mode is changed while camera is active, it's recommended to change status to QCamera::LoadedStatus and start activating the camera in the next event loop with the status changed to QCamera::StartingStatus. This allows the capture settings to be applied before camera is started. Than change the status to QCamera::StartedStatus when the capture mode change is done.</para>
            <para>See also captureMode().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraControl.Status">
            <summary>
            <para>Returns the status of the camera service.</para>
            <para>See also QCamera::state.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCameraControl.PropertyChangeType.CaptureMode">
            <summary>Indicates the capture mode is changed.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraControl.PropertyChangeType.ImageEncodingSettings">
            <summary>Image encoder settings are changed, including resolution.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraControl.PropertyChangeType.VideoEncodingSettings">
            <summary>Video encoder settings are changed, including audio, video and container settings.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraControl.PropertyChangeType.Viewfinder">
            <summary>Viewfinder is changed.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraControl.PropertyChangeType.ViewfinderSettings">
            <summary>Viewfinder settings are changed.</summary>
        </member>
        <member name="T:QtMultimedia.QCameraExposureControl">
            <summary>
            <para>The QCameraExposureControl class allows controlling camera exposure parameters.</para>
            </summary>
            <remarks>
            <para>The QCameraExposure class is the usual method of adjusting exposure related parameters when using camera functionality. This class provides a more complete but less easy to use interface, and also forms the interface to implement when writing a new implementation of QCamera functionality.</para>
            <para>You can adjust a number of parameters that will affect images and video taken with the corresponding QCamera object - see the ExposureParameter enumeration.</para>
            <para>The interface name of QCameraExposureControl is org.qt-project.qt.cameraexposurecontrol/5.0 as defined in QCameraExposureControl_iid.</para>
            <para></para>
            <para>See also QCameraExposure and QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraExposureControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a camera exposure control object with parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraExposureControl.IsParameterSupported(QtMultimedia.QCameraExposureControl.ExposureParameter)">
            <summary>
            <para>Returns true is exposure parameter is supported by backend.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraExposureControl.RequestedValue(QtMultimedia.QCameraExposureControl.ExposureParameter)">
            <summary>
            <para>Returns the requested exposure parameter value.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraExposureControl.ActualValue(QtMultimedia.QCameraExposureControl.ExposureParameter)">
            <summary>
            <para>Returns the actual exposure parameter value, or invalid QVariant() if the value is unknown or not supported.</para>
            <para>The actual parameter value may differ for the requested one if automatic mode is selected or camera supports only limited set of values within the supported range.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraExposureControl.SetValue(QtMultimedia.QCameraExposureControl.ExposureParameter,QtCore.QVariant)">
            <summary>
            <para>Set the exposure parameter to value. If a null or invalid QVariant is passed, backend should choose the value automatically, and if possible report the actual value to user with QCameraExposureControl::actualValue().</para>
            <para>Returns true if parameter is supported and value is correct.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraExposureControl.RequestedValueChanged">
            <summary>
            <para>Signal emitted when the requested exposure parameter value has changed, usually in result of setValue() call.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraExposureControl.ActualValueChanged">
            <summary>
            <para>Signal emitted when the actual exposure parameter value has changed, usually in result of auto exposure algorithms or manual exposure parameter applied.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraExposureControl.ParameterRangeChanged">
            <summary>
            <para>Signal emitted when the supported range of exposure parameter values has changed.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCameraExposureControl.ExposureParameter">
            <summary>
            <para>This value is only used in the manual flash mode.</para>
            <para>This value is only used in the torch flash mode.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposureControl.ExposureParameter.ISO">
            <summary>Camera ISO sensitivity, specified as integer value.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposureControl.ExposureParameter.Aperture">
            <summary>Lens aperture is specified as an qreal F number. The supported apertures list can change depending on the focal length, in such a case the exposureParameterRangeChanged() signal is emitted.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposureControl.ExposureParameter.ShutterSpeed">
            <summary>Shutter speed in seconds, specified as qreal.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposureControl.ExposureParameter.ExposureCompensation">
            <summary>Exposure compensation, specified as qreal EV value.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposureControl.ExposureParameter.FlashPower">
            <summary>Manual flash power, specified as qreal value. Accepted power range is [0..1.0], with 0 value means no flash and 1.0 corresponds to full flash power.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposureControl.ExposureParameter.FlashCompensation">
            <summary>Flash compensation, specified as qreal EV value.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposureControl.ExposureParameter.TorchPower">
            <summary>Manual torch power, specified as qreal value. Accepted power range is [0..1.0], with 0 value means no light and 1.0 corresponds to full torch power.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposureControl.ExposureParameter.SpotMeteringPoint">
            <summary>The relative frame coordinate of the point to use for exposure metering in spot metering mode, specified as a QPointF.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposureControl.ExposureParameter.ExposureMode">
            <summary>Camera exposure mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposureControl.ExposureParameter.MeteringMode">
            <summary>Camera metering mode.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraExposureControl.ExposureParameter.ExtendedExposureParameter">
            <summary>The base value for platform specific extended parameters. For such parameters the sequential values starting from ExtendedExposureParameter should be used.</summary>
        </member>
        <member name="T:QtMultimedia.QCameraFeedbackControl">
            <summary>
            <para>The QCameraFeedbackControl class allows controlling feedback (sounds etc) during camera operation</para>
            </summary>
            <remarks>
            <para>When using a camera, there are several times when some form of feedback to the user is given - for example, when an image is taken, or when recording is started. You can enable or disable some of this feedback, or adjust what sound might be played for these actions.</para>
            <para>In some cases it may be undesirable to play a sound effect - for example, when initiating video recording the sound itself may be recorded.</para>
            <para>Note: In some countries or regions, feedback sounds or other indications (e.g. a red light) are mandatory during camera operation. In these cases, you can check isEventFeedbackLocked to check if that type of feedback can be modified. Any attempts to change a locked feedback type will be ignored.</para>
            <para>The interface name of QCameraFeedbackControl is org.qt-project.qt.camerafeedbackcontrol/5.0 as defined in QCameraFeedbackControl_iid.</para>
            <para></para>
            <para>See also QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraFeedbackControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a camera feedback control object with parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraFeedbackControl.IsEventFeedbackLocked(QtMultimedia.QCameraFeedbackControl.EventType)">
            <summary>
            <para>Returns true if the feedback setting for event is locked. This may be true because of legal compliance issues, or because configurability of this event's feedback is not supported.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraFeedbackControl.IsEventFeedbackEnabled(QtMultimedia.QCameraFeedbackControl.EventType)">
            <summary>
            <para>Returns true if the feedback for event is enabled.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraFeedbackControl.SetEventFeedbackEnabled(QtMultimedia.QCameraFeedbackControl.EventType,System.Boolean)">
            <summary>
            <para>Turns on feedback for the specific event if enabled is true, otherwise disables the feedback. Returns true if the feedback could be modified, or false otherwise (e.g. this feedback type is locked).</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also isEventFeedbackEnabled().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraFeedbackControl.ResetEventFeedback(QtMultimedia.QCameraFeedbackControl.EventType)">
            <summary>
            <para>Restores the feedback setting for this event to its default setting.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraFeedbackControl.SetEventFeedbackSound(QtMultimedia.QCameraFeedbackControl.EventType,System.String)">
            <summary>
            <para>When the given event occurs, the sound effect referenced by filePath will be played instead of the default sound.</para>
            <para>If this feedback type is locked, or if the supplied path is inaccessible, this function will return false. In addition, some forms of feedback may be non-auditory (e.g. a red light, or a vibration), and false may be returned in this case.</para>
            <para>The file referenced should be linear PCM (WAV format).</para>
            <para>Note: In the case that a valid file path to an unsupported file is given, this function will return true but the feedback will use the original setting.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCameraFeedbackControl.EventType">
            <summary>
            <para>This enumeration describes certain events that occur during camera usage. You can associate some form of feedback to be given when the event occurs, or check whether feedback for this event is enabled or locked so that changes cannot be made.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCameraFeedbackControl.EventType.ViewfinderStarted">
            <summary>The viewfinder stream was started (even if not visible)</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFeedbackControl.EventType.ViewfinderStopped">
            <summary>The viewfinder stream was stopped</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFeedbackControl.EventType.ImageCaptured">
            <summary>An image was captured but not yet fully processed</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFeedbackControl.EventType.ImageSaved">
            <summary>An image is fully available and saved somewhere.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFeedbackControl.EventType.ImageError">
            <summary>An error occurred while capturing an image</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFeedbackControl.EventType.RecordingStarted">
            <summary>Video recording has started</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFeedbackControl.EventType.RecordingInProgress">
            <summary>Video recording is in progress</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFeedbackControl.EventType.RecordingStopped">
            <summary>Video recording has stopped</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFeedbackControl.EventType.AutoFocusInProgress">
            <summary>The camera is trying to automatically focus</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFeedbackControl.EventType.AutoFocusLocked">
            <summary>The camera has automatically focused successfully</summary>
        </member>
        <member name="F:QtMultimedia.QCameraFeedbackControl.EventType.AutoFocusFailed">
            <summary>The camera was unable to focus automatically</summary>
        </member>
        <member name="T:QtMultimedia.QCameraFlashControl">
            <summary>
            <para>The QCameraFlashControl class allows controlling a camera's flash.</para>
            </summary>
            <remarks>
            <para>You can set the type of flash effect used when an image is captured, and test to see if the flash hardware is ready to fire.</para>
            <para>You can retrieve this control from the camera object in the usual way:</para>
            <para>Some camera devices may not have flash hardware, or may not be configurable. In that case, there will be no QCameraFlashControl available.</para>
            <para>The interface name of QCameraFlashControl is org.qt-project.qt.cameraflashcontrol/5.0 as defined in QCameraFlashControl_iid.</para>
            <para></para>
            <para>See also QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraFlashControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a camera flash control object with parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraFlashControl.IsFlashModeSupported(QtMultimedia.QCameraExposure.FlashMode)">
            <summary>
            <para>Return true if the reqested flash mode is supported. Some QCameraExposure::FlashMode values can be combined, for example QCameraExposure::FlashManual | QCameraExposure::FlashSlowSyncRearCurtain</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraFlashControl.FlashReady">
            <summary>
            <para>Signal emitted when flash state changes to ready.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraFlashControl.FlashMode">
            <summary>
            <para>Returns the current flash mode.</para>
            <para>See also setFlashMode().</para>
            <para></para>
            <para>Set the current flash mode.</para>
            <para>Usually a single QCameraExposure::FlashMode flag is used, but some non conflicting flags combination are also allowed, like QCameraExposure::FlashManual | QCameraExposure::FlashSlowSyncRearCurtain.</para>
            <para>See also flashMode().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraFlashControl.IsFlashReady">
            <summary>
            <para>Returns true if flash is charged.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCameraFocusControl">
            <summary>
            <para>The QCameraFocusControl class supplies control for focusing related camera parameters.</para>
            </summary>
            <remarks>
            <para>The interface name of QCameraFocusControl is org.qt-project.qt.camerafocuscontrol/5.0 as defined in QCameraFocusControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraFocusControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a camera control object with parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraFocusControl.IsFocusModeSupported(QtMultimedia.QCameraFocus.FocusMode)">
            <summary>
            <para>Returns true if focus mode is supported.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraFocusControl.IsFocusPointModeSupported(QtMultimedia.QCameraFocus.FocusPointMode)">
            <summary>
            <para>Returns true if the camera focus point mode is supported.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraFocusControl.FocusModeChanged">
            <summary>
            <para>Signal is emitted when the focus mode is changed, usually in result of QCameraFocusControl::setFocusMode call or capture mode changes.</para>
            <para>See also QCameraFocusControl::focusMode() and QCameraFocusControl::setFocusMode().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraFocusControl.FocusPointModeChanged">
            <summary>
            <para>Signal is emitted when the focus point mode is changed, usually in result of QCameraFocusControl::setFocusPointMode call or capture mode changes.</para>
            <para>See also QCameraFocusControl::focusPointMode() and QCameraFocusControl::setFocusPointMode().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraFocusControl.CustomFocusPointChanged">
            <summary>
            <para>Signal is emitted when the custom focus point is changed.</para>
            <para>See also QCameraFocusControl::customFocusPoint() and QCameraFocusControl::setCustomFocusPoint().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraFocusControl.FocusZonesChanged">
            <summary>
            <para>Signal is emitted when the set of zones, camera focused on is changed.</para>
            <para>Usually the zones list is changed when the camera is focused.</para>
            <para>See also QCameraFocusControl::focusZones().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraFocusControl.FocusMode">
            <summary>
            <para>Returns the focus mode being used.</para>
            <para>See also setFocusMode().</para>
            <para></para>
            <para>Set the focus mode to mode.</para>
            <para>See also focusMode().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraFocusControl.FocusPointMode">
            <summary>
            <para>Returns the camera focus point selection mode.</para>
            <para>See also setFocusPointMode().</para>
            <para></para>
            <para>Sets the camera focus point selection mode.</para>
            <para>See also focusPointMode().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraFocusControl.CustomFocusPoint">
            <summary>
            <para>Return the position of custom focus point, in relative frame coordinates: QPointF(0,0) points to the left top frame point, QPointF(0.5,0.5) points to the frame center.</para>
            <para>Custom focus point is used only in FocusPointCustom focus mode.</para>
            <para>See also setCustomFocusPoint().</para>
            <para></para>
            <para>Sets the custom focus point.</para>
            <para>If camera supports fixed set of focus points, it should use the nearest supported focus point, and return the actual focus point with QCameraFocusControl::focusZones().</para>
            <para>See also QCameraFocusControl::customFocusPoint() and QCameraFocusControl::focusZones().</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCameraImageCaptureControl">
            <summary>
            <para>The QCameraImageCaptureControl class provides a control interface for image capture services.</para>
            </summary>
            <remarks>
            <para>The interface name of QCameraImageCaptureControl is org.qt-project.qt.cameraimagecapturecontrol/5.0 as defined in QCameraImageCaptureControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl().</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraImageCaptureControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new image capture control object with the given parent</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraImageCaptureControl.Capture(System.String)">
            <summary>
            <para>Initiates the capture of an image to fileName. The fileName can be relative or empty, in this case the service should use the system specific place and file naming scheme.</para>
            <para>The Camera service should save all the capture parameters like exposure settings or image processing parameters, so changes to camera parameters after capture() is called do not affect previous capture requests.</para>
            <para>Returns the capture request id number, which is used later with imageExposed(), imageCaptured() and imageSaved() signals.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraImageCaptureControl.CancelCapture">
            <summary>
            <para>Cancel pending capture requests.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraImageCaptureControl.ReadyForCaptureChanged">
            <summary>
            <para>Signals that a capture control's ready state has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraImageCaptureControl.ImageExposed">
            <summary>
            <para>Signals that an image with it requestId has just been exposed. This signal can be used for the shutter sound or other indicaton.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraImageCaptureControl.ImageCaptured">
            <summary>
            <para>Signals that an image with it requestId has been captured and a preview is available.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraImageCaptureControl.ImageMetadataAvailable">
            <summary>
            <para>Signals that a metadata for an image with request id is available. Signal also contains the key and value of the metadata.</para>
            <para>This signal should be emitted between imageExposed and imageSaved signals.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraImageCaptureControl.ImageAvailable">
            <summary>
            <para>Signals that a captured buffer with a requestId is available.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraImageCaptureControl.ImageSaved">
            <summary>
            <para>Signals that a captured image with a requestId has been saved to fileName.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraImageCaptureControl.Error">
            <summary>
            <para>Signals the capture request id failed with error code and message errorString.</para>
            <para>See also QCameraImageCapture::Error.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageCaptureControl.DriveMode">
            <summary>
            <para>Returns the current camera drive mode.</para>
            <para>See also setDriveMode().</para>
            <para></para>
            <para>Sets the current camera drive mode.</para>
            <para>See also driveMode().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraImageCaptureControl.IsReadyForCapture">
            <summary>
            <para>Identifies if a capture control is ready to perform a capture immediately (all the resources necessary for image capture are allocated, hardware initialized, flash is charged, etc).</para>
            <para>Returns true if the camera is ready for capture; and false if it is not.</para>
            <para>It's permissible to call capture() while the camera status is QCamera::ActiveStatus regardless of isReadyForCapture property value. If camera is not ready to capture image immediately, the capture request is queued with all the related camera settings to be executed as soon as possible.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCameraImageProcessingControl">
            <summary>
            <para>The QCameraImageProcessingControl class provides an abstract class for controlling image processing parameters, like white balance, contrast, saturation, sharpening and denoising.</para>
            </summary>
            <remarks>
            <para>The interface name of QCameraImageProcessingControl is org.qt-project.qt.cameraimageprocessingcontrol/5.0 as defined in QCameraImageProcessingControl_iid.</para>
            <para>Camera service may choose the parameters of image processing pipeline depending on sensor properties camera settings and capture parameters.</para>
            <para>This control allows to modify some parameters of image processing pipeline to achieve desired results.</para>
            <para>Parameters with the &quot;Adjustment&quot; suffix, like ContrastAdjustment, SaturationAdjustment etc allows to adjust the parameter values, selected by camera engine, while parameters like Contrast and Saturation overwrites them.</para>
            <para>For example setting the SharpeningAdjustment parameter to -0.1 slightly reduces the amount of sharpening applied, while settings the Sharpening parameter to 0 disables sharpening at all.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraImageProcessingControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an image processing control object with parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraImageProcessingControl.IsParameterSupported(QtMultimedia.QCameraImageProcessingControl.ProcessingParameter)">
            <summary>
            <para>Returns true if the camera supports adjusting image processing parameter.</para>
            <para>Usually the supported setting is static, but some parameters may not be available depending on other camera settings, like presets. In such case the currently supported parameters should be returned.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraImageProcessingControl.IsParameterValueSupported(QtMultimedia.QCameraImageProcessingControl.ProcessingParameter,QtCore.QVariant)">
            <summary>
            <para>Returns true if the camera supports setting the image processing parameter value.</para>
            <para>It's used only for parameters with a limited set of values, like WhiteBalancePreset.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraImageProcessingControl.Parameter(QtMultimedia.QCameraImageProcessingControl.ProcessingParameter)">
            <summary>
            <para>Returns the image processing parameter value.</para>
            <para>See also setParameter().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraImageProcessingControl.SetParameter(QtMultimedia.QCameraImageProcessingControl.ProcessingParameter,QtCore.QVariant)">
            <summary>
            <para>Sets the image processing parameter value. Passing the null or invalid QVariant value allows backend to choose the suitable parameter value.</para>
            <para>The valid values range depends on the parameter type. For WhiteBalancePreset the value should be one of QCameraImageProcessing::WhiteBalanceMode values; for Contrast, Saturation, Brightness, Sharpening and Denoising the value should be in [0..1.0] range with invalid QVariant value indicating the default parameter value; for ContrastAdjustment, SaturationAdjustment, BrightnessAdjustment, SharpeningAdjustment and DenoisingAdjustment the value should be in [-1.0..1.0] range with default 0.</para>
            <para>See also parameter().</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessingControl.ProcessingParameter.WhiteBalancePreset">
            <summary>The white balance preset.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessingControl.ProcessingParameter.ColorTemperature">
            <summary>Color temperature in K. This value is used when the manual white balance mode is selected.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessingControl.ProcessingParameter.Contrast">
            <summary>Image contrast.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessingControl.ProcessingParameter.Saturation">
            <summary>Image saturation.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessingControl.ProcessingParameter.Brightness">
            <summary>Image brightness.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessingControl.ProcessingParameter.Sharpening">
            <summary>Amount of sharpening applied.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessingControl.ProcessingParameter.Denoising">
            <summary>Amount of denoising applied.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessingControl.ProcessingParameter.ContrastAdjustment">
            <summary>Image contrast adjustment.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessingControl.ProcessingParameter.SaturationAdjustment">
            <summary>Image saturation adjustment.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessingControl.ProcessingParameter.BrightnessAdjustment">
            <summary>Image brightness adjustment.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessingControl.ProcessingParameter.SharpeningAdjustment">
            <summary>Adjustment of sharpening applied.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessingControl.ProcessingParameter.DenoisingAdjustment">
            <summary>Adjustment of denoising applied.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessingControl.ProcessingParameter.ColorFilter">
            <summary>Image filter applied. Since 5.5</summary>
        </member>
        <member name="F:QtMultimedia.QCameraImageProcessingControl.ProcessingParameter.ExtendedParameter">
            <summary>The base value for platform specific extended parameters.</summary>
        </member>
        <member name="T:QtMultimedia.QCameraInfoControl">
            <summary>
            <para>The QCameraInfoControl class provides a camera info media control.</para>
            </summary>
            <remarks>
            <para>The QCameraInfoControl class provides information about the camera devices available on the system.</para>
            <para>The interface name of QCameraInfoControl is org.qt-project.qt.camerainfocontrol/5.3 as defined in QCameraInfoControl_iid.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraInfoControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a camera info control with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraInfoControl.CameraPosition(System.String)">
            <summary>
            <para>Returns the physical position of the camera named deviceName on the hardware system.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraInfoControl.CameraOrientation(System.String)">
            <summary>
            <para>Returns the physical orientation of the sensor for the camera named deviceName.</para>
            <para>The value is the orientation angle (clockwise, in steps of 90 degrees) of the camera sensor in relation to the display in its natural orientation.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCameraLocksControl">
            <summary>
            <para>The QCameraLocksControl class is an abstract base class for classes that control still cameras or video cameras.</para>
            </summary>
            <remarks>
            <para>This service is provided by a QMediaService object via QMediaService::control(). It is used by QCamera.</para>
            <para>The interface name of QCameraLocksControl is org.qt-project.qt.cameralockscontrol/5.0 as defined in QCameraLocksControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraLocksControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a camera locks control object with parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraLocksControl.LockStatus(QtMultimedia.QCamera.LockType)">
            <summary>
            <para>Returns the camera lock status.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraLocksControl.SearchAndLock(QtMultimedia.QCamera.LockType)">
            <summary>
            <para>Request camera locks.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraLocksControl.Unlock(QtMultimedia.QCamera.LockType)">
            <summary>
            <para>Unlock camera locks.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraLocksControl.LockStatusChanged">
            <summary>
            <para>Signals the lock status was changed with a specified reason.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraLocksControl.SupportedLocks">
            <summary>
            <para>Returns the lock types, the camera supports.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCameraViewfinderSettingsControl">
            <summary>
            <para>The QCameraViewfinderSettingsControl class provides an abstract class for controlling camera viewfinder parameters.</para>
            </summary>
            <remarks>
            <para>The interface name of QCameraViewfinderSettingsControl is org.qt-project.qt.cameraviewfindersettingscontrol/5.0 as defined in QCameraViewfinderSettingsControl_iid.</para>
            <para>Warning: New backends should implement QCameraViewfinderSettingsControl2 instead. Application developers should request this control only if QCameraViewfinderSettingsControl2 is not available.</para>
            <para></para>
            <para>See also QMediaService::requestControl(), QCameraViewfinderSettingsControl2, and QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraViewfinderSettingsControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a camera viewfinder control object with parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraViewfinderSettingsControl.IsViewfinderParameterSupported(QtMultimedia.QCameraViewfinderSettingsControl.ViewfinderParameter)">
            <summary>
            <para>Returns true if configuration of viewfinder parameter is supported by camera backend.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraViewfinderSettingsControl.viewfinderParameter(QtMultimedia.QCameraViewfinderSettingsControl.ViewfinderParameter)">
            <summary>
            <para>Returns the value of viewfinder parameter.</para>
            <para>See also setViewfinderParameter().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraViewfinderSettingsControl.SetViewfinderParameter(QtMultimedia.QCameraViewfinderSettingsControl.ViewfinderParameter,QtCore.QVariant)">
            <summary>
            <para>Set the prefferred value of viewfinder parameter.</para>
            <para>Calling this while the camera is active may result in the camera being stopped and reloaded. If video recording is in progress, this call may be ignored.</para>
            <para>If an unsupported parameter is specified the camera may fail to load, or the setting may be ignored.</para>
            <para>Viewfinder parameters may also depend on other camera settings, especially in video capture mode. If camera configuration conflicts with viewfinder settings, the camara configuration is usually preferred.</para>
            <para>See also viewfinderParameter().</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QCameraViewfinderSettingsControl.ViewfinderParameter.Resolution">
            <summary>Viewfinder resolution, QSize.</summary>
        </member>
        <member name="F:QtMultimedia.QCameraViewfinderSettingsControl.ViewfinderParameter.PixelAspectRatio">
            <summary>Pixel aspect ratio, QSize as in QVideoSurfaceFormat::pixelAspectRatio</summary>
        </member>
        <member name="F:QtMultimedia.QCameraViewfinderSettingsControl.ViewfinderParameter.MinimumFrameRate">
            <summary>Minimum viewfinder frame rate, qreal</summary>
        </member>
        <member name="F:QtMultimedia.QCameraViewfinderSettingsControl.ViewfinderParameter.MaximumFrameRate">
            <summary>Maximum viewfinder frame rate, qreal</summary>
        </member>
        <member name="F:QtMultimedia.QCameraViewfinderSettingsControl.ViewfinderParameter.PixelFormat">
            <summary>Viewfinder pixel format, QVideoFrame::PixelFormat</summary>
        </member>
        <member name="F:QtMultimedia.QCameraViewfinderSettingsControl.ViewfinderParameter.UserParameter">
            <summary>The base value for platform specific extended parameters. For such parameters the sequential values starting from UserParameter should be used.</summary>
        </member>
        <member name="T:QtMultimedia.QCameraViewfinderSettingsControl2">
            <summary>
            <para>The QCameraViewfinderSettingsControl2 class provides access to the viewfinder settings of a camera media service.</para>
            </summary>
            <remarks>
            <para>The functionality provided by this control is exposed to application code through the QCamera class.</para>
            <para>The interface name of QCameraViewfinderSettingsControl2 is org.qt-project.qt.cameraviewfindersettingscontrol2/5.5 as defined in QCameraViewfinderSettingsControl2_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl(), QCameraViewfinderSettings, and QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraViewfinderSettingsControl2.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a camera viewfinder settings control object with parent.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraViewfinderSettingsControl2.ViewfinderSettings">
            <summary>
            <para>Returns the viewfinder settings.</para>
            <para>If undefined or unsupported values are passed to QCameraViewfinderSettingsControl2::setViewfinderSettings(), this function returns the actual settings used by the camera viewfinder. These may be available only once the camera is active.</para>
            <para>See also setViewfinderSettings().</para>
            <para></para>
            <para>Sets the camera viewfinder settings.</para>
            <para>See also viewfinderSettings().</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QCameraZoomControl">
            <summary>
            <para>The QCameraZoomControl class supplies control for optical and digital camera zoom.</para>
            </summary>
            <remarks>
            <para>The interface name of QCameraZoomControl is org.qt-project.qt.camerazoomcontrol/5.0 as defined in QCameraZoomControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QCameraZoomControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a camera zoom control object with parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QCameraZoomControl.ZoomTo(System.Double,System.Double)">
            <summary>
            <para>Sets optical and digital zoom values.</para>
            <para>Zooming can be asynchronous with value changes reported with currentDigitalZoomChanged() and currentOpticalZoomChanged() signals.</para>
            <para>The backend should expect and correctly handle frequent zoomTo() calls during zoom animations or slider movements.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraZoomControl.MaximumOpticalZoomChanged">
            <summary>
            <para>Signal emitted when the maximum supported optical zoom value changed.</para>
            <para>The maximum supported zoom value can depend on other camera settings, like focusing mode.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraZoomControl.MaximumDigitalZoomChanged">
            <summary>
            <para>Signal emitted when the maximum supported digital zoom value changed.</para>
            <para>The maximum supported zoom value can depend on other camera settings, like capture mode or resolution.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraZoomControl.RequestedOpticalZoomChanged">
            <summary>
            <para>Signal emitted when the requested optical zoom value changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraZoomControl.RequestedDigitalZoomChanged">
            <summary>
            <para>Signal emitted when the requested digital zoom value changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraZoomControl.CurrentOpticalZoomChanged">
            <summary>
            <para>Signal emitted when the current optical zoom value changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QCameraZoomControl.CurrentDigitalZoomChanged">
            <summary>
            <para>Signal emitted when the current digital zoom value changed.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraZoomControl.MaximumOpticalZoom">
            <summary>
            <para>Returns the maximum optical zoom value, or 1.0 if optical zoom is not supported.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraZoomControl.MaximumDigitalZoom">
            <summary>
            <para>Returns the maximum digital zoom value, or 1.0 if digital zoom is not supported.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraZoomControl.RequestedOpticalZoom">
            <summary>
            <para>Return the requested optical zoom value.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraZoomControl.RequestedDigitalZoom">
            <summary>
            <para>Return the requested digital zoom value.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraZoomControl.CurrentOpticalZoom">
            <summary>
            <para>Return the current optical zoom value.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QCameraZoomControl.CurrentDigitalZoom">
            <summary>
            <para>Return the current digital zoom value.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QImageEncoderControl">
            <summary>
            <para>The QImageEncoderControl class provides access to the settings of a media service that performs image encoding.</para>
            </summary>
            <remarks>
            <para>If a QMediaService supports encoding image data it will implement QImageEncoderControl. This control allows to set image encoding settings and provides functions for quering supported image codecs and resolutions.</para>
            <para>The interface name of QImageEncoderControl is org.qt-project.qt.imageencodercontrol/5.0 as defined in QImageEncoderControl_iid.</para>
            <para></para>
            <para>See also QImageEncoderSettings and QMediaService::requestControl().</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QImageEncoderControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new image encoder control object with the given parent</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QImageEncoderControl.ImageCodecDescription(System.String)">
            <summary>
            <para>Returns a description of an image codec.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QImageEncoderControl.ImageSettings">
            <summary>
            <para>Returns the currently used image encoder settings.</para>
            <para>The returned value may be different tha passed to QImageEncoderControl::setImageSettings() if the settings contains the default or undefined parameters. In this case if the undefined parameters are already resolved, they should be returned.</para>
            <para>See also setImageSettings().</para>
            <para></para>
            <para>Sets the selected image encoder settings.</para>
            <para>See also imageSettings().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QImageEncoderControl.SupportedImageCodecs">
            <summary>
            <para>Returns a list of supported image codecs.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaAudioProbeControl">
            <summary>
            <para>The QMediaAudioProbeControl class allows control over probing audio data in media objects.</para>
            </summary>
            <remarks>
            <para>QAudioProbe is the client facing class for probing audio - this class is implemented by media backends to provide this functionality.</para>
            <para>The interface name of QMediaAudioProbeControl is org.qt-project.qt.mediaaudioprobecontrol/5.0 as defined in QMediaAudioProbeControl_iid.</para>
            <para></para>
            <para>See also QAudioProbe, QMediaService::requestControl(), QMediaPlayer, and QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaAudioProbeControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Create a new media audio probe control object with the given parent.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaAudioProbeControl.AudioBufferProbed">
            <summary>
            <para>This signal should be emitted when an audio buffer is processed in the media service.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaAudioProbeControl.Flush">
            <summary>
            <para>This signal should be emitted when it is required to release all frames.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaAvailabilityControl">
            <summary>
            <para>The QMediaAvailabilityControl class supplies a control for reporting availability of a service.</para>
            </summary>
            <remarks>
            <para>An instance of QMediaObject (or its derived classes) can report any changes in availability via this control.</para>
            <para>The interface name of QMediaAvailabilityControl is org.qt-project.qt.mediaavailabilitycontrol/5.0 as defined in QMediaAvailabilityControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QMediaObject.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaAvailabilityControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an availability control object with parent.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaAvailabilityControl.AvailabilityChanged">
            <summary>
            <para>Signal emitted when the current availability value changed.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaAvailabilityControl.Availability">
            <summary>
            <para>Returns the current availability of this instance of the media service. If the availability changes at run time (for example, some other media client takes all media resources) the availabilityChanges() signal should be emitted.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaContainerControl">
            <summary>
            <para>The QMediaContainerControl class provides access to the output container format of a QMediaService</para>
            </summary>
            <remarks>
            <para>If a QMediaService supports writing encoded data it will implement QMediaContainerControl. This control provides information about the output containers supported by a media service and allows one to be selected as the current output containers.</para>
            <para>The functionality provided by this control is exposed to application code through the QMediaRecorder class.</para>
            <para>The interface name of QMediaContainerControl is org.qt-project.qt.mediacontainercontrol/5.0 as defined in QMediaContainerControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QMediaRecorder.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaContainerControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new media container control with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaContainerControl.ContainerDescription(System.String)">
            <summary>
            <para>Returns a description of the container format.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaContainerControl.ContainerFormat">
            <summary>
            <para>Returns the selected container format.</para>
            <para>See also setContainerFormat().</para>
            <para></para>
            <para>Sets the current container format.</para>
            <para>See also containerFormat().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaContainerControl.SupportedContainers">
            <summary>
            <para>Returns a list of MIME types of supported container formats.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaResource">
            <summary>
            <para>The QMediaResource class provides a description of a media resource.</para>
            </summary>
            <remarks>
            <para>A media resource is composed of a URL containing the location of the resource and a set of properties that describe the format of the resource. The properties provide a means to assess a resource without first attempting to load it, and in situations where media be represented by multiple alternative representations provide a means to select the appropriate resource.</para>
            <para>Media made available by a remote services can often be available in multiple encodings or quality levels, this allows a client to select an appropriate resource based on considerations such as codecs supported, network bandwidth, and display constraints. QMediaResource includes information such as the MIME type, audio and video codecs, audio and video bit rates, and resolution so these constraints and others can be evaluated.</para>
            <para>The only mandatory property of a QMediaResource is the url().</para>
            <para></para>
            <para>See also QMediaContent.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaResource.#ctor">
            <summary>
            <para>Constructs a null media resource.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaResource.#ctor(QtCore.QUrl,System.String)">
            <summary>
            <para>Constructs a media resource with the given mimeType from a url.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaResource.#ctor(QtNetwork.QNetworkRequest,System.String)">
            <summary>
            <para>Constructs a media resource with the given mimeType from a network request.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaResource.#ctor(QtMultimedia.QMediaResource)">
            <summary>
            <para>Constructs a copy of a media resource other.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaResource.op_Equality(QtMultimedia.QMediaResource,QtMultimedia.QMediaResource)">
            <summary>
            <para>Compares a media resource to other.</para>
            <para>Returns true if the resources are identical, and false otherwise.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaResource.op_Inequality(QtMultimedia.QMediaResource,QtMultimedia.QMediaResource)">
            <summary>
            <para>Compares a media resource to other.</para>
            <para>Returns true if they are different, and false otherwise.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaResource.SetResolution(System.Int32,System.Int32)">
            <summary>
            <para>Sets the width and height in pixels of a media resource.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaResource.Language">
            <summary>
            <para>Returns the language of a media resource as an ISO 639-2 code.</para>
            <para>This may be null if the language is unknown.</para>
            <para>See also setLanguage().</para>
            <para></para>
            <para>Sets the language of a media resource.</para>
            <para>See also language().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaResource.AudioCodec">
            <summary>
            <para>Returns the audio codec of a media resource.</para>
            <para>This may be null if the media resource does not contain an audio stream, or the codec is unknown.</para>
            <para>See also setAudioCodec().</para>
            <para></para>
            <para>Sets the audio codec of a media resource.</para>
            <para>See also audioCodec().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaResource.VideoCodec">
            <summary>
            <para>Returns the video codec of a media resource.</para>
            <para>This may be null if the media resource does not contain a video stream, or the codec is unknonwn.</para>
            <para>See also setVideoCodec().</para>
            <para></para>
            <para>Sets the video codec of media resource.</para>
            <para>See also videoCodec().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaResource.DataSize">
            <summary>
            <para>Returns the size in bytes of a media resource.</para>
            <para>This may be zero if the size is unknown.</para>
            <para>See also setDataSize().</para>
            <para></para>
            <para>Sets the size in bytes of a media resource.</para>
            <para>See also dataSize().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaResource.AudioBitRate">
            <summary>
            <para>Returns the bit rate in bits per second of a media resource's audio stream.</para>
            <para>This may be zero if the bit rate is unknown, or the resource contains no audio stream.</para>
            <para>See also setAudioBitRate().</para>
            <para></para>
            <para>Sets the bit rate in bits per second of a media resource's video stream.</para>
            <para>See also audioBitRate().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaResource.SampleRate">
            <summary>
            <para>Returns the audio sample rate of a media resource.</para>
            <para>This may be zero if the sample size is unknown, or the resource contains no audio stream.</para>
            <para>See also setSampleRate().</para>
            <para></para>
            <para>Sets the audio sampleRate of a media resource.</para>
            <para>See also sampleRate().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaResource.ChannelCount">
            <summary>
            <para>Returns the number of audio channels in a media resource.</para>
            <para>This may be zero if the sample size is unknown, or the resource contains no audio stream.</para>
            <para>See also setChannelCount().</para>
            <para></para>
            <para>Sets the number of audio channels in a media resource.</para>
            <para>See also channelCount().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaResource.VideoBitRate">
            <summary>
            <para>Returns the bit rate in bits per second of a media resource's video stream.</para>
            <para>This may be zero if the bit rate is unknown, or the resource contains no video stream.</para>
            <para>See also setVideoBitRate().</para>
            <para></para>
            <para>Sets the bit rate in bits per second of a media resource's video stream.</para>
            <para>See also videoBitRate().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaResource.Resolution">
            <summary>
            <para>Returns the resolution in pixels of a media resource.</para>
            <para>This may be null is the resolution is unknown, or the resource contains no pixel data (i.e. the resource is an audio stream.</para>
            <para>See also setResolution().</para>
            <para></para>
            <para>Sets the resolution in pixels of a media resource.</para>
            <para>See also resolution().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaResource.IsNull">
            <summary>
            <para>Identifies if a media resource is null.</para>
            <para>Returns true if the resource is null, and false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaResource.Url">
            <summary>
            <para>Returns the URL of a media resource.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaResource.Request">
            <summary>
            <para>Returns the network request associated with this media resource.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaResource.MimeType">
            <summary>
            <para>Returns the MIME type of a media resource.</para>
            <para>This may be null if the MIME type is unknown.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaContent">
            <summary>
            <para>The QMediaContent class provides access to the resources relating to a media content.</para>
            </summary>
            <remarks>
            <para>QMediaContent is used within the multimedia framework as the logical handle to media content. A QMediaContent object is composed of one or more QMediaResources where each resource provides the URL and format information of a different encoding of the content.</para>
            <para>A non-null QMediaContent will always have a primary or canonical reference to the content available through the canonicalUrl() or canonicalResource() methods, any additional resources are optional.</para>
            <para>Alternatively QMediaContent can represent a playlist and contain a pointer to a valid QMediaPlaylist object. In this case URL is optional and can either be empty or point to the playlist URL.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaContent.#ctor">
            <summary>
            <para>Constructs a null QMediaContent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaContent.#ctor(QtCore.QUrl)">
            <summary>
            <para>Constructs a media content with url providing a reference to the content.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaContent.#ctor(QtNetwork.QNetworkRequest)">
            <summary>
            <para>Constructs a media content with request providing a reference to the content.</para>
            <para>This constructor can be used to reference media content via network protocols such as HTTP. This may include additional information required to obtain the resource, such as Cookies or HTTP headers.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaContent.#ctor(QtMultimedia.QMediaResource)">
            <summary>
            <para>Constructs a media content with resource providing a reference to the content.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaContent.#ctor(QtMultimedia.QMediaContent)">
            <summary>
            <para>Constructs a copy of the media content other.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaContent.#ctor(QtMultimedia.QMediaPlaylist,QtCore.QUrl,System.Boolean)">
            <summary>
            <para>Constructs a media content with playlist.</para>
            <para>contentUrl of a playlist is an optional parameter and can be empty.</para>
            <para>Set takeOwnership to true if you want QMediaContent to take ownership of the playlist. takeOwnership is set to false by default.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaContent.#ctor(QtMultimedia.QMediaPlaylist)">
            <summary>
            <para>Constructs a media content with playlist.</para>
            <para>contentUrl of a playlist is an optional parameter and can be empty.</para>
            <para>Set takeOwnership to true if you want QMediaContent to take ownership of the playlist. takeOwnership is set to false by default.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaContent.op_Equality(QtMultimedia.QMediaContent,QtMultimedia.QMediaContent)">
            <summary>
            <para>Returns true if other is equivalent to this media content; false otherwise.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaContent.op_Inequality(QtMultimedia.QMediaContent,QtMultimedia.QMediaContent)">
            <summary>
            <para>Returns true if other is not equivalent to this media content; false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaContent.IsNull">
            <summary>
            <para>Returns true if this media content is null (uninitialized); false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaContent.CanonicalUrl">
            <summary>
            <para>Returns a QUrl that represents that canonical resource for this media content.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaContent.CanonicalRequest">
            <summary>
            <para>Returns a QNetworkRequest that represents that canonical resource for this media content.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaContent.CanonicalResource">
            <summary>
            <para>Returns a QMediaResource that represents that canonical resource for this media content.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaContent.Playlist">
            <summary>
            <para>Returns a playlist for this media content or 0 if this QMediaContent is not a playlist.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaGaplessPlaybackControl">
            <summary>
            <para>The QMediaGaplessPlaybackControl class provides access to the gapless playback related control of a QMediaService.</para>
            </summary>
            <remarks>
            <para>If a QMediaService supports gapless playback it will implement QMediaGaplessPlaybackControl. This control provides a means to set the next media or crossfade time for smooth transitions between tracks.</para>
            <para>The functionality provided by this control is exposed to application code through the QMediaPlayer class.</para>
            <para>The interface name of QMediaGaplessPlaybackControl is org.qt-project.qt.mediagaplessplaybackcontrol/5.0 as defined in QMediaGaplessPlaybackControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QMediaPlayer.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaGaplessPlaybackControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new gapless playback control with the given parent.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaGaplessPlaybackControl.CrossfadeTimeChanged">
            <summary>
            <para>Signals that the crossfadeTime has changed.</para>
            <para>See also crossfadeTime().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaGaplessPlaybackControl.NextMediaChanged">
            <summary>
            <para>Signals that the next media has changed (either explicitly via setNextMedia() or when the player clears the next media while advancing to it).</para>
            <para>See also nextMedia().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaGaplessPlaybackControl.AdvancedToNextMedia">
            <summary>
            <para>Signals when the player advances to the next media (the content of next media will be cleared).</para>
            <para>See also nextMedia().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaGaplessPlaybackControl.NextMedia">
            <summary>
            <para>Returns the content of the next media</para>
            <para>See also setNextMedia().</para>
            <para></para>
            <para>Sets the next media for smooth transition.</para>
            <para>See also nextMedia().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaGaplessPlaybackControl.CrossfadeTime">
            <summary>
            <para>Returns current crossfade time in seconds.</para>
            <para>See also setCrossfadeTime().</para>
            <para></para>
            <para>Sets the crossfadeTime in seconds for smooth transition.</para>
            <para>Positive value means how much time it will take for the next media to transit from silent to full volume and vice versa for current one. So both current and the next one will be playing during this period of time.</para>
            <para>A crossfade time of zero or negative will result in gapless playback (suitable for some continuous media).</para>
            <para>See also crossfadeTime().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaGaplessPlaybackControl.IsCrossfadeSupported">
            <summary>
            <para>Indicates whether crossfading is supported or not. If crossfading is not supported, setCrossfadeTime() will be ignored and crossfadeTime() will always return 0.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaNetworkAccessControl">
            <summary>
            <para>The QMediaNetworkAccessControl class allows the setting of the Network Access Point for media related activities.</para>
            </summary>
            <remarks>
            <para>The functionality provided by this control allows the setting of a Network Access Point.</para>
            <para>This control can be used to set a network access for various network related activities. The exact nature is dependent on the underlying usage by the supported QMediaObject.</para>
            </remarks>
        </member>
        <member name="E:QtMultimedia.QMediaNetworkAccessControl.ConfigurationChanged">
            <summary>
            <para>This signal is emitted when the current active network configuration changes to configuration.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaNetworkAccessControl.CurrentConfiguration">
            <summary>
            <para>Returns the current active configuration in use. A default constructed QNetworkConfigration is returned if no user supplied configuration are in use.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaPlayer">
            <summary>
            <para>The QMediaPlayer class allows the playing of a media source.</para>
            </summary>
            <remarks>
            <para>The QMediaPlayer class is a high level media playback class. It can be used to playback such content as songs, movies and internet radio. The content to playback is specified as a QMediaContent object, which can be thought of as a main or canonical URL with additional information attached. When provided with a QMediaContent playback may be able to commence.</para>
            <para></para>
            <para></para>
            <para>  player = new QMediaPlayer;</para>
            <para>  connect(player, SIGNAL(positionChanged(qint64)), this, SLOT(positionChanged(qint64)));</para>
            <para>  player-&gt;setMedia(QUrl::fromLocalFile(&quot;/Users/me/Music/coolsong.mp3&quot;));</para>
            <para>  player-&gt;setVolume(50);</para>
            <para>  player-&gt;play();</para>
            <para></para>
            <para></para>
            <para>QVideoWidget can be used with QMediaPlayer for video rendering and QMediaPlaylist for accessing playlist functionality.</para>
            <para></para>
            <para></para>
            <para>  playlist = new QMediaPlaylist;</para>
            <para>  playlist-&gt;addMedia(QUrl(&quot;http://example.com/movie1.mp4&quot;));</para>
            <para>  playlist-&gt;addMedia(QUrl(&quot;http://example.com/movie2.mp4&quot;));</para>
            <para>  playlist-&gt;addMedia(QUrl(&quot;http://example.com/movie3.mp4&quot;));</para>
            <para>  playlist-&gt;setCurrentIndex(1);</para>
            <para></para>
            <para>  player = new QMediaPlayer;</para>
            <para>  player-&gt;setPlaylist(playlist);</para>
            <para></para>
            <para>  videoWidget = new QVideoWidget;</para>
            <para>  player-&gt;setVideoOutput(videoWidget);</para>
            <para>  videoWidget-&gt;show();</para>
            <para></para>
            <para>  player-&gt;play();</para>
            <para></para>
            <para></para>
            <para>Since QMediaPlayer is a QMediaObject, you can use several of the QMediaObject functions for things like:</para>
            <para></para>
            <para>Accessing the currently playing media's metadata (QMediaObject::metaData() and predefined meta-data keys)</para>
            <para>Checking to see if the media playback service is currently available (QMediaObject::availability())</para>
            <para></para>
            <para></para>
            <para>See also QMediaObject, QMediaService, QVideoWidget, and QMediaPlaylist.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaPlayer.#ctor(QtCore.QObject,QtMultimedia.QMediaPlayer.Flag)">
            <summary>
            <para>Construct a QMediaPlayer instance parented to parent and with flags.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlayer.SetVideoOutput(QtMultimedia.QAbstractVideoSurface)">
            <summary>
            <para>Sets a video surface as the video output of a media player.</para>
            <para>If a video output has already been set on the media player the new surface will replace it.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlayer.Play">
            <summary>
            <para>Start or resume playing the current source.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlayer.Pause">
            <summary>
            <para>Pause playing the current source.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlayer.Stop">
            <summary>
            <para>Stop playing, and reset the play position to the beginning.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlayer.SetMedia(QtMultimedia.QMediaContent,QtCore.QIODevice)">
            <summary>
            <para>Sets the current media source.</para>
            <para>If a stream is supplied; media data will be read from it instead of resolving the media source. In this case the media source may still be used to resolve additional information about the media such as mime type.</para>
            <para>Setting the media to a null QMediaContent will cause the player to discard all information relating to the current media source and to cease all I/O operations related to that media.</para>
            <para>Note: This function returns immediately after recording the specified source of the media. It does not wait for the media to finish loading and does not check for errors. Listen for the mediaStatusChanged() and error() signals to be notified when the media is loaded and when an error occurs during loading.</para>
            <para>Note: Setter function for property media. </para>
            <para>See also media().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlayer.HasSupport(System.String,QtCore.QStringList,QtMultimedia.QMediaPlayer.Flag)">
            <summary>
            <para>Returns the level of support a media player has for a mimeType and a set of codecs.</para>
            <para>The flags argument allows additional requirements such as performance indicators to be specified.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlayer.SupportedMimeTypes(QtMultimedia.QMediaPlayer.Flag)">
            <summary>
            <para>Returns a list of MIME types supported by the media player.</para>
            <para>The flags argument causes the resultant list to be restricted to MIME types which can be supported given additional requirements, such as performance indicators.</para>
            <para>This function may not return useful results on some platforms, and support for a specific file of a given mime type is not guaranteed even if the mime type is in general supported. In addition, in some cases this function will need to load all available media plugins and query them for their support, which may take some time.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlayer.HasSupport(System.String)">
            <summary>
            <para>Returns the level of support a media player has for a mimeType and a set of codecs.</para>
            <para>The flags argument allows additional requirements such as performance indicators to be specified.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayer.MediaChanged">
            <summary>
            <para>Signals that the media source has been changed to media.</para>
            <para>Note: Notifier signal for property media. </para>
            <para>See also media() and currentMediaChanged().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayer.CurrentMediaChanged">
            <summary>
            <para>Signals that the current playing content has been changed to media.</para>
            <para>Note: Notifier signal for property currentMedia. </para>
            <para>See also currentMedia() and mediaChanged().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayer.StateChanged">
            <summary>
            <para>Signal the state of the Player object has changed.</para>
            <para>Note: Notifier signal for property state. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayer.MediaStatusChanged">
            <summary>
            <para>Signals that the status of the current media has changed.</para>
            <para>Note: Notifier signal for property mediaStatus. </para>
            <para>See also mediaStatus().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayer.DurationChanged">
            <summary>
            <para>Signal the duration of the content has changed to duration, expressed in milliseconds.</para>
            <para>Note: Notifier signal for property duration. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayer.PositionChanged">
            <summary>
            <para>Signal the position of the content has changed to position, expressed in milliseconds.</para>
            <para>Note: Notifier signal for property position. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayer.VolumeChanged">
            <summary>
            <para>Signal the playback volume has changed to volume.</para>
            <para>Note: Notifier signal for property volume. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayer.MutedChanged">
            <summary>
            <para>Signal the mute state has changed to muted.</para>
            <para>Note: Notifier signal for property muted. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayer.AudioAvailableChanged">
            <summary>
            <para>Signals the availability of audio content has changed to available.</para>
            <para>Note: Notifier signal for property audioAvailable. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayer.VideoAvailableChanged">
            <summary>
            <para>Signal the availability of visual content has changed to videoAvailable.</para>
            <para>Note: Notifier signal for property videoAvailable. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayer.BufferStatusChanged">
            <summary>
            <para>Signal the amount of the local buffer filled as a percentage by percentFilled.</para>
            <para>Note: Notifier signal for property bufferStatus. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayer.SeekableChanged">
            <summary>
            <para>Signals the seekable status of the player object has changed.</para>
            <para>Note: Notifier signal for property seekable. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayer.PlaybackRateChanged">
            <summary>
            <para>Signals the playbackRate has changed to rate.</para>
            <para>Note: Notifier signal for property playbackRate. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayer.AudioRoleChanged">
            <summary>
            <para>Signals that the audio role of the media player has changed.</para>
            <para>This function was introduced in  Qt 5.6.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayer.ErrorError">
            <summary>
            <para>Signals that an error condition has occurred.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(mediaPlayer, static_cast&lt;void(QMediaPlayer::*)(QMediaPlayer::Error)&gt;(&amp;QMediaPlayer::error),</para>
            <para>      [=](QMediaPlayer::Error error){ /* ... */ });</para>
            <para></para>
            <para></para>
            <para>See also errorString().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayer.NetworkConfigurationChanged">
            <summary>
            <para>Signal that the active in use network access point has been changed to configuration and all subsequent network access will use this configuration.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.AudioRole">
            <summary>
            <para>This property holds the role of the audio stream played by the media player.</para>
            <para>It can be set to specify the type of audio being played, allowing the system to make appropriate decisions when it comes to volume, routing or post-processing.</para>
            <para>The audio role must be set before calling setMedia().</para>
            <para>This property was introduced in  Qt 5.6.</para>
            <para>See also supportedAudioRoles().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.Position">
            <summary>
            <para>This property holds the playback position of the current media.</para>
            <para>The value is the current playback position, expressed in milliseconds since the beginning of the media. Periodically changes in the position will be indicated with the signal positionChanged(), the interval between updates can be set with QMediaObject's method setNotifyInterval().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.Volume">
            <summary>
            <para>This property holds the current playback volume.</para>
            <para>The playback volume is linear in effect and the value can range from 0 - 100, values outside this range will be clamped.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.Muted">
            <summary>
            <para>This property holds the muted state of the current media.</para>
            <para>The value will be true if the playback volume is muted; otherwise false.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.PlaybackRate">
            <summary>
            <para>This property holds the playback rate of the current media.</para>
            <para>This value is a multiplier applied to the media's standard play rate. By default this value is 1.0, indicating that the media is playing at the standard pace. Values higher than 1.0 will increase the rate of play. Values less than zero can be set and indicate the media will rewind at the multiplier of the standard pace.</para>
            <para>Not all playback services support change of the playback rate. It is framework defined as to the status and quality of audio and video while fast forwarding or rewinding.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.Playlist">
            <summary>
            <para>This property holds the media playlist being used by the player object.</para>
            <para>The player object will use the current playlist item for selection of the content to be played.</para>
            <para>By default this property is set to null.</para>
            <para>If the media playlist is used as a source, QMediaPlayer::currentMedia is updated with a current playlist item. The current source should be selected with QMediaPlaylist::setCurrentIndex(int) instead of QMediaPlayer::setMedia(), otherwise the current playlist will be discarded.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QMediaPlaylist *	playlist() const</para>
            <para> void 	setPlaylist(QMediaPlaylist *playlist)</para>
            <para></para>
            <para>See also QMediaContent.</para>
            <para></para>
            <para>This property holds the media playlist being used by the player object.</para>
            <para>The player object will use the current playlist item for selection of the content to be played.</para>
            <para>By default this property is set to null.</para>
            <para>If the media playlist is used as a source, QMediaPlayer::currentMedia is updated with a current playlist item. The current source should be selected with QMediaPlaylist::setCurrentIndex(int) instead of QMediaPlayer::setMedia(), otherwise the current playlist will be discarded.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QMediaPlaylist *	playlist() const</para>
            <para> void 	setPlaylist(QMediaPlaylist *playlist)</para>
            <para></para>
            <para>See also QMediaContent.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.Media">
            <summary>
            <para>This property holds the active media source being used by the player object.</para>
            <para>The player object will use the QMediaContent for selection of the content to be played.</para>
            <para>By default this property has a null QMediaContent.</para>
            <para>Setting this property to a null QMediaContent will cause the player to discard all information relating to the current media source and to cease all I/O operations related to that media.</para>
            <para>See also QMediaContent and currentMedia().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.Availability">
            <summary>
            <para>Reimplemented from QMediaObject::availability().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.MediaStream">
            <summary>
            <para>Returns the stream source of media data.</para>
            <para>This is only valid if a stream was passed to setMedia().</para>
            <para>See also setMedia().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.CurrentMedia">
            <summary>
            <para>This property holds the current active media content being played by the player object. This value could be different from QMediaPlayer::media property if a playlist is used. In this case currentMedia indicates the current media content being processed by the player, while QMediaPlayer::media property contains the original playlist.</para>
            <para>See also QMediaContent and media().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.state">
            <summary>
            <para>This property holds the media player's playback state.</para>
            <para>By default this property is QMediaPlayer::Stopped</para>
            <para>See also mediaStatus(), play(), pause(), and stop().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.mediaStatus">
            <summary>
            <para>This property holds the status of the current media stream.</para>
            <para>The stream status describes how the playback of the current stream is progressing.</para>
            <para>By default this property is QMediaPlayer::NoMedia</para>
            <para>See also state.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.Duration">
            <summary>
            <para>This property holds the duration of the current media.</para>
            <para>The value is the total playback time in milliseconds of the current media. The value may change across the life time of the QMediaPlayer object and may not be available when initial playback begins, connect to the durationChanged() signal to receive status notifications.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.IsAudioAvailable">
            <summary>
            <para>This property holds the audio availabilty status for the current media.</para>
            <para>As the life time of QMediaPlayer can be longer than the playback of one QMediaContent, this property may change over time, the audioAvailableChanged signal can be used to monitor it's status.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isAudioAvailable() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	audioAvailableChanged(bool available)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.IsVideoAvailable">
            <summary>
            <para>This property holds the video availability status for the current media.</para>
            <para>If available, the QVideoWidget class can be used to view the video. As the life time of QMediaPlayer can be longer than the playback of one QMediaContent, this property may change over time, the videoAvailableChanged signal can be used to monitor it's status.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isVideoAvailable() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	videoAvailableChanged(bool videoAvailable)</para>
            <para></para>
            <para>See also QVideoWidget and QMediaContent.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.BufferStatus">
            <summary>
            <para>This property holds the percentage of the temporary buffer filled before playback begins or resumes, from  (empty) to  (full).</para>
            <para>When the player object is buffering; this property holds the percentage of the temporary buffer that is filled. The buffer will need to reach 100% filled before playback can start or resume, at which time mediaStatus() will return BufferedMedia or BufferingMedia. If the value is anything lower than 100, mediaStatus() will return StalledMedia.</para>
            <para>See also mediaStatus().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.IsSeekable">
            <summary>
            <para>This property holds the seek-able status of the current media.</para>
            <para>If seeking is supported this property will be true; false otherwise. The status of this property may change across the life time of the QMediaPlayer object, use the seekableChanged signal to monitor changes.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isSeekable() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	seekableChanged(bool seekable)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.error">
            <summary>
            <para>This property holds a string describing the last error condition.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.ErrorString">
            <summary>
            <para>This property holds a string describing the last error condition.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayer.CurrentNetworkConfiguration">
            <summary>
            <para>Returns the current network access point in use. If a default contructed QNetworkConfiguration is returned this feature is not available or that none of the current supplied configurations are in use.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaPlayer.State">
            <summary>
            <para>Defines the current state of a media player.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.State.StoppedState">
            <summary>The media player is not playing content, playback will begin from the start of the current track.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.State.PlayingState">
            <summary>The media player is currently playing content.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.State.PausedState">
            <summary>The media player has paused playback, playback of the current track will resume from the position the player was paused at.</summary>
        </member>
        <member name="T:QtMultimedia.QMediaPlayer.MediaStatus">
            <summary>
            <para>Defines the status of a media player's current media.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.MediaStatus.UnknownMediaStatus">
            <summary>The status of the media cannot be determined.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.MediaStatus.NoMedia">
            <summary>The is no current media. The player is in the StoppedState.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.MediaStatus.LoadingMedia">
            <summary>The current media is being loaded. The player may be in any state.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.MediaStatus.LoadedMedia">
            <summary>The current media has been loaded. The player is in the StoppedState.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.MediaStatus.StalledMedia">
            <summary>Playback of the current media has stalled due to insufficient buffering or some other temporary interruption. The player is in the PlayingState or PausedState.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.MediaStatus.BufferingMedia">
            <summary>The player is buffering data but has enough data buffered for playback to continue for the immediate future. The player is in the PlayingState or PausedState.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.MediaStatus.BufferedMedia">
            <summary>The player has fully buffered the current media. The player is in the PlayingState or PausedState.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.MediaStatus.EndOfMedia">
            <summary>Playback has reached the end of the current media. The player is in the StoppedState.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.MediaStatus.InvalidMedia">
            <summary>The current media cannot be played. The player is in the StoppedState.</summary>
        </member>
        <member name="T:QtMultimedia.QMediaPlayer.Flag">
            <summary>
            <para>The Flags type is a typedef for QFlags&lt;Flag&gt;. It stores an OR combination of Flag values.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.Flag.LowLatency">
            <summary>The player is expected to be used with simple audio formats, but playback should start without significant delay. Such playback service can be used for beeps, ringtones, etc.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.Flag.StreamPlayback">
            <summary>The player is expected to play QIODevice based streams. If passed to QMediaPlayer constructor, the service supporting streams playback will be chosen.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.Flag.VideoSurface">
            <summary>The player is expected to be able to render to a QAbstractVideoSurface output.</summary>
        </member>
        <member name="T:QtMultimedia.QMediaPlayer.Error">
            <summary>
            <para>Defines a media player error condition.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.Error.NoError">
            <summary>No error has occurred.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.Error.ResourceError">
            <summary>A media resource couldn't be resolved.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.Error.FormatError">
            <summary>The format of a media resource isn't (fully) supported. Playback may still be possible, but without an audio or video component.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.Error.NetworkError">
            <summary>A network error occurred.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.Error.AccessDeniedError">
            <summary>There are not the appropriate permissions to play a media resource.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlayer.Error.ServiceMissingError">
            <summary>A valid playback service was not found, playback cannot proceed.</summary>
        </member>
        <member name="T:QtMultimedia.QMediaPlayerControl">
            <summary>
            <para>The QMediaPlayerControl class provides access to the media playing functionality of a QMediaService.</para>
            </summary>
            <remarks>
            <para>If a QMediaService can play media is will implement QMediaPlayerControl. This control provides a means to set the media to play, start, pause and stop playback, seek, and control the volume. It also provides feedback on the duration of the media, the current position, and buffering progress.</para>
            <para>The functionality provided by this control is exposed to application code through the QMediaPlayer class.</para>
            <para>The interface name of QMediaPlayerControl is org.qt-project.qt.mediaplayercontrol/5.0 as defined in QMediaPlayerControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QMediaPlayer.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaPlayerControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new media player control with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlayerControl.SetMedia(QtMultimedia.QMediaContent,QtCore.QIODevice)">
            <summary>
            <para>Sets the current media source. If a stream is supplied; data will be read from that instead of attempting to resolve the media source. The media source may still be used to supply media information such as mime type.</para>
            <para>Setting the media to a null QMediaContent will cause the control to discard all information relating to the current media source and to cease all I/O operations related to that media.</para>
            <para>Qt resource files are never passed as is. If the service supports QMediaServiceProviderHint::StreamPlayback, a stream is supplied, pointing to an opened QFile. Otherwise, the resource is copied into a temporary file and media contains the url to that file.</para>
            <para>See also media().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlayerControl.Play">
            <summary>
            <para>Starts playback of the current media.</para>
            <para>If successful the player control will immediately enter the playing state.</para>
            <para>See also state().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlayerControl.Pause">
            <summary>
            <para>Pauses playback of the current media.</para>
            <para>If sucessful the player control will immediately enter the paused state.</para>
            <para>See also state(), play(), and stop().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlayerControl.Stop">
            <summary>
            <para>Stops playback of the current media.</para>
            <para>If successful the player control will immediately enter the stopped state.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayerControl.MediaChanged">
            <summary>
            <para>Signals that the current media content has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayerControl.DurationChanged">
            <summary>
            <para>Signals that the duration of the current media has changed.</para>
            <para>See also duration().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayerControl.PositionChanged">
            <summary>
            <para>Signals the playback position has changed.</para>
            <para>This is only emitted in when there has been a discontinous change in the playback postion, such as a seek or the position being reset.</para>
            <para>See also position().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayerControl.StateChanged">
            <summary>
            <para>Signals that the state of a player control has changed.</para>
            <para>See also state().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayerControl.MediaStatusChanged">
            <summary>
            <para>Signals that the status of the current media has changed.</para>
            <para>See also mediaStatus().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayerControl.VolumeChanged">
            <summary>
            <para>Signals the audio volume of a player control has changed.</para>
            <para>See also volume().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayerControl.MutedChanged">
            <summary>
            <para>Signals a change in the mute status of a player control.</para>
            <para>See also isMuted().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayerControl.AudioAvailableChanged">
            <summary>
            <para>Signals that there has been a change in the availability of audio output.</para>
            <para>See also isAudioAvailable().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayerControl.VideoAvailableChanged">
            <summary>
            <para>Signals that there has been a change in the availability of video output.</para>
            <para>See also isVideoAvailable().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayerControl.BufferStatusChanged">
            <summary>
            <para>Signals that buffering progress has changed.</para>
            <para>See also bufferStatus().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayerControl.SeekableChanged">
            <summary>
            <para>Signals that the seekable state of a player control has changed.</para>
            <para>See also isSeekable().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayerControl.AvailablePlaybackRangesChanged">
            <summary>
            <para>Signals that the available media playback ranges have changed.</para>
            <para>See also QMediaPlayerControl::availablePlaybackRanges().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayerControl.PlaybackRateChanged">
            <summary>
            <para>Signal emitted when playback rate changes to rate.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlayerControl.Error">
            <summary>
            <para>Signals that an error has occurred. The errorString provides a more detailed explanation.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayerControl.Position">
            <summary>
            <para>Returns the current playback position in milliseconds.</para>
            <para>See also setPosition().</para>
            <para></para>
            <para>Sets the playback position of the current media. This will initiate a seek and it may take some time for playback to reach the position set.</para>
            <para>See also position().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayerControl.Volume">
            <summary>
            <para>Returns the audio volume of a player control.</para>
            <para>See also setVolume().</para>
            <para></para>
            <para>Sets the audio volume of a player control.</para>
            <para>See also volume().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayerControl.Muted">
            <summary>
            <para>Returns the mute state of a player control.</para>
            <para></para>
            <para>Sets the mute state of a player control.</para>
            <para>See also isMuted().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayerControl.PlaybackRate">
            <summary>
            <para>Returns the rate of playback.</para>
            <para>See also setPlaybackRate().</para>
            <para></para>
            <para>Sets the rate of playback.</para>
            <para>See also playbackRate().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayerControl.Media">
            <summary>
            <para>Returns the current media source.</para>
            <para>See also setMedia().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayerControl.State">
            <summary>
            <para>Returns the state of a player control.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayerControl.MediaStatus">
            <summary>
            <para>Returns the status of the current media.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayerControl.Duration">
            <summary>
            <para>Returns the duration of the current media in milliseconds.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayerControl.BufferStatus">
            <summary>
            <para>Returns the buffering progress of the current media. Progress is measured in the percentage of the buffer filled.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayerControl.IsAudioAvailable">
            <summary>
            <para>Identifies if there is audio output available for the current media.</para>
            <para>Returns true if audio output is available and false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayerControl.IsVideoAvailable">
            <summary>
            <para>Identifies if there is video output available for the current media.</para>
            <para>Returns true if video output is available and false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayerControl.IsSeekable">
            <summary>
            <para>Identifies if the current media is seekable.</para>
            <para>Returns true if it possible to seek within the current media, and false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayerControl.AvailablePlaybackRanges">
            <summary>
            <para>Returns a range of times in milliseconds that can be played back.</para>
            <para>Usually for local files this is a continuous interval equal to [0..duration()] or an empty time range if seeking is not supported, but for network sources it refers to the buffered parts of the media.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlayerControl.MediaStream">
            <summary>
            <para>Returns the current media stream. This is only a valid if a stream was passed to setMedia().</para>
            <para>See also setMedia().</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaRecorderControl">
            <summary>
            <para>The QMediaRecorderControl class provides access to the recording functionality of a QMediaService.</para>
            </summary>
            <remarks>
            <para>Generally you will use the QMediaRecorder class in application code - this class is mostly used when implementing a new QMediaService or if there is access to specific low level functionality not otherwise present in QMediaRecorder.</para>
            <para>If a QMediaService can record media it will implement QMediaRecorderControl. This control provides a means to set the output location, and record, pause and stop recording via the setState() method. It also provides feedback on the duration of the recording.</para>
            <para>The interface name of QMediaRecorderControl is org.qt-project.qt.mediarecordercontrol/5.0 as defined in QMediaRecorderControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QMediaRecorder.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaRecorderControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a media recorder control with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaRecorderControl.SetOutputLocation(QtCore.QUrl)">
            <summary>
            <para>Sets the output location and returns if this operation is successful. If file at the output location already exists, it should be overwritten.</para>
            <para>The location can be relative or empty; in this case the service should use the system specific place and file naming scheme.</para>
            <para>After recording has started, the backend should report the actual file location with actualLocationChanged() signal.</para>
            <para>See also outputLocation().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaRecorderControl.ApplySettings">
            <summary>
            <para>Commits the encoder settings and performs pre-initialization to reduce delays when recording is started.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorderControl.StateChanged">
            <summary>
            <para>Signals that the state of a media recorder has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorderControl.StatusChanged">
            <summary>
            <para>Signals that the status of a media recorder has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorderControl.DurationChanged">
            <summary>
            <para>Signals that the duration of the recorded media has changed.</para>
            <para>This only emitted when there is a discontinuous change in the duration such as being reset to 0.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorderControl.MutedChanged">
            <summary>
            <para>Signals that the muted state of a media recorder has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorderControl.VolumeChanged">
            <summary>
            <para>Signals that the audio gain value has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorderControl.ActualLocationChanged">
            <summary>
            <para>Signals that the actual media location has changed. This signal should be emitted at start of recording.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaRecorderControl.Error">
            <summary>
            <para>Signals that an error has occurred. The errorString describes the error.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorderControl.State">
            <summary>
            <para>Return the current recording state.</para>
            <para>See also setState().</para>
            <para></para>
            <para>Set the media recorder state.</para>
            <para>See also state().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorderControl.Muted">
            <summary>
            <para>Returns true if the recorder is muted, and false if it is not.</para>
            <para></para>
            <para>Sets the muted state of a media recorder.</para>
            <para>See also isMuted().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorderControl.Volume">
            <summary>
            <para>Returns the linear audio gain of media recorder.</para>
            <para>See also setVolume().</para>
            <para></para>
            <para>Sets the linear audio gain of a media recorder.</para>
            <para>See also volume().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorderControl.OutputLocation">
            <summary>
            <para>Returns the current output location being used.</para>
            <para>See also setOutputLocation().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorderControl.Status">
            <summary>
            <para>Return the current recording status.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaRecorderControl.Duration">
            <summary>
            <para>Return the current duration in milliseconds.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaStreamsControl">
            <summary>
            <para>The QMediaStreamsControl class provides a media stream selection control.</para>
            </summary>
            <remarks>
            <para>The QMediaStreamsControl class provides descriptions of the available media streams and allows individual streams to be activated and deactivated.</para>
            <para>The interface name of QMediaStreamsControl is org.qt-project.qt.mediastreamscontrol/5.0 as defined in QMediaStreamsControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl().</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaStreamsControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new media streams control with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaStreamsControl.streamType(System.Int32)">
            <summary>
            <para>Return the type of a media stream.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaStreamsControl.MetaData(System.Int32,System.String)">
            <summary>
            <para>Returns the meta-data value of key for a given stream.</para>
            <para>Useful metadata keys are QMediaMetaData::Title, QMediaMetaData::Description and QMediaMetaData::Language.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaStreamsControl.IsActive(System.Int32)">
            <summary>
            <para>Returns true if the media stream is active.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaStreamsControl.SetActive(System.Int32,System.Boolean)">
            <summary>
            <para>Sets the active state of a media stream.</para>
            <para>Setting the active state of a media stream to true will activate it. If any other stream of the same type was previously active it will be deactivated. Setting the active state fo a media stream to false will deactivate it.</para>
            <para>See also isActive().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaStreamsControl.StreamsChanged">
            <summary>
            <para>The signal is emitted when the available streams list is changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaStreamsControl.ActiveStreamsChanged">
            <summary>
            <para>The signal is emitted when the active streams list is changed.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaStreamsControl.StreamCount">
            <summary>
            <para>Returns the number of media streams.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaStreamsControl.StreamType">
            <summary>
            <para>Media stream type.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QMediaStreamsControl.StreamType.UnknownStream">
            <summary>The stream type is unknown.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaStreamsControl.StreamType.VideoStream">
            <summary>Video stream.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaStreamsControl.StreamType.AudioStream">
            <summary>Audio stream.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaStreamsControl.StreamType.SubPictureStream">
            <summary>Subpicture or teletext stream.</summary>
        </member>
        <member name="T:QtMultimedia.QMediaVideoProbeControl">
            <summary>
            <para>The QMediaVideoProbeControl class allows control over probing video frames in media objects.</para>
            </summary>
            <remarks>
            <para>QVideoProbe is the client facing class for probing video - this class is implemented by media backends to provide this functionality.</para>
            <para>The interface name of QMediaVideoProbeControl is org.qt-project.qt.mediavideoprobecontrol/5.0 as defined in QMediaVideoProbeControl_iid.</para>
            <para></para>
            <para>See also QVideoProbe, QMediaService::requestControl(), QMediaPlayer, and QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaVideoProbeControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Create a new media video probe control object with the given parent.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaVideoProbeControl.VideoFrameProbed">
            <summary>
            <para>This signal should be emitted when a video frame is processed in the media service.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaVideoProbeControl.Flush">
            <summary>
            <para>This signal should be emitted when it is required to release all frames.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMetaDataReaderControl">
            <summary>
            <para>The QMetaDataReaderControl class provides read access to the meta-data of a QMediaService's media.</para>
            </summary>
            <remarks>
            <para>If a QMediaService can provide read or write access to the meta-data of its current media it will implement QMetaDataReaderControl. This control provides functions for both retrieving and setting meta-data values. Meta-data may be addressed by the keys defined in the QMediaMetaData namespace.</para>
            <para>The functionality provided by this control is exposed to application code by the meta-data members of QMediaObject, and so meta-data access is potentially available in any of the media object classes. Any media service may implement QMetaDataReaderControl.</para>
            <para>The interface name of QMetaDataReaderControl is org.qt-project.qt.metadatareadercontrol/5.0 as defined in QMetaDataReaderControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QMediaObject.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMetaDataReaderControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Construct a QMetaDataReaderControl with parent. This class is meant as a base class for service specific meta data providers so this constructor is protected.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMetaDataReaderControl.MetaData(System.String)">
            <summary>
            <para>Returns the meta-data for the given key.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMetaDataReaderControl.MetaDataChanged">
            <summary>
            <para>Signal the changes of meta-data.</para>
            <para>If multiple meta-data elements are changed, metaDataChanged(const QString &amp;key, const QVariant &amp;value) signal is emitted for each of them with metaDataChanged() changed emitted once.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>metaDataChanged</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(metaDataReaderControl, static_cast&lt;void(QMetaDataReaderControl::*)()&gt;(&amp;QMetaDataReaderControl::metaDataChanged),</para>
            <para>      [=](){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMetaDataReaderControl.MetaDataChangedValue">
            <summary>
            <para>Signal the changes of one meta-data element value with the given key.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>metaDataChanged</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(metaDataReaderControl, static_cast&lt;void(QMetaDataReaderControl::*)(const QString &amp;, const QVariant &amp;)&gt;(&amp;QMetaDataReaderControl::metaDataChanged),</para>
            <para>      [=](const QString &amp;key, const QVariant &amp;value){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMetaDataReaderControl.MetaDataAvailableChanged">
            <summary>
            <para>Signal the availability of meta-data has changed, available will be true if the multimedia object has meta-data.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMetaDataReaderControl.IsMetaDataAvailable">
            <summary>
            <para>Identifies if meta-data is available from a media service.</para>
            <para>Returns true if the meta-data is available and false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMetaDataReaderControl.AvailableMetaData">
            <summary>
            <para>Returns a list of keys there is meta-data available for.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMetaDataWriterControl">
            <summary>
            <para>The QMetaDataWriterControl class provides write access to the meta-data of a QMediaService's media.</para>
            </summary>
            <remarks>
            <para>If a QMediaService can provide write access to the meta-data of its current media it will implement QMetaDataWriterControl. This control provides functions for both retrieving and setting meta-data values. Meta-data may be addressed by the keys defined in the QMediaMetaData namespace.</para>
            <para>The functionality provided by this control is exposed to application code by the meta-data members of QMediaObject, and so meta-data access is potentially available in any of the media object classes. Any media service may implement QMetaDataControl.</para>
            <para>The interface name of QMetaDataWriterControl is org.qt-project.qt.metadatawritercontrol/5.0 as defined in QMetaDataWriterControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QMediaObject.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMetaDataWriterControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Construct a QMetaDataWriterControl with parent. This class is meant as a base class for service specific meta data providers so this constructor is protected.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMetaDataWriterControl.MetaData(System.String)">
            <summary>
            <para>Returns the meta-data for the given key.</para>
            <para>See also setMetaData().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMetaDataWriterControl.SetMetaData(System.String,QtCore.QVariant)">
            <summary>
            <para>Sets the value of the meta-data element with the given key.</para>
            <para>See also metaData().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMetaDataWriterControl.MetaDataChanged">
            <summary>
            <para>Signal the changes of meta-data.</para>
            <para>If multiple meta-data elements are changed, metaDataChanged(const QString &amp;key, const QVariant &amp;value) signal is emitted for each of them with metaDataChanged() changed emitted once.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>metaDataChanged</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(metaDataWriterControl, static_cast&lt;void(QMetaDataWriterControl::*)()&gt;(&amp;QMetaDataWriterControl::metaDataChanged),</para>
            <para>      [=](){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMetaDataWriterControl.MetaDataChangedValue">
            <summary>
            <para>Signal the changes of one meta-data element value with the given key.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>metaDataChanged</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(metaDataWriterControl, static_cast&lt;void(QMetaDataWriterControl::*)(const QString &amp;, const QVariant &amp;)&gt;(&amp;QMetaDataWriterControl::metaDataChanged),</para>
            <para>      [=](const QString &amp;key, const QVariant &amp;value){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMetaDataWriterControl.WritableChanged">
            <summary>
            <para>Signal a change in the writable status of meta-data, writable will be true if meta-data elements can be added or adjusted.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMetaDataWriterControl.MetaDataAvailableChanged">
            <summary>
            <para>Signal the availability of meta-data has changed, available will be true if the multimedia object has meta-data.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMetaDataWriterControl.IsWritable">
            <summary>
            <para>Identifies if a media service's meta-data can be edited.</para>
            <para>Returns true if the meta-data is writable and false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMetaDataWriterControl.IsMetaDataAvailable">
            <summary>
            <para>Identifies if meta-data is available from a media service.</para>
            <para>Returns true if the meta-data is available and false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMetaDataWriterControl.AvailableMetaData">
            <summary>
            <para>Returns a list of keys there is meta-data available for.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QRadioData">
            <summary>
            <para>The QRadioData class provides interfaces to the RDS functionality of the system radio.</para>
            </summary>
            <remarks>
            <para>The radio data object will emit signals for any changes in radio data. You can enable or disable alternative frequency with setAlternativeFrequenciesEnabled().</para>
            <para>You can get a QRadioData instance fromt the radioData property from a QRadioTuner instance.</para>
            <para></para>
            <para></para>
            <para>  radio = new QRadioTuner;</para>
            <para>  radioData = radio-&gt;radioData();</para>
            <para></para>
            <para></para>
            <para>Alternatively, you can pass an instance of QRadioTuner to the constructor to QRadioData.</para>
            <para></para>
            <para>See also Radio Overview.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QRadioData.#ctor(QtMultimedia.QMediaObject,QtCore.QObject)">
            <summary>
            <para>Constructs a radio data based on a mediaObject and parent.</para>
            <para>The mediaObject should be an instance of QRadioTuner. It is preferable to use the radioData property on a QRadioTuner instance to get an instance of QRadioData.</para>
            <para>During construction, this class is bound to the mediaObject using the bind() method.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioData.SetMediaObject(QtMultimedia.QMediaObject)">
            <summary>
            <para>Reimplemented from QMediaBindableInterface::setMediaObject().</para>
            <para>See also mediaObject().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioData.StationIdChanged">
            <summary>
            <para>Signals that the Program Identification code has changed to stationId</para>
            <para>Note: Notifier signal for property stationId. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioData.ProgramTypeChanged">
            <summary>
            <para>Signals that the Program Type code has changed to programType</para>
            <para>Note: Notifier signal for property programType. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioData.ProgramTypeNameChanged">
            <summary>
            <para>Signals that the Program Type Name has changed to programTypeName</para>
            <para>Note: Notifier signal for property programTypeName. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioData.StationNameChanged">
            <summary>
            <para>Signals that the Program Service has changed to stationName</para>
            <para>Note: Notifier signal for property stationName. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioData.RadioTextChanged">
            <summary>
            <para>Signals that the Radio Text property has changed to radioText</para>
            <para>Note: Notifier signal for property radioText. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioData.AlternativeFrequenciesEnabledChanged">
            <summary>
            <para>Signals that automatically tuning to alternative frequencies has been enabled or disabled according to enabled.</para>
            <para>Note: Notifier signal for property alternativeFrequenciesEnabled. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioData.ErrorError">
            <summary>
            <para>Signals that an error occurred.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(radioData, static_cast&lt;void(QRadioData::*)(QRadioData::Error)&gt;(&amp;QRadioData::error),</para>
            <para>      [=](QRadioData::Error error){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioData.AlternativeFrequenciesEnabled">
            <summary>
            <para>This property holds is Alternative Frequency currently enabled.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioData.MediaObject">
            <summary>
            <para>Reimplemented from QMediaBindableInterface::mediaObject().</para>
            <para>See also setMediaObject().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioData.Availability">
            <summary>
            <para>Returns the availability of the radio data service.</para>
            <para>A long as there is a media service which provides radio functionality, then the availability will be that of the radio tuner.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioData.StationId">
            <summary>
            <para>This property holds current Program Identification.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioData.programType">
            <summary>
            <para>This property holds current Program Type.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioData.ProgramTypeName">
            <summary>
            <para>This property holds current Program Type Name.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioData.StationName">
            <summary>
            <para>This property holds current Program Service.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioData.RadioText">
            <summary>
            <para>This property holds current Radio Text.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioData.error">
            <summary>
            <para>Returns the error state of a radio data.</para>
            <para>See also errorString().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioData.ErrorString">
            <summary>
            <para>Returns a description of a radio data's error state.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QRadioData.Error">
            <summary>
            <para>Enumerates radio data error conditions.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QRadioData.Error.NoError">
            <summary>No errors have occurred.</summary>
        </member>
        <member name="F:QtMultimedia.QRadioData.Error.ResourceError">
            <summary>There is no radio service available.</summary>
        </member>
        <member name="F:QtMultimedia.QRadioData.Error.OpenError">
            <summary>Unable to open radio device.</summary>
        </member>
        <member name="F:QtMultimedia.QRadioData.Error.OutOfRangeError">
            <summary>An attempt to set a frequency or band that is not supported by radio device.</summary>
        </member>
        <member name="T:QtMultimedia.QRadioData.ProgramType">
            <summary>
            <para>This property holds the type of the currently playing program as transmitted by the radio station. The value can be any one of the values defined in the table below.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QRadioDataControl">
            <summary>
            <para>The QRadioDataControl class provides access to the RDS functionality of the radio in the QMediaService.</para>
            </summary>
            <remarks>
            <para>The functionality provided by this control is exposed to application code through the QRadioData class.</para>
            <para>The interface name of QRadioDataControl is org.qt-project.qt.radiodatacontrol/5.0 as defined in QRadioDataControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QRadioData.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QRadioDataControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a radio data control with the given parent.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioDataControl.StationIdChanged">
            <summary>
            <para>Signals that the Program Identification stationId has changed</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioDataControl.ProgramTypeChanged">
            <summary>
            <para>Signals that the Program Type programType has changed</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioDataControl.ProgramTypeNameChanged">
            <summary>
            <para>Signals that the Program Type Name programTypeName has changed</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioDataControl.StationNameChanged">
            <summary>
            <para>Signals that the Program Service stationName has changed</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioDataControl.RadioTextChanged">
            <summary>
            <para>Signals that the Radio Text radioText has changed</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioDataControl.AlternativeFrequenciesEnabledChanged">
            <summary>
            <para>Signals that the alternative frequencies setting has changed to the value of enabled.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioDataControl.ErrorError">
            <summary>
            <para>Signals that an error has occurred.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(radioDataControl, static_cast&lt;void(QRadioDataControl::*)(QRadioData::Error)&gt;(&amp;QRadioDataControl::error),</para>
            <para>      [=](QRadioData::Error error){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioDataControl.AlternativeFrequenciesEnabled">
            <summary>
            <para>Returns true if Alternative Frequency is currently enabled</para>
            <para></para>
            <para>Sets the Alternative Frequency to enabled</para>
            <para>See also isAlternativeFrequenciesEnabled().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioDataControl.StationId">
            <summary>
            <para>Returns the current Program Identification</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioDataControl.ProgramType">
            <summary>
            <para>Returns the current Program Type</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioDataControl.ProgramTypeName">
            <summary>
            <para>Returns the current Program Type Name</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioDataControl.StationName">
            <summary>
            <para>Returns the current Program Service</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioDataControl.RadioText">
            <summary>
            <para>Returns the current Radio Text</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioDataControl.Error">
            <summary>
            <para>Returns the error state of a radio data.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioDataControl.ErrorString">
            <summary>
            <para>Returns a string describing a radio data's error state.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QRadioTuner">
            <summary>
            <para>The QRadioTuner class provides an interface to the systems analog radio device.</para>
            </summary>
            <remarks>
            <para>You can control the systems analog radio device using this interface, for example:</para>
            <para></para>
            <para></para>
            <para>  radio = new QRadioTuner;</para>
            <para>  connect(radio, SIGNAL(frequencyChanged(int)), this, SLOT(freqChanged(int)));</para>
            <para>  if (radio-&gt;isBandSupported(QRadioTuner::FM)) {</para>
            <para>      radio-&gt;setBand(QRadioTuner::FM);</para>
            <para>      radio-&gt;setFrequency(yourRadioStationFrequency);</para>
            <para>      radio-&gt;setVolume(100);</para>
            <para>      radio-&gt;start();</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>The radio object will emit signals for any changes in state such as: bandChanged(), frequencyChanged(), stereoStatusChanged(), searchingChanged(), signalStrengthChanged(), volumeChanged(), mutedChanged().</para>
            <para>You can change between the frequency bands using setBand() however it is recommended that you check to make sure the band is available first using isBandSupported().</para>
            <para></para>
            <para>See also QRadioData and Radio Overview.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QRadioTuner.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a radio tuner based on a media service allocated by the default media service provider.</para>
            <para>The parent is passed to QMediaObject.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioTuner.IsBandSupported(QtMultimedia.QRadioTuner.Band)">
            <summary>
            <para>Identifies if a frequency band is supported by a radio tuner.</para>
            <para>Returns true if the band is supported, and false if it is not.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioTuner.FrequencyStep(QtMultimedia.QRadioTuner.Band)">
            <summary>
            <para>Returns the number of Hertz to increment the frequency by when stepping through frequencies within a given band.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioTuner.SearchForward">
            <summary>
            <para>Starts a forward scan for a signal, starting from the current frequency.</para>
            <para>See also searchBackward(), cancelSearch(), and searching.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioTuner.SearchBackward">
            <summary>
            <para>Starts a backwards scan for a signal, starting from the current frequency.</para>
            <para>See also searchForward(), cancelSearch(), and searching.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioTuner.SearchAllStations(QtMultimedia.QRadioTuner.SearchMode)">
            <summary>
            <para>Search all stations in current band</para>
            <para>Emits QRadioTuner::stationFound(int, QString) for every found station. After searching is completed, QRadioTuner::searchingChanged(bool) is emitted (false). If searchMode is set to SearchGetStationId, searching waits for station id (PI) on each frequency.</para>
            <para>See also searchForward(), searchBackward(), and searching.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioTuner.CancelSearch">
            <summary>
            <para>Stops scanning for a signal.</para>
            <para>See also searchForward(), searchBackward(), and searching.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioTuner.Start">
            <summary>
            <para>Activate the radio device.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioTuner.Stop">
            <summary>
            <para>Deactivate the radio device.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTuner.StateChanged">
            <summary>
            <para>This signal is emitted when the state changes to state.</para>
            <para>Note: Notifier signal for property state. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTuner.BandChanged">
            <summary>
            <para>Signals a radio tuner's band has changed.</para>
            <para>Note: Notifier signal for property band. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTuner.FrequencyChanged">
            <summary>
            <para>Signals that the frequency a radio tuner is tuned to has changed.</para>
            <para>Note: Notifier signal for property frequency. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTuner.StereoStatusChanged">
            <summary>
            <para>Signals that the stereo state of a radio tuner has changed.</para>
            <para>Note: Notifier signal for property stereo. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTuner.SearchingChanged">
            <summary>
            <para>Signals that the searching state of a radio tuner has changed.</para>
            <para>Note: Notifier signal for property searching. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTuner.SignalStrengthChanged">
            <summary>
            <para>Signals that the strength of the signal received by a radio tuner has changed.</para>
            <para>Note: Notifier signal for property signalStrength. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTuner.VolumeChanged">
            <summary>
            <para>Signals that the volume of a radio tuner's audio output has changed.</para>
            <para>Note: Notifier signal for property volume. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTuner.MutedChanged">
            <summary>
            <para>Signals that the muted state of a radio tuner's audio output has changed.</para>
            <para>Note: Notifier signal for property muted. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTuner.StationFound">
            <summary>
            <para>Signals that a station was found in frequency with stationId Program Identification code.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTuner.AntennaConnectedChanged">
            <summary>
            <para>This property holds whether there is an antenna connected.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isAntennaConnected() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	antennaConnectedChanged(bool connectionStatus)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTuner.ErrorError">
            <summary>
            <para>Signals that an error occurred.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(radioTuner, static_cast&lt;void(QRadioTuner::*)(QRadioTuner::Error)&gt;(&amp;QRadioTuner::error),</para>
            <para>      [=](QRadioTuner::Error error){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTuner.stereoMode">
            <summary>
            <para>This property holds the stereo mode of a radio tuner.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTuner.band">
            <summary>
            <para>This property holds the frequency band a radio tuner is tuned to.</para>
            <para>See also QRadioTuner::Band.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTuner.Frequency">
            <summary>
            <para>This property holds the frequency in Hertz a radio tuner is tuned to.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTuner.Volume">
            <summary>
            <para>This property holds the volume of a radio tuner's audio output as a percentage.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTuner.Muted">
            <summary>
            <para>This property holds whether a radio tuner's audio output is muted.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTuner.Availability">
            <summary>
            <para>Reimplemented from QMediaObject::availability().</para>
            <para>Returns the availability of the radio tuner.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTuner.state">
            <summary>
            <para>Return the current radio tuner state.</para>
            <para>See also QRadioTuner::State.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTuner.IsStereo">
            <summary>
            <para>This property holds whether a radio tuner is receiving a stereo signal.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isStereo() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	stereoStatusChanged(bool stereo)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTuner.SignalStrength">
            <summary>
            <para>This property holds the strength of the current radio signal as a percentage.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTuner.IsSearching">
            <summary>
            <para>This property holds whether a radio tuner is currently scanning for a signal.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isSearching() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	searchingChanged(bool searching)</para>
            <para></para>
            <para>See also searchForward(), searchBackward(), and cancelSearch().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTuner.IsAntennaConnected">
            <summary>
            <para>This property holds whether there is an antenna connected.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isAntennaConnected() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	antennaConnectedChanged(bool connectionStatus)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTuner.error">
            <summary>
            <para>Returns the error state of a radio tuner.</para>
            <para>See also errorString().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTuner.ErrorString">
            <summary>
            <para>Returns a description of a radio tuner's error state.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTuner.RadioData">
            <summary>
            <para>This property holds an instance of QRadioData.</para>
            <para>The instance of QRadioData is already bound to this instance of QRadioTuner.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QRadioData *	radioData() const</para>
            <para></para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QRadioTuner.State">
            <summary>
            <para>Enumerates radio tuner states.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QRadioTuner.State.ActiveState">
            <summary>The tuner is started and active.</summary>
        </member>
        <member name="F:QtMultimedia.QRadioTuner.State.StoppedState">
            <summary>The tuner device is stopped.</summary>
        </member>
        <member name="T:QtMultimedia.QRadioTuner.Band">
            <summary>
            <para>Enumerates radio frequency bands.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QRadioTuner.Band.AM">
            <summary>520 to 1610 kHz, 9 or 10kHz channel spacing, extended 1610 to 1710 kHz</summary>
        </member>
        <member name="F:QtMultimedia.QRadioTuner.Band.FM">
            <summary>87.5 to 108.0 MHz, except Japan 76-90 MHz</summary>
        </member>
        <member name="F:QtMultimedia.QRadioTuner.Band.SW">
            <summary>1.711 to 30.0 MHz, divided into 15 bands. 5kHz channel spacing</summary>
        </member>
        <member name="F:QtMultimedia.QRadioTuner.Band.LW">
            <summary>148.5 to 283.5 kHz, 9kHz channel spacing (Europe, Africa, Asia)</summary>
        </member>
        <member name="F:QtMultimedia.QRadioTuner.Band.FM2">
            <summary>range not defined, used when area supports more than one FM range.</summary>
        </member>
        <member name="T:QtMultimedia.QRadioTuner.Error">
            <summary>
            <para>Enumerates radio tuner error conditions.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QRadioTuner.Error.NoError">
            <summary>No errors have occurred.</summary>
        </member>
        <member name="F:QtMultimedia.QRadioTuner.Error.ResourceError">
            <summary>There is no radio service available.</summary>
        </member>
        <member name="F:QtMultimedia.QRadioTuner.Error.OpenError">
            <summary>Unable to open radio device.</summary>
        </member>
        <member name="F:QtMultimedia.QRadioTuner.Error.OutOfRangeError">
            <summary>An attempt to set a frequency or band that is not supported by radio device.</summary>
        </member>
        <member name="T:QtMultimedia.QRadioTuner.StereoMode">
            <summary>
            <para>Enumerates radio tuner policy for receiving stereo signals.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QRadioTuner.StereoMode.ForceStereo">
            <summary>Provide stereo mode, converting if required.</summary>
        </member>
        <member name="F:QtMultimedia.QRadioTuner.StereoMode.ForceMono">
            <summary>Provide mono mode, converting if required.</summary>
        </member>
        <member name="F:QtMultimedia.QRadioTuner.StereoMode.Auto">
            <summary>Uses the stereo mode matching the station.</summary>
        </member>
        <member name="T:QtMultimedia.QRadioTuner.SearchMode">
            <summary>
            <para>Enumerates how the radio tuner should search for stations.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QRadioTuner.SearchMode.SearchFast">
            <summary>Use only signal strength when searching.</summary>
        </member>
        <member name="F:QtMultimedia.QRadioTuner.SearchMode.SearchGetStationId">
            <summary>After finding a strong signal, wait for the RDS station id (PI) before continuing.</summary>
        </member>
        <member name="T:QtMultimedia.QRadioTunerControl">
            <summary>
            <para>The QRadioTunerControl class provides access to the radio tuning functionality of a QMediaService.</para>
            </summary>
            <remarks>
            <para>If a QMediaService can tune an analog radio device it will implement QRadioTunerControl. This control provides a means to tune a radio device to a specific frequency as well as search forwards and backwards for a signal.</para>
            <para>The functionality provided by this control is exposed to application code through the QRadioTuner class.</para>
            <para>The interface name of QRadioTunerControl is org.qt-project.qt.radiotunercontrol/5.0 as defined in QRadioTunerControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QRadioTuner.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QRadioTunerControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a radio tuner control with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioTunerControl.IsBandSupported(QtMultimedia.QRadioTuner.Band)">
            <summary>
            <para>Identifies if a frequency band is supported.</para>
            <para>Returns true if the band is supported, and false if it is not.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioTunerControl.FrequencyStep(QtMultimedia.QRadioTuner.Band)">
            <summary>
            <para>Returns the number of Hertz to increment the frequency by when stepping through frequencies within a given band.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioTunerControl.SearchForward">
            <summary>
            <para>Starts a forward scan for a signal, starting from the current frequency().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioTunerControl.SearchBackward">
            <summary>
            <para>Starts a backwards scan for a signal, starting from the current frequency().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioTunerControl.SearchAllStations(QtMultimedia.QRadioTuner.SearchMode)">
            <summary>
            <para>Starts a scan through the whole frequency band searching all stations with a specific searchMode.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioTunerControl.CancelSearch">
            <summary>
            <para>Stops scanning for a signal.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioTunerControl.Start">
            <summary>
            <para>Activate the radio device.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QRadioTunerControl.Stop">
            <summary>
            <para>Deactivate the radio device.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTunerControl.StateChanged">
            <summary>
            <para>Signals that the state of a radio tuner has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTunerControl.BandChanged">
            <summary>
            <para>Signals that the frequency band a radio tuner is tuned to has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTunerControl.FrequencyChanged">
            <summary>
            <para>Signals that the frequency a radio tuner is tuned to has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTunerControl.StereoStatusChanged">
            <summary>
            <para>Signals that the stereo state of a radio tuner has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTunerControl.SearchingChanged">
            <summary>
            <para>Signals that the searching state of a radio tuner has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTunerControl.SignalStrengthChanged">
            <summary>
            <para>Signals that the percentage strength of the signal received by a radio tuner has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTunerControl.VolumeChanged">
            <summary>
            <para>Signals that the percentage volume of radio tuner's audio output has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTunerControl.MutedChanged">
            <summary>
            <para>Signals that the muted state of a radio tuner's audio output has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTunerControl.ErrorError">
            <summary>
            <para>Signals that an error has occurred.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(radioTunerControl, static_cast&lt;void(QRadioTunerControl::*)(QRadioTuner::Error)&gt;(&amp;QRadioTunerControl::error),</para>
            <para>      [=](QRadioTuner::Error error){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTunerControl.StationFound">
            <summary>
            <para>Signals that new station with frequency and stationId was found when scanning</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QRadioTunerControl.AntennaConnectedChanged">
            <summary>
            <para>Signals that the antenna has either been connected or disconnected as reflected with the connectionStatus.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTunerControl.Band">
            <summary>
            <para>Returns the frequency band a radio tuner is tuned to.</para>
            <para>See also setBand().</para>
            <para></para>
            <para>Sets the frequecy band a radio tuner is tuned to.</para>
            <para>Changing the frequency band will reset the frequency to the minimum frequency of the new band.</para>
            <para>See also band().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTunerControl.Frequency">
            <summary>
            <para>Returns the frequency a radio tuner is tuned to.</para>
            <para>See also setFrequency().</para>
            <para></para>
            <para>Sets the frequency a radio tuner is tuned to.</para>
            <para>See also frequency().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTunerControl.StereoMode">
            <summary>
            <para>Returns a radio tuner's stereo mode.</para>
            <para>See also setStereoMode() and QRadioTuner::StereoMode.</para>
            <para></para>
            <para>Sets a radio tuner's stereo mode.</para>
            <para>See also stereoMode() and QRadioTuner::StereoMode.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTunerControl.Volume">
            <summary>
            <para>Returns the volume of a radio tuner's audio output as a percentage.</para>
            <para>See also setVolume().</para>
            <para></para>
            <para>Sets the percentage volume of a radio tuner's audio output.</para>
            <para>See also volume().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTunerControl.Muted">
            <summary>
            <para>Identifies if a radio tuner's audio output is muted.</para>
            <para>Returns true if the audio is muted, and false if it is not.</para>
            <para></para>
            <para>Sets the muted state of a radio tuner's audio output.</para>
            <para>See also isMuted().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTunerControl.State">
            <summary>
            <para>Returns the current radio tuner state.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTunerControl.IsStereo">
            <summary>
            <para>Identifies if a radio tuner is receiving a stereo signal.</para>
            <para>Returns true if the tuner is receiving a stereo signal, and false if it is not.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTunerControl.SignalStrength">
            <summary>
            <para>Return a radio tuner's current signal strength as a percentage.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTunerControl.IsSearching">
            <summary>
            <para>Identifies if a radio tuner is currently scanning for signal.</para>
            <para>Returns true if the tuner is scanning, and false if it is not.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTunerControl.IsAntennaConnected">
            <summary>
            <para>Identifies if there is an antenna connected to the device.</para>
            <para>Returns true if there is a connected antenna, and false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTunerControl.Error">
            <summary>
            <para>Returns the error state of a radio tuner.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QRadioTunerControl.ErrorString">
            <summary>
            <para>Returns a string describing a radio tuner's error state.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QVideoDeviceSelectorControl">
            <summary>
            <para>The QVideoDeviceSelectorControl class provides an video device selector media control.</para>
            </summary>
            <remarks>
            <para>The QVideoDeviceSelectorControl class provides descriptions of the video devices available on a system and allows one to be selected as the endpoint of a media service.</para>
            <para>The interface name of QVideoDeviceSelectorControl is org.qt-project.qt.videodeviceselectorcontrol/5.0 as defined in QVideoDeviceSelectorControl_iid.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QVideoDeviceSelectorControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a video device selector control with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoDeviceSelectorControl.DeviceName(System.Int32)">
            <summary>
            <para>Returns the name of the video device at index.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoDeviceSelectorControl.DeviceDescription(System.Int32)">
            <summary>
            <para>Returns a description of the video device at index.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QVideoDeviceSelectorControl.SelectedDeviceChanged">
            <summary>
            <para>Signals that the selected video device index has changed.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>selectedDeviceChanged</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(videoDeviceSelectorControl, static_cast&lt;void(QVideoDeviceSelectorControl::*)(int)&gt;(&amp;QVideoDeviceSelectorControl::selectedDeviceChanged),</para>
            <para>      [=](int index){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QVideoDeviceSelectorControl.SelectedDeviceChangedName">
            <summary>
            <para>Signals that the selected video device name has changed.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>selectedDeviceChanged</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(videoDeviceSelectorControl, static_cast&lt;void(QVideoDeviceSelectorControl::*)(const QString &amp;)&gt;(&amp;QVideoDeviceSelectorControl::selectedDeviceChanged),</para>
            <para>      [=](const QString &amp;name){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QVideoDeviceSelectorControl.DevicesChanged">
            <summary>
            <para>Signals that the list of available video devices has changed.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoDeviceSelectorControl.SelectedDevice">
            <summary>
            <para>Returns the index of the selected video device.</para>
            <para>See also setSelectedDevice().</para>
            <para></para>
            <para>Sets the selected video device index.</para>
            <para>See also selectedDevice().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoDeviceSelectorControl.DeviceCount">
            <summary>
            <para>Returns the number of available video devices;</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoDeviceSelectorControl.DefaultDevice">
            <summary>
            <para>Returns the index of the default video device.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QVideoEncoderSettingsControl">
            <summary>
            <para>The QVideoEncoderSettingsControl class provides access to the settings of a media service that performs video encoding.</para>
            </summary>
            <remarks>
            <para>If a QMediaService supports encoding video data it will implement QVideoEncoderSettingsControl. This control provides information about the limits of restricted video encoder options and allows the selection of a set of video encoder settings as specified in a QVideoEncoderSettings object.</para>
            <para>The functionality provided by this control is exposed to application code through the QMediaRecorder class.</para>
            <para>The interface name of QVideoEncoderSettingsControl is org.qt-project.qt.videoencodersettingscontrol/5.0 as defined in QVideoEncoderSettingsControl_iid.</para>
            <para></para>
            <para>See also QMediaRecorder, QVideoEncoderSettings, and QMediaService::requestControl().</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QVideoEncoderSettingsControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Create a new video encoder settings control object with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoEncoderSettingsControl.VideoCodecDescription(System.String)">
            <summary>
            <para>Returns a description of a video codec.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoEncoderSettingsControl.VideoSettings">
            <summary>
            <para>Returns the video encoder settings.</para>
            <para>The returned value may be different tha passed to QVideoEncoderSettingsControl::setVideoSettings() if the settings contains the default or undefined parameters. In this case if the undefined parameters are already resolved, they should be returned.</para>
            <para>See also setVideoSettings().</para>
            <para></para>
            <para>Sets the selected video encoder settings.</para>
            <para>See also videoSettings().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoEncoderSettingsControl.SupportedVideoCodecs">
            <summary>
            <para>Returns the list of supported video codecs.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QVideoRendererControl">
            <summary>
            <para>The QVideoRendererControl class provides a media control for rendering video to a QAbstractVideoSurface.</para>
            </summary>
            <remarks>
            <para>Using the surface() property of QVideoRendererControl a QAbstractVideoSurface may be set as the video render target of a QMediaService.</para>
            <para></para>
            <para></para>
            <para>  QVideoRendererControl *rendererControl = mediaService-&gt;requestControl&lt;QVideoRendererControl *&gt;();</para>
            <para>  rendererControl-&gt;setSurface(myVideoSurface);</para>
            <para></para>
            <para></para>
            <para>QVideoRendererControl is one of a number of possible video output controls.</para>
            <para>The interface name of QVideoRendererControl is org.qt-project.qt.videorenderercontrol/5.0 as defined in QVideoRendererControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QVideoWidget.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QVideoRendererControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new video renderer media end point with the given parent.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoRendererControl.Surface">
            <summary>
            <para>Returns the surface a video producer renders to.</para>
            <para>See also setSurface().</para>
            <para></para>
            <para>Sets the surface a video producer renders to.</para>
            <para>See also surface().</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QVideoWindowControl">
            <summary>
            <para>The QVideoWindowControl class provides a media control for rendering video to a window.</para>
            </summary>
            <remarks>
            <para>The winId() property QVideoWindowControl allows a platform specific window ID to be set as the video render target of a QMediaService. The displayRect() property is used to set the region of the window the video should be rendered to, and the aspectRatioMode() property indicates how the video should be scaled to fit the displayRect().</para>
            <para></para>
            <para></para>
            <para>  QVideoWindowControl *windowControl = mediaService-&gt;requestControl&lt;QVideoWindowControl *&gt;();</para>
            <para>  windowControl-&gt;setWinId(widget-&gt;winId());</para>
            <para>  windowControl-&gt;setDisplayRect(widget-&gt;rect());</para>
            <para>  windowControl-&gt;setAspectRatioMode(Qt::KeepAspectRatio);</para>
            <para></para>
            <para></para>
            <para>QVideoWindowControl is one of a number of possible video output controls.</para>
            <para>The interface name of QVideoWindowControl is org.qt-project.qt.videowindowcontrol/5.0 as defined in QVideoWindowControl_iid.</para>
            <para></para>
            <para>See also QMediaService::requestControl() and QVideoWidget.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QVideoWindowControl.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new video window control with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoWindowControl.Repaint">
            <summary>
            <para>Repaints the last frame.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QVideoWindowControl.FullScreenChanged">
            <summary>
            <para>Signals that the fullScreen state of a video overlay has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QVideoWindowControl.BrightnessChanged">
            <summary>
            <para>Signals that a video overlay's brightness adjustment has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QVideoWindowControl.ContrastChanged">
            <summary>
            <para>Signals that a video overlay's contrast adjustment has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QVideoWindowControl.HueChanged">
            <summary>
            <para>Signals that a video overlay's hue adjustment has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QVideoWindowControl.SaturationChanged">
            <summary>
            <para>Signals that a video overlay's saturation adjustment has changed.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QVideoWindowControl.NativeSizeChanged">
            <summary>
            <para>Signals that the native dimensions of the video have changed.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoWindowControl.WinId">
            <summary>
            <para>Returns the ID of the window a video overlay end point renders to.</para>
            <para>See also setWinId().</para>
            <para></para>
            <para>Sets the id of the window a video overlay end point renders to.</para>
            <para>See also winId().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoWindowControl.DisplayRect">
            <summary>
            <para>Returns the sub-rect of a window where video is displayed.</para>
            <para>See also setDisplayRect().</para>
            <para></para>
            <para>Sets the sub-rect of a window where video is displayed.</para>
            <para>See also displayRect().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoWindowControl.FullScreen">
            <summary>
            <para>Identifies if a video overlay is a fullScreen overlay.</para>
            <para>Returns true if the video overlay is fullScreen, and false otherwise.</para>
            <para></para>
            <para>Sets whether a video overlay is a fullScreen overlay.</para>
            <para>See also isFullScreen().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoWindowControl.AspectRatioMode">
            <summary>
            <para>Returns how video is scaled to fit the display region with respect to its aspect ratio.</para>
            <para>See also setAspectRatioMode().</para>
            <para></para>
            <para>Sets the aspect ratio mode which determines how video is scaled to the fit the display region with respect to its aspect ratio.</para>
            <para>See also aspectRatioMode().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoWindowControl.Brightness">
            <summary>
            <para>Returns the brightness adjustment applied to a video overlay.</para>
            <para>Valid brightness values range between -100 and 100, the default is 0.</para>
            <para>See also setBrightness().</para>
            <para></para>
            <para>Sets a brightness adjustment for a video overlay.</para>
            <para>Valid brightness values range between -100 and 100, the default is 0.</para>
            <para>See also brightness().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoWindowControl.Contrast">
            <summary>
            <para>Returns the contrast adjustment applied to a video overlay.</para>
            <para>Valid contrast values range between -100 and 100, the default is 0.</para>
            <para>See also setContrast().</para>
            <para></para>
            <para>Sets the contrast adjustment for a video overlay.</para>
            <para>Valid contrast values range between -100 and 100, the default is 0.</para>
            <para>See also contrast().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoWindowControl.Hue">
            <summary>
            <para>Returns the hue adjustment applied to a video overlay.</para>
            <para>Value hue values range between -100 and 100, the default is 0.</para>
            <para>See also setHue().</para>
            <para></para>
            <para>Sets a hue adjustment for a video overlay.</para>
            <para>Valid hue values range between -100 and 100, the default is 0.</para>
            <para>See also hue().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoWindowControl.Saturation">
            <summary>
            <para>Returns the saturation adjustment applied to a video overlay.</para>
            <para>Value saturation values range between -100 and 100, the default is 0.</para>
            <para>See also setSaturation().</para>
            <para></para>
            <para>Sets a saturation adjustment for a video overlay.</para>
            <para>Valid saturation values range between -100 and 100, the default is 0.</para>
            <para>See also saturation().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoWindowControl.NativeSize">
            <summary>
            <para>Returns a suggested size for the video display based on the resolution and aspect ratio of the video.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaPlaylist">
            <summary>
            <para>The QMediaPlaylist class provides a list of media content to play.</para>
            </summary>
            <remarks>
            <para>QMediaPlaylist is intended to be used with other media objects, like QMediaPlayer.</para>
            <para>QMediaPlaylist allows to access the service intrinsic playlist functionality if available, otherwise it provides the local memory playlist implementation.</para>
            <para></para>
            <para></para>
            <para>  playlist = new QMediaPlaylist;</para>
            <para>  playlist-&gt;addMedia(QUrl(&quot;http://example.com/movie1.mp4&quot;));</para>
            <para>  playlist-&gt;addMedia(QUrl(&quot;http://example.com/movie2.mp4&quot;));</para>
            <para>  playlist-&gt;addMedia(QUrl(&quot;http://example.com/movie3.mp4&quot;));</para>
            <para>  playlist-&gt;setCurrentIndex(1);</para>
            <para></para>
            <para>  player = new QMediaPlayer;</para>
            <para>  player-&gt;setPlaylist(playlist);</para>
            <para></para>
            <para>  videoWidget = new QVideoWidget;</para>
            <para>  player-&gt;setVideoOutput(videoWidget);</para>
            <para>  videoWidget-&gt;show();</para>
            <para></para>
            <para>  player-&gt;play();</para>
            <para></para>
            <para></para>
            <para>Depending on playlist source implementation, most of the playlist mutating operations can be asynchronous.</para>
            <para></para>
            <para>See also QMediaContent.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.#ctor(QtCore.QObject)">
            <summary>
            <para>Create a new playlist object with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.NextIndex(System.Int32)">
            <summary>
            <para>Returns the index of the item, which would be current after calling next() steps times.</para>
            <para>Returned value depends on the size of playlist, current position and playback mode.</para>
            <para>See also QMediaPlaylist::playbackMode() and previousIndex().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.PreviousIndex(System.Int32)">
            <summary>
            <para>Returns the index of the item, which would be current after calling previous() steps times.</para>
            <para>See also QMediaPlaylist::playbackMode() and nextIndex().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.Media(System.Int32)">
            <summary>
            <para>Returns the media content at index in the playlist.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.AddMedia(QtMultimedia.QMediaContent)">
            <summary>
            <para>Append the media content to the playlist.</para>
            <para>Returns true if the operation is successful, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.InsertMedia(System.Int32,QtMultimedia.QMediaContent)">
            <summary>
            <para>Insert the media content to the playlist at position pos.</para>
            <para>Returns true if the operation is successful, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.MoveMedia(System.Int32,System.Int32)">
            <summary>
            <para>Move the item from position from to position to.</para>
            <para>Returns true if the operation is successful, otherwise false.</para>
            <para>This function was introduced in  Qt 5.7.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.RemoveMedia(System.Int32)">
            <summary>
            <para>Remove the item from the playlist at position pos.</para>
            <para>Returns true if the operation is successful, otherwise return false.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.RemoveMedia(System.Int32,System.Int32)">
            <summary>
            <para>Remove items in the playlist from start to end inclusive.</para>
            <para>Returns true if the operation is successful, otherwise return false.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.Load(QtNetwork.QNetworkRequest,System.String)">
            <summary>
            <para>Load playlist using network request. If format is specified, it is used, otherwise format is guessed from playlist name and data.</para>
            <para>New items are appended to playlist.</para>
            <para>QMediaPlaylist::loaded() signal is emitted if playlist was loaded successfully, otherwise the playlist emits loadFailed().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.Load(QtCore.QUrl,System.String)">
            <summary>
            <para>Load playlist from location. If format is specified, it is used, otherwise format is guessed from location name and data.</para>
            <para>New items are appended to playlist.</para>
            <para>QMediaPlaylist::loaded() signal is emitted if playlist was loaded successfully, otherwise the playlist emits loadFailed().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.Load(QtCore.QIODevice,System.String)">
            <summary>
            <para>Load playlist from QIODevice device. If format is specified, it is used, otherwise format is guessed from device data.</para>
            <para>New items are appended to playlist.</para>
            <para>QMediaPlaylist::loaded() signal is emitted if playlist was loaded successfully, otherwise the playlist emits loadFailed().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.Save(QtCore.QUrl,System.String)">
            <summary>
            <para>Save playlist to location. If format is specified, it is used, otherwise format is guessed from location name.</para>
            <para>Returns true if playlist was saved successfully, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.Save(QtCore.QIODevice,System.String)">
            <summary>
            <para>Save playlist to QIODevice device using format format.</para>
            <para>Returns true if playlist was saved successfully, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.Shuffle">
            <summary>
            <para>Shuffle items in the playlist.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.Next">
            <summary>
            <para>Advance to the next media content in playlist.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QMediaPlaylist.Previous">
            <summary>
            <para>Return to the previous media content in playlist.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlaylist.CurrentIndexChanged">
            <summary>
            <para>Signal emitted when playlist position changed to position.</para>
            <para>Note: Notifier signal for property currentIndex. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlaylist.PlaybackModeChanged">
            <summary>
            <para>Signal emitted when playback mode changed to mode.</para>
            <para>Note: Notifier signal for property playbackMode. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlaylist.CurrentMediaChanged">
            <summary>
            <para>Signal emitted when current media changes to content.</para>
            <para>Note: Notifier signal for property currentMedia. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlaylist.MediaAboutToBeInserted">
            <summary>
            <para>Signal emitted when items are to be inserted at start and ending at end.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlaylist.MediaInserted">
            <summary>
            <para>This signal is emitted after media has been inserted into the playlist. The new items are those between start and end inclusive.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlaylist.MediaAboutToBeRemoved">
            <summary>
            <para>Signal emitted when item are to be deleted at start and ending at end.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlaylist.MediaRemoved">
            <summary>
            <para>This signal is emitted after media has been removed from the playlist. The removed items are those between start and end inclusive.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlaylist.MediaChanged">
            <summary>
            <para>This signal is emitted after media has been changed in the playlist between start and end positions inclusive.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlaylist.Loaded">
            <summary>
            <para>Signal emitted when playlist finished loading.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QMediaPlaylist.LoadFailed">
            <summary>
            <para>Signal emitted if failed to load playlist.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlaylist.playbackMode">
            <summary>
            <para>This property defines the order that items in the playlist are played.</para>
            <para>See also QMediaPlaylist::PlaybackMode.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlaylist.CurrentIndex">
            <summary>
            <para>This property holds current position.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlaylist.MediaObject">
            <summary>
            <para>Reimplemented from QMediaBindableInterface::mediaObject().</para>
            <para>Returns the QMediaObject instance that this QMediaPlaylist is bound too, or 0 otherwise.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlaylist.CurrentMedia">
            <summary>
            <para>This property holds current media content.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlaylist.MediaCount">
            <summary>
            <para>Returns the number of items in the playlist.</para>
            <para>See also isEmpty().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlaylist.IsEmpty">
            <summary>
            <para>Returns true if the playlist contains no items, otherwise returns false.</para>
            <para>See also mediaCount().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlaylist.IsReadOnly">
            <summary>
            <para>Returns true if the playlist can be modified, otherwise returns false.</para>
            <para>See also mediaCount().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlaylist.Clear">
            <summary>
            <para>Remove all the items from the playlist.</para>
            <para>Returns true if the operation is successful, otherwise return false.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlaylist.error">
            <summary>
            <para>Returns the last error condition.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QMediaPlaylist.ErrorString">
            <summary>
            <para>Returns the string describing the last error condition.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QMediaPlaylist.PlaybackMode">
            <summary>
            <para>The QMediaPlaylist::PlaybackMode describes the order items in playlist are played.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlaylist.PlaybackMode.CurrentItemOnce">
            <summary>The current item is played only once.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlaylist.PlaybackMode.CurrentItemInLoop">
            <summary>The current item is played repeatedly in a loop.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlaylist.PlaybackMode.Sequential">
            <summary>Playback starts from the current and moves through each successive item until the last is reached and then stops. The next item is a null item when the last one is currently playing.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlaylist.PlaybackMode.Loop">
            <summary>Playback restarts at the first item after the last has finished playing.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlaylist.PlaybackMode.Random">
            <summary>Play items in random order.</summary>
        </member>
        <member name="T:QtMultimedia.QMediaPlaylist.Error">
            <summary>
            <para>This enum describes the QMediaPlaylist error codes.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlaylist.Error.NoError">
            <summary>No errors.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlaylist.Error.FormatError">
            <summary>Format error.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlaylist.Error.FormatNotSupportedError">
            <summary>Format not supported.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlaylist.Error.NetworkError">
            <summary>Network error.</summary>
        </member>
        <member name="F:QtMultimedia.QMediaPlaylist.Error.AccessDeniedError">
            <summary>Access denied error.</summary>
        </member>
        <member name="T:QtMultimedia.QAudioRecorder">
            <summary>
            <para>The QAudioRecorder class is used for the recording of audio.</para>
            </summary>
            <remarks>
            <para>The QAudioRecorder class is a high level media recording class and contains the same functionality as QMediaRecorder.</para>
            <para></para>
            <para></para>
            <para>  audioRecorder = new QAudioRecorder;</para>
            <para></para>
            <para>  QAudioEncoderSettings audioSettings;</para>
            <para>  audioSettings.setCodec(&quot;audio/amr&quot;);</para>
            <para>  audioSettings.setQuality(QMultimedia::HighQuality);</para>
            <para></para>
            <para>  audioRecorder-&gt;setEncodingSettings(audioSettings);</para>
            <para></para>
            <para>  audioRecorder-&gt;setOutputLocation(QUrl::fromLocalFile(&quot;test.amr&quot;));</para>
            <para>  audioRecorder-&gt;record();</para>
            <para></para>
            <para></para>
            <para>In addition QAudioRecorder provides functionality for selecting the audio input.</para>
            <para></para>
            <para></para>
            <para>  QStringList inputs = audioRecorder-&gt;audioInputs();</para>
            <para>  QString selectedInput = audioRecorder-&gt;defaultAudioInput();</para>
            <para></para>
            <para>  foreach (QString input, inputs) {</para>
            <para>      QString description = audioRecorder-&gt;audioInputDescription(input);</para>
            <para>      // show descriptions to user and allow selection</para>
            <para>      selectedInput = input;</para>
            <para>  }</para>
            <para></para>
            <para>  audioRecorder-&gt;setAudioInput(selectedInput);</para>
            <para></para>
            <para></para>
            <para>The Audio Recorder Example shows how to use this class in more detail.</para>
            <para></para>
            <para>See also QMediaRecorder and QAudioInputSelectorControl.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QAudioRecorder.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an audio recorder. The parent is passed to QMediaObject.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAudioRecorder.AudioInputDescription(System.String)">
            <summary>
            <para>Returns the readable translated description of the audio input device with name.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioRecorder.AudioInputChanged">
            <summary>
            <para>Signal emitted when active audio input changes to name.</para>
            <para>Note: Notifier signal for property audioInput. </para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAudioRecorder.AvailableAudioInputsChanged">
            <summary>
            <para>Signal is emitted when the available audio inputs change.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioRecorder.AudioInput">
            <summary>
            <para>This property holds the active audio input name.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioRecorder.AudioInputs">
            <summary>
            <para>Returns a list of available audio inputs</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAudioRecorder.DefaultAudioInput">
            <summary>
            <para>Returns the default audio input name.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QVideoSurfaceFormat">
            <summary>
            <para>The QVideoSurfaceFormat class specifies the stream format of a video presentation surface.</para>
            </summary>
            <remarks>
            <para>A video surface presents a stream of video frames. The surface's format describes the type of the frames and determines how they should be presented.</para>
            <para>The core properties of a video stream required to setup a video surface are the pixel format given by pixelFormat(), and the frame dimensions given by frameSize().</para>
            <para>If the surface is to present frames using a frame's handle a surface format will also include a handle type which is given by the handleType() function.</para>
            <para>The region of a frame that is actually displayed on a video surface is given by the viewport(). A stream may have a viewport less than the entire region of a frame to allow for videos smaller than the nearest optimal size of a video frame. For example the width of a frame may be extended so that the start of each scan line is eight byte aligned.</para>
            <para>Other common properties are the pixelAspectRatio(), scanLineDirection(), and frameRate(). Additionally a stream may have some additional type specific properties which are listed by the dynamicPropertyNames() function and can be accessed using the property(), and setProperty() functions.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QVideoSurfaceFormat.#ctor">
            <summary>
            <para>Constructs a null video stream format.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoSurfaceFormat.#ctor(QtCore.QSize,QtMultimedia.QVideoFrame.PixelFormat,QtMultimedia.QAbstractVideoBuffer.HandleType)">
            <summary>
            <para>Contructs a description of stream which receives stream of type buffers with given frame size and pixel format.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoSurfaceFormat.#ctor(QtMultimedia.QVideoSurfaceFormat)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoSurfaceFormat.op_Equality(QtMultimedia.QVideoSurfaceFormat,QtMultimedia.QVideoSurfaceFormat)">
            <summary>
            <para>Returns true if other is the same as this video format, and false if they are different.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoSurfaceFormat.op_Inequality(QtMultimedia.QVideoSurfaceFormat,QtMultimedia.QVideoSurfaceFormat)">
            <summary>
            <para>Returns true if other is different to this video format, and false if they are the same.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoSurfaceFormat.SetFrameSize(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the width and height of frames in a video stream.</para>
            <para>This will reset the viewport() to fill the entire frame.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoSurfaceFormat.SetPixelAspectRatio(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the horizontal and vertical elements of a video stream's pixel aspect ratio.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoSurfaceFormat.Property(System.String)">
            <summary>
            <para>Returns the value of the video format's name property.</para>
            <para>See also setProperty().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoSurfaceFormat.SetProperty(System.String,QtCore.QVariant)">
            <summary>
            <para>Sets the video format's name property to value.</para>
            <para>Trying to set a read only property will be ignored.</para>
            <para>See also property().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoSurfaceFormat.FrameSize">
            <summary>
            <para>Returns the dimensions of frames in a video stream.</para>
            <para>See also setFrameSize(), frameWidth(), and frameHeight().</para>
            <para></para>
            <para>Sets the size of frames in a video stream to size.</para>
            <para>This will reset the viewport() to fill the entire frame.</para>
            <para>See also frameSize().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoSurfaceFormat.Viewport">
            <summary>
            <para>Returns the viewport of a video stream.</para>
            <para>The viewport is the region of a video frame that is actually displayed.</para>
            <para>By default the viewport covers an entire frame.</para>
            <para>See also setViewport().</para>
            <para></para>
            <para>Sets the viewport of a video stream to viewport.</para>
            <para>See also viewport().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoSurfaceFormat.ScanLineDirection">
            <summary>
            <para>Returns the direction of scan lines.</para>
            <para>See also setScanLineDirection().</para>
            <para></para>
            <para>Sets the direction of scan lines.</para>
            <para>See also scanLineDirection().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoSurfaceFormat.FrameRate">
            <summary>
            <para>Returns the frame rate of a video stream in frames per second.</para>
            <para>See also setFrameRate().</para>
            <para></para>
            <para>Sets the frame rate of a video stream in frames per second.</para>
            <para>See also frameRate().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoSurfaceFormat.PixelAspectRatio">
            <summary>
            <para>Returns a video stream's pixel aspect ratio.</para>
            <para>See also setPixelAspectRatio().</para>
            <para></para>
            <para>Sets a video stream's pixel aspect ratio.</para>
            <para>See also pixelAspectRatio().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoSurfaceFormat.yCbCrColorSpace">
            <summary>
            <para>Returns the Y'CbCr color space of a video stream.</para>
            <para>See also setYCbCrColorSpace().</para>
            <para></para>
            <para>Sets the Y'CbCr color space of a video stream. It is only used with raw YUV frame types.</para>
            <para>See also yCbCrColorSpace().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoSurfaceFormat.IsValid">
            <summary>
            <para>Identifies if a video surface format has a valid pixel format and frame size.</para>
            <para>Returns true if the format is valid, and false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoSurfaceFormat.PixelFormat">
            <summary>
            <para>Returns the pixel format of frames in a video stream.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoSurfaceFormat.HandleType">
            <summary>
            <para>Returns the type of handle the surface uses to present the frame data.</para>
            <para>If the handle type is QAbstractVideoBuffer::NoHandle, buffers with any handle type are valid provided they can be mapped with the QAbstractVideoBuffer::ReadOnly flag. If the handleType() is not QAbstractVideoBuffer::NoHandle then the handle type of the buffer must be the same as that of the surface format.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoSurfaceFormat.FrameWidth">
            <summary>
            <para>Returns the width of frames in a video stream.</para>
            <para>See also frameSize() and frameHeight().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoSurfaceFormat.FrameHeight">
            <summary>
            <para>Returns the height of frame in a video stream.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoSurfaceFormat.SizeHint">
            <summary>
            <para>Returns a suggested size in pixels for the video stream.</para>
            <para>This is the size of the viewport scaled according to the pixel aspect ratio.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QVideoSurfaceFormat.Direction">
            <summary>
            <para>Enumerates the layout direction of video scan lines.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QVideoSurfaceFormat.Direction.TopToBottom">
            <summary>Scan lines are arranged from the top of the frame to the bottom.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoSurfaceFormat.Direction.BottomToTop">
            <summary>Scan lines are arranged from the bottom of the frame to the top.</summary>
        </member>
        <member name="T:QtMultimedia.QVideoSurfaceFormat.YCbCrColorSpace">
            <summary>
            <para>Enumerates the Y'CbCr color space of video frames.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QVideoSurfaceFormat.YCbCrColorSpace.YCbCr_Undefined">
            <summary>No color space is specified.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoSurfaceFormat.YCbCrColorSpace.YCbCr_BT601">
            <summary>A Y'CbCr color space defined by ITU-R recommendation BT.601 with Y value range from 16 to 235, and Cb/Cr range from 16 to 240. Used in standard definition video.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoSurfaceFormat.YCbCrColorSpace.YCbCr_BT709">
            <summary>A Y'CbCr color space defined by ITU-R BT.709 with the same values range as YCbCr_BT601. Used for HDTV.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoSurfaceFormat.YCbCrColorSpace.YCbCr_xvYCC601">
            <summary>The BT.601 color space with the value range extended to 0 to 255. It is backward compatibile with BT.601 and uses values outside BT.601 range to represent a wider range of colors.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoSurfaceFormat.YCbCrColorSpace.YCbCr_xvYCC709">
            <summary>The BT.709 color space with the value range extended to 0 to 255.</summary>
        </member>
        <member name="F:QtMultimedia.QVideoSurfaceFormat.YCbCrColorSpace.YCbCr_JPEG">
            <summary>The full range Y'CbCr color space used in JPEG files.</summary>
        </member>
        <member name="T:QtMultimedia.QVideoFilterRunnable">
            <summary>
            <para>The QVideoFilterRunnable class represents the implementation of a filter that owns all graphics and computational resources, and performs the actual filtering or calculations.</para>
            </summary>
            <remarks>
            <para>Video filters are split into QAbstractVideoFilter and corresponding QVideoFilterRunnable instances, similar to QQuickItem and QSGNode. This is necessary to support threaded rendering scenarios. When using the threaded render loop of the Qt Quick scene graph, all rendering happens on a dedicated thread. QVideoFilterRunnable instances always live on this thread and all its functions, run(), the constructor, and the destructor, are guaranteed to be invoked on that thread with the OpenGL context bound. QAbstractVideoFilter instances live on the main (GUI) thread, like any other QObject and QQuickItem instances created from QML.</para>
            <para>Once created, QVideoFilterRunnable instances are managed by Qt Multimedia and will be automatically destroyed and recreated when necessary, for example when the scene graph is invalidated or the QQuickWindow changes or is closed. Creation happens via the QAbstractVideoFilter::createFilterRunnable() factory function.</para>
            <para></para>
            <para>See also QAbstractVideoFilter.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QVideoFilterRunnable.Run(QtMultimedia.QVideoFrame,QtMultimedia.QVideoSurfaceFormat,QtMultimedia.QVideoFilterRunnable.RunFlag)">
            <summary>
            <para>Reimplement this function to perform filtering or computation on the input video frame. Like the constructor and destructor, this function is always called on the render thread with the OpenGL context bound.</para>
            <para>Implementations that do not modify the video frame can simply return input.</para>
            <para>It is safe to access properties of the associated QAbstractVideoFilter instance from this function.</para>
            <para>input will not be mapped, it is up to this function to call QVideoFrame::map() and QVideoFrame::unmap() as necessary.</para>
            <para>surfaceFormat provides additional information, for example it can be used to determine which way is up in the input image as that is important for filters to operate on multiple platforms with multiple cameras.</para>
            <para>flags contains additional information about the filter's invocation. For example the LastInChain flag indicates that the filter is the last in a VideoOutput's associated filter list. This can be very useful in cases where multiple filters are chained together and the work is performed on image data in some custom format (for example a format specific to some computer vision framework). To avoid conversion on every filter in the chain, all intermediate filters can return a QVideoFrame hosting data in the custom format. Only the last, where the flag is set, returns a QVideoFrame in a format compatible with Qt.</para>
            <para>Filters that want to expose the results of their computation to Javascript code in QML can declare their own custom signals in the QAbstractVideoFilter subclass to indicate the completion of the operation. For filters that only calculate some results and do not modify the video frame, it is also possible to operate asynchronously. They can queue the necessary operations using the compute API and return from this function without emitting any signals. The signal indicating the completion is then emitted only when the compute API indicates that the operations were done and the results are available. Note that it is strongly recommended to represent the filter's output data as a separate instance of QJSValue or a QObject-derived class which is passed as a parameter to the signal and becomes exposed to the Javascript engine. In case of QObject the ownership of this object is controlled by the standard QML rules: if it has no parent, ownership is transferred to the Javascript engine, otherwise it stays with the emitter. Note that the signal connection may be queued,for example when using the threaded render loop of Qt Quick, and so the object must stay valid for a longer time, destroying it right after calling this function is not safe. Using a dedicated results object is guaranteed to be safe even when using threaded rendering. The same is not necessarily true for properties on the QAbstractVideoFilter instance itself: properties can safely be read in run() since the gui thread is blocked during that time but writing may become problematic.</para>
            <para>Note: Avoid time consuming operations in this function as they block the entire rendering of the application.</para>
            <para>Note: The handleType() and pixelFormat() of input is completely up to the video decoding backend on the platform in use. On some platforms different forms of input are used depending on the graphics stack. For example, when playing back videos on Windows with the WMF backend, QVideoFrame contains OpenGL-wrapped Direct3D textures in case of using ANGLE, but regular pixel data when using desktop OpenGL (opengl32.dll). Similarly, the video file format will often decide if the data is RGB or YUV, but this may also depend on the decoder and the configuration in use. The returned video frame does not have to be in the same format as the input, for example a filter with an input of a QVideoFrame backed by system memory can output a QVideoFrame with an OpenGL texture handle.</para>
            <para>See also QVideoFrame and QVideoSurfaceFormat.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QVideoFilterRunnable.RunFlag">
            <summary>
            <para>The RunFlags type is a typedef for QFlags&lt;RunFlag&gt;. It stores an OR combination of RunFlag values.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QVideoFilterRunnable.RunFlag.LastInChain">
            <summary>Indicates that the filter runnable's associated QAbstractVideoFilter is the last in the corresponding VideoOutput type's filters list, meaning that the returned frame is the one that is going to be presented to the scene graph without invoking any further filters.</summary>
        </member>
        <member name="T:QtMultimedia.QAbstractVideoFilter">
            <summary>
            <para>The QAbstractVideoFilter class represents a filter that is applied to the video frames received by a VideoOutput type.</para>
            </summary>
            <remarks>
            <para>QAbstractVideoFilter provides a convenient way for applications to run image processing, computer vision algorithms or any generic transformation or calculation on the output of a VideoOutput type, regardless of the source (video or camera). By providing a simple interface it allows applications and third parties to easily develop QML types that provide image processing algorithms using popular frameworks like OpenCV. Due to the close integration with the final stages of the Qt Multimedia video pipeline, accelerated and possibly zero-copy solutions are feasible too: for instance, a plugin providing OpenCL-based algorithms can use OpenCL's OpenGL interop to use the OpenGL textures created by a hardware accelerated video decoder, without additional readbacks and copies.</para>
            <para>Note: QAbstractVideoFilter is not always the best choice. To apply effects or transformations using OpenGL shaders to the image shown on screen, the standard Qt Quick approach of using ShaderEffect items in combination with VideoOutput should be used. VideoFilter is not a replacement for this. It is rather targeted for performing computations (that do not necessarily change the image shown on screen) and computer vision algorithms provided by external frameworks.</para>
            <para>QAbstractVideoFilter is meant to be subclassed. The subclasses are then registered to the QML engine, so they can be used as a QML type. The list of filters are assigned to a VideoOutput type via its filters property.</para>
            <para>A single filter represents one transformation or processing step on a video frame. The output is a modified video frame, some arbitrary data or both. For example, image transformations will result in a different image, whereas an algorithm for detecting objects on an image will likely provide a list of rectangles.</para>
            <para>Arbitrary data can be represented as properties on the QAbstractVideoFilter subclass and on the QObject or QJSValue instances passed to its signals. What exactly these properties and signals are, is up to the individual video filters. Completion of the operations can be indicated by signals. Computations that do not result in a modified image will pass the input image through so that subsequent filters can be placed after them.</para>
            <para>Properties set on QAbstractVideoFilter serve as input to the computation, similarly to how uniform values are specified in ShaderEffect types. The changed property values are taken into use when the next video frame is processed.</para>
            <para>The typical usage is to subclass QAbstractVideoFilter and QVideoFilterRunnable:</para>
            <para></para>
            <para></para>
            <para>  class MyFilterRunnable : public QVideoFilterRunnable {</para>
            <para>  public:</para>
            <para>      QVideoFrame run(QVideoFrame *input, const QVideoSurfaceFormat &amp;surfaceFormat, RunFlags flags) { ... }</para>
            <para>  };</para>
            <para></para>
            <para>  class MyFilter : public QAbstractVideoFilter {</para>
            <para>  public:</para>
            <para>      QVideoFilterRunnable *createFilterRunnable() { return new MyFilterRunnable; }</para>
            <para>  signals:</para>
            <para>      void finished(QObject *result);</para>
            <para>  };</para>
            <para></para>
            <para>  int main(int argc, char **argv) {</para>
            <para>      ...</para>
            <para>      qmlRegisterType&lt;MyFilter&gt;(&quot;my.uri&quot;, 1, 0, &quot;MyFilter&quot;);</para>
            <para>      ...</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>MyFilter is thus accessible from QML:</para>
            <para></para>
            <para></para>
            <para>  import my.uri 1.0</para>
            <para></para>
            <para>  Camera {</para>
            <para>      id: camera</para>
            <para>  }</para>
            <para>  MyFilter {</para>
            <para>      id: filter</para>
            <para>      // set properties, they can also be animated</para>
            <para>      onFinished: console.log(&quot;results of the computation: &quot; + result)</para>
            <para>  }</para>
            <para>  VideoOutput {</para>
            <para>      source: camera</para>
            <para>      filters: [ filter ]</para>
            <para>      anchors.fill: parent</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>This also allows providing filters in QML plugins, separately from the application.</para>
            <para></para>
            <para>See also VideoOutput, Camera, MediaPlayer, and QVideoFilterRunnable.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QAbstractVideoFilter.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QAbstractVideoFilter instance with parent object parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAbstractVideoFilter.CreateFilterRunnable">
            <summary>
            <para>Factory function to create a new instance of a QVideoFilterRunnable subclass corresponding to this filter.</para>
            <para>This function is called on the thread on which the Qt Quick scene graph performs rendering, with the OpenGL context bound. Ownership of the returned instance is transferred: the returned instance will live on the render thread and will be destroyed automatically when necessary.</para>
            <para>Typically, implementations of the function will simply construct a new QVideoFilterRunnable instance, passing this to the constructor as the filter runnables must know their associated QAbstractVideoFilter instance to access dynamic properties and optionally emit signals.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAbstractVideoFilter.ActiveChanged">
            <summary>
            <para>This property holds the active status of the filter.</para>
            <para>This is true if the filter is active, false otherwise.</para>
            <para>By default filters are active. When set to false, the filter will be ignored by the VideoOutput type.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isActive() const</para>
            <para> void 	setActive(bool v)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	activeChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAbstractVideoFilter.Active">
            <summary>
            <para>This property holds the active status of the filter.</para>
            <para>This is true if the filter is active, false otherwise.</para>
            <para>By default filters are active. When set to false, the filter will be ignored by the VideoOutput type.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QAbstractVideoSurface">
            <summary>
            <para>The QAbstractVideoSurface class is a base class for video presentation surfaces.</para>
            </summary>
            <remarks>
            <para>The QAbstractVideoSurface class defines the standard interface that video producers use to inter-operate with video presentation surfaces. You can subclass this interface to receive video frames from sources like decoded media or cameras to perform your own processing.</para>
            <para>A video surface presents a continuous stream of identically formatted QVideoFrame instances, where the format of each frame is compatible with a stream format supplied when starting a presentation. Each frame may have timestamp information that can be used by the surface to decide when to display that frame.</para>
            <para>A list of pixel formats a surface can present is given by the supportedPixelFormats() function, and the isFormatSupported() function will test if a video surface format is supported. If a format is not supported the nearestFormat() function may be able to suggest a similar format. For example, if a surface supports fixed set of resolutions it may suggest the smallest supported resolution that contains the proposed resolution.</para>
            <para>The start() function takes a supported format and enables a video surface. Once started a surface will begin displaying the frames it receives in the present() function. Surfaces may hold a reference to the buffer of a presented video frame until a new frame is presented or streaming is stopped. In addition, a video surface may hold a reference to a video frame until the end timestamp has passed. The stop() function will disable a surface and release any video buffers it holds references to.</para>
            <para></para>
            <para>Implementing a subclass of QAbstractVideoSurface</para>
            <para>When implementing a subclass of this interface, there are only a handful of functions to implement, broken down into two classes:</para>
            <para></para>
            <para>Format related</para>
            <para>Presentation related</para>
            <para></para>
            <para>For format related functionality, you just have to describe the pixel formats that you support (and the nearestFormat() function). For presentation related functionality, you have to implement the present() function, and the start() and stop() functions.</para>
            <para>Note: You must call the base class implementation of start() and stop() in your implementation.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QAbstractVideoSurface.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a video surface with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAbstractVideoSurface.IsFormatSupported(QtMultimedia.QVideoSurfaceFormat)">
            <summary>
            <para>Tests a video surface format to determine if a surface can accept it.</para>
            <para>Returns true if the format is supported by the surface, and false otherwise.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAbstractVideoSurface.NearestFormat(QtMultimedia.QVideoSurfaceFormat)">
            <summary>
            <para>Returns a supported video surface format that is similar to format.</para>
            <para>A similar surface format is one that has the same pixel format and handle type but may differ in some of the other properties. For example, if there are restrictions on the frame sizes a video surface can accept it may suggest a format with a larger frame size and a viewport the size of the original frame size.</para>
            <para>If the format is already supported it will be returned unchanged, or if there is no similar supported format an invalid format will be returned.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAbstractVideoSurface.Start(QtMultimedia.QVideoSurfaceFormat)">
            <summary>
            <para>Starts a video surface presenting format frames.</para>
            <para>Returns true if the surface was started, and false if an error occurred.</para>
            <para>Note: You must call the base class implementation of start() at the end of your implementation.</para>
            <para>See also isActive() and stop().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAbstractVideoSurface.Stop">
            <summary>
            <para>Stops a video surface presenting frames and releases any resources acquired in start().</para>
            <para>Note: You must call the base class implementation of stop() at the start of your implementation.</para>
            <para>See also isActive() and start().</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QAbstractVideoSurface.Present(QtMultimedia.QVideoFrame)">
            <summary>
            <para>Presents a video frame.</para>
            <para>Returns true if the frame was presented, and false if an error occurred.</para>
            <para>Not all surfaces will block until the presentation of a frame has completed. Calling present() on a non-blocking surface may fail if called before the presentation of a previous frame has completed. In such cases the surface may not return to a ready state until it has had an opportunity to process events.</para>
            <para>If present() fails for any other reason the surface should immediately enter the stopped state and an error() value will be set.</para>
            <para>A video surface must be in the started state for present() to succeed, and the format of the video frame must be compatible with the current video surface format.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAbstractVideoSurface.ActiveChanged">
            <summary>
            <para>Signals that the active state of a video surface has changed.</para>
            <para>See also isActive(), start(), and stop().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAbstractVideoSurface.SurfaceFormatChanged">
            <summary>
            <para>Signals that the configured format of a video surface has changed.</para>
            <para>See also surfaceFormat() and start().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAbstractVideoSurface.SupportedFormatsChanged">
            <summary>
            <para>Signals that the set of formats supported by a video surface has changed.</para>
            <para>See also supportedPixelFormats() and isFormatSupported().</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QAbstractVideoSurface.NativeResolutionChanged">
            <summary>
            <para>Signals the native resolution of video surface has changed.</para>
            <para>Note: Notifier signal for property nativeResolution. </para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAbstractVideoSurface.error">
            <summary>
            <para>Returns the last error that occurred.</para>
            <para>If a surface fails to start(), or stops unexpectedly this function can be called to discover what error occurred.</para>
            <para>See also setError().</para>
            <para></para>
            <para>Sets the value of error() to error.</para>
            <para>This can be called by implementors of this interface to communicate what the most recent error was.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAbstractVideoSurface.NativeResolution">
            <summary>
            <para>The native resolution of video surface. This is the resolution of video frames the surface can render with optimal quality and/or performance.</para>
            <para>The native resolution is not always known and can be changed during playback.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAbstractVideoSurface.SurfaceFormat">
            <summary>
            <para>Returns the format of a video surface.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QAbstractVideoSurface.IsActive">
            <summary>
            <para>Indicates whether a video surface has been started.</para>
            <para>Returns true if the surface has been started, and false otherwise.</para>
            </summary>
        </member>
        <member name="T:QtMultimedia.QAbstractVideoSurface.Error">
            <summary>
            <para>This enum describes the errors that may be returned by the error() function.</para>
            </summary>
        </member>
        <member name="F:QtMultimedia.QAbstractVideoSurface.Error.NoError">
            <summary>No error occurred.</summary>
        </member>
        <member name="F:QtMultimedia.QAbstractVideoSurface.Error.UnsupportedFormatError">
            <summary>A video format was not supported.</summary>
        </member>
        <member name="F:QtMultimedia.QAbstractVideoSurface.Error.IncorrectFormatError">
            <summary>A video frame was not compatible with the format of the surface.</summary>
        </member>
        <member name="F:QtMultimedia.QAbstractVideoSurface.Error.StoppedError">
            <summary>The surface has not been started.</summary>
        </member>
        <member name="F:QtMultimedia.QAbstractVideoSurface.Error.ResourceError">
            <summary>The surface could not allocate some resource.</summary>
        </member>
        <member name="T:QtMultimedia.QVideoProbe">
            <summary>
            <para>The QVideoProbe class allows you to monitor video frames being played or recorded.</para>
            </summary>
            <remarks>
            <para>  QMediaPlayer *player = new QMediaPlayer();</para>
            <para>  QVideoProbe *probe = new QVideoProbe;</para>
            <para></para>
            <para>  connect(probe, SIGNAL(videoFrameProbed(QVideoFrame)), this, SLOT(processFrame(QVideoFrame)));</para>
            <para></para>
            <para>  probe-&gt;setSource(player); // Returns true, hopefully.</para>
            <para></para>
            <para>  player-&gt;setVideoOutput(myVideoSurface);</para>
            <para>  player-&gt;setMedia(QUrl::fromLocalFile(&quot;observation.mp4&quot;));</para>
            <para>  player-&gt;play(); // Start receiving frames as they get presented to myVideoSurface</para>
            <para></para>
            <para></para>
            <para>This same approach works with the QCamera object as well, to receive viewfinder or video frames as they are captured.</para>
            <para></para>
            <para>See also QAudioProbe, QMediaPlayer, and QCamera.</para>
            </remarks>
        </member>
        <member name="M:QtMultimedia.QVideoProbe.#ctor(QtCore.QObject)">
            <summary>
            <para>Creates a new QVideoProbe class with parent. After setting the source to monitor with setSource(), the videoFrameProbed() signal will be emitted when video frames are flowing in the source media object.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoProbe.SetSource(QtMultimedia.QMediaObject)">
            <summary>
            <para>Sets the media object to monitor to source.</para>
            <para>If source is zero, this probe will be deactivated and this function wil return true.</para>
            <para>If the media object does not support monitoring video, this function will return false.</para>
            <para>Any previously monitored objects will no longer be monitored. Passing in the same object will be ignored, but monitoring will continue.</para>
            </summary>
        </member>
        <member name="M:QtMultimedia.QVideoProbe.SetSource(QtMultimedia.QMediaRecorder)">
            <summary>
            <para>Starts monitoring the given mediaRecorder.</para>
            <para>If there is no mediaObject associated with mediaRecorder, or if it is zero, this probe will be deactivated and this function wil return true.</para>
            <para>If the media recorder instance does not support monitoring video, this function will return false.</para>
            <para>Any previously monitored objects will no longer be monitored. Passing in the same object will be ignored, but monitoring will continue.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QVideoProbe.VideoFrameProbed">
            <summary>
            <para>This signal should be emitted when a video frame is processed in the media service.</para>
            </summary>
        </member>
        <member name="E:QtMultimedia.QVideoProbe.Flush">
            <summary>
            <para>This signal should be emitted when it is required to release all frames. Application must release all outstanding references to video frames.</para>
            </summary>
        </member>
        <member name="P:QtMultimedia.QVideoProbe.IsActive">
            <summary>
            <para>Returns true if this probe is monitoring something, or false otherwise.</para>
            <para>The source being monitored does not need to be active.</para>
            </summary>
        </member>
    </members>
</doc>
