<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QtSvgSharp</name>
    </assembly>
    <members>
        <member name="T:QtSvg.QGraphicsSvgItem">
            <summary>
            <para>The QGraphicsSvgItem class is a QGraphicsItem that can be used to render the contents of SVG files.</para>
            </summary>
            <remarks>
            <para>QGraphicsSvgItem provides a way of rendering SVG files onto QGraphicsView. QGraphicsSvgItem can be created by passing the SVG file to be rendered to its constructor or by explicit setting a shared QSvgRenderer on it.</para>
            <para>Note that setting QSvgRenderer on a QGraphicsSvgItem doesn't make the item take ownership of the renderer, therefore if using setSharedRenderer() method one has to make sure that the lifetime of the QSvgRenderer object will be at least as long as that of the QGraphicsSvgItem.</para>
            <para>QGraphicsSvgItem provides a way of rendering only parts of the SVG files via the setElementId. If setElementId() method is called, only the SVG element (and its children) with the passed id will be renderer. This provides a convenient way of selectively rendering large SVG files that contain a number of discrete elements. For example the following code renders only jokers from a SVG file containing a whole card deck:</para>
            <para>QSvgRenderer *renderer = new QSvgRenderer(QLatin1String(&quot;SvgCardDeck.svg&quot;));</para>
            <para>QGraphicsSvgItem *black = new QGraphicsSvgItem();</para>
            <para>QGraphicsSvgItem *red   = new QGraphicsSvgItem();</para>
            <para></para>
            <para>black-&gt;setSharedRenderer(renderer);</para>
            <para>black-&gt;setElementId(QLatin1String(&quot;black_joker&quot;));</para>
            <para></para>
            <para>red-&gt;setSharedRenderer(renderer);</para>
            <para>red-&gt;setElementId(QLatin1String(&quot;red_joker&quot;));</para>
            <para>Size of the item can be set via the setSize() method of the bounding rectangle or via direct manipulation of the items transformation matrix.</para>
            <para>By default the SVG rendering is cached using QGraphicsItem::DeviceCoordinateCache mode to speedup the display of items. Caching can be disabled by passing QGraphicsItem::NoCache to the QGraphicsItem::setCacheMode() method.</para>
            <para></para>
            <para>See also QSvgWidget, Qt SVG C++ Classes, QGraphicsItem, and QGraphicsView.</para>
            </remarks>
        </member>
        <member name="M:QtSvg.QGraphicsSvgItem.#ctor(QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a new SVG item with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QGraphicsSvgItem.#ctor(System.String,QtWidgets.IQGraphicsItem)">
            <summary>
            <para>Constructs a new item with the given parent and loads the contents of the SVG file with the specified fileName.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QGraphicsSvgItem.SetSharedRenderer(QtSvg.QSvgRenderer)">
            <summary>
            <para>Sets renderer to be a shared QSvgRenderer on the item. By using this method one can share the same QSvgRenderer on a number of items. This means that the SVG file will be parsed only once. QSvgRenderer passed to this method has to exist for as long as this item is used.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QGraphicsSvgItem.Paint(QtGui.QPainter,QtWidgets.QStyleOptionGraphicsItem,QtWidgets.QWidget)">
            <summary>
            <para>Reimplemented from QGraphicsItem::paint().</para>
            </summary>
        </member>
        <member name="P:QtSvg.QGraphicsSvgItem.ElementId">
            <summary>
            <para>This property holds the element's XML ID.</para>
            <para>This property was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QGraphicsSvgItem.CachingEnabled">
            <summary>
            <para>Use QGraphicsItem::cacheMode() instead.</para>
            <para></para>
            <para>Use QGraphicsItem::setCacheMode() instead. Passing true to this function is equivalent to QGraphicsItem::setCacheMode(QGraphicsItem::DeviceCoordinateCache).</para>
            <para>See also isCachingEnabled().</para>
            </summary>
        </member>
        <member name="P:QtSvg.QGraphicsSvgItem.MaximumCacheSize">
            <summary>
            <para>This property holds the maximum size of the device coordinate cache for this item.</para>
            <para>This property was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QGraphicsSvgItem.BoundingRect">
            <summary>
            <para>Reimplemented from QGraphicsItem::boundingRect().</para>
            <para>Returns the bounding rectangle of this item.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QGraphicsSvgItem.Type">
            <summary>
            <para>Reimplemented from QGraphicsItem::type().</para>
            </summary>
        </member>
        <member name="P:QtSvg.QGraphicsSvgItem.Renderer">
            <summary>
            <para>Returns the currently use QSvgRenderer.</para>
            </summary>
        </member>
        <member name="T:QtSvg.QSvgGenerator">
            <summary>
            <para>The QSvgGenerator class provides a paint device that is used to create SVG drawings.</para>
            </summary>
            <remarks>
            <para>This paint device represents a Scalable Vector Graphics (SVG) drawing. Like QPrinter, it is designed as a write-only device that generates output in a specific format.</para>
            <para>To write an SVG file, you first need to configure the output by setting the fileName or outputDevice properties. It is usually necessary to specify the size of the drawing by setting the size property, and in some cases where the drawing will be included in another, the viewBox property also needs to be set.</para>
            <para>    QSvgGenerator generator;</para>
            <para>    generator.setFileName(path);</para>
            <para>    generator.setSize(QSize(200, 200));</para>
            <para>    generator.setViewBox(QRect(0, 0, 200, 200));</para>
            <para>    generator.setTitle(tr(&quot;SVG Generator Example Drawing&quot;));</para>
            <para>    generator.setDescription(tr(&quot;An SVG drawing created by the SVG Generator &quot;</para>
            <para>                                &quot;Example provided with Qt.&quot;));</para>
            <para>Other meta-data can be specified by setting the title, description and resolution properties.</para>
            <para>As with other QPaintDevice subclasses, a QPainter object is used to paint onto an instance of this class:</para>
            <para>    QPainter painter;</para>
            <para>    painter.begin(&amp;generator);</para>
            <para>    ...</para>
            <para>    painter.end();</para>
            <para>Painting is performed in the same way as for any other paint device. However, it is necessary to use the QPainter::begin() and end() to explicitly begin and end painting on the device.</para>
            <para>The SVG Generator Example shows how the same painting commands can be used for painting a widget and writing an SVG file.</para>
            <para></para>
            <para>See also QSvgRenderer, QSvgWidget, and Qt SVG C++ Classes.</para>
            </remarks>
        </member>
        <member name="M:QtSvg.QSvgGenerator.#ctor">
            <summary>
            <para>Constructs a new generator.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgGenerator.SetViewBox(QtCore.QRectF)">
            <summary>
            <para>This property holds the viewBox of the generated SVG drawing.</para>
            <para>By default this property is set to QRect(0, 0, -1, -1), which indicates that the generator should not output the viewBox attribute of the &lt;svg&gt; element.</para>
            <para>Note: It is not possible to change this property while a QPainter is active on the generator.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also viewBox(), size, and resolution.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgGenerator.Metric(QtGui.QPaintDevice.PaintDeviceMetric)">
            <summary>
            <para>Reimplemented from QPaintDevice::metric().</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgGenerator.Title">
            <summary>
            <para>This property holds the title of the generated SVG drawing.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also description.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgGenerator.Description">
            <summary>
            <para>This property holds the description of the generated SVG drawing.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also title.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgGenerator.Size">
            <summary>
            <para>This property holds the size of the generated SVG drawing.</para>
            <para>By default this property is set to QSize(-1, -1), which indicates that the generator should not output the width and height attributes of the &lt;svg&gt; element.</para>
            <para>Note: It is not possible to change this property while a QPainter is active on the generator.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also viewBox and resolution.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgGenerator.ViewBox">
            <summary>
            <para>This property holds the viewBox of the generated SVG drawing.</para>
            <para>By default this property is set to QRect(0, 0, -1, -1), which indicates that the generator should not output the viewBox attribute of the &lt;svg&gt; element.</para>
            <para>Note: It is not possible to change this property while a QPainter is active on the generator.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also viewBox(), size, and resolution.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgGenerator.FileName">
            <summary>
            <para>This property holds the target filename for the generated SVG drawing.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also outputDevice.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgGenerator.OutputDevice">
            <summary>
            <para>This property holds the output device for the generated SVG drawing.</para>
            <para>If both output device and file name are specified, the output device will have precedence.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also fileName.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgGenerator.Resolution">
            <summary>
            <para>This property holds the resolution of the generated output.</para>
            <para>The resolution is specified in dots per inch, and is used to calculate the physical size of an SVG drawing.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also size and viewBox.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgGenerator.PaintEngine">
            <summary>
            <para>Reimplemented from QPaintDevice::paintEngine().</para>
            <para>Returns the paint engine used to render graphics to be converted to SVG format information.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgGenerator.ViewBoxF">
            <summary>
            <para>This property holds the viewBox of the generated SVG drawing.</para>
            <para>By default this property is set to QRect(0, 0, -1, -1), which indicates that the generator should not output the viewBox attribute of the &lt;svg&gt; element.</para>
            <para>Note: It is not possible to change this property while a QPainter is active on the generator.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also viewBox(), size, and resolution.</para>
            </summary>
        </member>
        <member name="T:QtSvg.QSvgRenderer">
            <summary>
            <para>The QSvgRenderer class is used to draw the contents of SVG files onto paint devices.</para>
            </summary>
            <remarks>
            <para>Using QSvgRenderer, Scalable Vector Graphics (SVG) can be rendered onto any QPaintDevice subclass, including QWidget, QImage, and QGLWidget.</para>
            <para>QSvgRenderer provides an API that supports basic features of SVG rendering, such as loading and rendering of static drawings, and more interactive features like animation. Since the rendering is performed using QPainter, SVG drawings can be rendered on any subclass of QPaintDevice.</para>
            <para>SVG drawings are either loaded when an QSvgRenderer is constructed, or loaded later using the load() functions. Data is either supplied directly as serialized XML, or indirectly using a file name. If a valid file has been loaded, either when the renderer is constructed or at some later time, isValid() returns true; otherwise it returns false. QSvgRenderer provides the render() slot to render the current document, or the current frame of an animated document, using a given painter.</para>
            <para>The defaultSize() function provides information about the amount of space that is required to render the currently loaded SVG file. This is useful for paint devices, such as QWidget, that often need to supply a size hint to their parent layout. The default size of a drawing may differ from its visible area, found using the viewBox property.</para>
            <para>Animated SVG drawings are supported, and can be controlled with a simple collection of functions and properties:</para>
            <para></para>
            <para>The animated() function indicates whether a drawing contains animation information.</para>
            <para>The framesPerSecond property contains the rate at which the animation plays.</para>
            <para></para>
            <para>Finally, the QSvgRenderer class provides the repaintNeeded() signal which is emitted whenever the rendering of the document needs to be updated.</para>
            <para></para>
            <para>See also QSvgWidget, Qt SVG C++ Classes, SVG Viewer Example, and QPicture.</para>
            </remarks>
        </member>
        <member name="M:QtSvg.QSvgRenderer.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new renderer with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.#ctor(System.String,QtCore.QObject)">
            <summary>
            <para>Constructs a new renderer with the given parent and loads the contents of the SVG file with the specified filename.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.#ctor(QtCore.QByteArray,QtCore.QObject)">
            <summary>
            <para>Constructs a new renderer with the given parent and loads the SVG data from the byte array specified by contents.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.#ctor(QtCore.QXmlStreamReader,QtCore.QObject)">
            <summary>
            <para>Constructs a new renderer with the given parent and loads the SVG data using the stream reader specified by contents.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.SetViewBox(QtCore.QRectF)">
            <summary>
            <para>This property holds the rectangle specifying the visible area of the document in logical coordinates.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.BoundsOnElement(System.String)">
            <summary>
            <para>Returns bounding rectangle of the item with the given id. The transformation matrix of parent elements is not affecting the bounds of the element.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also matrixForElement().</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.ElementExists(System.String)">
            <summary>
            <para>Returns true if the element with the given id exists in the currently parsed SVG file and is a renderable element.</para>
            <para>Note: this method returns true only for elements that can be rendered. Which implies that elements that are considered part of the fill/stroke style properties, e.g. radialGradients even tough marked with &quot;id&quot; attributes will not be found by this method.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.MatrixForElement(System.String)">
            <summary>
            <para>Returns the transformation matrix for the element with the given id. The matrix is a product of the transformation of the element's parents. The transformation of the element itself is not included.</para>
            <para>To find the bounding rectangle of the element in logical coordinates, you can apply the matrix on the rectangle returned from boundsOnElement().</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also boundsOnElement().</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.Load(System.String)">
            <summary>
            <para>Loads the SVG file specified by filename, returning true if the content was successfully parsed; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.Load(QtCore.QByteArray)">
            <summary>
            <para>Loads the specified SVG format contents, returning true if the content was successfully parsed; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.Load(QtCore.QXmlStreamReader)">
            <summary>
            <para>Loads the specified SVG in contents, returning true if the content was successfully parsed; otherwise returns false.</para>
            <para>The reader will be used from where it currently is positioned. If contents is null, behavior is undefined.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.Render(QtGui.QPainter)">
            <summary>
            <para>Renders the current document, or the current frame of an animated document, using the given painter.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.Render(QtGui.QPainter,QtCore.QRectF)">
            <summary>
            <para>Renders the current document, or the current frame of an animated document, using the given painter on the specified bounds within the painter. If the bounding rectangle is not specified the SVG file is mapped to the whole paint device.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgRenderer.Render(QtGui.QPainter,System.String,QtCore.QRectF)">
            <summary>
            <para>Renders the given element with elementId using the given painter on the specified bounds. If the bounding rectangle is not specified the SVG element is mapped to the whole paint device.</para>
            </summary>
        </member>
        <member name="E:QtSvg.QSvgRenderer.RepaintNeeded">
            <summary>
            <para>This signal is emitted whenever the rendering of the document needs to be updated, usually for the purposes of animation.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgRenderer.ViewBox">
            <summary>
            <para>This property holds the rectangle specifying the visible area of the document in logical coordinates.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgRenderer.FramesPerSecond">
            <summary>
            <para>This property holds the number of frames per second to be shown.</para>
            <para>The number of frames per second is 0 if the current document is not animated.</para>
            <para>See also animated().</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgRenderer.IsValid">
            <summary>
            <para>Returns true if there is a valid current document; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgRenderer.DefaultSize">
            <summary>
            <para>Returns the default size of the document contents.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgRenderer.ViewBoxF">
            <summary>
            <para>This property holds the rectangle specifying the visible area of the document in logical coordinates.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgRenderer.Animated">
            <summary>
            <para>Returns true if the current document contains animated elements; otherwise returns false.</para>
            <para>See also framesPerSecond().</para>
            </summary>
        </member>
        <member name="T:QtSvg.QSvgWidget">
            <summary>
            <para>The QSvgWidget class provides a widget that is used to display the contents of Scalable Vector Graphics (SVG) files.</para>
            </summary>
            <remarks>
            <para>This class enables developers to display SVG drawings alongside standard widgets, and is used in much the same way as QLabel is used for displaying text and bitmap images.</para>
            <para>Since QSvgWidget is a subclass of QWidget, SVG drawings are rendered using the properties of the display. More control can be exercised over the rendering process with the QSvgRenderer class, as this can be used to paint onto other paint devices, such as QImage and QGLWidget. The renderer used by the widget can be obtained with the renderer() function.</para>
            <para>Each QSvgWidget can be constructed with the file name of a SVG file, or they can be constructed without a specific file to render and one can be supplied later. The load() functions provide two different ways to load an SVG file: they accept either the file name of an SVG file or a QByteArray containing the serialized XML representation of an SVG file.</para>
            <para>By default, the widget provides a size hint to reflect the size of the drawing that it displays. If no data has been loaded, the widget provides the default QWidget size hint. Subclass this class and reimplement sizeHint() if you need to customize this behavior.</para>
            <para></para>
            <para>See also QSvgRenderer, Qt SVG C++ Classes, and QPicture.</para>
            </remarks>
        </member>
        <member name="M:QtSvg.QSvgWidget.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a new SVG display widget with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgWidget.#ctor(System.String,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a new SVG display widget with the given parent and loads the contents of the specified file.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgWidget.Load(System.String)">
            <summary>
            <para>Loads the contents of the specified SVG file and updates the widget.</para>
            </summary>
        </member>
        <member name="M:QtSvg.QSvgWidget.Load(QtCore.QByteArray)">
            <summary>
            <para>Loads the specified SVG format contents and updates the widget.</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgWidget.SizeHint">
            <summary>
            <para>Reimplemented from QWidget::sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtSvg.QSvgWidget.Renderer">
            <summary>
            <para>Returns the renderer used to display the contents of the widget.</para>
            </summary>
        </member>
    </members>
</doc>
