<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QtWebChannel.Sharp</name>
    </assembly>
    <members>
        <member name="T:QtWebChannel.QWebChannel">
            <summary>
            <para>Expose QObjects to remote HTML clients.</para>
            </summary>
            <remarks>
            <para>The QWebChannel fills the gap between C++ applications and HTML/JavaScript applications. By publishing a QObject derived object to a QWebChannel and using the qwebchannel.js on the HTML side, one can transparently access properties and public slots and methods of the QObject. No manual message passing and serialization of data is required, property updates and signal emission on the C++ side get automatically transmitted to the potentially remotely running HTML clients. On the client side, a JavaScript object will be created for any published C++ QObject. It mirrors the C++ object's API and thus is intuitively useable.</para>
            <para>The C++ QWebChannel API makes it possible to talk to any HTML client, which could run on a local or even remote machine. The only limitation is that the HTML client supports the JavaScript features used by qwebchannel.js. As such, one can interact with basically any modern HTML browser or standalone JavaScript runtime, such as node.js.</para>
            <para>There also exists a declarative WebChannel API.</para>
            <para></para>
            <para>See also Qt WebChannel Standalone Example and JavaScript API.</para>
            </remarks>
        </member>
        <member name="M:QtWebChannel.QWebChannel.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs the QWebChannel object with the given parent.</para>
            <para>Note that a QWebChannel is only fully operational once you connect it to a QWebChannelAbstractTransport. The HTML clients also need to be setup appropriately using qwebchannel.js.</para>
            </summary>
        </member>
        <member name="M:QtWebChannel.QWebChannel.RegisterObject(System.String,QtCore.QObject)">
            <summary>
            <para>Register a single object to the QWebChannel.</para>
            <para>The properties, signals and public methods of the object are published to the remote clients. There, an object with the identifier id is then constructed.</para>
            <para>Note: A current limitation is that objects must be registered before any client is initialized.</para>
            <para>See also QWebChannel::registerObjects(), QWebChannel::deregisterObject(), and QWebChannel::registeredObjects().</para>
            </summary>
        </member>
        <member name="M:QtWebChannel.QWebChannel.DeregisterObject(QtCore.QObject)">
            <summary>
            <para>Deregister the given object from the QWebChannel.</para>
            <para>Remote clients will receive a destroyed signal for the given object.</para>
            <para>See also QWebChannel::registerObjects(), QWebChannel::registerObject(), and QWebChannel::registeredObjects().</para>
            </summary>
        </member>
        <member name="M:QtWebChannel.QWebChannel.ConnectTo(QtWebChannel.QWebChannelAbstractTransport)">
            <summary>
            <para>Connects the QWebChannel to the given transport object.</para>
            <para>The transport object then handles the communication between the C++ application and a remote HTML client.</para>
            <para>See also QWebChannelAbstractTransport and QWebChannel::disconnectFrom().</para>
            </summary>
        </member>
        <member name="M:QtWebChannel.QWebChannel.DisconnectFrom(QtWebChannel.QWebChannelAbstractTransport)">
            <summary>
            <para>Disconnects the QWebChannel from the transport object.</para>
            <para>See also QWebChannel::connectTo().</para>
            </summary>
        </member>
        <member name="E:QtWebChannel.QWebChannel.BlockUpdatesChanged">
            <summary>
            <para>This property holds when set to true, updates are blocked and remote clients will not be notified about property changes.</para>
            <para>The changes are recorded and sent to the clients once updates become unblocked again by setting this property to false. By default, updates are not blocked.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	blockUpdates() const</para>
            <para> void 	setBlockUpdates(bool block)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	blockUpdatesChanged(bool block)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtWebChannel.QWebChannel.BlockUpdates">
            <summary>
            <para>This property holds when set to true, updates are blocked and remote clients will not be notified about property changes.</para>
            <para>The changes are recorded and sent to the clients once updates become unblocked again by setting this property to false. By default, updates are not blocked.</para>
            </summary>
        </member>
        <member name="T:QtWebChannel.QWebChannelAbstractTransport">
            <summary>
            <para>Communication channel between the C++ QWebChannel server and a HTML/JS client.</para>
            </summary>
            <remarks>
            <para>Users of the QWebChannel must implement this interface and connect instances of it to the QWebChannel server for every client that should be connected to the QWebChannel. The {Qt WebChannel Standalone Example}{Standalone Example} shows how this can be done using Qt WebSockets. Qt WebKit implements this interface internally and uses the native WebKit IPC mechanism to transmit messages to HTML clients.</para>
            <para>Note: The JSON message protocol is considered internal and might change over time.</para>
            <para></para>
            <para>See also Qt WebChannel Standalone Example.</para>
            </remarks>
        </member>
        <member name="M:QtWebChannel.QWebChannelAbstractTransport.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a transport object with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtWebChannel.QWebChannelAbstractTransport.SendMessage(QtCore.QJsonObject)">
            <summary>
            <para>Send a JSON message to the remote client. An implementation would serialize the message and transmit it to the remote JavaScript client.</para>
            </summary>
        </member>
        <member name="E:QtWebChannel.QWebChannelAbstractTransport.MessageReceived">
            <summary>
            <para>This signal must be emitted when a new JSON message was received from the remote client. The transport argument should be set to this transport object.</para>
            </summary>
        </member>
    </members>
</doc>
